
h7freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d750  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003820  0801da20  0801da20  0002da20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08021240  08021240  00031240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08021248  08021248  00031248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0802124c  0802124c  0003124c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000098  20000000  08021250  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000bd40  20000098  080212e8  00040098  2**2
                  ALLOC
  8 ._user_heap_stack 00006000  2000bdd8  080212e8  0004bdd8  2**0
                  ALLOC
  9 .lwip_sec     000019d0  30000000  00000000  00010000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 11 .debug_info   0005afb7  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000092bc  00000000  00000000  0009b07d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002900  00000000  00000000  000a4340  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002708  00000000  00000000  000a6c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  000467cc  00000000  00000000  000a9348  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00034d0d  00000000  00000000  000efb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00178dbb  00000000  00000000  00124821  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0029d5dc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000af94  00000000  00000000  0029d658  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000098 	.word	0x20000098
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801da08 	.word	0x0801da08

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2000009c 	.word	0x2000009c
 800030c:	0801da08 	.word	0x0801da08

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b972 	b.w	80006ac <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	4688      	mov	r8, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14b      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4615      	mov	r5, r2
 80003f2:	d967      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0720 	rsb	r7, r2, #32
 80003fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000402:	fa20 f707 	lsr.w	r7, r0, r7
 8000406:	4095      	lsls	r5, r2
 8000408:	ea47 0803 	orr.w	r8, r7, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbb8 f7fe 	udiv	r7, r8, lr
 8000418:	fa1f fc85 	uxth.w	ip, r5
 800041c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000420:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000424:	fb07 f10c 	mul.w	r1, r7, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000432:	f080 811b 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8118 	bls.w	800066c <__udivmoddi4+0x28c>
 800043c:	3f02      	subs	r7, #2
 800043e:	442b      	add	r3, r5
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0fe 	udiv	r0, r3, lr
 8000448:	fb0e 3310 	mls	r3, lr, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fc0c 	mul.w	ip, r0, ip
 8000454:	45a4      	cmp	ip, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	192c      	adds	r4, r5, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8107 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000462:	45a4      	cmp	ip, r4
 8000464:	f240 8104 	bls.w	8000670 <__udivmoddi4+0x290>
 8000468:	3802      	subs	r0, #2
 800046a:	442c      	add	r4, r5
 800046c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000470:	eba4 040c 	sub.w	r4, r4, ip
 8000474:	2700      	movs	r7, #0
 8000476:	b11e      	cbz	r6, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c6 4300 	strd	r4, r3, [r6]
 8000480:	4639      	mov	r1, r7
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0xbe>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80eb 	beq.w	8000666 <__udivmoddi4+0x286>
 8000490:	2700      	movs	r7, #0
 8000492:	e9c6 0100 	strd	r0, r1, [r6]
 8000496:	4638      	mov	r0, r7
 8000498:	4639      	mov	r1, r7
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	fab3 f783 	clz	r7, r3
 80004a2:	2f00      	cmp	r7, #0
 80004a4:	d147      	bne.n	8000536 <__udivmoddi4+0x156>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d302      	bcc.n	80004b0 <__udivmoddi4+0xd0>
 80004aa:	4282      	cmp	r2, r0
 80004ac:	f200 80fa 	bhi.w	80006a4 <__udivmoddi4+0x2c4>
 80004b0:	1a84      	subs	r4, r0, r2
 80004b2:	eb61 0303 	sbc.w	r3, r1, r3
 80004b6:	2001      	movs	r0, #1
 80004b8:	4698      	mov	r8, r3
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	d0e0      	beq.n	8000480 <__udivmoddi4+0xa0>
 80004be:	e9c6 4800 	strd	r4, r8, [r6]
 80004c2:	e7dd      	b.n	8000480 <__udivmoddi4+0xa0>
 80004c4:	b902      	cbnz	r2, 80004c8 <__udivmoddi4+0xe8>
 80004c6:	deff      	udf	#255	; 0xff
 80004c8:	fab2 f282 	clz	r2, r2
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f040 808f 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d2:	1b49      	subs	r1, r1, r5
 80004d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d8:	fa1f f885 	uxth.w	r8, r5
 80004dc:	2701      	movs	r7, #1
 80004de:	fbb1 fcfe 	udiv	ip, r1, lr
 80004e2:	0c23      	lsrs	r3, r4, #16
 80004e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004ec:	fb08 f10c 	mul.w	r1, r8, ip
 80004f0:	4299      	cmp	r1, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f4:	18eb      	adds	r3, r5, r3
 80004f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4299      	cmp	r1, r3
 80004fe:	f200 80cd 	bhi.w	800069c <__udivmoddi4+0x2bc>
 8000502:	4684      	mov	ip, r0
 8000504:	1a59      	subs	r1, r3, r1
 8000506:	b2a3      	uxth	r3, r4
 8000508:	fbb1 f0fe 	udiv	r0, r1, lr
 800050c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000510:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000514:	fb08 f800 	mul.w	r8, r8, r0
 8000518:	45a0      	cmp	r8, r4
 800051a:	d907      	bls.n	800052c <__udivmoddi4+0x14c>
 800051c:	192c      	adds	r4, r5, r4
 800051e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000522:	d202      	bcs.n	800052a <__udivmoddi4+0x14a>
 8000524:	45a0      	cmp	r8, r4
 8000526:	f200 80b6 	bhi.w	8000696 <__udivmoddi4+0x2b6>
 800052a:	4618      	mov	r0, r3
 800052c:	eba4 0408 	sub.w	r4, r4, r8
 8000530:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000534:	e79f      	b.n	8000476 <__udivmoddi4+0x96>
 8000536:	f1c7 0c20 	rsb	ip, r7, #32
 800053a:	40bb      	lsls	r3, r7
 800053c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000540:	ea4e 0e03 	orr.w	lr, lr, r3
 8000544:	fa01 f407 	lsl.w	r4, r1, r7
 8000548:	fa20 f50c 	lsr.w	r5, r0, ip
 800054c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000550:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000554:	4325      	orrs	r5, r4
 8000556:	fbb3 f9f8 	udiv	r9, r3, r8
 800055a:	0c2c      	lsrs	r4, r5, #16
 800055c:	fb08 3319 	mls	r3, r8, r9, r3
 8000560:	fa1f fa8e 	uxth.w	sl, lr
 8000564:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000568:	fb09 f40a 	mul.w	r4, r9, sl
 800056c:	429c      	cmp	r4, r3
 800056e:	fa02 f207 	lsl.w	r2, r2, r7
 8000572:	fa00 f107 	lsl.w	r1, r0, r7
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1e 0303 	adds.w	r3, lr, r3
 800057c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000580:	f080 8087 	bcs.w	8000692 <__udivmoddi4+0x2b2>
 8000584:	429c      	cmp	r4, r3
 8000586:	f240 8084 	bls.w	8000692 <__udivmoddi4+0x2b2>
 800058a:	f1a9 0902 	sub.w	r9, r9, #2
 800058e:	4473      	add	r3, lr
 8000590:	1b1b      	subs	r3, r3, r4
 8000592:	b2ad      	uxth	r5, r5
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3310 	mls	r3, r8, r0, r3
 800059c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80005a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80005a4:	45a2      	cmp	sl, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1e 0404 	adds.w	r4, lr, r4
 80005ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80005b0:	d26b      	bcs.n	800068a <__udivmoddi4+0x2aa>
 80005b2:	45a2      	cmp	sl, r4
 80005b4:	d969      	bls.n	800068a <__udivmoddi4+0x2aa>
 80005b6:	3802      	subs	r0, #2
 80005b8:	4474      	add	r4, lr
 80005ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80005be:	fba0 8902 	umull	r8, r9, r0, r2
 80005c2:	eba4 040a 	sub.w	r4, r4, sl
 80005c6:	454c      	cmp	r4, r9
 80005c8:	46c2      	mov	sl, r8
 80005ca:	464b      	mov	r3, r9
 80005cc:	d354      	bcc.n	8000678 <__udivmoddi4+0x298>
 80005ce:	d051      	beq.n	8000674 <__udivmoddi4+0x294>
 80005d0:	2e00      	cmp	r6, #0
 80005d2:	d069      	beq.n	80006a8 <__udivmoddi4+0x2c8>
 80005d4:	ebb1 050a 	subs.w	r5, r1, sl
 80005d8:	eb64 0403 	sbc.w	r4, r4, r3
 80005dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005e0:	40fd      	lsrs	r5, r7
 80005e2:	40fc      	lsrs	r4, r7
 80005e4:	ea4c 0505 	orr.w	r5, ip, r5
 80005e8:	e9c6 5400 	strd	r5, r4, [r6]
 80005ec:	2700      	movs	r7, #0
 80005ee:	e747      	b.n	8000480 <__udivmoddi4+0xa0>
 80005f0:	f1c2 0320 	rsb	r3, r2, #32
 80005f4:	fa20 f703 	lsr.w	r7, r0, r3
 80005f8:	4095      	lsls	r5, r2
 80005fa:	fa01 f002 	lsl.w	r0, r1, r2
 80005fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000602:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000606:	4338      	orrs	r0, r7
 8000608:	0c01      	lsrs	r1, r0, #16
 800060a:	fbb3 f7fe 	udiv	r7, r3, lr
 800060e:	fa1f f885 	uxth.w	r8, r5
 8000612:	fb0e 3317 	mls	r3, lr, r7, r3
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb07 f308 	mul.w	r3, r7, r8
 800061e:	428b      	cmp	r3, r1
 8000620:	fa04 f402 	lsl.w	r4, r4, r2
 8000624:	d907      	bls.n	8000636 <__udivmoddi4+0x256>
 8000626:	1869      	adds	r1, r5, r1
 8000628:	f107 3cff 	add.w	ip, r7, #4294967295
 800062c:	d22f      	bcs.n	800068e <__udivmoddi4+0x2ae>
 800062e:	428b      	cmp	r3, r1
 8000630:	d92d      	bls.n	800068e <__udivmoddi4+0x2ae>
 8000632:	3f02      	subs	r7, #2
 8000634:	4429      	add	r1, r5
 8000636:	1acb      	subs	r3, r1, r3
 8000638:	b281      	uxth	r1, r0
 800063a:	fbb3 f0fe 	udiv	r0, r3, lr
 800063e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000642:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000646:	fb00 f308 	mul.w	r3, r0, r8
 800064a:	428b      	cmp	r3, r1
 800064c:	d907      	bls.n	800065e <__udivmoddi4+0x27e>
 800064e:	1869      	adds	r1, r5, r1
 8000650:	f100 3cff 	add.w	ip, r0, #4294967295
 8000654:	d217      	bcs.n	8000686 <__udivmoddi4+0x2a6>
 8000656:	428b      	cmp	r3, r1
 8000658:	d915      	bls.n	8000686 <__udivmoddi4+0x2a6>
 800065a:	3802      	subs	r0, #2
 800065c:	4429      	add	r1, r5
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000664:	e73b      	b.n	80004de <__udivmoddi4+0xfe>
 8000666:	4637      	mov	r7, r6
 8000668:	4630      	mov	r0, r6
 800066a:	e709      	b.n	8000480 <__udivmoddi4+0xa0>
 800066c:	4607      	mov	r7, r0
 800066e:	e6e7      	b.n	8000440 <__udivmoddi4+0x60>
 8000670:	4618      	mov	r0, r3
 8000672:	e6fb      	b.n	800046c <__udivmoddi4+0x8c>
 8000674:	4541      	cmp	r1, r8
 8000676:	d2ab      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 8000678:	ebb8 0a02 	subs.w	sl, r8, r2
 800067c:	eb69 020e 	sbc.w	r2, r9, lr
 8000680:	3801      	subs	r0, #1
 8000682:	4613      	mov	r3, r2
 8000684:	e7a4      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000686:	4660      	mov	r0, ip
 8000688:	e7e9      	b.n	800065e <__udivmoddi4+0x27e>
 800068a:	4618      	mov	r0, r3
 800068c:	e795      	b.n	80005ba <__udivmoddi4+0x1da>
 800068e:	4667      	mov	r7, ip
 8000690:	e7d1      	b.n	8000636 <__udivmoddi4+0x256>
 8000692:	4681      	mov	r9, r0
 8000694:	e77c      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000696:	3802      	subs	r0, #2
 8000698:	442c      	add	r4, r5
 800069a:	e747      	b.n	800052c <__udivmoddi4+0x14c>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	442b      	add	r3, r5
 80006a2:	e72f      	b.n	8000504 <__udivmoddi4+0x124>
 80006a4:	4638      	mov	r0, r7
 80006a6:	e708      	b.n	80004ba <__udivmoddi4+0xda>
 80006a8:	4637      	mov	r7, r6
 80006aa:	e6e9      	b.n	8000480 <__udivmoddi4+0xa0>

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
   GPIOE->BSRR = GPIO_PIN_1;
 80006ba:	4b04      	ldr	r3, [pc, #16]	; (80006cc <vApplicationStackOverflowHook+0x1c>)
 80006bc:	2202      	movs	r2, #2
 80006be:	619a      	str	r2, [r3, #24]
}
 80006c0:	bf00      	nop
 80006c2:	370c      	adds	r7, #12
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	58021000 	.word	0x58021000

080006d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <vApplicationGetIdleTaskMemory+0x2c>)
 80006e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <vApplicationGetIdleTaskMemory+0x30>)
 80006e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ee:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	200000b4 	.word	0x200000b4
 8000700:	20000108 	.word	0x20000108

08000704 <StartEchoTask>:
  REQ = 0,
  RESP = 1
} packet_type;

void StartEchoTask(void const *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af02      	add	r7, sp, #8
 800070a:	6078      	str	r0, [r7, #4]
  void *data;
  u16_t len;

  LWIP_UNUSED_ARG(argument);

  conn = netconn_new(NETCONN_TCP);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	2010      	movs	r0, #16
 8000712:	f00e fa41 	bl	800eb98 <netconn_new_with_proto_and_callback>
 8000716:	61f8      	str	r0, [r7, #28]

  if (conn != NULL) {
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d05a      	beq.n	80007d4 <StartEchoTask+0xd0>
    err = netconn_bind(conn, NULL, 1001);
 800071e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8000722:	2100      	movs	r1, #0
 8000724:	69f8      	ldr	r0, [r7, #28]
 8000726:	f00e faf1 	bl	800ed0c <netconn_bind>
 800072a:	4603      	mov	r3, r0
 800072c:	76fb      	strb	r3, [r7, #27]

    if (err == ERR_OK) {
 800072e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d14a      	bne.n	80007cc <StartEchoTask+0xc8>
      netconn_listen(conn);
 8000736:	21ff      	movs	r1, #255	; 0xff
 8000738:	69f8      	ldr	r0, [r7, #28]
 800073a:	f00e fb57 	bl	800edec <netconn_listen_with_backlog>

      while (1) {
        accept_err = netconn_accept(conn, &newconn);
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4619      	mov	r1, r3
 8000744:	69f8      	ldr	r0, [r7, #28]
 8000746:	f00e fb7d 	bl	800ee44 <netconn_accept>
 800074a:	4603      	mov	r3, r0
 800074c:	76bb      	strb	r3, [r7, #26]

        if (accept_err == ERR_OK) {
 800074e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f3      	bne.n	800073e <StartEchoTask+0x3a>
          while (netconn_recv(newconn, &buf) == ERR_OK) {
 8000756:	e026      	b.n	80007a6 <StartEchoTask+0xa2>
            do {
              netbuf_data(buf, &data, &len);
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	f107 020a 	add.w	r2, r7, #10
 800075e:	f107 010c 	add.w	r1, r7, #12
 8000762:	4618      	mov	r0, r3
 8000764:	f010 fc58 	bl	8011018 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000768:	6978      	ldr	r0, [r7, #20]
 800076a:	68f9      	ldr	r1, [r7, #12]
 800076c:	897b      	ldrh	r3, [r7, #10]
 800076e:	461a      	mov	r2, r3
 8000770:	2300      	movs	r3, #0
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2301      	movs	r3, #1
 8000776:	f00e fde7 	bl	800f348 <netconn_write_partly>
        	  HAL_UART_Transmit(&huart1, (uint8_t*)data, len, 1000);
 800077a:	68f9      	ldr	r1, [r7, #12]
 800077c:	897a      	ldrh	r2, [r7, #10]
 800077e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000782:	4816      	ldr	r0, [pc, #88]	; (80007dc <StartEchoTask+0xd8>)
 8000784:	f009 f888 	bl	8009898 <HAL_UART_Transmit>
              HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000788:	2101      	movs	r1, #1
 800078a:	4815      	ldr	r0, [pc, #84]	; (80007e0 <StartEchoTask+0xdc>)
 800078c:	f005 faad 	bl	8005cea <HAL_GPIO_TogglePin>
            }
            while (netbuf_next(buf) >= 0);
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4618      	mov	r0, r3
 8000794:	f010 fc8a 	bl	80110ac <netbuf_next>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	dadc      	bge.n	8000758 <StartEchoTask+0x54>
            netbuf_delete(buf);
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	4618      	mov	r0, r3
 80007a2:	f010 fc19 	bl	8010fd8 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) {
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	f107 0210 	add.w	r2, r7, #16
 80007ac:	4611      	mov	r1, r2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00e fd50 	bl	800f254 <netconn_recv>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0ce      	beq.n	8000758 <StartEchoTask+0x54>
          }

          netconn_close(newconn);
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	4618      	mov	r0, r3
 80007be:	f00e fec5 	bl	800f54c <netconn_close>
          netconn_delete(newconn);
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f00e fa85 	bl	800ecd4 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 80007ca:	e7b8      	b.n	800073e <StartEchoTask+0x3a>
        }
      }
    }
    else {
      netconn_delete(newconn);
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f00e fa80 	bl	800ecd4 <netconn_delete>
    }
  }
}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200088e8 	.word	0x200088e8
 80007e0:	58020400 	.word	0x58020400

080007e4 <StartTcpClientTask>:

uint8_t recData[100] = {0x00};

void StartTcpClientTask(void const *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af02      	add	r7, sp, #8
 80007ea:	6078      	str	r0, [r7, #4]

  LWIP_UNUSED_ARG(argument);

  while (1)
  {
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) {
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <StartTcpClientTask+0x140>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d007      	beq.n	8000804 <StartTcpClientTask+0x20>
 80007f4:	4b4b      	ldr	r3, [pc, #300]	; (8000924 <StartTcpClientTask+0x140>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d003      	beq.n	8000804 <StartTcpClientTask+0x20>
 80007fc:	4b49      	ldr	r3, [pc, #292]	; (8000924 <StartTcpClientTask+0x140>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d104      	bne.n	800080e <StartTcpClientTask+0x2a>
      osDelay(1000);
 8000804:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000808:	f00b fa6d 	bl	800bce6 <osDelay>
      continue;
 800080c:	e089      	b.n	8000922 <StartTcpClientTask+0x13e>
    }
    else {
      osDelay(20);
 800080e:	2014      	movs	r0, #20
 8000810:	f00b fa69 	bl	800bce6 <osDelay>
    }

    conn = netconn_new(NETCONN_TCP);
 8000814:	2200      	movs	r2, #0
 8000816:	2100      	movs	r1, #0
 8000818:	2010      	movs	r0, #16
 800081a:	f00e f9bd 	bl	800eb98 <netconn_new_with_proto_and_callback>
 800081e:	61f8      	str	r0, [r7, #28]

    if (conn != NULL) {
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0e2      	beq.n	80007ec <StartTcpClientTask+0x8>
      IP4_ADDR(&server_addr, SERVER_IP_1_ADDR, SERVER_IP_2_ADDR, SERVER_IP_3_ADDR, SERVER_IP_4_ADDR);
 8000826:	4b40      	ldr	r3, [pc, #256]	; (8000928 <StartTcpClientTask+0x144>)
 8000828:	4a40      	ldr	r2, [pc, #256]	; (800092c <StartTcpClientTask+0x148>)
 800082a:	601a      	str	r2, [r3, #0]
      err = netconn_connect(conn, &server_addr, SERVER_PORT);
 800082c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8000830:	493d      	ldr	r1, [pc, #244]	; (8000928 <StartTcpClientTask+0x144>)
 8000832:	69f8      	ldr	r0, [r7, #28]
 8000834:	f00e faa2 	bl	800ed7c <netconn_connect>
 8000838:	4603      	mov	r3, r0
 800083a:	76fb      	strb	r3, [r7, #27]

      if (err != ERR_OK) {
 800083c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d003      	beq.n	800084c <StartTcpClientTask+0x68>
        netconn_delete(conn);
 8000844:	69f8      	ldr	r0, [r7, #28]
 8000846:	f00e fa45 	bl	800ecd4 <netconn_delete>
        continue;
 800084a:	e06a      	b.n	8000922 <StartTcpClientTask+0x13e>
      }
  	  HAL_UART_Transmit(&huart1, (uint8_t*)"zzz\r\n", 5, 1000);
 800084c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000850:	2205      	movs	r2, #5
 8000852:	4937      	ldr	r1, [pc, #220]	; (8000930 <StartTcpClientTask+0x14c>)
 8000854:	4837      	ldr	r0, [pc, #220]	; (8000934 <StartTcpClientTask+0x150>)
 8000856:	f009 f81f 	bl	8009898 <HAL_UART_Transmit>

  	  while (netconn_recv(conn, &buf) == ERR_OK) {
 800085a:	e053      	b.n	8000904 <StartTcpClientTask+0x120>
  		  do {
  	          netbuf_data(buf, &data, &len);
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	f107 020e 	add.w	r2, r7, #14
 8000862:	f107 0110 	add.w	r1, r7, #16
 8000866:	4618      	mov	r0, r3
 8000868:	f010 fbd6 	bl	8011018 <netbuf_data>
  	          memcpy(recData, data, len);
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	89fa      	ldrh	r2, [r7, #14]
 8000870:	4619      	mov	r1, r3
 8000872:	4831      	ldr	r0, [pc, #196]	; (8000938 <StartTcpClientTask+0x154>)
 8000874:	f01c f995 	bl	801cba2 <memcpy>

  	          netconn_write(conn, data, len, NETCONN_COPY);
 8000878:	6939      	ldr	r1, [r7, #16]
 800087a:	89fb      	ldrh	r3, [r7, #14]
 800087c:	461a      	mov	r2, r3
 800087e:	2300      	movs	r3, #0
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2301      	movs	r3, #1
 8000884:	69f8      	ldr	r0, [r7, #28]
 8000886:	f00e fd5f 	bl	800f348 <netconn_write_partly>
  	          HAL_UART_Transmit(&huart1, (uint8_t*)"REC: ", 5, 1000);
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	2205      	movs	r2, #5
 8000890:	492a      	ldr	r1, [pc, #168]	; (800093c <StartTcpClientTask+0x158>)
 8000892:	4828      	ldr	r0, [pc, #160]	; (8000934 <StartTcpClientTask+0x150>)
 8000894:	f009 f800 	bl	8009898 <HAL_UART_Transmit>
  	    	  HAL_UART_Transmit(&huart1, (uint8_t*)&recData[0], len, 1000);
 8000898:	89fa      	ldrh	r2, [r7, #14]
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	4926      	ldr	r1, [pc, #152]	; (8000938 <StartTcpClientTask+0x154>)
 80008a0:	4824      	ldr	r0, [pc, #144]	; (8000934 <StartTcpClientTask+0x150>)
 80008a2:	f008 fff9 	bl	8009898 <HAL_UART_Transmit>
  	          HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", 2, 1000);
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	2202      	movs	r2, #2
 80008ac:	4924      	ldr	r1, [pc, #144]	; (8000940 <StartTcpClientTask+0x15c>)
 80008ae:	4821      	ldr	r0, [pc, #132]	; (8000934 <StartTcpClientTask+0x150>)
 80008b0:	f008 fff2 	bl	8009898 <HAL_UART_Transmit>
  	          HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008b4:	2101      	movs	r1, #1
 80008b6:	4823      	ldr	r0, [pc, #140]	; (8000944 <StartTcpClientTask+0x160>)
 80008b8:	f005 fa17 	bl	8005cea <HAL_GPIO_TogglePin>

  	          if(recData[0] == 'c' && recData[1] == 'l' && recData[2] == 'o') {
 80008bc:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <StartTcpClientTask+0x154>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b63      	cmp	r3, #99	; 0x63
 80008c2:	d114      	bne.n	80008ee <StartTcpClientTask+0x10a>
 80008c4:	4b1c      	ldr	r3, [pc, #112]	; (8000938 <StartTcpClientTask+0x154>)
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	2b6c      	cmp	r3, #108	; 0x6c
 80008ca:	d110      	bne.n	80008ee <StartTcpClientTask+0x10a>
 80008cc:	4b1a      	ldr	r3, [pc, #104]	; (8000938 <StartTcpClientTask+0x154>)
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	2b6f      	cmp	r3, #111	; 0x6f
 80008d2:	d10c      	bne.n	80008ee <StartTcpClientTask+0x10a>
  	    		  HAL_UART_Transmit(&huart1, (uint8_t*)"CLOSE", 5, 1000);
 80008d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d8:	2205      	movs	r2, #5
 80008da:	491b      	ldr	r1, [pc, #108]	; (8000948 <StartTcpClientTask+0x164>)
 80008dc:	4815      	ldr	r0, [pc, #84]	; (8000934 <StartTcpClientTask+0x150>)
 80008de:	f008 ffdb 	bl	8009898 <HAL_UART_Transmit>
  	    	      netconn_close(conn);
 80008e2:	69f8      	ldr	r0, [r7, #28]
 80008e4:	f00e fe32 	bl	800f54c <netconn_close>
  	    		  netconn_delete(conn);
 80008e8:	69f8      	ldr	r0, [r7, #28]
 80008ea:	f00e f9f3 	bl	800ecd4 <netconn_delete>
  	    	  }

  	        } while (netbuf_next(buf) >= 0);
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f010 fbdb 	bl	80110ac <netbuf_next>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	daaf      	bge.n	800085c <StartTcpClientTask+0x78>
  	        netbuf_delete(buf);
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	4618      	mov	r0, r3
 8000900:	f010 fb6a 	bl	8010fd8 <netbuf_delete>
  	  while (netconn_recv(conn, &buf) == ERR_OK) {
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4619      	mov	r1, r3
 800090a:	69f8      	ldr	r0, [r7, #28]
 800090c:	f00e fca2 	bl	800f254 <netconn_recv>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0a2      	beq.n	800085c <StartTcpClientTask+0x78>
  	   }

       netconn_close(conn);
 8000916:	69f8      	ldr	r0, [r7, #28]
 8000918:	f00e fe18 	bl	800f54c <netconn_close>
	   netconn_delete(conn);
 800091c:	69f8      	ldr	r0, [r7, #28]
 800091e:	f00e f9d9 	bl	800ecd4 <netconn_delete>
    if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) {
 8000922:	e763      	b.n	80007ec <StartTcpClientTask+0x8>
 8000924:	20008ad8 	.word	0x20008ad8
 8000928:	2000885c 	.word	0x2000885c
 800092c:	1518fea9 	.word	0x1518fea9
 8000930:	0801da20 	.word	0x0801da20
 8000934:	200088e8 	.word	0x200088e8
 8000938:	20000508 	.word	0x20000508
 800093c:	0801da28 	.word	0x0801da28
 8000940:	0801da30 	.word	0x0801da30
 8000944:	58020400 	.word	0x58020400
 8000948:	0801da34 	.word	0x0801da34

0800094c <StartClientTask>:
	osThreadDef(echoTask, StartEchoTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
	echoTaskHandle = osThreadCreate(osThread(echoTask), NULL);
}

void StartClientTask(void)
{
 800094c:	b5b0      	push	{r4, r5, r7, lr}
 800094e:	b088      	sub	sp, #32
 8000950:	af00      	add	r7, sp, #0
	osThreadDef(tcpClientTask, StartTcpClientTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <StartClientTask+0x30>)
 8000954:	1d3c      	adds	r4, r7, #4
 8000956:	461d      	mov	r5, r3
 8000958:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800095a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	tcpClientTaskHandle = osThreadCreate(osThread(tcpClientTask), NULL);
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f00b f970 	bl	800bc4e <osThreadCreate>
 800096e:	4602      	mov	r2, r0
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <StartClientTask+0x34>)
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bdb0      	pop	{r4, r5, r7, pc}
 800097c:	0801da74 	.word	0x0801da74
 8000980:	2000886c 	.word	0x2000886c

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b5b0      	push	{r4, r5, r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098a:	f001 f91b 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098e:	f000 f827 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000992:	f000 fa81 	bl	8000e98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000996:	f000 fa5f 	bl	8000e58 <MX_DMA_Init>
  MX_RNG_Init();
 800099a:	f000 f8db 	bl	8000b54 <MX_RNG_Init>
  MX_RTC_Init();
 800099e:	f000 f8ef 	bl	8000b80 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80009a2:	f000 f9c1 	bl	8000d28 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80009a6:	f000 f913 	bl	8000bd0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80009aa:	f000 fa09 	bl	8000dc0 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <main+0x54>)
 80009b0:	1d3c      	adds	r4, r7, #4
 80009b2:	461d      	mov	r5, r3
 80009b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f00b f942 	bl	800bc4e <osThreadCreate>
 80009ca:	4602      	mov	r2, r0
 80009cc:	4b03      	ldr	r3, [pc, #12]	; (80009dc <main+0x58>)
 80009ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009d0:	f00b f926 	bl	800bc20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x50>
 80009d6:	bf00      	nop
 80009d8:	0801da9c 	.word	0x0801da9c
 80009dc:	20008860 	.word	0x20008860

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ca      	sub	sp, #296	; 0x128
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80009ea:	224c      	movs	r2, #76	; 0x4c
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f01c f8e2 	bl	801cbb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80009f8:	2220      	movs	r2, #32
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f01c f8db 	bl	801cbb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	23b4      	movs	r3, #180	; 0xb4
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	f01c f8d3 	bl	801cbb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a12:	2002      	movs	r0, #2
 8000a14:	f005 f9aa 	bl	8005d6c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	4b4b      	ldr	r3, [pc, #300]	; (8000b4c <SystemClock_Config+0x16c>)
 8000a20:	699b      	ldr	r3, [r3, #24]
 8000a22:	4a4a      	ldr	r2, [pc, #296]	; (8000b4c <SystemClock_Config+0x16c>)
 8000a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a28:	6193      	str	r3, [r2, #24]
 8000a2a:	4b48      	ldr	r3, [pc, #288]	; (8000b4c <SystemClock_Config+0x16c>)
 8000a2c:	699b      	ldr	r3, [r3, #24]
 8000a2e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3a:	bf00      	nop
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <SystemClock_Config+0x16c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a48:	d1f8      	bne.n	8000a3c <SystemClock_Config+0x5c>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000a4a:	232a      	movs	r3, #42	; 0x2a
 8000a4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a74:	2304      	movs	r3, #4
 8000a76:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000a7a:	2332      	movs	r3, #50	; 0x32
 8000a7c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a86:	2304      	movs	r3, #4
 8000a88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a92:	230c      	movs	r3, #12
 8000a94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 f999 	bl	8005de0 <HAL_RCC_OscConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ab4:	f000 fb54 	bl	8001160 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab8:	233f      	movs	r3, #63	; 0x3f
 8000aba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000aca:	2308      	movs	r3, #8
 8000acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ad6:	2340      	movs	r3, #64	; 0x40
 8000ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000aee:	2102      	movs	r1, #2
 8000af0:	4618      	mov	r0, r3
 8000af2:	f005 fd03 	bl	80064fc <HAL_RCC_ClockConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8000afc:	f000 fb30 	bl	8001160 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART2
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <SystemClock_Config+0x170>)
 8000b06:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RNG;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	671a      	str	r2, [r3, #112]	; 0x70
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8000b10:	f107 0308 	add.w	r3, r7, #8
 8000b14:	2200      	movs	r2, #0
 8000b16:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000b18:	f107 0308 	add.w	r3, r7, #8
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b20:	f107 0308 	add.w	r3, r7, #8
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4618      	mov	r0, r3
 8000b32:	f006 f8a9 	bl	8006c88 <HAL_RCCEx_PeriphCLKConfig>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8000b3c:	f000 fb10 	bl	8001160 <Error_Handler>
  }
}
 8000b40:	bf00      	nop
 8000b42:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	58024800 	.word	0x58024800
 8000b50:	00420003 	.word	0x00420003

08000b54 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_RNG_Init+0x24>)
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <MX_RNG_Init+0x28>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_RNG_Init+0x24>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_RNG_Init+0x24>)
 8000b66:	f007 fb45 	bl	80081f4 <HAL_RNG_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b70:	f000 faf6 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200089e4 	.word	0x200089e4
 8000b7c:	48021800 	.word	0x48021800

08000b80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b84:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000b86:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <MX_RTC_Init+0x4c>)
 8000b88:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b8a:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000b92:	227f      	movs	r2, #127	; 0x7f
 8000b94:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ba2:	4b09      	ldr	r3, [pc, #36]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ba8:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bae:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000bb4:	4804      	ldr	r0, [pc, #16]	; (8000bc8 <MX_RTC_Init+0x48>)
 8000bb6:	f007 fbb3 	bl	8008320 <HAL_RTC_Init>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000bc0:	f000 face 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20008974 	.word	0x20008974
 8000bcc:	58004000 	.word	0x58004000

08000bd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b09a      	sub	sp, #104	; 0x68
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
 8000c00:	615a      	str	r2, [r3, #20]
 8000c02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	222c      	movs	r2, #44	; 0x2c
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f01b ffd4 	bl	801cbb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c10:	4b43      	ldr	r3, [pc, #268]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c12:	4a44      	ldr	r2, [pc, #272]	; (8000d24 <MX_TIM1_Init+0x154>)
 8000c14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000c16:	4b42      	ldr	r3, [pc, #264]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b40      	ldr	r3, [pc, #256]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c22:	4b3f      	ldr	r3, [pc, #252]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b3d      	ldr	r3, [pc, #244]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c30:	4b3b      	ldr	r3, [pc, #236]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c36:	4b3a      	ldr	r3, [pc, #232]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c3c:	4838      	ldr	r0, [pc, #224]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c3e:	f007 fc7b 	bl	8008538 <HAL_TIM_Base_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c48:	f000 fa8a 	bl	8001160 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c50:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c56:	4619      	mov	r1, r3
 8000c58:	4831      	ldr	r0, [pc, #196]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c5a:	f007 ff8b 	bl	8008b74 <HAL_TIM_ConfigClockSource>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c64:	f000 fa7c 	bl	8001160 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c68:	482d      	ldr	r0, [pc, #180]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c6a:	f007 fcf3 	bl	8008654 <HAL_TIM_PWM_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c74:	f000 fa74 	bl	8001160 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4825      	ldr	r0, [pc, #148]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000c8c:	f008 fc7c 	bl	8009588 <HAL_TIMEx_MasterConfigSynchronization>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000c96:	f000 fa63 	bl	8001160 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c9a:	2360      	movs	r3, #96	; 0x60
 8000c9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000caa:	2300      	movs	r3, #0
 8000cac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cba:	2200      	movs	r2, #0
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4818      	ldr	r0, [pc, #96]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000cc0:	f007 fe48 	bl	8008954 <HAL_TIM_PWM_ConfigChannel>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000cca:	f000 fa49 	bl	8001160 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000d04:	f008 fcdc 	bl	80096c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000d0e:	f000 fa27 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <MX_TIM1_Init+0x150>)
 8000d14:	f000 faa4 	bl	8001260 <HAL_TIM_MspPostInit>

}
 8000d18:	bf00      	nop
 8000d1a:	3768      	adds	r7, #104	; 0x68
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20008998 	.word	0x20008998
 8000d24:	40010000 	.word	0x40010000

08000d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <MX_USART1_UART_Init+0x94>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b21      	ldr	r3, [pc, #132]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b1f      	ldr	r3, [pc, #124]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b1c      	ldr	r3, [pc, #112]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d6a:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d70:	4811      	ldr	r0, [pc, #68]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d72:	f008 fd41 	bl	80097f8 <HAL_UART_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d7c:	f000 f9f0 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d80:	2100      	movs	r1, #0
 8000d82:	480d      	ldr	r0, [pc, #52]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d84:	f00a f873 	bl	800ae6e <HAL_UARTEx_SetTxFifoThreshold>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d8e:	f000 f9e7 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d92:	2100      	movs	r1, #0
 8000d94:	4808      	ldr	r0, [pc, #32]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000d96:	f00a f8a8 	bl	800aeea <HAL_UARTEx_SetRxFifoThreshold>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000da0:	f000 f9de 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_USART1_UART_Init+0x90>)
 8000da6:	f00a f829 	bl	800adfc <HAL_UARTEx_DisableFifoMode>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000db0:	f000 f9d6 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200088e8 	.word	0x200088e8
 8000dbc:	40011000 	.word	0x40011000

08000dc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc4:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dc6:	4a23      	ldr	r2, [pc, #140]	; (8000e54 <MX_USART2_UART_Init+0x94>)
 8000dc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd8:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e0a:	f008 fcf5 	bl	80097f8 <HAL_UART_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000e14:	f000 f9a4 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e1c:	f00a f827 	bl	800ae6e <HAL_UARTEx_SetTxFifoThreshold>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000e26:	f000 f99b 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e2e:	f00a f85c 	bl	800aeea <HAL_UARTEx_SetRxFifoThreshold>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000e38:	f000 f992 	bl	8001160 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_USART2_UART_Init+0x90>)
 8000e3e:	f009 ffdd 	bl	800adfc <HAL_UARTEx_DisableFifoMode>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000e48:	f000 f98a 	bl	8001160 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200089f8 	.word	0x200089f8
 8000e54:	40004400 	.word	0x40004400

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e64:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <MX_DMA_Init+0x3c>)
 8000e70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2105      	movs	r1, #5
 8000e80:	200b      	movs	r0, #11
 8000e82:	f000 ffc7 	bl	8001e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e86:	200b      	movs	r0, #11
 8000e88:	f000 ffde 	bl	8001e48 <HAL_NVIC_EnableIRQ>

}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	58024400 	.word	0x58024400

08000e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
 8000eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eae:	4b94      	ldr	r3, [pc, #592]	; (8001100 <MX_GPIO_Init+0x268>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a92      	ldr	r2, [pc, #584]	; (8001100 <MX_GPIO_Init+0x268>)
 8000eb6:	f043 0310 	orr.w	r3, r3, #16
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ebe:	4b90      	ldr	r3, [pc, #576]	; (8001100 <MX_GPIO_Init+0x268>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	61bb      	str	r3, [r7, #24]
 8000eca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ecc:	4b8c      	ldr	r3, [pc, #560]	; (8001100 <MX_GPIO_Init+0x268>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed2:	4a8b      	ldr	r2, [pc, #556]	; (8001100 <MX_GPIO_Init+0x268>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000edc:	4b88      	ldr	r3, [pc, #544]	; (8001100 <MX_GPIO_Init+0x268>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	4b85      	ldr	r3, [pc, #532]	; (8001100 <MX_GPIO_Init+0x268>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef0:	4a83      	ldr	r2, [pc, #524]	; (8001100 <MX_GPIO_Init+0x268>)
 8000ef2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efa:	4b81      	ldr	r3, [pc, #516]	; (8001100 <MX_GPIO_Init+0x268>)
 8000efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b7d      	ldr	r3, [pc, #500]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0e:	4a7c      	ldr	r2, [pc, #496]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f18:	4b79      	ldr	r3, [pc, #484]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	4b76      	ldr	r3, [pc, #472]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2c:	4a74      	ldr	r2, [pc, #464]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f36:	4b72      	ldr	r3, [pc, #456]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60bb      	str	r3, [r7, #8]
 8000f42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b6e      	ldr	r3, [pc, #440]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f4a:	4a6d      	ldr	r2, [pc, #436]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f54:	4b6a      	ldr	r3, [pc, #424]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f62:	4b67      	ldr	r3, [pc, #412]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a65      	ldr	r2, [pc, #404]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f72:	4b63      	ldr	r3, [pc, #396]	; (8001100 <MX_GPIO_Init+0x268>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f244 0101 	movw	r1, #16385	; 0x4001
 8000f86:	485f      	ldr	r0, [pc, #380]	; (8001104 <MX_GPIO_Init+0x26c>)
 8000f88:	f004 fe96 	bl	8005cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	485d      	ldr	r0, [pc, #372]	; (8001108 <MX_GPIO_Init+0x270>)
 8000f94:	f004 fe90 	bl	8005cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2140      	movs	r1, #64	; 0x40
 8000f9c:	485b      	ldr	r0, [pc, #364]	; (800110c <MX_GPIO_Init+0x274>)
 8000f9e:	f004 fe8b 	bl	8005cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	485a      	ldr	r0, [pc, #360]	; (8001110 <MX_GPIO_Init+0x278>)
 8000fa8:	f004 fe86 	bl	8005cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fac:	2304      	movs	r3, #4
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb0:	4b58      	ldr	r3, [pc, #352]	; (8001114 <MX_GPIO_Init+0x27c>)
 8000fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4854      	ldr	r0, [pc, #336]	; (8001110 <MX_GPIO_Init+0x278>)
 8000fc0:	f004 fcd2 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	484f      	ldr	r0, [pc, #316]	; (8001118 <MX_GPIO_Init+0x280>)
 8000fda:	f004 fcc5 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000fde:	f244 0301 	movw	r3, #16385	; 0x4001
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4843      	ldr	r0, [pc, #268]	; (8001104 <MX_GPIO_Init+0x26c>)
 8000ff8:	f004 fcb6 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8000ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800100e:	2307      	movs	r3, #7
 8001010:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	483b      	ldr	r0, [pc, #236]	; (8001108 <MX_GPIO_Init+0x270>)
 800101a:	f004 fca5 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800101e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4834      	ldr	r0, [pc, #208]	; (8001108 <MX_GPIO_Init+0x270>)
 8001038:	f004 fc96 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800103c:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_GPIO_Init+0x27c>)
 8001044:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	4619      	mov	r1, r3
 8001050:	482d      	ldr	r0, [pc, #180]	; (8001108 <MX_GPIO_Init+0x270>)
 8001052:	f004 fc89 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001056:	2340      	movs	r3, #64	; 0x40
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105a:	2301      	movs	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800105e:	2302      	movs	r3, #2
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001062:	2302      	movs	r3, #2
 8001064:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001066:	f107 031c 	add.w	r3, r7, #28
 800106a:	4619      	mov	r1, r3
 800106c:	4827      	ldr	r0, [pc, #156]	; (800110c <MX_GPIO_Init+0x274>)
 800106e:	f004 fc7b 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <MX_GPIO_Init+0x27c>)
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4821      	ldr	r0, [pc, #132]	; (800110c <MX_GPIO_Init+0x274>)
 8001086:	f004 fc6f 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800108a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001090:	2302      	movs	r3, #2
 8001092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800109c:	230a      	movs	r3, #10
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	481d      	ldr	r0, [pc, #116]	; (800111c <MX_GPIO_Init+0x284>)
 80010a8:	f004 fc5e 	bl	8005968 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4619      	mov	r1, r3
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <MX_GPIO_Init+0x278>)
 80010c4:	f004 fc50 	bl	8005968 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2105      	movs	r1, #5
 80010cc:	2008      	movs	r0, #8
 80010ce:	f000 fea1 	bl	8001e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010d2:	2008      	movs	r0, #8
 80010d4:	f000 feb8 	bl	8001e48 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2105      	movs	r1, #5
 80010dc:	2017      	movs	r0, #23
 80010de:	f000 fe99 	bl	8001e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010e2:	2017      	movs	r0, #23
 80010e4:	f000 feb0 	bl	8001e48 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2105      	movs	r1, #5
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f000 fe91 	bl	8001e14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f000 fea8 	bl	8001e48 <HAL_NVIC_EnableIRQ>

}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58024400 	.word	0x58024400
 8001104:	58020400 	.word	0x58020400
 8001108:	58020c00 	.word	0x58020c00
 800110c:	58021800 	.word	0x58021800
 8001110:	58021000 	.word	0x58021000
 8001114:	11110000 	.word	0x11110000
 8001118:	58020800 	.word	0x58020800
 800111c:	58020000 	.word	0x58020000

08001120 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001128:	f009 ff86 	bl	800b038 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //osThreadDef(echoTask, StartEchoTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
  //echoTaskHandle = osThreadCreate(osThread(echoTask), NULL);
  //GPIOE->BSRR = (uint32_t)GPIO_PIN_1 << 16U;
  //StartServerTask();
  StartClientTask();
 800112c:	f7ff fc0e 	bl	800094c <StartClientTask>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(500);
 8001130:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001134:	f00a fdd7 	bl	800bce6 <osDelay>
 8001138:	e7fa      	b.n	8001130 <StartDefaultTask+0x10>
	...

0800113c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800114e:	f000 fd75 	bl	8001c3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40001000 	.word	0x40001000

08001160 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001164:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001166:	e7fe      	b.n	8001166 <Error_Handler+0x6>

08001168 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x38>)
 8001170:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_MspInit+0x38>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800117e:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_MspInit+0x38>)
 8001180:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	210f      	movs	r1, #15
 8001190:	f06f 0001 	mvn.w	r0, #1
 8001194:	f000 fe3e 	bl	8001e14 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	58024400 	.word	0x58024400

080011a4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_RNG_MspInit+0x3c>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d10e      	bne.n	80011d4 <HAL_RNG_MspInit+0x30>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <HAL_RNG_MspInit+0x40>)
 80011b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <HAL_RNG_MspInit+0x40>)
 80011be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <HAL_RNG_MspInit+0x40>)
 80011c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80011cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	48021800 	.word	0x48021800
 80011e4:	58024400 	.word	0x58024400

080011e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	; (8001214 <HAL_RTC_MspInit+0x2c>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d105      	bne.n	8001206 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_RTC_MspInit+0x30>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a06      	ldr	r2, [pc, #24]	; (8001218 <HAL_RTC_MspInit+0x30>)
 8001200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	58004000 	.word	0x58004000
 8001218:	58024400 	.word	0x58024400

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	; (8001258 <HAL_TIM_Base_MspInit+0x3c>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d10e      	bne.n	800124c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001230:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001234:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <HAL_TIM_Base_MspInit+0x40>)
 8001240:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800124c:	bf00      	nop
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	40010000 	.word	0x40010000
 800125c:	58024400 	.word	0x58024400

08001260 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b088      	sub	sp, #32
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 030c 	add.w	r3, r7, #12
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <HAL_TIM_MspPostInit+0x6c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d11f      	bne.n	80012c2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <HAL_TIM_MspPostInit+0x70>)
 8001284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001288:	4a11      	ldr	r2, [pc, #68]	; (80012d0 <HAL_TIM_MspPostInit+0x70>)
 800128a:	f043 0310 	orr.w	r3, r3, #16
 800128e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_TIM_MspPostInit+0x70>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80012a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012b2:	2301      	movs	r3, #1
 80012b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_TIM_MspPostInit+0x74>)
 80012be:	f004 fb53 	bl	8005968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012c2:	bf00      	nop
 80012c4:	3720      	adds	r7, #32
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40010000 	.word	0x40010000
 80012d0:	58024400 	.word	0x58024400
 80012d4:	58021000 	.word	0x58021000

080012d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b08c      	sub	sp, #48	; 0x30
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a66      	ldr	r2, [pc, #408]	; (8001490 <HAL_UART_MspInit+0x1b8>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d174      	bne.n	80013e4 <HAL_UART_MspInit+0x10c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012fa:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 80012fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001300:	4a64      	ldr	r2, [pc, #400]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 8001302:	f043 0310 	orr.w	r3, r3, #16
 8001306:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800130a:	4b62      	ldr	r3, [pc, #392]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 800130c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001310:	f003 0310 	and.w	r3, r3, #16
 8001314:	61bb      	str	r3, [r7, #24]
 8001316:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131e:	4a5d      	ldr	r2, [pc, #372]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001328:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800133a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001348:	2304      	movs	r3, #4
 800134a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134c:	f107 031c 	add.w	r3, r7, #28
 8001350:	4619      	mov	r1, r3
 8001352:	4851      	ldr	r0, [pc, #324]	; (8001498 <HAL_UART_MspInit+0x1c0>)
 8001354:	f004 fb08 	bl	8005968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001358:	2340      	movs	r3, #64	; 0x40
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001368:	2307      	movs	r3, #7
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4849      	ldr	r0, [pc, #292]	; (8001498 <HAL_UART_MspInit+0x1c0>)
 8001374:	f004 faf8 	bl	8005968 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8001378:	4b48      	ldr	r3, [pc, #288]	; (800149c <HAL_UART_MspInit+0x1c4>)
 800137a:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_UART_MspInit+0x1c8>)
 800137c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800137e:	4b47      	ldr	r3, [pc, #284]	; (800149c <HAL_UART_MspInit+0x1c4>)
 8001380:	222a      	movs	r2, #42	; 0x2a
 8001382:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001384:	4b45      	ldr	r3, [pc, #276]	; (800149c <HAL_UART_MspInit+0x1c4>)
 8001386:	2240      	movs	r2, #64	; 0x40
 8001388:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800138a:	4b44      	ldr	r3, [pc, #272]	; (800149c <HAL_UART_MspInit+0x1c4>)
 800138c:	2200      	movs	r2, #0
 800138e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001390:	4b42      	ldr	r3, [pc, #264]	; (800149c <HAL_UART_MspInit+0x1c4>)
 8001392:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001396:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001398:	4b40      	ldr	r3, [pc, #256]	; (800149c <HAL_UART_MspInit+0x1c4>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800139e:	4b3f      	ldr	r3, [pc, #252]	; (800149c <HAL_UART_MspInit+0x1c4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80013a4:	4b3d      	ldr	r3, [pc, #244]	; (800149c <HAL_UART_MspInit+0x1c4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013aa:	4b3c      	ldr	r3, [pc, #240]	; (800149c <HAL_UART_MspInit+0x1c4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013b0:	4b3a      	ldr	r3, [pc, #232]	; (800149c <HAL_UART_MspInit+0x1c4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80013b6:	4839      	ldr	r0, [pc, #228]	; (800149c <HAL_UART_MspInit+0x1c4>)
 80013b8:	f000 fd54 	bl	8001e64 <HAL_DMA_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 80013c2:	f7ff fecd 	bl	8001160 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a34      	ldr	r2, [pc, #208]	; (800149c <HAL_UART_MspInit+0x1c4>)
 80013ca:	675a      	str	r2, [r3, #116]	; 0x74
 80013cc:	4a33      	ldr	r2, [pc, #204]	; (800149c <HAL_UART_MspInit+0x1c4>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2105      	movs	r1, #5
 80013d6:	2025      	movs	r0, #37	; 0x25
 80013d8:	f000 fd1c 	bl	8001e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013dc:	2025      	movs	r0, #37	; 0x25
 80013de:	f000 fd33 	bl	8001e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e2:	e051      	b.n	8001488 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <HAL_UART_MspInit+0x1cc>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d14c      	bne.n	8001488 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	4b29      	ldr	r3, [pc, #164]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 80013f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 80013f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 8001400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 800140e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001412:	4a20      	ldr	r2, [pc, #128]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800143a:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_UART_MspInit+0x1bc>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	f003 0308 	and.w	r3, r3, #8
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001448:	2308      	movs	r3, #8
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001458:	2307      	movs	r3, #7
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4811      	ldr	r0, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0x1d0>)
 8001464:	f004 fa80 	bl	8005968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001468:	2320      	movs	r3, #32
 800146a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001478:	2307      	movs	r3, #7
 800147a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <HAL_UART_MspInit+0x1d4>)
 8001484:	f004 fa70 	bl	8005968 <HAL_GPIO_Init>
}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40011000 	.word	0x40011000
 8001494:	58024400 	.word	0x58024400
 8001498:	58020400 	.word	0x58020400
 800149c:	20008870 	.word	0x20008870
 80014a0:	40020010 	.word	0x40020010
 80014a4:	40004400 	.word	0x40004400
 80014a8:	58020000 	.word	0x58020000
 80014ac:	58020c00 	.word	0x58020c00

080014b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b090      	sub	sp, #64	; 0x40
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b0f      	cmp	r3, #15
 80014bc:	d827      	bhi.n	800150e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014be:	2200      	movs	r2, #0
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	2036      	movs	r0, #54	; 0x36
 80014c4:	f000 fca6 	bl	8001e14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c8:	2036      	movs	r0, #54	; 0x36
 80014ca:	f000 fcbd 	bl	8001e48 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014ce:	4a29      	ldr	r2, [pc, #164]	; (8001574 <HAL_InitTick+0xc4>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014d4:	4b28      	ldr	r3, [pc, #160]	; (8001578 <HAL_InitTick+0xc8>)
 80014d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <HAL_InitTick+0xc8>)
 80014dc:	f043 0310 	orr.w	r3, r3, #16
 80014e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014e4:	4b24      	ldr	r3, [pc, #144]	; (8001578 <HAL_InitTick+0xc8>)
 80014e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014f2:	f107 0210 	add.w	r2, r7, #16
 80014f6:	f107 0314 	add.w	r3, r7, #20
 80014fa:	4611      	mov	r1, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 fb81 	bl	8006c04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001508:	2b00      	cmp	r3, #0
 800150a:	d106      	bne.n	800151a <HAL_InitTick+0x6a>
 800150c:	e001      	b.n	8001512 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e02b      	b.n	800156a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001512:	f005 fb4b 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 8001516:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001518:	e004      	b.n	8001524 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800151a:	f005 fb47 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 800151e:	4603      	mov	r3, r0
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001526:	4a15      	ldr	r2, [pc, #84]	; (800157c <HAL_InitTick+0xcc>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	0c9b      	lsrs	r3, r3, #18
 800152e:	3b01      	subs	r3, #1
 8001530:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_InitTick+0xd0>)
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_InitTick+0xd4>)
 8001536:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_InitTick+0xd0>)
 800153a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800153e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001540:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_InitTick+0xd0>)
 8001542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001544:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_InitTick+0xd0>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_InitTick+0xd0>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <HAL_InitTick+0xd0>)
 8001554:	f006 fff0 	bl	8008538 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d104      	bne.n	8001568 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <HAL_InitTick+0xd0>)
 8001560:	f007 f842 	bl	80085e8 <HAL_TIM_Base_Start_IT>
 8001564:	4603      	mov	r3, r0
 8001566:	e000      	b.n	800156a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
}
 800156a:	4618      	mov	r0, r3
 800156c:	3740      	adds	r7, #64	; 0x40
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	58024400 	.word	0x58024400
 800157c:	431bde83 	.word	0x431bde83
 8001580:	20008a84 	.word	0x20008a84
 8001584:	40001000 	.word	0x40001000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80015b8:	2004      	movs	r0, #4
 80015ba:	f004 fbb1 	bl	8005d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015c8:	4802      	ldr	r0, [pc, #8]	; (80015d4 <DMA1_Stream0_IRQHandler+0x10>)
 80015ca:	f001 f9e9 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20008870 	.word	0x20008870

080015d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80015dc:	2080      	movs	r0, #128	; 0x80
 80015de:	f004 fb9f 	bl	8005d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015ec:	4802      	ldr	r0, [pc, #8]	; (80015f8 <USART1_IRQHandler+0x10>)
 80015ee:	f008 f9e9 	bl	80099c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200088e8 	.word	0x200088e8

080015fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001600:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001604:	f004 fb8c 	bl	8005d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001608:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800160c:	f004 fb88 	bl	8005d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001610:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001614:	f004 fb84 	bl	8005d20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001618:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800161c:	f004 fb80 	bl	8005d20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001628:	4802      	ldr	r0, [pc, #8]	; (8001634 <TIM6_DAC_IRQHandler+0x10>)
 800162a:	f007 f874 	bl	8008716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20008a84 	.word	0x20008a84

08001638 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <ETH_IRQHandler+0x10>)
 800163e:	f002 ffef 	bl	8004620 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20008c0c 	.word	0x20008c0c

0800164c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	e00a      	b.n	8001674 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165e:	f3af 8000 	nop.w
 8001662:	4601      	mov	r1, r0
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	1c5a      	adds	r2, r3, #1
 8001668:	60ba      	str	r2, [r7, #8]
 800166a:	b2ca      	uxtb	r2, r1
 800166c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697a      	ldr	r2, [r7, #20]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	429a      	cmp	r2, r3
 800167a:	dbf0      	blt.n	800165e <_read+0x12>
	}

return len;
 800167c:	687b      	ldr	r3, [r7, #4]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e009      	b.n	80016ac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	dbf1      	blt.n	8001698 <_write+0x12>
	}
	return len;
 80016b4:	687b      	ldr	r3, [r7, #4]
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_close>:

int _close(int file)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
	return -1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e6:	605a      	str	r2, [r3, #4]
	return 0;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_isatty>:

int _isatty(int file)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b083      	sub	sp, #12
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
	return 1;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001730:	4a14      	ldr	r2, [pc, #80]	; (8001784 <_sbrk+0x5c>)
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <_sbrk+0x60>)
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800173c:	4b13      	ldr	r3, [pc, #76]	; (800178c <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d102      	bne.n	800174a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001744:	4b11      	ldr	r3, [pc, #68]	; (800178c <_sbrk+0x64>)
 8001746:	4a12      	ldr	r2, [pc, #72]	; (8001790 <_sbrk+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	429a      	cmp	r2, r3
 8001756:	d205      	bcs.n	8001764 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <_sbrk+0x6c>)
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a06      	ldr	r2, [pc, #24]	; (800178c <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	20020000 	.word	0x20020000
 8001788:	00004000 	.word	0x00004000
 800178c:	2000056c 	.word	0x2000056c
 8001790:	2000bdd8 	.word	0x2000bdd8
 8001794:	2000bdd0 	.word	0x2000bdd0

08001798 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800179e:	4b3c      	ldr	r3, [pc, #240]	; (8001890 <SystemInit+0xf8>)
 80017a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a4:	4a3a      	ldr	r2, [pc, #232]	; (8001890 <SystemInit+0xf8>)
 80017a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017ae:	4b39      	ldr	r3, [pc, #228]	; (8001894 <SystemInit+0xfc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d807      	bhi.n	80017ca <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <SystemInit+0xfc>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 030f 	bic.w	r3, r3, #15
 80017c2:	4a34      	ldr	r2, [pc, #208]	; (8001894 <SystemInit+0xfc>)
 80017c4:	f043 0307 	orr.w	r3, r3, #7
 80017c8:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017ca:	4b33      	ldr	r3, [pc, #204]	; (8001898 <SystemInit+0x100>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a32      	ldr	r2, [pc, #200]	; (8001898 <SystemInit+0x100>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017d6:	4b30      	ldr	r3, [pc, #192]	; (8001898 <SystemInit+0x100>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80017dc:	4b2e      	ldr	r3, [pc, #184]	; (8001898 <SystemInit+0x100>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	492d      	ldr	r1, [pc, #180]	; (8001898 <SystemInit+0x100>)
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <SystemInit+0x104>)
 80017e4:	4013      	ands	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <SystemInit+0xfc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	2b07      	cmp	r3, #7
 80017f2:	d907      	bls.n	8001804 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <SystemInit+0xfc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f023 030f 	bic.w	r3, r3, #15
 80017fc:	4a25      	ldr	r2, [pc, #148]	; (8001894 <SystemInit+0xfc>)
 80017fe:	f043 0307 	orr.w	r3, r3, #7
 8001802:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001804:	4b24      	ldr	r3, [pc, #144]	; (8001898 <SystemInit+0x100>)
 8001806:	2200      	movs	r2, #0
 8001808:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800180a:	4b23      	ldr	r3, [pc, #140]	; (8001898 <SystemInit+0x100>)
 800180c:	2200      	movs	r2, #0
 800180e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <SystemInit+0x100>)
 8001812:	2200      	movs	r2, #0
 8001814:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <SystemInit+0x100>)
 8001818:	4a21      	ldr	r2, [pc, #132]	; (80018a0 <SystemInit+0x108>)
 800181a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <SystemInit+0x100>)
 800181e:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <SystemInit+0x10c>)
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <SystemInit+0x100>)
 8001824:	4a20      	ldr	r2, [pc, #128]	; (80018a8 <SystemInit+0x110>)
 8001826:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001828:	4b1b      	ldr	r3, [pc, #108]	; (8001898 <SystemInit+0x100>)
 800182a:	2200      	movs	r2, #0
 800182c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800182e:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <SystemInit+0x100>)
 8001830:	4a1d      	ldr	r2, [pc, #116]	; (80018a8 <SystemInit+0x110>)
 8001832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001834:	4b18      	ldr	r3, [pc, #96]	; (8001898 <SystemInit+0x100>)
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <SystemInit+0x100>)
 800183c:	4a1a      	ldr	r2, [pc, #104]	; (80018a8 <SystemInit+0x110>)
 800183e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <SystemInit+0x100>)
 8001842:	2200      	movs	r2, #0
 8001844:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <SystemInit+0x100>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a13      	ldr	r2, [pc, #76]	; (8001898 <SystemInit+0x100>)
 800184c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <SystemInit+0x100>)
 8001854:	2200      	movs	r2, #0
 8001856:	661a      	str	r2, [r3, #96]	; 0x60
#if defined (DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM) , enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <SystemInit+0x100>)
 800185a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800185e:	4a0e      	ldr	r2, [pc, #56]	; (8001898 <SystemInit+0x100>)
 8001860:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8001864:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <SystemInit+0x100>)
 800186a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800186e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8001870:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <SystemInit+0x114>)
 8001874:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001878:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <SystemInit+0xf8>)
 800187c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001880:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00
 8001894:	52002000 	.word	0x52002000
 8001898:	58024400 	.word	0x58024400
 800189c:	eaf6ed7f 	.word	0xeaf6ed7f
 80018a0:	02020200 	.word	0x02020200
 80018a4:	01ff0000 	.word	0x01ff0000
 80018a8:	01010280 	.word	0x01010280
 80018ac:	52004000 	.word	0x52004000

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018e8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018b4:	f7ff ff70 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ba:	e003      	b.n	80018c4 <LoopCopyDataInit>

080018bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80018be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018c2:	3104      	adds	r1, #4

080018c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018c4:	480a      	ldr	r0, [pc, #40]	; (80018f0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80018c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018cc:	d3f6      	bcc.n	80018bc <CopyDataInit>
  ldr  r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80018d0:	e002      	b.n	80018d8 <LoopFillZerobss>

080018d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018d4:	f842 3b04 	str.w	r3, [r2], #4

080018d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80018da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018dc:	d3f9      	bcc.n	80018d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f01b f92d 	bl	801cb3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7ff f84f 	bl	8000984 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018ec:	08021250 	.word	0x08021250
  ldr  r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f4:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 80018f8:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 80018fc:	2000bdd8 	.word	0x2000bdd8

08001900 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC3_IRQHandler>

08001902 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00b      	beq.n	800192a <LAN8742_RegisterBusIO+0x28>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <LAN8742_RegisterBusIO+0x28>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <LAN8742_RegisterBusIO+0x28>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d102      	bne.n	8001930 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e014      	b.n	800195a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68da      	ldr	r2, [r3, #12]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001966:	b580      	push	{r7, lr}
 8001968:	b086      	sub	sp, #24
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d17c      	bne.n	8001a80 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2220      	movs	r2, #32
 8001998:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e01c      	b.n	80019da <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f107 0208 	add.w	r2, r7, #8
 80019a8:	2112      	movs	r1, #18
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	4798      	blx	r3
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	da03      	bge.n	80019bc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80019b4:	f06f 0304 	mvn.w	r3, #4
 80019b8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80019ba:	e00b      	b.n	80019d4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d105      	bne.n	80019d4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
         break;
 80019d2:	e005      	b.n	80019e0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b1f      	cmp	r3, #31
 80019de:	d9df      	bls.n	80019a0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b1f      	cmp	r3, #31
 80019e6:	d902      	bls.n	80019ee <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80019e8:	f06f 0302 	mvn.w	r3, #2
 80019ec:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d145      	bne.n	8001a80 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6810      	ldr	r0, [r2, #0]
 80019fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a00:	2100      	movs	r1, #0
 8001a02:	4798      	blx	r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	db37      	blt.n	8001a7a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6810      	ldr	r0, [r2, #0]
 8001a12:	f107 0208 	add.w	r2, r7, #8
 8001a16:	2100      	movs	r1, #0
 8001a18:	4798      	blx	r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	db28      	blt.n	8001a72 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	4798      	blx	r3
 8001a26:	4603      	mov	r3, r0
 8001a28:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a2a:	e01c      	b.n	8001a66 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4798      	blx	r3
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a3e:	d80e      	bhi.n	8001a5e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6810      	ldr	r0, [r2, #0]
 8001a48:	f107 0208 	add.w	r2, r7, #8
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4798      	blx	r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	da07      	bge.n	8001a66 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001a56:	f06f 0304 	mvn.w	r3, #4
 8001a5a:	613b      	str	r3, [r7, #16]
                 break;
 8001a5c:	e010      	b.n	8001a80 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001a5e:	f06f 0301 	mvn.w	r3, #1
 8001a62:	613b      	str	r3, [r7, #16]
               break;
 8001a64:	e00c      	b.n	8001a80 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1dd      	bne.n	8001a2c <LAN8742_Init+0xc6>
 8001a70:	e006      	b.n	8001a80 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001a72:	f06f 0304 	mvn.w	r3, #4
 8001a76:	613b      	str	r3, [r7, #16]
 8001a78:	e002      	b.n	8001a80 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001a7a:	f06f 0303 	mvn.w	r3, #3
 8001a7e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d112      	bne.n	8001aac <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	4798      	blx	r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001a90:	bf00      	nop
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4798      	blx	r3
 8001a98:	4603      	mov	r3, r0
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001aa4:	d9f5      	bls.n	8001a92 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001aac:	693b      	ldr	r3, [r7, #16]
 }
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b084      	sub	sp, #16
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6810      	ldr	r0, [r2, #0]
 8001aca:	f107 020c 	add.w	r2, r7, #12
 8001ace:	2101      	movs	r1, #1
 8001ad0:	4798      	blx	r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da02      	bge.n	8001ade <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ad8:	f06f 0304 	mvn.w	r3, #4
 8001adc:	e06e      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6810      	ldr	r0, [r2, #0]
 8001ae6:	f107 020c 	add.w	r2, r7, #12
 8001aea:	2101      	movs	r1, #1
 8001aec:	4798      	blx	r3
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da02      	bge.n	8001afa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001af4:	f06f 0304 	mvn.w	r3, #4
 8001af8:	e060      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001b04:	2301      	movs	r3, #1
 8001b06:	e059      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6810      	ldr	r0, [r2, #0]
 8001b10:	f107 020c 	add.w	r2, r7, #12
 8001b14:	2100      	movs	r1, #0
 8001b16:	4798      	blx	r3
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da02      	bge.n	8001b24 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b1e:	f06f 0304 	mvn.w	r3, #4
 8001b22:	e04b      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d11b      	bne.n	8001b66 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <LAN8742_GetLinkState+0x90>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b42:	2302      	movs	r3, #2
 8001b44:	e03a      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e033      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b5e:	2304      	movs	r3, #4
 8001b60:	e02c      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b62:	2305      	movs	r3, #5
 8001b64:	e02a      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6810      	ldr	r0, [r2, #0]
 8001b6e:	f107 020c 	add.w	r2, r7, #12
 8001b72:	211f      	movs	r1, #31
 8001b74:	4798      	blx	r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da02      	bge.n	8001b82 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b7c:	f06f 0304 	mvn.w	r3, #4
 8001b80:	e01c      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001b8c:	2306      	movs	r3, #6
 8001b8e:	e015      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 031c 	and.w	r3, r3, #28
 8001b96:	2b18      	cmp	r3, #24
 8001b98:	d101      	bne.n	8001b9e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e00e      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 031c 	and.w	r3, r3, #28
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d101      	bne.n	8001bac <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e007      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 031c 	and.w	r3, r3, #28
 8001bb2:	2b14      	cmp	r3, #20
 8001bb4:	d101      	bne.n	8001bba <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e000      	b.n	8001bbc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bba:	2305      	movs	r3, #5
    }				
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bca:	2003      	movs	r0, #3
 8001bcc:	f000 f917 	bl	8001dfe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001bd0:	f004 fe4a 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8001bd4:	4601      	mov	r1, r0
 8001bd6:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_Init+0x68>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	f003 030f 	and.w	r3, r3, #15
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <HAL_Init+0x6c>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	fa21 f303 	lsr.w	r3, r1, r3
 8001bec:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_Init+0x68>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_Init+0x6c>)
 8001bf8:	5cd3      	ldrb	r3, [r2, r3]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	4a0b      	ldr	r2, [pc, #44]	; (8001c34 <HAL_Init+0x70>)
 8001c06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c08:	4a0b      	ldr	r2, [pc, #44]	; (8001c38 <HAL_Init+0x74>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fc4e 	bl	80014b0 <HAL_InitTick>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e002      	b.n	8001c24 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1e:	f7ff faa3 	bl	8001168 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	58024400 	.word	0x58024400
 8001c30:	0802103c 	.word	0x0802103c
 8001c34:	20000004 	.word	0x20000004
 8001c38:	20000000 	.word	0x20000000

08001c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_IncTick+0x20>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	461a      	mov	r2, r3
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_IncTick+0x24>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <HAL_IncTick+0x24>)
 8001c4e:	6013      	str	r3, [r2, #0]
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	20008ad0 	.word	0x20008ad0

08001c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return uwTick;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <HAL_GetTick+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20008ad0 	.word	0x20008ad0

08001c7c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001c8c:	4904      	ldr	r1, [pc, #16]	; (8001ca0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	604b      	str	r3, [r1, #4]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	58000400 	.word	0x58000400

08001ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cba:	68ba      	ldr	r2, [r7, #8]
 8001cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cd2:	4a04      	ldr	r2, [pc, #16]	; (8001ce4 <__NVIC_SetPriorityGrouping+0x40>)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	60d3      	str	r3, [r2, #12]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00
 8001ce8:	05fa0000 	.word	0x05fa0000

08001cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	f003 0307 	and.w	r3, r3, #7
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	db0b      	blt.n	8001d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	f003 021f 	and.w	r2, r3, #31
 8001d20:	4907      	ldr	r1, [pc, #28]	; (8001d40 <__NVIC_EnableIRQ+0x38>)
 8001d22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2001      	movs	r0, #1
 8001d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	e000e100 	.word	0xe000e100

08001d44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	db0a      	blt.n	8001d6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <__NVIC_SetPriority+0x4c>)
 8001d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	440b      	add	r3, r1
 8001d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d6c:	e00a      	b.n	8001d84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4908      	ldr	r1, [pc, #32]	; (8001d94 <__NVIC_SetPriority+0x50>)
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	f003 030f 	and.w	r3, r3, #15
 8001d7a:	3b04      	subs	r3, #4
 8001d7c:	0112      	lsls	r2, r2, #4
 8001d7e:	b2d2      	uxtb	r2, r2
 8001d80:	440b      	add	r3, r1
 8001d82:	761a      	strb	r2, [r3, #24]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	e000e100 	.word	0xe000e100
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b089      	sub	sp, #36	; 0x24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	60b9      	str	r1, [r7, #8]
 8001da2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f1c3 0307 	rsb	r3, r3, #7
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	bf28      	it	cs
 8001db6:	2304      	movcs	r3, #4
 8001db8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	2b06      	cmp	r3, #6
 8001dc0:	d902      	bls.n	8001dc8 <NVIC_EncodePriority+0x30>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3b03      	subs	r3, #3
 8001dc6:	e000      	b.n	8001dca <NVIC_EncodePriority+0x32>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	401a      	ands	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df0:	4313      	orrs	r3, r2
         );
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3724      	adds	r7, #36	; 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f7ff ff4c 	bl	8001ca4 <__NVIC_SetPriorityGrouping>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e22:	f7ff ff63 	bl	8001cec <__NVIC_GetPriorityGrouping>
 8001e26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	6978      	ldr	r0, [r7, #20]
 8001e2e:	f7ff ffb3 	bl	8001d98 <NVIC_EncodePriority>
 8001e32:	4602      	mov	r2, r0
 8001e34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff82 	bl	8001d44 <__NVIC_SetPriority>
}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff56 	bl	8001d08 <__NVIC_EnableIRQ>
}
 8001e5c:	bf00      	nop
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff fefa 	bl	8001c64 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e314      	b.n	80024a6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a66      	ldr	r2, [pc, #408]	; (800201c <HAL_DMA_Init+0x1b8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d04a      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a65      	ldr	r2, [pc, #404]	; (8002020 <HAL_DMA_Init+0x1bc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d045      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a63      	ldr	r2, [pc, #396]	; (8002024 <HAL_DMA_Init+0x1c0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d040      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a62      	ldr	r2, [pc, #392]	; (8002028 <HAL_DMA_Init+0x1c4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d03b      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a60      	ldr	r2, [pc, #384]	; (800202c <HAL_DMA_Init+0x1c8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d036      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a5f      	ldr	r2, [pc, #380]	; (8002030 <HAL_DMA_Init+0x1cc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d031      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a5d      	ldr	r2, [pc, #372]	; (8002034 <HAL_DMA_Init+0x1d0>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d02c      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a5c      	ldr	r2, [pc, #368]	; (8002038 <HAL_DMA_Init+0x1d4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d027      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a5a      	ldr	r2, [pc, #360]	; (800203c <HAL_DMA_Init+0x1d8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d022      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a59      	ldr	r2, [pc, #356]	; (8002040 <HAL_DMA_Init+0x1dc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d01d      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a57      	ldr	r2, [pc, #348]	; (8002044 <HAL_DMA_Init+0x1e0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d018      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a56      	ldr	r2, [pc, #344]	; (8002048 <HAL_DMA_Init+0x1e4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d013      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a54      	ldr	r2, [pc, #336]	; (800204c <HAL_DMA_Init+0x1e8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d00e      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a53      	ldr	r2, [pc, #332]	; (8002050 <HAL_DMA_Init+0x1ec>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d009      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a51      	ldr	r2, [pc, #324]	; (8002054 <HAL_DMA_Init+0x1f0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d004      	beq.n	8001f1c <HAL_DMA_Init+0xb8>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a50      	ldr	r2, [pc, #320]	; (8002058 <HAL_DMA_Init+0x1f4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_DMA_Init+0xbc>
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e000      	b.n	8001f22 <HAL_DMA_Init+0xbe>
 8001f20:	2300      	movs	r3, #0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 813c 	beq.w	80021a0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a37      	ldr	r2, [pc, #220]	; (800201c <HAL_DMA_Init+0x1b8>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d04a      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a36      	ldr	r2, [pc, #216]	; (8002020 <HAL_DMA_Init+0x1bc>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d045      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a34      	ldr	r2, [pc, #208]	; (8002024 <HAL_DMA_Init+0x1c0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d040      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a33      	ldr	r2, [pc, #204]	; (8002028 <HAL_DMA_Init+0x1c4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d03b      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a31      	ldr	r2, [pc, #196]	; (800202c <HAL_DMA_Init+0x1c8>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d036      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a30      	ldr	r2, [pc, #192]	; (8002030 <HAL_DMA_Init+0x1cc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d031      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a2e      	ldr	r2, [pc, #184]	; (8002034 <HAL_DMA_Init+0x1d0>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d02c      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2d      	ldr	r2, [pc, #180]	; (8002038 <HAL_DMA_Init+0x1d4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d027      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2b      	ldr	r2, [pc, #172]	; (800203c <HAL_DMA_Init+0x1d8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d022      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a2a      	ldr	r2, [pc, #168]	; (8002040 <HAL_DMA_Init+0x1dc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d01d      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a28      	ldr	r2, [pc, #160]	; (8002044 <HAL_DMA_Init+0x1e0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d018      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a27      	ldr	r2, [pc, #156]	; (8002048 <HAL_DMA_Init+0x1e4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d013      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a25      	ldr	r2, [pc, #148]	; (800204c <HAL_DMA_Init+0x1e8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00e      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_DMA_Init+0x1ec>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d009      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_DMA_Init+0x1f0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d004      	beq.n	8001fd8 <HAL_DMA_Init+0x174>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a21      	ldr	r2, [pc, #132]	; (8002058 <HAL_DMA_Init+0x1f4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <HAL_DMA_Init+0x186>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 0201 	bic.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	e007      	b.n	8001ffa <HAL_DMA_Init+0x196>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ffa:	e02f      	b.n	800205c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ffc:	f7ff fe32 	bl	8001c64 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d928      	bls.n	800205c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2203      	movs	r2, #3
 8002014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e244      	b.n	80024a6 <HAL_DMA_Init+0x642>
 800201c:	40020010 	.word	0x40020010
 8002020:	40020028 	.word	0x40020028
 8002024:	40020040 	.word	0x40020040
 8002028:	40020058 	.word	0x40020058
 800202c:	40020070 	.word	0x40020070
 8002030:	40020088 	.word	0x40020088
 8002034:	400200a0 	.word	0x400200a0
 8002038:	400200b8 	.word	0x400200b8
 800203c:	40020410 	.word	0x40020410
 8002040:	40020428 	.word	0x40020428
 8002044:	40020440 	.word	0x40020440
 8002048:	40020458 	.word	0x40020458
 800204c:	40020470 	.word	0x40020470
 8002050:	40020488 	.word	0x40020488
 8002054:	400204a0 	.word	0x400204a0
 8002058:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1c8      	bne.n	8001ffc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	4b84      	ldr	r3, [pc, #528]	; (8002288 <HAL_DMA_Init+0x424>)
 8002076:	4013      	ands	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002082:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800208e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2b04      	cmp	r3, #4
 80020ae:	d107      	bne.n	80020c0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b8:	4313      	orrs	r3, r2
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	4313      	orrs	r3, r2
 80020be:	617b      	str	r3, [r7, #20]
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b28      	cmp	r3, #40	; 0x28
 80020c6:	d903      	bls.n	80020d0 <HAL_DMA_Init+0x26c>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b2e      	cmp	r3, #46	; 0x2e
 80020ce:	d91f      	bls.n	8002110 <HAL_DMA_Init+0x2ac>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b3e      	cmp	r3, #62	; 0x3e
 80020d6:	d903      	bls.n	80020e0 <HAL_DMA_Init+0x27c>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b42      	cmp	r3, #66	; 0x42
 80020de:	d917      	bls.n	8002110 <HAL_DMA_Init+0x2ac>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	2b46      	cmp	r3, #70	; 0x46
 80020e6:	d903      	bls.n	80020f0 <HAL_DMA_Init+0x28c>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b48      	cmp	r3, #72	; 0x48
 80020ee:	d90f      	bls.n	8002110 <HAL_DMA_Init+0x2ac>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b4e      	cmp	r3, #78	; 0x4e
 80020f6:	d903      	bls.n	8002100 <HAL_DMA_Init+0x29c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b52      	cmp	r3, #82	; 0x52
 80020fe:	d907      	bls.n	8002110 <HAL_DMA_Init+0x2ac>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b73      	cmp	r3, #115	; 0x73
 8002106:	d905      	bls.n	8002114 <HAL_DMA_Init+0x2b0>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b77      	cmp	r3, #119	; 0x77
 800210e:	d801      	bhi.n	8002114 <HAL_DMA_Init+0x2b0>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_DMA_Init+0x2b2>
 8002114:	2300      	movs	r3, #0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002120:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f023 0307 	bic.w	r3, r3, #7
 8002138:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4313      	orrs	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002148:	2b04      	cmp	r3, #4
 800214a:	d117      	bne.n	800217c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4313      	orrs	r3, r2
 8002154:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00e      	beq.n	800217c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f001 fbfa 	bl	8003958 <DMA_CheckFifoParam>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2240      	movs	r2, #64	; 0x40
 800216e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e194      	b.n	80024a6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f001 fb35 	bl	80037f4 <DMA_CalcBaseAndBitshift>
 800218a:	4603      	mov	r3, r0
 800218c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	223f      	movs	r2, #63	; 0x3f
 8002198:	409a      	lsls	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	e0ca      	b.n	8002336 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a39      	ldr	r2, [pc, #228]	; (800228c <HAL_DMA_Init+0x428>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_Init+0x38c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a38      	ldr	r2, [pc, #224]	; (8002290 <HAL_DMA_Init+0x42c>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_Init+0x38c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a36      	ldr	r2, [pc, #216]	; (8002294 <HAL_DMA_Init+0x430>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_Init+0x38c>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a35      	ldr	r2, [pc, #212]	; (8002298 <HAL_DMA_Init+0x434>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Init+0x38c>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a33      	ldr	r2, [pc, #204]	; (800229c <HAL_DMA_Init+0x438>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_Init+0x38c>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a32      	ldr	r2, [pc, #200]	; (80022a0 <HAL_DMA_Init+0x43c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_Init+0x38c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a30      	ldr	r2, [pc, #192]	; (80022a4 <HAL_DMA_Init+0x440>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Init+0x38c>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2f      	ldr	r2, [pc, #188]	; (80022a8 <HAL_DMA_Init+0x444>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d101      	bne.n	80021f4 <HAL_DMA_Init+0x390>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <HAL_DMA_Init+0x392>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8094 	beq.w	8002324 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a22      	ldr	r2, [pc, #136]	; (800228c <HAL_DMA_Init+0x428>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d021      	beq.n	800224a <HAL_DMA_Init+0x3e6>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <HAL_DMA_Init+0x42c>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d01c      	beq.n	800224a <HAL_DMA_Init+0x3e6>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <HAL_DMA_Init+0x430>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d017      	beq.n	800224a <HAL_DMA_Init+0x3e6>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1e      	ldr	r2, [pc, #120]	; (8002298 <HAL_DMA_Init+0x434>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d012      	beq.n	800224a <HAL_DMA_Init+0x3e6>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1c      	ldr	r2, [pc, #112]	; (800229c <HAL_DMA_Init+0x438>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00d      	beq.n	800224a <HAL_DMA_Init+0x3e6>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1b      	ldr	r2, [pc, #108]	; (80022a0 <HAL_DMA_Init+0x43c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d008      	beq.n	800224a <HAL_DMA_Init+0x3e6>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_DMA_Init+0x440>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <HAL_DMA_Init+0x3e6>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_DMA_Init+0x444>)
 8002248:	4293      	cmp	r3, r2
 800224a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_DMA_Init+0x448>)
 8002268:	4013      	ands	r3, r2
 800226a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b40      	cmp	r3, #64	; 0x40
 8002272:	d01d      	beq.n	80022b0 <HAL_DMA_Init+0x44c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b80      	cmp	r3, #128	; 0x80
 800227a:	d102      	bne.n	8002282 <HAL_DMA_Init+0x41e>
 800227c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002280:	e017      	b.n	80022b2 <HAL_DMA_Init+0x44e>
 8002282:	2300      	movs	r3, #0
 8002284:	e015      	b.n	80022b2 <HAL_DMA_Init+0x44e>
 8002286:	bf00      	nop
 8002288:	fe10803f 	.word	0xfe10803f
 800228c:	58025408 	.word	0x58025408
 8002290:	5802541c 	.word	0x5802541c
 8002294:	58025430 	.word	0x58025430
 8002298:	58025444 	.word	0x58025444
 800229c:	58025458 	.word	0x58025458
 80022a0:	5802546c 	.word	0x5802546c
 80022a4:	58025480 	.word	0x58025480
 80022a8:	58025494 	.word	0x58025494
 80022ac:	fffe000f 	.word	0xfffe000f
 80022b0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68d2      	ldr	r2, [r2, #12]
 80022b6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80022c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80022c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80022d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80022d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80022e0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <HAL_DMA_Init+0x64c>)
 80022f8:	4413      	add	r3, r2
 80022fa:	4a6e      	ldr	r2, [pc, #440]	; (80024b4 <HAL_DMA_Init+0x650>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	009a      	lsls	r2, r3, #2
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f001 fa73 	bl	80037f4 <DMA_CalcBaseAndBitshift>
 800230e:	4603      	mov	r3, r0
 8002310:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	2201      	movs	r2, #1
 800231c:	409a      	lsls	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e008      	b.n	8002336 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2240      	movs	r2, #64	; 0x40
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2203      	movs	r2, #3
 800232e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0b7      	b.n	80024a6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a5f      	ldr	r2, [pc, #380]	; (80024b8 <HAL_DMA_Init+0x654>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d072      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_DMA_Init+0x658>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d06d      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5c      	ldr	r2, [pc, #368]	; (80024c0 <HAL_DMA_Init+0x65c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d068      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a5a      	ldr	r2, [pc, #360]	; (80024c4 <HAL_DMA_Init+0x660>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d063      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a59      	ldr	r2, [pc, #356]	; (80024c8 <HAL_DMA_Init+0x664>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d05e      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a57      	ldr	r2, [pc, #348]	; (80024cc <HAL_DMA_Init+0x668>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d059      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a56      	ldr	r2, [pc, #344]	; (80024d0 <HAL_DMA_Init+0x66c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d054      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a54      	ldr	r2, [pc, #336]	; (80024d4 <HAL_DMA_Init+0x670>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d04f      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a53      	ldr	r2, [pc, #332]	; (80024d8 <HAL_DMA_Init+0x674>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d04a      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a51      	ldr	r2, [pc, #324]	; (80024dc <HAL_DMA_Init+0x678>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d045      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a50      	ldr	r2, [pc, #320]	; (80024e0 <HAL_DMA_Init+0x67c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d040      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a4e      	ldr	r2, [pc, #312]	; (80024e4 <HAL_DMA_Init+0x680>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d03b      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4d      	ldr	r2, [pc, #308]	; (80024e8 <HAL_DMA_Init+0x684>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d036      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a4b      	ldr	r2, [pc, #300]	; (80024ec <HAL_DMA_Init+0x688>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d031      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4a      	ldr	r2, [pc, #296]	; (80024f0 <HAL_DMA_Init+0x68c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d02c      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a48      	ldr	r2, [pc, #288]	; (80024f4 <HAL_DMA_Init+0x690>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d027      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a47      	ldr	r2, [pc, #284]	; (80024f8 <HAL_DMA_Init+0x694>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d022      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a45      	ldr	r2, [pc, #276]	; (80024fc <HAL_DMA_Init+0x698>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d01d      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a44      	ldr	r2, [pc, #272]	; (8002500 <HAL_DMA_Init+0x69c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d018      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a42      	ldr	r2, [pc, #264]	; (8002504 <HAL_DMA_Init+0x6a0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d013      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a41      	ldr	r2, [pc, #260]	; (8002508 <HAL_DMA_Init+0x6a4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d00e      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a3f      	ldr	r2, [pc, #252]	; (800250c <HAL_DMA_Init+0x6a8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d009      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a3e      	ldr	r2, [pc, #248]	; (8002510 <HAL_DMA_Init+0x6ac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_DMA_Init+0x5c2>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3c      	ldr	r2, [pc, #240]	; (8002514 <HAL_DMA_Init+0x6b0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <HAL_DMA_Init+0x5c6>
 8002426:	2301      	movs	r3, #1
 8002428:	e000      	b.n	800242c <HAL_DMA_Init+0x5c8>
 800242a:	2300      	movs	r3, #0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d032      	beq.n	8002496 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f001 fb0d 	bl	8003a50 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b80      	cmp	r3, #128	; 0x80
 800243c:	d102      	bne.n	8002444 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002458:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d010      	beq.n	8002484 <HAL_DMA_Init+0x620>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b08      	cmp	r3, #8
 8002468:	d80c      	bhi.n	8002484 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f001 fb8a 	bl	8003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e008      	b.n	8002496 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	a7fdabf8 	.word	0xa7fdabf8
 80024b4:	cccccccd 	.word	0xcccccccd
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8
 80024f8:	58025408 	.word	0x58025408
 80024fc:	5802541c 	.word	0x5802541c
 8002500:	58025430 	.word	0x58025430
 8002504:	58025444 	.word	0x58025444
 8002508:	58025458 	.word	0x58025458
 800250c:	5802546c 	.word	0x5802546c
 8002510:	58025480 	.word	0x58025480
 8002514:	58025494 	.word	0x58025494

08002518 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e205      	b.n	8002936 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b02      	cmp	r3, #2
 8002534:	d004      	beq.n	8002540 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e1fa      	b.n	8002936 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a8c      	ldr	r2, [pc, #560]	; (8002778 <HAL_DMA_Abort_IT+0x260>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d04a      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a8b      	ldr	r2, [pc, #556]	; (800277c <HAL_DMA_Abort_IT+0x264>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d045      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a89      	ldr	r2, [pc, #548]	; (8002780 <HAL_DMA_Abort_IT+0x268>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d040      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a88      	ldr	r2, [pc, #544]	; (8002784 <HAL_DMA_Abort_IT+0x26c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d03b      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a86      	ldr	r2, [pc, #536]	; (8002788 <HAL_DMA_Abort_IT+0x270>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d036      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a85      	ldr	r2, [pc, #532]	; (800278c <HAL_DMA_Abort_IT+0x274>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d031      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a83      	ldr	r2, [pc, #524]	; (8002790 <HAL_DMA_Abort_IT+0x278>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d02c      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a82      	ldr	r2, [pc, #520]	; (8002794 <HAL_DMA_Abort_IT+0x27c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d027      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_DMA_Abort_IT+0x280>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d022      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7f      	ldr	r2, [pc, #508]	; (800279c <HAL_DMA_Abort_IT+0x284>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d01d      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a7d      	ldr	r2, [pc, #500]	; (80027a0 <HAL_DMA_Abort_IT+0x288>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d018      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a7c      	ldr	r2, [pc, #496]	; (80027a4 <HAL_DMA_Abort_IT+0x28c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a7a      	ldr	r2, [pc, #488]	; (80027a8 <HAL_DMA_Abort_IT+0x290>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00e      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a79      	ldr	r2, [pc, #484]	; (80027ac <HAL_DMA_Abort_IT+0x294>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d009      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a77      	ldr	r2, [pc, #476]	; (80027b0 <HAL_DMA_Abort_IT+0x298>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d004      	beq.n	80025e0 <HAL_DMA_Abort_IT+0xc8>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a76      	ldr	r2, [pc, #472]	; (80027b4 <HAL_DMA_Abort_IT+0x29c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d101      	bne.n	80025e4 <HAL_DMA_Abort_IT+0xcc>
 80025e0:	2301      	movs	r3, #1
 80025e2:	e000      	b.n	80025e6 <HAL_DMA_Abort_IT+0xce>
 80025e4:	2300      	movs	r3, #0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d065      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2204      	movs	r2, #4
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a60      	ldr	r2, [pc, #384]	; (8002778 <HAL_DMA_Abort_IT+0x260>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d04a      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a5e      	ldr	r2, [pc, #376]	; (800277c <HAL_DMA_Abort_IT+0x264>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d045      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a5d      	ldr	r2, [pc, #372]	; (8002780 <HAL_DMA_Abort_IT+0x268>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d040      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a5b      	ldr	r2, [pc, #364]	; (8002784 <HAL_DMA_Abort_IT+0x26c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d03b      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5a      	ldr	r2, [pc, #360]	; (8002788 <HAL_DMA_Abort_IT+0x270>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d036      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a58      	ldr	r2, [pc, #352]	; (800278c <HAL_DMA_Abort_IT+0x274>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d031      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a57      	ldr	r2, [pc, #348]	; (8002790 <HAL_DMA_Abort_IT+0x278>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d02c      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a55      	ldr	r2, [pc, #340]	; (8002794 <HAL_DMA_Abort_IT+0x27c>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d027      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a54      	ldr	r2, [pc, #336]	; (8002798 <HAL_DMA_Abort_IT+0x280>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_DMA_Abort_IT+0x284>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01d      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_DMA_Abort_IT+0x288>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d018      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a4f      	ldr	r2, [pc, #316]	; (80027a4 <HAL_DMA_Abort_IT+0x28c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a4e      	ldr	r2, [pc, #312]	; (80027a8 <HAL_DMA_Abort_IT+0x290>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_DMA_Abort_IT+0x294>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_DMA_Abort_IT+0x298>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_DMA_Abort_IT+0x17a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_DMA_Abort_IT+0x29c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d108      	bne.n	80026a4 <HAL_DMA_Abort_IT+0x18c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	e147      	b.n	8002934 <HAL_DMA_Abort_IT+0x41c>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0201 	bic.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e13e      	b.n	8002934 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 020e 	bic.w	r2, r2, #14
 80026c4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2b      	ldr	r2, [pc, #172]	; (8002778 <HAL_DMA_Abort_IT+0x260>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d04a      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a29      	ldr	r2, [pc, #164]	; (800277c <HAL_DMA_Abort_IT+0x264>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d045      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a28      	ldr	r2, [pc, #160]	; (8002780 <HAL_DMA_Abort_IT+0x268>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d040      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a26      	ldr	r2, [pc, #152]	; (8002784 <HAL_DMA_Abort_IT+0x26c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d03b      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a25      	ldr	r2, [pc, #148]	; (8002788 <HAL_DMA_Abort_IT+0x270>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d036      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a23      	ldr	r2, [pc, #140]	; (800278c <HAL_DMA_Abort_IT+0x274>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d031      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a22      	ldr	r2, [pc, #136]	; (8002790 <HAL_DMA_Abort_IT+0x278>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d02c      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a20      	ldr	r2, [pc, #128]	; (8002794 <HAL_DMA_Abort_IT+0x27c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d027      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1f      	ldr	r2, [pc, #124]	; (8002798 <HAL_DMA_Abort_IT+0x280>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d022      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1d      	ldr	r2, [pc, #116]	; (800279c <HAL_DMA_Abort_IT+0x284>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d01d      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <HAL_DMA_Abort_IT+0x288>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d018      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a1a      	ldr	r2, [pc, #104]	; (80027a4 <HAL_DMA_Abort_IT+0x28c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d013      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_DMA_Abort_IT+0x290>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d00e      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a17      	ldr	r2, [pc, #92]	; (80027ac <HAL_DMA_Abort_IT+0x294>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a16      	ldr	r2, [pc, #88]	; (80027b0 <HAL_DMA_Abort_IT+0x298>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_DMA_Abort_IT+0x24e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <HAL_DMA_Abort_IT+0x29c>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d128      	bne.n	80027b8 <HAL_DMA_Abort_IT+0x2a0>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e027      	b.n	80027c8 <HAL_DMA_Abort_IT+0x2b0>
 8002778:	40020010 	.word	0x40020010
 800277c:	40020028 	.word	0x40020028
 8002780:	40020040 	.word	0x40020040
 8002784:	40020058 	.word	0x40020058
 8002788:	40020070 	.word	0x40020070
 800278c:	40020088 	.word	0x40020088
 8002790:	400200a0 	.word	0x400200a0
 8002794:	400200b8 	.word	0x400200b8
 8002798:	40020410 	.word	0x40020410
 800279c:	40020428 	.word	0x40020428
 80027a0:	40020440 	.word	0x40020440
 80027a4:	40020458 	.word	0x40020458
 80027a8:	40020470 	.word	0x40020470
 80027ac:	40020488 	.word	0x40020488
 80027b0:	400204a0 	.word	0x400204a0
 80027b4:	400204b8 	.word	0x400204b8
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a5c      	ldr	r2, [pc, #368]	; (8002940 <HAL_DMA_Abort_IT+0x428>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d072      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5b      	ldr	r2, [pc, #364]	; (8002944 <HAL_DMA_Abort_IT+0x42c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d06d      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a59      	ldr	r2, [pc, #356]	; (8002948 <HAL_DMA_Abort_IT+0x430>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d068      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a58      	ldr	r2, [pc, #352]	; (800294c <HAL_DMA_Abort_IT+0x434>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d063      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a56      	ldr	r2, [pc, #344]	; (8002950 <HAL_DMA_Abort_IT+0x438>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d05e      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a55      	ldr	r2, [pc, #340]	; (8002954 <HAL_DMA_Abort_IT+0x43c>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d059      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a53      	ldr	r2, [pc, #332]	; (8002958 <HAL_DMA_Abort_IT+0x440>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d054      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a52      	ldr	r2, [pc, #328]	; (800295c <HAL_DMA_Abort_IT+0x444>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d04f      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a50      	ldr	r2, [pc, #320]	; (8002960 <HAL_DMA_Abort_IT+0x448>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04a      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4f      	ldr	r2, [pc, #316]	; (8002964 <HAL_DMA_Abort_IT+0x44c>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d045      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a4d      	ldr	r2, [pc, #308]	; (8002968 <HAL_DMA_Abort_IT+0x450>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d040      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a4c      	ldr	r2, [pc, #304]	; (800296c <HAL_DMA_Abort_IT+0x454>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d03b      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4a      	ldr	r2, [pc, #296]	; (8002970 <HAL_DMA_Abort_IT+0x458>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d036      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a49      	ldr	r2, [pc, #292]	; (8002974 <HAL_DMA_Abort_IT+0x45c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d031      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a47      	ldr	r2, [pc, #284]	; (8002978 <HAL_DMA_Abort_IT+0x460>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02c      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a46      	ldr	r2, [pc, #280]	; (800297c <HAL_DMA_Abort_IT+0x464>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d027      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a44      	ldr	r2, [pc, #272]	; (8002980 <HAL_DMA_Abort_IT+0x468>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d022      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a43      	ldr	r2, [pc, #268]	; (8002984 <HAL_DMA_Abort_IT+0x46c>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d01d      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a41      	ldr	r2, [pc, #260]	; (8002988 <HAL_DMA_Abort_IT+0x470>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d018      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a40      	ldr	r2, [pc, #256]	; (800298c <HAL_DMA_Abort_IT+0x474>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d013      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a3e      	ldr	r2, [pc, #248]	; (8002990 <HAL_DMA_Abort_IT+0x478>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00e      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a3d      	ldr	r2, [pc, #244]	; (8002994 <HAL_DMA_Abort_IT+0x47c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d009      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3b      	ldr	r2, [pc, #236]	; (8002998 <HAL_DMA_Abort_IT+0x480>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d004      	beq.n	80028b8 <HAL_DMA_Abort_IT+0x3a0>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3a      	ldr	r2, [pc, #232]	; (800299c <HAL_DMA_Abort_IT+0x484>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d101      	bne.n	80028bc <HAL_DMA_Abort_IT+0x3a4>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <HAL_DMA_Abort_IT+0x3a6>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d028      	beq.n	8002914 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028dc:	f003 031f 	and.w	r3, r3, #31
 80028e0:	2201      	movs	r2, #1
 80028e2:	409a      	lsls	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00c      	beq.n	8002914 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002904:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002912:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40020010 	.word	0x40020010
 8002944:	40020028 	.word	0x40020028
 8002948:	40020040 	.word	0x40020040
 800294c:	40020058 	.word	0x40020058
 8002950:	40020070 	.word	0x40020070
 8002954:	40020088 	.word	0x40020088
 8002958:	400200a0 	.word	0x400200a0
 800295c:	400200b8 	.word	0x400200b8
 8002960:	40020410 	.word	0x40020410
 8002964:	40020428 	.word	0x40020428
 8002968:	40020440 	.word	0x40020440
 800296c:	40020458 	.word	0x40020458
 8002970:	40020470 	.word	0x40020470
 8002974:	40020488 	.word	0x40020488
 8002978:	400204a0 	.word	0x400204a0
 800297c:	400204b8 	.word	0x400204b8
 8002980:	58025408 	.word	0x58025408
 8002984:	5802541c 	.word	0x5802541c
 8002988:	58025430 	.word	0x58025430
 800298c:	58025444 	.word	0x58025444
 8002990:	58025458 	.word	0x58025458
 8002994:	5802546c 	.word	0x5802546c
 8002998:	58025480 	.word	0x58025480
 800299c:	58025494 	.word	0x58025494

080029a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08a      	sub	sp, #40	; 0x28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029ac:	4b67      	ldr	r3, [pc, #412]	; (8002b4c <HAL_DMA_IRQHandler+0x1ac>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a67      	ldr	r2, [pc, #412]	; (8002b50 <HAL_DMA_IRQHandler+0x1b0>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0a9b      	lsrs	r3, r3, #10
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a5f      	ldr	r2, [pc, #380]	; (8002b54 <HAL_DMA_IRQHandler+0x1b4>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d04a      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5d      	ldr	r2, [pc, #372]	; (8002b58 <HAL_DMA_IRQHandler+0x1b8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d045      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a5c      	ldr	r2, [pc, #368]	; (8002b5c <HAL_DMA_IRQHandler+0x1bc>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d040      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a5a      	ldr	r2, [pc, #360]	; (8002b60 <HAL_DMA_IRQHandler+0x1c0>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d03b      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a59      	ldr	r2, [pc, #356]	; (8002b64 <HAL_DMA_IRQHandler+0x1c4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d036      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a57      	ldr	r2, [pc, #348]	; (8002b68 <HAL_DMA_IRQHandler+0x1c8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d031      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a56      	ldr	r2, [pc, #344]	; (8002b6c <HAL_DMA_IRQHandler+0x1cc>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d02c      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a54      	ldr	r2, [pc, #336]	; (8002b70 <HAL_DMA_IRQHandler+0x1d0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d027      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a53      	ldr	r2, [pc, #332]	; (8002b74 <HAL_DMA_IRQHandler+0x1d4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d022      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a51      	ldr	r2, [pc, #324]	; (8002b78 <HAL_DMA_IRQHandler+0x1d8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01d      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a50      	ldr	r2, [pc, #320]	; (8002b7c <HAL_DMA_IRQHandler+0x1dc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d018      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a4e      	ldr	r2, [pc, #312]	; (8002b80 <HAL_DMA_IRQHandler+0x1e0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a4d      	ldr	r2, [pc, #308]	; (8002b84 <HAL_DMA_IRQHandler+0x1e4>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d00e      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a4b      	ldr	r2, [pc, #300]	; (8002b88 <HAL_DMA_IRQHandler+0x1e8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a4a      	ldr	r2, [pc, #296]	; (8002b8c <HAL_DMA_IRQHandler+0x1ec>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d004      	beq.n	8002a72 <HAL_DMA_IRQHandler+0xd2>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a48      	ldr	r2, [pc, #288]	; (8002b90 <HAL_DMA_IRQHandler+0x1f0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_DMA_IRQHandler+0xd6>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_DMA_IRQHandler+0xd8>
 8002a76:	2300      	movs	r3, #0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 842b 	beq.w	80032d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	2208      	movs	r2, #8
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80a2 	beq.w	8002bd8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a2e      	ldr	r2, [pc, #184]	; (8002b54 <HAL_DMA_IRQHandler+0x1b4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d04a      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a2d      	ldr	r2, [pc, #180]	; (8002b58 <HAL_DMA_IRQHandler+0x1b8>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d045      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a2b      	ldr	r2, [pc, #172]	; (8002b5c <HAL_DMA_IRQHandler+0x1bc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d040      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2a      	ldr	r2, [pc, #168]	; (8002b60 <HAL_DMA_IRQHandler+0x1c0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d03b      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a28      	ldr	r2, [pc, #160]	; (8002b64 <HAL_DMA_IRQHandler+0x1c4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d036      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <HAL_DMA_IRQHandler+0x1c8>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d031      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a25      	ldr	r2, [pc, #148]	; (8002b6c <HAL_DMA_IRQHandler+0x1cc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d02c      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <HAL_DMA_IRQHandler+0x1d0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d027      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a22      	ldr	r2, [pc, #136]	; (8002b74 <HAL_DMA_IRQHandler+0x1d4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d022      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_DMA_IRQHandler+0x1d8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d01d      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1f      	ldr	r2, [pc, #124]	; (8002b7c <HAL_DMA_IRQHandler+0x1dc>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d018      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1e      	ldr	r2, [pc, #120]	; (8002b80 <HAL_DMA_IRQHandler+0x1e0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d013      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1c      	ldr	r2, [pc, #112]	; (8002b84 <HAL_DMA_IRQHandler+0x1e4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00e      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1b      	ldr	r2, [pc, #108]	; (8002b88 <HAL_DMA_IRQHandler+0x1e8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d009      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <HAL_DMA_IRQHandler+0x1ec>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d004      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x194>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_DMA_IRQHandler+0x1f0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d12f      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x1f4>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	bf14      	ite	ne
 8002b42:	2301      	movne	r3, #1
 8002b44:	2300      	moveq	r3, #0
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	e02e      	b.n	8002ba8 <HAL_DMA_IRQHandler+0x208>
 8002b4a:	bf00      	nop
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	1b4e81b5 	.word	0x1b4e81b5
 8002b54:	40020010 	.word	0x40020010
 8002b58:	40020028 	.word	0x40020028
 8002b5c:	40020040 	.word	0x40020040
 8002b60:	40020058 	.word	0x40020058
 8002b64:	40020070 	.word	0x40020070
 8002b68:	40020088 	.word	0x40020088
 8002b6c:	400200a0 	.word	0x400200a0
 8002b70:	400200b8 	.word	0x400200b8
 8002b74:	40020410 	.word	0x40020410
 8002b78:	40020428 	.word	0x40020428
 8002b7c:	40020440 	.word	0x40020440
 8002b80:	40020458 	.word	0x40020458
 8002b84:	40020470 	.word	0x40020470
 8002b88:	40020488 	.word	0x40020488
 8002b8c:	400204a0 	.word	0x400204a0
 8002b90:	400204b8 	.word	0x400204b8
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	bf14      	ite	ne
 8002ba2:	2301      	movne	r3, #1
 8002ba4:	2300      	moveq	r3, #0
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0204 	bic.w	r2, r2, #4
 8002bba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	2208      	movs	r2, #8
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	f003 031f 	and.w	r3, r3, #31
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	fa22 f303 	lsr.w	r3, r2, r3
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d06e      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a69      	ldr	r2, [pc, #420]	; (8002d98 <HAL_DMA_IRQHandler+0x3f8>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d04a      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a67      	ldr	r2, [pc, #412]	; (8002d9c <HAL_DMA_IRQHandler+0x3fc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d045      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a66      	ldr	r2, [pc, #408]	; (8002da0 <HAL_DMA_IRQHandler+0x400>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d040      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a64      	ldr	r2, [pc, #400]	; (8002da4 <HAL_DMA_IRQHandler+0x404>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d03b      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a63      	ldr	r2, [pc, #396]	; (8002da8 <HAL_DMA_IRQHandler+0x408>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d036      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a61      	ldr	r2, [pc, #388]	; (8002dac <HAL_DMA_IRQHandler+0x40c>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d031      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a60      	ldr	r2, [pc, #384]	; (8002db0 <HAL_DMA_IRQHandler+0x410>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d02c      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_DMA_IRQHandler+0x414>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d027      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a5d      	ldr	r2, [pc, #372]	; (8002db8 <HAL_DMA_IRQHandler+0x418>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d022      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <HAL_DMA_IRQHandler+0x41c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a5a      	ldr	r2, [pc, #360]	; (8002dc0 <HAL_DMA_IRQHandler+0x420>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d018      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a58      	ldr	r2, [pc, #352]	; (8002dc4 <HAL_DMA_IRQHandler+0x424>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d013      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a57      	ldr	r2, [pc, #348]	; (8002dc8 <HAL_DMA_IRQHandler+0x428>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00e      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a55      	ldr	r2, [pc, #340]	; (8002dcc <HAL_DMA_IRQHandler+0x42c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d009      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a54      	ldr	r2, [pc, #336]	; (8002dd0 <HAL_DMA_IRQHandler+0x430>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d004      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x2ee>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_DMA_IRQHandler+0x434>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10a      	bne.n	8002ca4 <HAL_DMA_IRQHandler+0x304>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	e003      	b.n	8002cac <HAL_DMA_IRQHandler+0x30c>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00d      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	2201      	movs	r2, #1
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f043 0202 	orr.w	r2, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 808f 	beq.w	8002e00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <HAL_DMA_IRQHandler+0x3f8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d04a      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2a      	ldr	r2, [pc, #168]	; (8002d9c <HAL_DMA_IRQHandler+0x3fc>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d045      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a29      	ldr	r2, [pc, #164]	; (8002da0 <HAL_DMA_IRQHandler+0x400>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d040      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_DMA_IRQHandler+0x404>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d03b      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_DMA_IRQHandler+0x408>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d036      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a24      	ldr	r2, [pc, #144]	; (8002dac <HAL_DMA_IRQHandler+0x40c>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d031      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_DMA_IRQHandler+0x410>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d02c      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a21      	ldr	r2, [pc, #132]	; (8002db4 <HAL_DMA_IRQHandler+0x414>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d027      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a20      	ldr	r2, [pc, #128]	; (8002db8 <HAL_DMA_IRQHandler+0x418>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <HAL_DMA_IRQHandler+0x41c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d01d      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1d      	ldr	r2, [pc, #116]	; (8002dc0 <HAL_DMA_IRQHandler+0x420>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1b      	ldr	r2, [pc, #108]	; (8002dc4 <HAL_DMA_IRQHandler+0x424>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d013      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <HAL_DMA_IRQHandler+0x428>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_DMA_IRQHandler+0x42c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_DMA_IRQHandler+0x430>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x3e2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <HAL_DMA_IRQHandler+0x434>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12a      	bne.n	8002dd8 <HAL_DMA_IRQHandler+0x438>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf14      	ite	ne
 8002d90:	2301      	movne	r3, #1
 8002d92:	2300      	moveq	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e023      	b.n	8002de0 <HAL_DMA_IRQHandler+0x440>
 8002d98:	40020010 	.word	0x40020010
 8002d9c:	40020028 	.word	0x40020028
 8002da0:	40020040 	.word	0x40020040
 8002da4:	40020058 	.word	0x40020058
 8002da8:	40020070 	.word	0x40020070
 8002dac:	40020088 	.word	0x40020088
 8002db0:	400200a0 	.word	0x400200a0
 8002db4:	400200b8 	.word	0x400200b8
 8002db8:	40020410 	.word	0x40020410
 8002dbc:	40020428 	.word	0x40020428
 8002dc0:	40020440 	.word	0x40020440
 8002dc4:	40020458 	.word	0x40020458
 8002dc8:	40020470 	.word	0x40020470
 8002dcc:	40020488 	.word	0x40020488
 8002dd0:	400204a0 	.word	0x400204a0
 8002dd4:	400204b8 	.word	0x400204b8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2300      	movs	r3, #0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00d      	beq.n	8002e00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2204      	movs	r2, #4
 8002dee:	409a      	lsls	r2, r3
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	f043 0204 	orr.w	r2, r3, #4
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	f003 031f 	and.w	r3, r3, #31
 8002e08:	2210      	movs	r2, #16
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a6 	beq.w	8002f62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a85      	ldr	r2, [pc, #532]	; (8003030 <HAL_DMA_IRQHandler+0x690>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d04a      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a83      	ldr	r2, [pc, #524]	; (8003034 <HAL_DMA_IRQHandler+0x694>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d045      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a82      	ldr	r2, [pc, #520]	; (8003038 <HAL_DMA_IRQHandler+0x698>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d040      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a80      	ldr	r2, [pc, #512]	; (800303c <HAL_DMA_IRQHandler+0x69c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d03b      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7f      	ldr	r2, [pc, #508]	; (8003040 <HAL_DMA_IRQHandler+0x6a0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d036      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a7d      	ldr	r2, [pc, #500]	; (8003044 <HAL_DMA_IRQHandler+0x6a4>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d031      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7c      	ldr	r2, [pc, #496]	; (8003048 <HAL_DMA_IRQHandler+0x6a8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d02c      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a7a      	ldr	r2, [pc, #488]	; (800304c <HAL_DMA_IRQHandler+0x6ac>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d027      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a79      	ldr	r2, [pc, #484]	; (8003050 <HAL_DMA_IRQHandler+0x6b0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d022      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a77      	ldr	r2, [pc, #476]	; (8003054 <HAL_DMA_IRQHandler+0x6b4>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01d      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a76      	ldr	r2, [pc, #472]	; (8003058 <HAL_DMA_IRQHandler+0x6b8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d018      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a74      	ldr	r2, [pc, #464]	; (800305c <HAL_DMA_IRQHandler+0x6bc>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a73      	ldr	r2, [pc, #460]	; (8003060 <HAL_DMA_IRQHandler+0x6c0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00e      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a71      	ldr	r2, [pc, #452]	; (8003064 <HAL_DMA_IRQHandler+0x6c4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a70      	ldr	r2, [pc, #448]	; (8003068 <HAL_DMA_IRQHandler+0x6c8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x516>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_DMA_IRQHandler+0x6cc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d10a      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x52c>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e009      	b.n	8002ee0 <HAL_DMA_IRQHandler+0x540>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d03e      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	2210      	movs	r2, #16
 8002eee:	409a      	lsls	r2, r3
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d018      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d108      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d024      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	4798      	blx	r3
 8002f20:	e01f      	b.n	8002f62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01b      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	4798      	blx	r3
 8002f32:	e016      	b.n	8002f62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d107      	bne.n	8002f52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0208 	bic.w	r2, r2, #8
 8002f50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f66:	f003 031f 	and.w	r3, r3, #31
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	409a      	lsls	r2, r3
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8110 	beq.w	8003198 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a2c      	ldr	r2, [pc, #176]	; (8003030 <HAL_DMA_IRQHandler+0x690>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d04a      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_DMA_IRQHandler+0x694>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d045      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a29      	ldr	r2, [pc, #164]	; (8003038 <HAL_DMA_IRQHandler+0x698>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d040      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a28      	ldr	r2, [pc, #160]	; (800303c <HAL_DMA_IRQHandler+0x69c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d03b      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a26      	ldr	r2, [pc, #152]	; (8003040 <HAL_DMA_IRQHandler+0x6a0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d036      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a25      	ldr	r2, [pc, #148]	; (8003044 <HAL_DMA_IRQHandler+0x6a4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d031      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a23      	ldr	r2, [pc, #140]	; (8003048 <HAL_DMA_IRQHandler+0x6a8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d02c      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a22      	ldr	r2, [pc, #136]	; (800304c <HAL_DMA_IRQHandler+0x6ac>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d027      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a20      	ldr	r2, [pc, #128]	; (8003050 <HAL_DMA_IRQHandler+0x6b0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d022      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1f      	ldr	r2, [pc, #124]	; (8003054 <HAL_DMA_IRQHandler+0x6b4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01d      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_DMA_IRQHandler+0x6b8>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d018      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a1c      	ldr	r2, [pc, #112]	; (800305c <HAL_DMA_IRQHandler+0x6bc>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d013      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_DMA_IRQHandler+0x6c0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00e      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a19      	ldr	r2, [pc, #100]	; (8003064 <HAL_DMA_IRQHandler+0x6c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d009      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_DMA_IRQHandler+0x6c8>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d004      	beq.n	8003018 <HAL_DMA_IRQHandler+0x678>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a16      	ldr	r2, [pc, #88]	; (800306c <HAL_DMA_IRQHandler+0x6cc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d12b      	bne.n	8003070 <HAL_DMA_IRQHandler+0x6d0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	e02a      	b.n	8003084 <HAL_DMA_IRQHandler+0x6e4>
 800302e:	bf00      	nop
 8003030:	40020010 	.word	0x40020010
 8003034:	40020028 	.word	0x40020028
 8003038:	40020040 	.word	0x40020040
 800303c:	40020058 	.word	0x40020058
 8003040:	40020070 	.word	0x40020070
 8003044:	40020088 	.word	0x40020088
 8003048:	400200a0 	.word	0x400200a0
 800304c:	400200b8 	.word	0x400200b8
 8003050:	40020410 	.word	0x40020410
 8003054:	40020428 	.word	0x40020428
 8003058:	40020440 	.word	0x40020440
 800305c:	40020458 	.word	0x40020458
 8003060:	40020470 	.word	0x40020470
 8003064:	40020488 	.word	0x40020488
 8003068:	400204a0 	.word	0x400204a0
 800306c:	400204b8 	.word	0x400204b8
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8087 	beq.w	8003198 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	2220      	movs	r2, #32
 8003094:	409a      	lsls	r2, r3
 8003096:	6a3b      	ldr	r3, [r7, #32]
 8003098:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d139      	bne.n	800311a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 0216 	bic.w	r2, r2, #22
 80030b4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	695a      	ldr	r2, [r3, #20]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030c4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d103      	bne.n	80030d6 <HAL_DMA_IRQHandler+0x736>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d007      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0208 	bic.w	r2, r2, #8
 80030e4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	223f      	movs	r2, #63	; 0x3f
 80030f0:	409a      	lsls	r2, r3
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 834a 	beq.w	80037a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
          }
          return;
 8003118:	e344      	b.n	80037a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d018      	beq.n	800315a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d108      	bne.n	8003148 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	2b00      	cmp	r3, #0
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
 8003146:	e027      	b.n	8003198 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e01e      	b.n	8003198 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10f      	bne.n	8003188 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0210 	bic.w	r2, r2, #16
 8003176:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319c:	2b00      	cmp	r3, #0
 800319e:	f000 8306 	beq.w	80037ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8088 	beq.w	80032c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2204      	movs	r2, #4
 80031b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a7a      	ldr	r2, [pc, #488]	; (80033a8 <HAL_DMA_IRQHandler+0xa08>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d04a      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a79      	ldr	r2, [pc, #484]	; (80033ac <HAL_DMA_IRQHandler+0xa0c>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d045      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a77      	ldr	r2, [pc, #476]	; (80033b0 <HAL_DMA_IRQHandler+0xa10>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d040      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a76      	ldr	r2, [pc, #472]	; (80033b4 <HAL_DMA_IRQHandler+0xa14>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d03b      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a74      	ldr	r2, [pc, #464]	; (80033b8 <HAL_DMA_IRQHandler+0xa18>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d036      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a73      	ldr	r2, [pc, #460]	; (80033bc <HAL_DMA_IRQHandler+0xa1c>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d031      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a71      	ldr	r2, [pc, #452]	; (80033c0 <HAL_DMA_IRQHandler+0xa20>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d02c      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a70      	ldr	r2, [pc, #448]	; (80033c4 <HAL_DMA_IRQHandler+0xa24>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d027      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a6e      	ldr	r2, [pc, #440]	; (80033c8 <HAL_DMA_IRQHandler+0xa28>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d022      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a6d      	ldr	r2, [pc, #436]	; (80033cc <HAL_DMA_IRQHandler+0xa2c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d01d      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a6b      	ldr	r2, [pc, #428]	; (80033d0 <HAL_DMA_IRQHandler+0xa30>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d018      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a6a      	ldr	r2, [pc, #424]	; (80033d4 <HAL_DMA_IRQHandler+0xa34>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d013      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a68      	ldr	r2, [pc, #416]	; (80033d8 <HAL_DMA_IRQHandler+0xa38>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00e      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a67      	ldr	r2, [pc, #412]	; (80033dc <HAL_DMA_IRQHandler+0xa3c>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d009      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a65      	ldr	r2, [pc, #404]	; (80033e0 <HAL_DMA_IRQHandler+0xa40>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d004      	beq.n	8003258 <HAL_DMA_IRQHandler+0x8b8>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a64      	ldr	r2, [pc, #400]	; (80033e4 <HAL_DMA_IRQHandler+0xa44>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d108      	bne.n	800326a <HAL_DMA_IRQHandler+0x8ca>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	e007      	b.n	800327a <HAL_DMA_IRQHandler+0x8da>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	3301      	adds	r3, #1
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003282:	429a      	cmp	r2, r3
 8003284:	d307      	bcc.n	8003296 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f2      	bne.n	800327a <HAL_DMA_IRQHandler+0x8da>
 8003294:	e000      	b.n	8003298 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003296:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2203      	movs	r2, #3
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80032b6:	e003      	b.n	80032c0 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 8272 	beq.w	80037ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
 80032d2:	e26c      	b.n	80037ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a43      	ldr	r2, [pc, #268]	; (80033e8 <HAL_DMA_IRQHandler+0xa48>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d022      	beq.n	8003324 <HAL_DMA_IRQHandler+0x984>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a42      	ldr	r2, [pc, #264]	; (80033ec <HAL_DMA_IRQHandler+0xa4c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d01d      	beq.n	8003324 <HAL_DMA_IRQHandler+0x984>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a40      	ldr	r2, [pc, #256]	; (80033f0 <HAL_DMA_IRQHandler+0xa50>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d018      	beq.n	8003324 <HAL_DMA_IRQHandler+0x984>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a3f      	ldr	r2, [pc, #252]	; (80033f4 <HAL_DMA_IRQHandler+0xa54>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d013      	beq.n	8003324 <HAL_DMA_IRQHandler+0x984>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3d      	ldr	r2, [pc, #244]	; (80033f8 <HAL_DMA_IRQHandler+0xa58>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00e      	beq.n	8003324 <HAL_DMA_IRQHandler+0x984>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <HAL_DMA_IRQHandler+0xa5c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d009      	beq.n	8003324 <HAL_DMA_IRQHandler+0x984>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a3a      	ldr	r2, [pc, #232]	; (8003400 <HAL_DMA_IRQHandler+0xa60>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d004      	beq.n	8003324 <HAL_DMA_IRQHandler+0x984>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a39      	ldr	r2, [pc, #228]	; (8003404 <HAL_DMA_IRQHandler+0xa64>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_DMA_IRQHandler+0x988>
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_DMA_IRQHandler+0x98a>
 8003328:	2300      	movs	r3, #0
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 823f 	beq.w	80037ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2204      	movs	r2, #4
 8003342:	409a      	lsls	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80cd 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xb48>
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80c7 	beq.w	80034e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	2204      	movs	r2, #4
 8003364:	409a      	lsls	r2, r3
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d049      	beq.n	8003408 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 8210 	beq.w	80037a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003390:	e20a      	b.n	80037a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	f000 8206 	beq.w	80037a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033a4:	e200      	b.n	80037a8 <HAL_DMA_IRQHandler+0xe08>
 80033a6:	bf00      	nop
 80033a8:	40020010 	.word	0x40020010
 80033ac:	40020028 	.word	0x40020028
 80033b0:	40020040 	.word	0x40020040
 80033b4:	40020058 	.word	0x40020058
 80033b8:	40020070 	.word	0x40020070
 80033bc:	40020088 	.word	0x40020088
 80033c0:	400200a0 	.word	0x400200a0
 80033c4:	400200b8 	.word	0x400200b8
 80033c8:	40020410 	.word	0x40020410
 80033cc:	40020428 	.word	0x40020428
 80033d0:	40020440 	.word	0x40020440
 80033d4:	40020458 	.word	0x40020458
 80033d8:	40020470 	.word	0x40020470
 80033dc:	40020488 	.word	0x40020488
 80033e0:	400204a0 	.word	0x400204a0
 80033e4:	400204b8 	.word	0x400204b8
 80033e8:	58025408 	.word	0x58025408
 80033ec:	5802541c 	.word	0x5802541c
 80033f0:	58025430 	.word	0x58025430
 80033f4:	58025444 	.word	0x58025444
 80033f8:	58025458 	.word	0x58025458
 80033fc:	5802546c 	.word	0x5802546c
 8003400:	58025480 	.word	0x58025480
 8003404:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d160      	bne.n	80034d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a8c      	ldr	r2, [pc, #560]	; (8003648 <HAL_DMA_IRQHandler+0xca8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d04a      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a8a      	ldr	r2, [pc, #552]	; (800364c <HAL_DMA_IRQHandler+0xcac>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d045      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a89      	ldr	r2, [pc, #548]	; (8003650 <HAL_DMA_IRQHandler+0xcb0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d040      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a87      	ldr	r2, [pc, #540]	; (8003654 <HAL_DMA_IRQHandler+0xcb4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d03b      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a86      	ldr	r2, [pc, #536]	; (8003658 <HAL_DMA_IRQHandler+0xcb8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d036      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a84      	ldr	r2, [pc, #528]	; (800365c <HAL_DMA_IRQHandler+0xcbc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d031      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a83      	ldr	r2, [pc, #524]	; (8003660 <HAL_DMA_IRQHandler+0xcc0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d02c      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a81      	ldr	r2, [pc, #516]	; (8003664 <HAL_DMA_IRQHandler+0xcc4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d027      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a80      	ldr	r2, [pc, #512]	; (8003668 <HAL_DMA_IRQHandler+0xcc8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d022      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a7e      	ldr	r2, [pc, #504]	; (800366c <HAL_DMA_IRQHandler+0xccc>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d01d      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7d      	ldr	r2, [pc, #500]	; (8003670 <HAL_DMA_IRQHandler+0xcd0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d018      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a7b      	ldr	r2, [pc, #492]	; (8003674 <HAL_DMA_IRQHandler+0xcd4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d013      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a7a      	ldr	r2, [pc, #488]	; (8003678 <HAL_DMA_IRQHandler+0xcd8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00e      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a78      	ldr	r2, [pc, #480]	; (800367c <HAL_DMA_IRQHandler+0xcdc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d009      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a77      	ldr	r2, [pc, #476]	; (8003680 <HAL_DMA_IRQHandler+0xce0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d004      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xb12>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a75      	ldr	r2, [pc, #468]	; (8003684 <HAL_DMA_IRQHandler+0xce4>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d108      	bne.n	80034c4 <HAL_DMA_IRQHandler+0xb24>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0208 	bic.w	r2, r2, #8
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	e007      	b.n	80034d4 <HAL_DMA_IRQHandler+0xb34>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0204 	bic.w	r2, r2, #4
 80034d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8165 	beq.w	80037a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034e6:	e15f      	b.n	80037a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2202      	movs	r2, #2
 80034f2:	409a      	lsls	r2, r3
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 80c5 	beq.w	8003688 <HAL_DMA_IRQHandler+0xce8>
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80bf 	beq.w	8003688 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	f003 031f 	and.w	r3, r3, #31
 8003512:	2202      	movs	r2, #2
 8003514:	409a      	lsls	r2, r3
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d018      	beq.n	8003556 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 813a 	beq.w	80037ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003540:	e134      	b.n	80037ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 8130 	beq.w	80037ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003554:	e12a      	b.n	80037ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	f003 0320 	and.w	r3, r3, #32
 800355c:	2b00      	cmp	r3, #0
 800355e:	d168      	bne.n	8003632 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_DMA_IRQHandler+0xca8>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d04a      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a37      	ldr	r2, [pc, #220]	; (800364c <HAL_DMA_IRQHandler+0xcac>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d045      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	; (8003650 <HAL_DMA_IRQHandler+0xcb0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d040      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a34      	ldr	r2, [pc, #208]	; (8003654 <HAL_DMA_IRQHandler+0xcb4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d03b      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a32      	ldr	r2, [pc, #200]	; (8003658 <HAL_DMA_IRQHandler+0xcb8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d036      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a31      	ldr	r2, [pc, #196]	; (800365c <HAL_DMA_IRQHandler+0xcbc>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d031      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <HAL_DMA_IRQHandler+0xcc0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d02c      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2e      	ldr	r2, [pc, #184]	; (8003664 <HAL_DMA_IRQHandler+0xcc4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d027      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2c      	ldr	r2, [pc, #176]	; (8003668 <HAL_DMA_IRQHandler+0xcc8>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d022      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a2b      	ldr	r2, [pc, #172]	; (800366c <HAL_DMA_IRQHandler+0xccc>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d01d      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a29      	ldr	r2, [pc, #164]	; (8003670 <HAL_DMA_IRQHandler+0xcd0>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d018      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a28      	ldr	r2, [pc, #160]	; (8003674 <HAL_DMA_IRQHandler+0xcd4>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d013      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a26      	ldr	r2, [pc, #152]	; (8003678 <HAL_DMA_IRQHandler+0xcd8>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00e      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a25      	ldr	r2, [pc, #148]	; (800367c <HAL_DMA_IRQHandler+0xcdc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a23      	ldr	r2, [pc, #140]	; (8003680 <HAL_DMA_IRQHandler+0xce0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <HAL_DMA_IRQHandler+0xc60>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a22      	ldr	r2, [pc, #136]	; (8003684 <HAL_DMA_IRQHandler+0xce4>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d108      	bne.n	8003612 <HAL_DMA_IRQHandler+0xc72>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0214 	bic.w	r2, r2, #20
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e007      	b.n	8003622 <HAL_DMA_IRQHandler+0xc82>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 020a 	bic.w	r2, r2, #10
 8003620:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 80b8 	beq.w	80037ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003644:	e0b2      	b.n	80037ac <HAL_DMA_IRQHandler+0xe0c>
 8003646:	bf00      	nop
 8003648:	40020010 	.word	0x40020010
 800364c:	40020028 	.word	0x40020028
 8003650:	40020040 	.word	0x40020040
 8003654:	40020058 	.word	0x40020058
 8003658:	40020070 	.word	0x40020070
 800365c:	40020088 	.word	0x40020088
 8003660:	400200a0 	.word	0x400200a0
 8003664:	400200b8 	.word	0x400200b8
 8003668:	40020410 	.word	0x40020410
 800366c:	40020428 	.word	0x40020428
 8003670:	40020440 	.word	0x40020440
 8003674:	40020458 	.word	0x40020458
 8003678:	40020470 	.word	0x40020470
 800367c:	40020488 	.word	0x40020488
 8003680:	400204a0 	.word	0x400204a0
 8003684:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368c:	f003 031f 	and.w	r3, r3, #31
 8003690:	2208      	movs	r2, #8
 8003692:	409a      	lsls	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 8088 	beq.w	80037ae <HAL_DMA_IRQHandler+0xe0e>
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f003 0308 	and.w	r3, r3, #8
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8082 	beq.w	80037ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a41      	ldr	r2, [pc, #260]	; (80037b4 <HAL_DMA_IRQHandler+0xe14>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d04a      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a3f      	ldr	r2, [pc, #252]	; (80037b8 <HAL_DMA_IRQHandler+0xe18>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d045      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a3e      	ldr	r2, [pc, #248]	; (80037bc <HAL_DMA_IRQHandler+0xe1c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d040      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <HAL_DMA_IRQHandler+0xe20>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d03b      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a3b      	ldr	r2, [pc, #236]	; (80037c4 <HAL_DMA_IRQHandler+0xe24>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d036      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a39      	ldr	r2, [pc, #228]	; (80037c8 <HAL_DMA_IRQHandler+0xe28>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d031      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a38      	ldr	r2, [pc, #224]	; (80037cc <HAL_DMA_IRQHandler+0xe2c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d02c      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a36      	ldr	r2, [pc, #216]	; (80037d0 <HAL_DMA_IRQHandler+0xe30>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d027      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a35      	ldr	r2, [pc, #212]	; (80037d4 <HAL_DMA_IRQHandler+0xe34>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d022      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <HAL_DMA_IRQHandler+0xe38>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01d      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a32      	ldr	r2, [pc, #200]	; (80037dc <HAL_DMA_IRQHandler+0xe3c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d018      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a30      	ldr	r2, [pc, #192]	; (80037e0 <HAL_DMA_IRQHandler+0xe40>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d013      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a2f      	ldr	r2, [pc, #188]	; (80037e4 <HAL_DMA_IRQHandler+0xe44>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d00e      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a2d      	ldr	r2, [pc, #180]	; (80037e8 <HAL_DMA_IRQHandler+0xe48>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d009      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a2c      	ldr	r2, [pc, #176]	; (80037ec <HAL_DMA_IRQHandler+0xe4c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_DMA_IRQHandler+0xdaa>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <HAL_DMA_IRQHandler+0xe50>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d108      	bne.n	800375c <HAL_DMA_IRQHandler+0xdbc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 021c 	bic.w	r2, r2, #28
 8003758:	601a      	str	r2, [r3, #0]
 800375a:	e007      	b.n	800376c <HAL_DMA_IRQHandler+0xdcc>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 020e 	bic.w	r2, r2, #14
 800376a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
 80037a2:	e004      	b.n	80037ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80037a4:	bf00      	nop
 80037a6:	e002      	b.n	80037ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037a8:	bf00      	nop
 80037aa:	e000      	b.n	80037ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80037ae:	3728      	adds	r7, #40	; 0x28
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40020010 	.word	0x40020010
 80037b8:	40020028 	.word	0x40020028
 80037bc:	40020040 	.word	0x40020040
 80037c0:	40020058 	.word	0x40020058
 80037c4:	40020070 	.word	0x40020070
 80037c8:	40020088 	.word	0x40020088
 80037cc:	400200a0 	.word	0x400200a0
 80037d0:	400200b8 	.word	0x400200b8
 80037d4:	40020410 	.word	0x40020410
 80037d8:	40020428 	.word	0x40020428
 80037dc:	40020440 	.word	0x40020440
 80037e0:	40020458 	.word	0x40020458
 80037e4:	40020470 	.word	0x40020470
 80037e8:	40020488 	.word	0x40020488
 80037ec:	400204a0 	.word	0x400204a0
 80037f0:	400204b8 	.word	0x400204b8

080037f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a42      	ldr	r2, [pc, #264]	; (800390c <DMA_CalcBaseAndBitshift+0x118>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d04a      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a41      	ldr	r2, [pc, #260]	; (8003910 <DMA_CalcBaseAndBitshift+0x11c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d045      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3f      	ldr	r2, [pc, #252]	; (8003914 <DMA_CalcBaseAndBitshift+0x120>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d040      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a3e      	ldr	r2, [pc, #248]	; (8003918 <DMA_CalcBaseAndBitshift+0x124>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d03b      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3c      	ldr	r2, [pc, #240]	; (800391c <DMA_CalcBaseAndBitshift+0x128>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d036      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a3b      	ldr	r2, [pc, #236]	; (8003920 <DMA_CalcBaseAndBitshift+0x12c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d031      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a39      	ldr	r2, [pc, #228]	; (8003924 <DMA_CalcBaseAndBitshift+0x130>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d02c      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a38      	ldr	r2, [pc, #224]	; (8003928 <DMA_CalcBaseAndBitshift+0x134>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d027      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a36      	ldr	r2, [pc, #216]	; (800392c <DMA_CalcBaseAndBitshift+0x138>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d022      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a35      	ldr	r2, [pc, #212]	; (8003930 <DMA_CalcBaseAndBitshift+0x13c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d01d      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a33      	ldr	r2, [pc, #204]	; (8003934 <DMA_CalcBaseAndBitshift+0x140>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a32      	ldr	r2, [pc, #200]	; (8003938 <DMA_CalcBaseAndBitshift+0x144>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d013      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a30      	ldr	r2, [pc, #192]	; (800393c <DMA_CalcBaseAndBitshift+0x148>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <DMA_CalcBaseAndBitshift+0x14c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d009      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <DMA_CalcBaseAndBitshift+0x150>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <DMA_CalcBaseAndBitshift+0xa8>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <DMA_CalcBaseAndBitshift+0x154>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d101      	bne.n	80038a0 <DMA_CalcBaseAndBitshift+0xac>
 800389c:	2301      	movs	r3, #1
 800389e:	e000      	b.n	80038a2 <DMA_CalcBaseAndBitshift+0xae>
 80038a0:	2300      	movs	r3, #0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d024      	beq.n	80038f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	3b10      	subs	r3, #16
 80038ae:	4a27      	ldr	r2, [pc, #156]	; (800394c <DMA_CalcBaseAndBitshift+0x158>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	4a24      	ldr	r2, [pc, #144]	; (8003950 <DMA_CalcBaseAndBitshift+0x15c>)
 80038c0:	5cd3      	ldrb	r3, [r2, r3]
 80038c2:	461a      	mov	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	d908      	bls.n	80038e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b1f      	ldr	r3, [pc, #124]	; (8003954 <DMA_CalcBaseAndBitshift+0x160>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	1d1a      	adds	r2, r3, #4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	659a      	str	r2, [r3, #88]	; 0x58
 80038de:	e00d      	b.n	80038fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <DMA_CalcBaseAndBitshift+0x160>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6593      	str	r3, [r2, #88]	; 0x58
 80038ee:	e005      	b.n	80038fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003900:	4618      	mov	r0, r3
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	40020010 	.word	0x40020010
 8003910:	40020028 	.word	0x40020028
 8003914:	40020040 	.word	0x40020040
 8003918:	40020058 	.word	0x40020058
 800391c:	40020070 	.word	0x40020070
 8003920:	40020088 	.word	0x40020088
 8003924:	400200a0 	.word	0x400200a0
 8003928:	400200b8 	.word	0x400200b8
 800392c:	40020410 	.word	0x40020410
 8003930:	40020428 	.word	0x40020428
 8003934:	40020440 	.word	0x40020440
 8003938:	40020458 	.word	0x40020458
 800393c:	40020470 	.word	0x40020470
 8003940:	40020488 	.word	0x40020488
 8003944:	400204a0 	.word	0x400204a0
 8003948:	400204b8 	.word	0x400204b8
 800394c:	aaaaaaab 	.word	0xaaaaaaab
 8003950:	0802104c 	.word	0x0802104c
 8003954:	fffffc00 	.word	0xfffffc00

08003958 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d120      	bne.n	80039ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003970:	2b03      	cmp	r3, #3
 8003972:	d858      	bhi.n	8003a26 <DMA_CheckFifoParam+0xce>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <DMA_CheckFifoParam+0x24>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	0800398d 	.word	0x0800398d
 8003980:	0800399f 	.word	0x0800399f
 8003984:	0800398d 	.word	0x0800398d
 8003988:	08003a27 	.word	0x08003a27
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d048      	beq.n	8003a2a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800399c:	e045      	b.n	8003a2a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039a6:	d142      	bne.n	8003a2e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039ac:	e03f      	b.n	8003a2e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039b6:	d123      	bne.n	8003a00 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d838      	bhi.n	8003a32 <DMA_CheckFifoParam+0xda>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <DMA_CheckFifoParam+0x70>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039df 	.word	0x080039df
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	080039f1 	.word	0x080039f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
        break;
 80039dc:	e030      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d025      	beq.n	8003a36 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039ee:	e022      	b.n	8003a36 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f8:	d11f      	bne.n	8003a3a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80039fe:	e01c      	b.n	8003a3a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d902      	bls.n	8003a0e <DMA_CheckFifoParam+0xb6>
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d003      	beq.n	8003a14 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003a0c:	e018      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
        break;
 8003a12:	e015      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
    break;
 8003a24:	e00b      	b.n	8003a3e <DMA_CheckFifoParam+0xe6>
        break;
 8003a26:	bf00      	nop
 8003a28:	e00a      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
        break;
 8003a2a:	bf00      	nop
 8003a2c:	e008      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
        break;
 8003a2e:	bf00      	nop
 8003a30:	e006      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
        break;
 8003a32:	bf00      	nop
 8003a34:	e004      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
        break;
 8003a36:	bf00      	nop
 8003a38:	e002      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
        break;
 8003a3a:	bf00      	nop
 8003a3c:	e000      	b.n	8003a40 <DMA_CheckFifoParam+0xe8>
    break;
 8003a3e:	bf00      	nop
    }
  }

  return status;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop

08003a50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a38      	ldr	r2, [pc, #224]	; (8003b44 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d022      	beq.n	8003aae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a36      	ldr	r2, [pc, #216]	; (8003b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d01d      	beq.n	8003aae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a35      	ldr	r2, [pc, #212]	; (8003b4c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d018      	beq.n	8003aae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a33      	ldr	r2, [pc, #204]	; (8003b50 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a32      	ldr	r2, [pc, #200]	; (8003b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00e      	beq.n	8003aae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d101      	bne.n	8003ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01a      	beq.n	8003aee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	3b08      	subs	r3, #8
 8003ac0:	4a28      	ldr	r2, [pc, #160]	; (8003b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a24      	ldr	r2, [pc, #144]	; (8003b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003adc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f003 031f 	and.w	r3, r3, #31
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	409a      	lsls	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003aec:	e024      	b.n	8003b38 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	3b10      	subs	r3, #16
 8003af6:	4a1e      	ldr	r2, [pc, #120]	; (8003b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	091b      	lsrs	r3, r3, #4
 8003afe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d806      	bhi.n	8003b16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d902      	bls.n	8003b16 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3308      	adds	r3, #8
 8003b14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4b18      	ldr	r3, [pc, #96]	; (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003b1a:	4413      	add	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	461a      	mov	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003b28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2201      	movs	r2, #1
 8003b32:	409a      	lsls	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	58025408 	.word	0x58025408
 8003b48:	5802541c 	.word	0x5802541c
 8003b4c:	58025430 	.word	0x58025430
 8003b50:	58025444 	.word	0x58025444
 8003b54:	58025458 	.word	0x58025458
 8003b58:	5802546c 	.word	0x5802546c
 8003b5c:	58025480 	.word	0x58025480
 8003b60:	58025494 	.word	0x58025494
 8003b64:	cccccccd 	.word	0xcccccccd
 8003b68:	16009600 	.word	0x16009600
 8003b6c:	58025880 	.word	0x58025880
 8003b70:	aaaaaaab 	.word	0xaaaaaaab
 8003b74:	400204b8 	.word	0x400204b8
 8003b78:	4002040f 	.word	0x4002040f
 8003b7c:	10008200 	.word	0x10008200
 8003b80:	40020880 	.word	0x40020880

08003b84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04a      	beq.n	8003c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d847      	bhi.n	8003c30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a25      	ldr	r2, [pc, #148]	; (8003c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d022      	beq.n	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d01d      	beq.n	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d018      	beq.n	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d013      	beq.n	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a1f      	ldr	r2, [pc, #124]	; (8003c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00e      	beq.n	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a1e      	ldr	r2, [pc, #120]	; (8003c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d009      	beq.n	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a1c      	ldr	r2, [pc, #112]	; (8003c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d004      	beq.n	8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a1b      	ldr	r2, [pc, #108]	; (8003c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d101      	bne.n	8003bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	461a      	mov	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003c0c:	671a      	str	r2, [r3, #112]	; 0x70
 8003c0e:	e009      	b.n	8003c24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	4b14      	ldr	r3, [pc, #80]	; (8003c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003c14:	4413      	add	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	461a      	mov	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a11      	ldr	r2, [pc, #68]	; (8003c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003c22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	2201      	movs	r2, #1
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003c30:	bf00      	nop
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	58025408 	.word	0x58025408
 8003c40:	5802541c 	.word	0x5802541c
 8003c44:	58025430 	.word	0x58025430
 8003c48:	58025444 	.word	0x58025444
 8003c4c:	58025458 	.word	0x58025458
 8003c50:	5802546c 	.word	0x5802546c
 8003c54:	58025480 	.word	0x58025480
 8003c58:	58025494 	.word	0x58025494
 8003c5c:	1600963f 	.word	0x1600963f
 8003c60:	58025940 	.word	0x58025940
 8003c64:	1000823f 	.word	0x1000823f
 8003c68:	40020940 	.word	0x40020940

08003c6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e0c6      	b.n	8003e0c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d102      	bne.n	8003c8c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f007 fb50 	bl	800b32c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2223      	movs	r2, #35	; 0x23
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c92:	4b60      	ldr	r3, [pc, #384]	; (8003e14 <HAL_ETH_Init+0x1a8>)
 8003c94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c98:	4a5e      	ldr	r2, [pc, #376]	; (8003e14 <HAL_ETH_Init+0x1a8>)
 8003c9a:	f043 0302 	orr.w	r3, r3, #2
 8003c9e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	; (8003e14 <HAL_ETH_Init+0x1a8>)
 8003ca4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	60bb      	str	r3, [r7, #8]
 8003cae:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	7a1b      	ldrb	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d103      	bne.n	8003cc0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f7fd ffdf 	bl	8001c7c <HAL_SYSCFG_ETHInterfaceSelect>
 8003cbe:	e003      	b.n	8003cc8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003cc0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003cc4:	f7fd ffda 	bl	8001c7c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cde:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ce0:	f7fd ffc0 	bl	8001c64 <HAL_GetTick>
 8003ce4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003ce6:	e00f      	b.n	8003d08 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003ce8:	f7fd ffbc 	bl	8001c64 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003cf6:	d907      	bls.n	8003d08 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	22e0      	movs	r2, #224	; 0xe0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e081      	b.n	8003e0c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1e6      	bne.n	8003ce8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f001 fad4 	bl	80052c8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003d20:	f002 ff14 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <HAL_ETH_Init+0x1ac>)
 8003d28:	fba3 2302 	umull	r2, r3, r3, r2
 8003d2c:	0c9a      	lsrs	r2, r3, #18
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3a01      	subs	r2, #1
 8003d34:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f001 fa27 	bl	800518c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003d54:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003d58:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	22e0      	movs	r2, #224	; 0xe0
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e04a      	b.n	8003e0c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d7e:	4413      	add	r3, r2
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <HAL_ETH_Init+0x1b0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6952      	ldr	r2, [r2, #20]
 8003d8a:	0052      	lsls	r2, r2, #1
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	6809      	ldr	r1, [r1, #0]
 8003d90:	431a      	orrs	r2, r3
 8003d92:	f241 1308 	movw	r3, #4360	; 0x1108
 8003d96:	440b      	add	r3, r1
 8003d98:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 faec 	bl	8005378 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f001 fb30 	bl	8005406 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	3305      	adds	r3, #5
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	021a      	lsls	r2, r3, #8
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	3304      	adds	r3, #4
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	4619      	mov	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	3303      	adds	r3, #3
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	061a      	lsls	r2, r3, #24
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	3302      	adds	r3, #2
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	041b      	lsls	r3, r3, #16
 8003dd8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	3301      	adds	r3, #1
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003de4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003df2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003df4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2210      	movs	r2, #16
 8003e02:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2210      	movs	r2, #16
 8003e08:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	58024400 	.word	0x58024400
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	ffff8001 	.word	0xffff8001

08003e20 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	330a      	adds	r3, #10
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <HAL_ETH_DescAssignMemory+0x28>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d904      	bls.n	8003e52 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Return Error */
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e021      	b.n	8003e96 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d00b      	beq.n	8003e88 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8003e76:	683a      	ldr	r2, [r7, #0]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b085      	sub	sp, #20
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d174      	bne.n	8003f9c <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2223      	movs	r2, #35	; 0x23
 8003eb6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	e00f      	b.n	8003ede <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	330a      	adds	r3, #10
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	3301      	adds	r3, #1
 8003edc:	60fb      	str	r3, [r7, #12]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d9ec      	bls.n	8003ebe <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0202 	orr.w	r2, r2, #2
 8003ef8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f042 0201 	orr.w	r2, r2, #1
 8003f08:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0201 	orr.w	r2, r2, #1
 8003f1a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	f241 1304 	movw	r3, #4356	; 0x1104
 8003f26:	4413      	add	r3, r2
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6811      	ldr	r1, [r2, #0]
 8003f2e:	f043 0201 	orr.w	r2, r3, #1
 8003f32:	f241 1304 	movw	r3, #4356	; 0x1104
 8003f36:	440b      	add	r3, r1
 8003f38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f42:	4413      	add	r3, r2
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6811      	ldr	r1, [r2, #0]
 8003f4a:	f043 0201 	orr.w	r2, r3, #1
 8003f4e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003f52:	440b      	add	r3, r1
 8003f54:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8003f68:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003f6c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	f241 1334 	movw	r3, #4404	; 0x1134
 8003f76:	4413      	add	r3, r2
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6811      	ldr	r1, [r2, #0]
 8003f7e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8003f82:	431a      	orrs	r2, r3
 8003f84:	f241 1334 	movw	r3, #4404	; 0x1134
 8003f88:	440b      	add	r3, r1
 8003f8a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2210      	movs	r2, #16
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2222      	movs	r2, #34	; 0x22
 8003f96:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d067      	beq.n	800408c <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2223      	movs	r2, #35	; 0x23
 8003fc0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Disable intrrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	f241 1334 	movw	r3, #4404	; 0x1134
 8003fca:	4413      	add	r3, r2
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6811      	ldr	r1, [r2, #0]
 8003fd2:	4a32      	ldr	r2, [pc, #200]	; (800409c <HAL_ETH_Stop_IT+0xf0>)
 8003fd4:	401a      	ands	r2, r3
 8003fd6:	f241 1334 	movw	r3, #4404	; 0x1134
 8003fda:	440b      	add	r3, r1
 8003fdc:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	f241 1304 	movw	r3, #4356	; 0x1104
 8003fe6:	4413      	add	r3, r2
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	6811      	ldr	r1, [r2, #0]
 8003fee:	f023 0201 	bic.w	r2, r3, #1
 8003ff2:	f241 1304 	movw	r3, #4356	; 0x1104
 8003ff6:	440b      	add	r3, r1
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	f241 1308 	movw	r3, #4360	; 0x1108
 8004002:	4413      	add	r3, r2
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6811      	ldr	r1, [r2, #0]
 800400a:	f023 0201 	bic.w	r2, r3, #1
 800400e:	f241 1308 	movw	r3, #4360	; 0x1108
 8004012:	440b      	add	r3, r1
 8004014:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0201 	bic.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0202 	bic.w	r2, r2, #2
 8004048:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	e00f      	b.n	8004070 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	330a      	adds	r3, #10
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	4413      	add	r3, r2
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3301      	adds	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b03      	cmp	r3, #3
 8004074:	d9ec      	bls.n	8004050 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	64da      	str	r2, [r3, #76]	; 0x4c

    heth->gState = HAL_ETH_STATE_READY;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2210      	movs	r2, #16
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
    heth->RxState = HAL_ETH_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2210      	movs	r2, #16
 8004086:	659a      	str	r2, [r3, #88]	; 0x58

    /* Return function status */
    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	ffff2fbe 	.word	0xffff2fbe

080040a0 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d107      	bne.n	80040c2 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b6:	f043 0201 	orr.w	r2, r3, #1
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e073      	b.n	80041aa <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c6:	2b10      	cmp	r3, #16
 80040c8:	d16e      	bne.n	80041a8 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80040ca:	2200      	movs	r2, #0
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f001 f9f6 	bl	80054c0 <ETH_Prepare_Tx_Descriptors>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	f043 0202 	orr.w	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e05f      	b.n	80041aa <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3206      	adds	r2, #6
 80040f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	629a      	str	r2, [r3, #40]	; 0x28
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	2b03      	cmp	r3, #3
 8004108:	d904      	bls.n	8004114 <HAL_ETH_Transmit+0x74>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	1f1a      	subs	r2, r3, #4
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	3106      	adds	r1, #6
 8004120:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8004124:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004128:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800412a:	f7fd fd9b 	bl	8001c64 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occured */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8004130:	e034      	b.n	800419c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004148:	f043 0208 	orr.w	r2, r3, #8
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	65da      	str	r2, [r3, #92]	; 0x5c
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	661a      	str	r2, [r3, #96]	; 0x60
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	22e0      	movs	r2, #224	; 0xe0
 8004162:	655a      	str	r2, [r3, #84]	; 0x54
        /* Return function status */
        return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e020      	b.n	80041aa <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d015      	beq.n	800419c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8004170:	f7fd fd78 	bl	8001c64 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	429a      	cmp	r2, r3
 800417e:	d302      	bcc.n	8004186 <HAL_ETH_Transmit+0xe6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10a      	bne.n	800419c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418a:	f043 0204 	orr.w	r2, r3, #4
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	65da      	str	r2, [r3, #92]	; 0x5c
          heth->gState = HAL_ETH_STATE_ERROR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	22e0      	movs	r2, #224	; 0xe0
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e006      	b.n	80041aa <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	dbc6      	blt.n	8004132 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e000      	b.n	80041aa <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b089      	sub	sp, #36	; 0x24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	332c      	adds	r3, #44	; 0x2c
 80041be:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041ce:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d06b      	beq.n	80042bc <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	e0ce      	b.n	8004386 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	3301      	adds	r3, #1
 80041ec:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d036      	beq.n	8004268 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3301      	adds	r3, #1
 80041fe:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d101      	bne.n	800420a <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3301      	adds	r3, #1
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b03      	cmp	r3, #3
 8004214:	d902      	bls.n	800421c <HAL_ETH_IsRxDataAvailable+0x6a>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3b04      	subs	r3, #4
 800421a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004224:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	db11      	blt.n	8004252 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2201      	movs	r2, #1
 800423e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d902      	bls.n	8004252 <HAL_ETH_IsRxDataAvailable+0xa0>
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	3b04      	subs	r3, #4
 8004250:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	69fa      	ldr	r2, [r7, #28]
 8004256:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8004264:	2301      	movs	r3, #1
 8004266:	e08e      	b.n	8004386 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d012      	beq.n	800429a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	3301      	adds	r3, #1
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d902      	bls.n	800428e <HAL_ETH_IsRxDataAvailable+0xdc>
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3b04      	subs	r3, #4
 800428c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	69fa      	ldr	r2, [r7, #28]
 8004292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e010      	b.n	80042bc <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	3301      	adds	r3, #1
 800429e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d902      	bls.n	80042b2 <HAL_ETH_IsRxDataAvailable+0x100>
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	3b04      	subs	r3, #4
 80042b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	69fa      	ldr	r2, [r7, #28]
 80042b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ba:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	db02      	blt.n	80042ca <HAL_ETH_IsRxDataAvailable+0x118>
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d98e      	bls.n	80041e8 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d056      	beq.n	800437e <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042e8:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	e03b      	b.n	8004368 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80042fe:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	3b01      	subs	r3, #1
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	429a      	cmp	r2, r3
 8004344:	d20d      	bcs.n	8004362 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3301      	adds	r3, #1
 800434a:	61fb      	str	r3, [r7, #28]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d902      	bls.n	8004358 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3b04      	subs	r3, #4
 8004356:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004360:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	3301      	adds	r3, #1
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	429a      	cmp	r2, r3
 800436e:	d3bf      	bcc.n	80042f0 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6819      	ldr	r1, [r3, #0]
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	f241 1328 	movw	r3, #4392	; 0x1128
 800437a:	440b      	add	r3, r1
 800437c:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	2200      	movs	r2, #0
 8004382:	619a      	str	r2, [r3, #24]

  return 0;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3724      	adds	r7, #36	; 0x24
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b08a      	sub	sp, #40	; 0x28
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	332c      	adds	r3, #44	; 0x2c
 80043a0:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 80043a8:	2300      	movs	r3, #0
 80043aa:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043b4:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	65da      	str	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e07d      	b.n	80044c6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7ff feed 	bl	80041b2 <HAL_ETH_IsRxDataAvailable>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e071      	b.n	80044c6 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is splitted into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	623b      	str	r3, [r7, #32]
 80043f6:	e031      	b.n	800445c <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	461a      	mov	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	461a      	mov	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695a      	ldr	r2, [r3, #20]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004432:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	3301      	adds	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	2b03      	cmp	r3, #3
 800443e:	d902      	bls.n	8004446 <HAL_ETH_GetRxDataBuffer+0xb4>
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	3b04      	subs	r3, #4
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	3301      	adds	r3, #1
 800445a:	623b      	str	r3, [r7, #32]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	3b01      	subs	r3, #1
 8004462:	6a3a      	ldr	r2, [r7, #32]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3c7      	bcc.n	80043f8 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	461a      	mov	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	429a      	cmp	r2, r3
 8004488:	d803      	bhi.n	8004492 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	605a      	str	r2, [r3, #4]
 8004490:	e018      	b.n	80044c4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d012      	beq.n	80044c0 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	461a      	mov	r2, r3
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	1ad2      	subs	r2, r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	e001      	b.n	80044c4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e000      	b.n	80044c6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3728      	adds	r7, #40	; 0x28
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b086      	sub	sp, #24
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	332c      	adds	r3, #44	; 0x2c
 80044dc:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff fe60 	bl	80041b2 <HAL_ETH_IsRxDataAvailable>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e017      	b.n	800452c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4413      	add	r3, r2
 8004504:	3b01      	subs	r3, #1
 8004506:	617b      	str	r3, [r7, #20]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b03      	cmp	r3, #3
 800450c:	d902      	bls.n	8004514 <HAL_ETH_GetRxDataLength+0x46>
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	3b04      	subs	r3, #4
 8004512:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800451c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8004534:	b480      	push	{r7}
 8004536:	b089      	sub	sp, #36	; 0x24
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	332c      	adds	r3, #44	; 0x2c
 8004540:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004550:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e057      	b.n	8004614 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d002      	beq.n	8004572 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	3301      	adds	r3, #1
 8004570:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
 8004576:	e03b      	b.n	80045f0 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	691a      	ldr	r2, [r3, #16]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004586:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d009      	beq.n	80045a4 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	695a      	ldr	r2, [r3, #20]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20d      	bcs.n	80045ea <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d902      	bls.n	80045e0 <HAL_ETH_BuildRxDescriptors+0xac>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3b04      	subs	r3, #4
 80045de:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e8:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	3301      	adds	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d3bf      	bcc.n	8004578 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6819      	ldr	r1, [r3, #0]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	f241 1328 	movw	r3, #4392	; 0x1128
 8004602:	440b      	add	r3, r1
 8004604:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3724      	adds	r7, #36	; 0x24
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004636:	2b40      	cmp	r3, #64	; 0x40
 8004638:	d113      	bne.n	8004662 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004642:	4413      	add	r3, r2
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d109      	bne.n	8004662 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f006 ff42 	bl	800b4d8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800465c:	f248 0240 	movw	r2, #32832	; 0x8040
 8004660:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d113      	bne.n	800469c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	f241 1334 	movw	r3, #4404	; 0x1134
 800467c:	4413      	add	r3, r2
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b01      	cmp	r3, #1
 8004686:	d109      	bne.n	800469c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f8b3 	bl	80047f4 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004696:	f248 0201 	movw	r2, #32769	; 0x8001
 800469a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046ae:	d149      	bne.n	8004744 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	f241 1334 	movw	r3, #4404	; 0x1134
 80046b8:	4413      	add	r3, r2
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046c4:	d13e      	bne.n	8004744 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ca:	f043 0208 	orr.w	r2, r3, #8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* if fatal bus error occured */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046e4:	d11b      	bne.n	800471e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	f241 1302 	movw	r3, #4354	; 0x1102
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6613      	str	r3, [r2, #96]	; 0x60

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8004702:	4413      	add	r3, r2
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	6811      	ldr	r1, [r2, #0]
 800470a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800470e:	f241 1334 	movw	r3, #4404	; 0x1134
 8004712:	440b      	add	r3, r1
 8004714:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	22e0      	movs	r2, #224	; 0xe0
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
 800471c:	e00f      	b.n	800473e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	661a      	str	r2, [r3, #96]	; 0x60
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004738:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800473c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f862 	bl	8004808 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800474c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004750:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004754:	d10e      	bne.n	8004774 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_ERROR;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	22e0      	movs	r2, #224	; 0xe0
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 f857 	bl	800481c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b10      	cmp	r3, #16
 8004782:	d10d      	bne.n	80047a0 <HAL_ETH_IRQHandler+0x180>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800478c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f84b 	bl	8004830 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d10d      	bne.n	80047cc <HAL_ETH_IRQHandler+0x1ac>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80047b8:	f003 020f 	and.w	r2, r3, #15
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f83f 	bl	8004844 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <HAL_ETH_IRQHandler+0x1d0>)
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <HAL_ETH_IRQHandler+0x1c6>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_ETH_IRQHandler+0x1d0>)
 80047da:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80047de:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f839 	bl	8004858 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	58000080 	.word	0x58000080

080047f4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e03e      	b.n	800490c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004896:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	055b      	lsls	r3, r3, #21
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	041b      	lsls	r3, r3, #16
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f043 030c 	orr.w	r3, r3, #12
 80048ba:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80048ce:	f7fd f9c9 	bl	8001c64 <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80048d4:	e009      	b.n	80048ea <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80048d6:	f7fd f9c5 	bl	8001c64 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048e4:	d901      	bls.n	80048ea <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e010      	b.n	800490c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1ed      	bne.n	80048d6 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004902:	b29b      	uxth	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e03c      	b.n	80049b0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800493e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	055b      	lsls	r3, r3, #21
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	041b      	lsls	r3, r3, #16
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 030c 	bic.w	r3, r3, #12
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f043 0301 	orr.w	r3, r3, #1
 800496e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	b29a      	uxth	r2, r3
 8004974:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <HAL_ETH_WritePHYRegister+0xa4>)
 8004976:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800497a:	4a0f      	ldr	r2, [pc, #60]	; (80049b8 <HAL_ETH_WritePHYRegister+0xa4>)
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8004982:	f7fd f96f 	bl	8001c64 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004988:	e009      	b.n	800499e <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800498a:	f7fd f96b 	bl	8001c64 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004998:	d901      	bls.n	800499e <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e008      	b.n	80049b0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1ed      	bne.n	800498a <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40028000 	.word	0x40028000

080049bc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e1c3      	b.n	8004d58 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 020c 	and.w	r2, r3, #12
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	bf14      	ite	ne
 80049ec:	2301      	movne	r3, #1
 80049ee:	2300      	moveq	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bf0c      	ite	eq
 8004a16:	2301      	moveq	r3, #1
 8004a18:	2300      	movne	r3, #0
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf14      	ite	ne
 8004a32:	2301      	movne	r3, #1
 8004a34:	2300      	moveq	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bf0c      	ite	eq
 8004a4c:	2301      	moveq	r3, #1
 8004a4e:	2300      	movne	r3, #0
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	461a      	mov	r2, r3
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bf14      	ite	ne
 8004a66:	2301      	movne	r3, #1
 8004a68:	2300      	moveq	r3, #0
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	bf14      	ite	ne
 8004a80:	2301      	movne	r3, #1
 8004a82:	2300      	moveq	r3, #0
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	461a      	mov	r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bf14      	ite	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	2300      	moveq	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	bf0c      	ite	eq
 8004ad0:	2301      	moveq	r3, #1
 8004ad2:	2300      	movne	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	bf0c      	ite	eq
 8004aea:	2301      	moveq	r3, #1
 8004aec:	2300      	movne	r3, #0
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf14      	ite	ne
 8004b04:	2301      	movne	r3, #1
 8004b06:	2300      	moveq	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	461a      	mov	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	bf14      	ite	ne
 8004b52:	2301      	movne	r3, #1
 8004b54:	2300      	moveq	r3, #0
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	bf0c      	ite	eq
 8004bb0:	2301      	moveq	r3, #1
 8004bb2:	2300      	movne	r3, #0
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	bf14      	ite	ne
 8004bcc:	2301      	movne	r3, #1
 8004bce:	2300      	moveq	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	bf14      	ite	ne
 8004be8:	2301      	movne	r3, #1
 8004bea:	2300      	moveq	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	461a      	mov	r2, r3
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf14      	ite	ne
 8004c04:	2301      	movne	r3, #1
 8004c06:	2300      	moveq	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	0e5b      	lsrs	r3, r3, #25
 8004c1a:	f003 021f 	and.w	r2, r3, #31
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	461a      	mov	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 020f 	and.w	r2, r3, #15
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf14      	ite	ne
 8004c5a:	2301      	movne	r3, #1
 8004c5c:	2300      	moveq	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf0c      	ite	eq
 8004c76:	2301      	moveq	r3, #1
 8004c78:	2300      	movne	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	0c1b      	lsrs	r3, r3, #16
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	bf14      	ite	ne
 8004cb0:	2301      	movne	r3, #1
 8004cb2:	2300      	moveq	r3, #0
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bf14      	ite	ne
 8004cce:	2301      	movne	r3, #1
 8004cd0:	2300      	moveq	r3, #0
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004ce4:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004cf4:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004d22:	f003 0310 	and.w	r3, r3, #16
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bf14      	ite	ne
 8004d2a:	2301      	movne	r3, #1
 8004d2c:	2300      	moveq	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	461a      	mov	r2, r3
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e00a      	b.n	8004d8e <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d105      	bne.n	8004d8c <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8004d80:	6839      	ldr	r1, [r7, #0]
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f860 	bl	8004e48 <ETH_SetMACConfig>

    return HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	e000      	b.n	8004d8e <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004da8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004db0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004db2:	f001 fecb 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8004db6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4a1e      	ldr	r2, [pc, #120]	; (8004e34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d908      	bls.n	8004dd2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d804      	bhi.n	8004dd2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	e027      	b.n	8004e22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a18      	ldr	r2, [pc, #96]	; (8004e38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d908      	bls.n	8004dec <HAL_ETH_SetMDIOClockRange+0x54>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d804      	bhi.n	8004dec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	e01a      	b.n	8004e22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d903      	bls.n	8004dfc <HAL_ETH_SetMDIOClockRange+0x64>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a12      	ldr	r2, [pc, #72]	; (8004e40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d911      	bls.n	8004e20 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4a10      	ldr	r2, [pc, #64]	; (8004e40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d908      	bls.n	8004e16 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a0f      	ldr	r2, [pc, #60]	; (8004e44 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d804      	bhi.n	8004e16 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e005      	b.n	8004e22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	e000      	b.n	8004e22 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004e20:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	01312cff 	.word	0x01312cff
 8004e38:	02160ebf 	.word	0x02160ebf
 8004e3c:	039386ff 	.word	0x039386ff
 8004e40:	05f5e0ff 	.word	0x05f5e0ff
 8004e44:	08f0d17f 	.word	0x08f0d17f

08004e48 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004e5a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	791b      	ldrb	r3, [r3, #4]
 8004e60:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004e62:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	7b1b      	ldrb	r3, [r3, #12]
 8004e68:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004e6a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	7b5b      	ldrb	r3, [r3, #13]
 8004e70:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004e72:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	7b9b      	ldrb	r3, [r3, #14]
 8004e78:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004e7a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	7bdb      	ldrb	r3, [r3, #15]
 8004e80:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004e82:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	7c12      	ldrb	r2, [r2, #16]
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	d102      	bne.n	8004e92 <ETH_SetMACConfig+0x4a>
 8004e8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e90:	e000      	b.n	8004e94 <ETH_SetMACConfig+0x4c>
 8004e92:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004e94:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	7c52      	ldrb	r2, [r2, #17]
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	d102      	bne.n	8004ea4 <ETH_SetMACConfig+0x5c>
 8004e9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ea2:	e000      	b.n	8004ea6 <ETH_SetMACConfig+0x5e>
 8004ea4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004ea6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	7c9b      	ldrb	r3, [r3, #18]
 8004eac:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004eae:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004eb4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004eba:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	7f1b      	ldrb	r3, [r3, #28]
 8004ec0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004ec2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	7f5b      	ldrb	r3, [r3, #29]
 8004ec8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004eca:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	7f92      	ldrb	r2, [r2, #30]
 8004ed0:	2a00      	cmp	r2, #0
 8004ed2:	d102      	bne.n	8004eda <ETH_SetMACConfig+0x92>
 8004ed4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ed8:	e000      	b.n	8004edc <ETH_SetMACConfig+0x94>
 8004eda:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004edc:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	7fdb      	ldrb	r3, [r3, #31]
 8004ee2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004ee4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004eec:	2a00      	cmp	r2, #0
 8004eee:	d102      	bne.n	8004ef6 <ETH_SetMACConfig+0xae>
 8004ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ef4:	e000      	b.n	8004ef8 <ETH_SetMACConfig+0xb0>
 8004ef6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004ef8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004efe:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f06:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004f08:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b56      	ldr	r3, [pc, #344]	; (8005074 <ETH_SetMACConfig+0x22c>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	68f9      	ldr	r1, [r7, #12]
 8004f22:	430b      	orrs	r3, r1
 8004f24:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f32:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f34:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004f3c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004f3e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004f46:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004f48:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	d102      	bne.n	8004f5a <ETH_SetMACConfig+0x112>
 8004f54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f58:	e000      	b.n	8004f5c <ETH_SetMACConfig+0x114>
 8004f5a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004f5c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	4b42      	ldr	r3, [pc, #264]	; (8005078 <ETH_SetMACConfig+0x230>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	68f9      	ldr	r1, [r7, #12]
 8004f76:	430b      	orrs	r3, r1
 8004f78:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f80:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004f86:	4313      	orrs	r3, r2
 8004f88:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68da      	ldr	r2, [r3, #12]
 8004f90:	4b3a      	ldr	r3, [pc, #232]	; (800507c <ETH_SetMACConfig+0x234>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	68f9      	ldr	r1, [r7, #12]
 8004f9a:	430b      	orrs	r3, r1
 8004f9c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004fa4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004faa:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004fb2:	2a00      	cmp	r2, #0
 8004fb4:	d101      	bne.n	8004fba <ETH_SetMACConfig+0x172>
 8004fb6:	2280      	movs	r2, #128	; 0x80
 8004fb8:	e000      	b.n	8004fbc <ETH_SetMACConfig+0x174>
 8004fba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004fbc:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	68f9      	ldr	r1, [r7, #12]
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004fe4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004fec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ffa:	f023 0103 	bic.w	r1, r3, #3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	430a      	orrs	r2, r1
 8005006:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005012:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800502e:	2a00      	cmp	r2, #0
 8005030:	d101      	bne.n	8005036 <ETH_SetMACConfig+0x1ee>
 8005032:	2240      	movs	r2, #64	; 0x40
 8005034:	e000      	b.n	8005038 <ETH_SetMACConfig+0x1f0>
 8005036:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005038:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005040:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005042:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800504a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005058:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	430a      	orrs	r2, r1
 8005064:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005068:	bf00      	nop
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	00048083 	.word	0x00048083
 8005078:	c0f88000 	.word	0xc0f88000
 800507c:	fffffef0 	.word	0xfffffef0

08005080 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b38      	ldr	r3, [pc, #224]	; (8005178 <ETH_SetDMAConfig+0xf8>)
 8005096:	4013      	ands	r3, r2
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	6809      	ldr	r1, [r1, #0]
 80050a0:	431a      	orrs	r2, r3
 80050a2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80050a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	791b      	ldrb	r3, [r3, #4]
 80050ac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	7b1b      	ldrb	r3, [r3, #12]
 80050b8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	f241 0304 	movw	r3, #4100	; 0x1004
 80050c6:	4413      	add	r3, r2
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b2c      	ldr	r3, [pc, #176]	; (800517c <ETH_SetDMAConfig+0xfc>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6811      	ldr	r1, [r2, #0]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	f241 0304 	movw	r3, #4100	; 0x1004
 80050da:	440b      	add	r3, r1
 80050dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	7b5b      	ldrb	r3, [r3, #13]
 80050e2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <ETH_SetDMAConfig+0x100>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6811      	ldr	r1, [r2, #0]
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	431a      	orrs	r2, r3
 8005102:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8005106:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	7d1b      	ldrb	r3, [r3, #20]
 8005110:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005112:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	7f5b      	ldrb	r3, [r3, #29]
 8005118:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	f241 1304 	movw	r3, #4356	; 0x1104
 8005126:	4413      	add	r3, r2
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b16      	ldr	r3, [pc, #88]	; (8005184 <ETH_SetDMAConfig+0x104>)
 800512c:	4013      	ands	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	431a      	orrs	r2, r3
 8005136:	f241 1304 	movw	r3, #4356	; 0x1104
 800513a:	440b      	add	r3, r1
 800513c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	7f1b      	ldrb	r3, [r3, #28]
 8005142:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005148:	4313      	orrs	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	f241 1308 	movw	r3, #4360	; 0x1108
 8005154:	4413      	add	r3, r2
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <ETH_SetDMAConfig+0x108>)
 800515a:	4013      	ands	r3, r2
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6811      	ldr	r1, [r2, #0]
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	431a      	orrs	r2, r3
 8005164:	f241 1308 	movw	r3, #4360	; 0x1108
 8005168:	440b      	add	r3, r1
 800516a:	601a      	str	r2, [r3, #0]
}
 800516c:	bf00      	nop
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	ffff87fd 	.word	0xffff87fd
 800517c:	ffff2ffe 	.word	0xffff2ffe
 8005180:	fffec000 	.word	0xfffec000
 8005184:	ffc0efef 	.word	0xffc0efef
 8005188:	7fc0ffff 	.word	0x7fc0ffff

0800518c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b0a4      	sub	sp, #144	; 0x90
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800519a:	2300      	movs	r3, #0
 800519c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800519e:	2300      	movs	r3, #0
 80051a0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80051b0:	2301      	movs	r3, #1
 80051b2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80051bc:	2300      	movs	r3, #0
 80051be:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80051c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051cc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80051d8:	2300      	movs	r3, #0
 80051da:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80051de:	2300      	movs	r3, #0
 80051e0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80051e4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80051e8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80051f0:	2300      	movs	r3, #0
 80051f2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80051fa:	2300      	movs	r3, #0
 80051fc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005200:	2300      	movs	r3, #0
 8005202:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005206:	2300      	movs	r3, #0
 8005208:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800520a:	2300      	movs	r3, #0
 800520c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800520e:	2300      	movs	r3, #0
 8005210:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005212:	2300      	movs	r3, #0
 8005214:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005224:	2320      	movs	r3, #32
 8005226:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005230:	2300      	movs	r3, #0
 8005232:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005236:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800523c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005240:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005242:	2300      	movs	r3, #0
 8005244:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005248:	2302      	movs	r3, #2
 800524a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800524e:	2300      	movs	r3, #0
 8005250:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800525a:	2300      	movs	r3, #0
 800525c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005260:	2301      	movs	r3, #1
 8005262:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005266:	2300      	movs	r3, #0
 8005268:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005274:	4619      	mov	r1, r3
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fde6 	bl	8004e48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800527c:	2301      	movs	r3, #1
 800527e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005280:	2301      	movs	r3, #1
 8005282:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005284:	2300      	movs	r3, #0
 8005286:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005288:	2300      	movs	r3, #0
 800528a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800528e:	2300      	movs	r3, #0
 8005290:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005292:	2300      	movs	r3, #0
 8005294:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005296:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800529a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800529c:	2300      	movs	r3, #0
 800529e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80052a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80052a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80052ac:	f44f 7306 	mov.w	r3, #536	; 0x218
 80052b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80052b2:	f107 0308 	add.w	r3, r7, #8
 80052b6:	4619      	mov	r1, r3
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f7ff fee1 	bl	8005080 <ETH_SetDMAConfig>
}
 80052be:	bf00      	nop
 80052c0:	3790      	adds	r7, #144	; 0x90
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052d8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052e2:	f001 fc33 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 80052e6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4a1e      	ldr	r2, [pc, #120]	; (8005364 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d908      	bls.n	8005302 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4a1d      	ldr	r2, [pc, #116]	; (8005368 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d804      	bhi.n	8005302 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052fe:	60fb      	str	r3, [r7, #12]
 8005300:	e027      	b.n	8005352 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a18      	ldr	r2, [pc, #96]	; (8005368 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d908      	bls.n	800531c <ETH_MAC_MDIO_ClkConfig+0x54>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a17      	ldr	r2, [pc, #92]	; (800536c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d804      	bhi.n	800531c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005318:	60fb      	str	r3, [r7, #12]
 800531a:	e01a      	b.n	8005352 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d903      	bls.n	800532c <ETH_MAC_MDIO_ClkConfig+0x64>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4a12      	ldr	r2, [pc, #72]	; (8005370 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d911      	bls.n	8005350 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4a10      	ldr	r2, [pc, #64]	; (8005370 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d908      	bls.n	8005346 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4a0f      	ldr	r2, [pc, #60]	; (8005374 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d804      	bhi.n	8005346 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005342:	60fb      	str	r3, [r7, #12]
 8005344:	e005      	b.n	8005352 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e000      	b.n	8005352 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005350:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	01312cff 	.word	0x01312cff
 8005368:	02160ebf 	.word	0x02160ebf
 800536c:	039386ff 	.word	0x039386ff
 8005370:	05f5e0ff 	.word	0x05f5e0ff
 8005374:	08f0d17f 	.word	0x08f0d17f

08005378 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005380:	2300      	movs	r3, #0
 8005382:	60fb      	str	r3, [r7, #12]
 8005384:	e01d      	b.n	80053c2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68d9      	ldr	r1, [r3, #12]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4613      	mov	r3, r2
 800538e:	005b      	lsls	r3, r3, #1
 8005390:	4413      	add	r3, r2
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	440b      	add	r3, r1
 8005396:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2200      	movs	r2, #0
 80053a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	3206      	adds	r2, #6
 80053b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b03      	cmp	r3, #3
 80053c6:	d9de      	bls.n	8005386 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	f241 132c 	movw	r3, #4396	; 0x112c
 80053d6:	4413      	add	r3, r2
 80053d8:	2203      	movs	r2, #3
 80053da:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	68d9      	ldr	r1, [r3, #12]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	f241 1314 	movw	r3, #4372	; 0x1114
 80053e8:	4413      	add	r3, r2
 80053ea:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80053f8:	601a      	str	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005406:	b480      	push	{r7}
 8005408:	b085      	sub	sp, #20
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800540e:	2300      	movs	r3, #0
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e024      	b.n	800545e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6919      	ldr	r1, [r3, #16]
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	4613      	mov	r3, r2
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4413      	add	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	440b      	add	r3, r1
 8005424:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2200      	movs	r2, #0
 8005430:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2200      	movs	r2, #0
 8005442:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	2200      	movs	r2, #0
 8005448:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	6879      	ldr	r1, [r7, #4]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	330a      	adds	r3, #10
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	440b      	add	r3, r1
 8005456:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	3301      	adds	r3, #1
 800545c:	60fb      	str	r3, [r7, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d9d7      	bls.n	8005414 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	f241 1330 	movw	r3, #4400	; 0x1130
 800548a:	4413      	add	r3, r2
 800548c:	2203      	movs	r2, #3
 800548e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6919      	ldr	r1, [r3, #16]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	f241 131c 	movw	r3, #4380	; 0x111c
 800549c:	4413      	add	r3, r2
 800549e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	f241 1328 	movw	r3, #4392	; 0x1128
 80054b0:	4413      	add	r3, r2
 80054b2:	6019      	str	r1, [r3, #0]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b08d      	sub	sp, #52	; 0x34
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3318      	adds	r3, #24
 80054d0:	61bb      	str	r3, [r7, #24]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	617b      	str	r3, [r7, #20]
  uint32_t descnbr = 0, idx;
 80054de:	2300      	movs	r3, #0
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ea:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	61fb      	str	r3, [r7, #28]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fe:	d101      	bne.n	8005504 <ETH_Prepare_Tx_Descriptors+0x44>
  {
    return HAL_ETH_ERROR_BUSY;
 8005500:	2302      	movs	r3, #2
 8005502:	e223      	b.n	800594c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b00      	cmp	r3, #0
 800550e:	d044      	beq.n	800559a <ETH_Prepare_Tx_Descriptors+0xda>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	4b72      	ldr	r3, [pc, #456]	; (80056e0 <ETH_Prepare_Tx_Descriptors+0x220>)
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800551c:	431a      	orrs	r2, r3
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800552a:	6a3b      	ldr	r3, [r7, #32]
 800552c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800553c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d027      	beq.n	800559a <ETH_Prepare_Tx_Descriptors+0xda>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	b29a      	uxth	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	431a      	orrs	r2, r3
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005574:	431a      	orrs	r2, r3
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005588:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005598:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segementation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00e      	beq.n	80055c4 <ETH_Prepare_Tx_Descriptors+0x104>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	689a      	ldr	r2, [r3, #8]
 80055aa:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <ETH_Prepare_Tx_Descriptors+0x224>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	6992      	ldr	r2, [r2, #24]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80055b8:	6a3b      	ldr	r3, [r7, #32]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d105      	bne.n	80055dc <ETH_Prepare_Tx_Descriptors+0x11c>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d030      	beq.n	800563e <ETH_Prepare_Tx_Descriptors+0x17e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80055f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f6:	3301      	adds	r3, #1
 80055f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fc:	2b03      	cmp	r3, #3
 80055fe:	d902      	bls.n	8005606 <ETH_Prepare_Tx_Descriptors+0x146>
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	3b04      	subs	r3, #4
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560e:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	3301      	adds	r3, #1
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800561e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005622:	d10c      	bne.n	800563e <ETH_Prepare_Tx_Descriptors+0x17e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800562c:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800563a:	2302      	movs	r3, #2
 800563c:	e186      	b.n	800594c <ETH_Prepare_Tx_Descriptors+0x48c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	3301      	adds	r3, #1
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	4b24      	ldr	r3, [pc, #144]	; (80056e4 <ETH_Prepare_Tx_Descriptors+0x224>)
 8005654:	4013      	ands	r3, r2
 8005656:	69fa      	ldr	r2, [r7, #28]
 8005658:	6852      	ldr	r2, [r2, #4]
 800565a:	431a      	orrs	r2, r3
 800565c:	6a3b      	ldr	r3, [r7, #32]
 800565e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d012      	beq.n	800568e <ETH_Prepare_Tx_Descriptors+0x1ce>
  {
    txbuffer = txbuffer->next;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800567e:	4013      	ands	r3, r2
 8005680:	69fa      	ldr	r2, [r7, #28]
 8005682:	6852      	ldr	r2, [r2, #4]
 8005684:	0412      	lsls	r2, r2, #16
 8005686:	431a      	orrs	r2, r3
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	e008      	b.n	80056a0 <ETH_Prepare_Tx_Descriptors+0x1e0>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	2200      	movs	r2, #0
 8005692:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <ETH_Prepare_Tx_Descriptors+0x228>)
 800569a:	4013      	ands	r3, r2
 800569c:	6a3a      	ldr	r2, [r7, #32]
 800569e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0310 	and.w	r3, r3, #16
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d021      	beq.n	80056f0 <ETH_Prepare_Tx_Descriptors+0x230>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	6a1b      	ldr	r3, [r3, #32]
 80056b8:	04db      	lsls	r3, r3, #19
 80056ba:	431a      	orrs	r2, r3
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	4b09      	ldr	r3, [pc, #36]	; (80056ec <ETH_Prepare_Tx_Descriptors+0x22c>)
 80056c6:	4013      	ands	r3, r2
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	69d2      	ldr	r2, [r2, #28]
 80056cc:	431a      	orrs	r2, r3
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	e02e      	b.n	800573e <ETH_Prepare_Tx_Descriptors+0x27e>
 80056e0:	ffff0000 	.word	0xffff0000
 80056e4:	ffffc000 	.word	0xffffc000
 80056e8:	c000ffff 	.word	0xc000ffff
 80056ec:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	4b98      	ldr	r3, [pc, #608]	; (8005958 <ETH_Prepare_Tx_Descriptors+0x498>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	6852      	ldr	r2, [r2, #4]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <ETH_Prepare_Tx_Descriptors+0x260>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	431a      	orrs	r2, r3
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <ETH_Prepare_Tx_Descriptors+0x27e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <ETH_Prepare_Tx_Descriptors+0x29c>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005756:	431a      	orrs	r2, r3
 8005758:	6a3b      	ldr	r3, [r7, #32]
 800575a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80c0 	beq.w	800590e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	431a      	orrs	r2, r3
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is splitted into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80057a0:	e0b5      	b.n	800590e <ETH_Prepare_Tx_Descriptors+0x44e>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	3301      	adds	r3, #1
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d902      	bls.n	80057c0 <ETH_Prepare_Tx_Descriptors+0x300>
 80057ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057bc:	3b04      	subs	r3, #4
 80057be:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c8:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057e2:	d126      	bne.n	8005832 <ETH_Prepare_Tx_Descriptors+0x372>
    {
      descidx = firstdescidx;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 80057f2:	2300      	movs	r3, #0
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
 80057f6:	e016      	b.n	8005826 <ETH_Prepare_Tx_Descriptors+0x366>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	3301      	adds	r3, #1
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	2b03      	cmp	r3, #3
 800580e:	d902      	bls.n	8005816 <ETH_Prepare_Tx_Descriptors+0x356>
 8005810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005812:	3b04      	subs	r3, #4
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	3301      	adds	r3, #1
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
 8005826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	429a      	cmp	r2, r3
 800582c:	d3e4      	bcc.n	80057f8 <ETH_Prepare_Tx_Descriptors+0x338>
      }

      return HAL_ETH_ERROR_BUSY;
 800582e:	2302      	movs	r3, #2
 8005830:	e08c      	b.n	800594c <ETH_Prepare_Tx_Descriptors+0x48c>
    }

    descnbr += 1U;
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	3301      	adds	r3, #1
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	461a      	mov	r2, r3
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	4b43      	ldr	r3, [pc, #268]	; (800595c <ETH_Prepare_Tx_Descriptors+0x49c>)
 800584e:	4013      	ands	r3, r2
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	6852      	ldr	r2, [r2, #4]
 8005854:	431a      	orrs	r2, r3
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d012      	beq.n	8005888 <ETH_Prepare_Tx_Descriptors+0x3c8>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	4b3a      	ldr	r3, [pc, #232]	; (8005960 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005878:	4013      	ands	r3, r2
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	6852      	ldr	r2, [r2, #4]
 800587e:	0412      	lsls	r2, r2, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	6a3b      	ldr	r3, [r7, #32]
 8005884:	609a      	str	r2, [r3, #8]
 8005886:	e008      	b.n	800589a <ETH_Prepare_Tx_Descriptors+0x3da>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	2200      	movs	r2, #0
 800588c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8005894:	4013      	ands	r3, r2
 8005896:	6a3a      	ldr	r2, [r7, #32]
 8005898:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0310 	and.w	r3, r3, #16
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00f      	beq.n	80058c6 <ETH_Prepare_Tx_Descriptors+0x406>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	68da      	ldr	r2, [r3, #12]
 80058aa:	4b2e      	ldr	r3, [pc, #184]	; (8005964 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	69d2      	ldr	r2, [r2, #28]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	60da      	str	r2, [r3, #12]
 80058c4:	e017      	b.n	80058f6 <ETH_Prepare_Tx_Descriptors+0x436>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	68da      	ldr	r2, [r3, #12]
 80058ca:	4b23      	ldr	r3, [pc, #140]	; (8005958 <ETH_Prepare_Tx_Descriptors+0x498>)
 80058cc:	4013      	ands	r3, r2
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	6852      	ldr	r2, [r2, #4]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <ETH_Prepare_Tx_Descriptors+0x436>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	60da      	str	r2, [r3, #12]
      }
    }

    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800590a:	6a3b      	ldr	r3, [r7, #32]
 800590c:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f47f af45 	bne.w	80057a2 <ETH_Prepare_Tx_Descriptors+0x2e2>
  }

  if(ItMode != ((uint32_t)RESET))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d006      	beq.n	800592c <ETH_Prepare_Tx_Descriptors+0x46c>
  {
    /* Set Interrupt on completition bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	609a      	str	r2, [r3, #8]
 800592a:	e005      	b.n	8005938 <ETH_Prepare_Tx_Descriptors+0x478>
  }
  else
  {
    /* Clear Interrupt on completition bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005940:	6a3b      	ldr	r3, [r7, #32]
 8005942:	60da      	str	r2, [r3, #12]

  dmatxdesclist->CurTxDesc = descidx;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005948:	611a      	str	r2, [r3, #16]

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3734      	adds	r7, #52	; 0x34
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	ffff8000 	.word	0xffff8000
 800595c:	ffffc000 	.word	0xffffc000
 8005960:	c000ffff 	.word	0xc000ffff
 8005964:	fffc0000 	.word	0xfffc0000

08005968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005968:	b480      	push	{r7}
 800596a:	b089      	sub	sp, #36	; 0x24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005976:	4b86      	ldr	r3, [pc, #536]	; (8005b90 <HAL_GPIO_Init+0x228>)
 8005978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800597a:	e18c      	b.n	8005c96 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	2101      	movs	r1, #1
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	fa01 f303 	lsl.w	r3, r1, r3
 8005988:	4013      	ands	r3, r2
 800598a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f000 817e 	beq.w	8005c90 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d00b      	beq.n	80059b4 <HAL_GPIO_Init+0x4c>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d007      	beq.n	80059b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059a8:	2b11      	cmp	r3, #17
 80059aa:	d003      	beq.n	80059b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b12      	cmp	r3, #18
 80059b2:	d130      	bne.n	8005a16 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	2203      	movs	r2, #3
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	43db      	mvns	r3, r3
 80059c6:	69ba      	ldr	r2, [r7, #24]
 80059c8:	4013      	ands	r3, r2
 80059ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	68da      	ldr	r2, [r3, #12]
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fa02 f303 	lsl.w	r3, r2, r3
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	4313      	orrs	r3, r2
 80059dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059ea:	2201      	movs	r2, #1
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	43db      	mvns	r3, r3
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	4013      	ands	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	091b      	lsrs	r3, r3, #4
 8005a00:	f003 0201 	and.w	r2, r3, #1
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69ba      	ldr	r2, [r7, #24]
 8005a14:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	2203      	movs	r2, #3
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689a      	ldr	r2, [r3, #8]
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d003      	beq.n	8005a56 <HAL_GPIO_Init+0xee>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b12      	cmp	r3, #18
 8005a54:	d123      	bne.n	8005a9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	08da      	lsrs	r2, r3, #3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3208      	adds	r2, #8
 8005a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	220f      	movs	r2, #15
 8005a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a72:	43db      	mvns	r3, r3
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	4013      	ands	r3, r2
 8005a78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	69ba      	ldr	r2, [r7, #24]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	08da      	lsrs	r2, r3, #3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3208      	adds	r2, #8
 8005a98:	69b9      	ldr	r1, [r7, #24]
 8005a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	2203      	movs	r2, #3
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	43db      	mvns	r3, r3
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4013      	ands	r3, r2
 8005ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f003 0203 	and.w	r2, r3, #3
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	005b      	lsls	r3, r3, #1
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69ba      	ldr	r2, [r7, #24]
 8005ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80d8 	beq.w	8005c90 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae0:	4b2c      	ldr	r3, [pc, #176]	; (8005b94 <HAL_GPIO_Init+0x22c>)
 8005ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005ae6:	4a2b      	ldr	r2, [pc, #172]	; (8005b94 <HAL_GPIO_Init+0x22c>)
 8005ae8:	f043 0302 	orr.w	r3, r3, #2
 8005aec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005af0:	4b28      	ldr	r3, [pc, #160]	; (8005b94 <HAL_GPIO_Init+0x22c>)
 8005af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005afe:	4a26      	ldr	r2, [pc, #152]	; (8005b98 <HAL_GPIO_Init+0x230>)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	3302      	adds	r3, #2
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	220f      	movs	r2, #15
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a1d      	ldr	r2, [pc, #116]	; (8005b9c <HAL_GPIO_Init+0x234>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d04a      	beq.n	8005bc0 <HAL_GPIO_Init+0x258>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ba0 <HAL_GPIO_Init+0x238>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d02b      	beq.n	8005b8a <HAL_GPIO_Init+0x222>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a1b      	ldr	r2, [pc, #108]	; (8005ba4 <HAL_GPIO_Init+0x23c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d025      	beq.n	8005b86 <HAL_GPIO_Init+0x21e>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a1a      	ldr	r2, [pc, #104]	; (8005ba8 <HAL_GPIO_Init+0x240>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d01f      	beq.n	8005b82 <HAL_GPIO_Init+0x21a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a19      	ldr	r2, [pc, #100]	; (8005bac <HAL_GPIO_Init+0x244>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d019      	beq.n	8005b7e <HAL_GPIO_Init+0x216>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_GPIO_Init+0x248>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_GPIO_Init+0x212>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a17      	ldr	r2, [pc, #92]	; (8005bb4 <HAL_GPIO_Init+0x24c>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00d      	beq.n	8005b76 <HAL_GPIO_Init+0x20e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a16      	ldr	r2, [pc, #88]	; (8005bb8 <HAL_GPIO_Init+0x250>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d007      	beq.n	8005b72 <HAL_GPIO_Init+0x20a>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a15      	ldr	r2, [pc, #84]	; (8005bbc <HAL_GPIO_Init+0x254>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d101      	bne.n	8005b6e <HAL_GPIO_Init+0x206>
 8005b6a:	2309      	movs	r3, #9
 8005b6c:	e029      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b6e:	230a      	movs	r3, #10
 8005b70:	e027      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b72:	2307      	movs	r3, #7
 8005b74:	e025      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b76:	2306      	movs	r3, #6
 8005b78:	e023      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b7a:	2305      	movs	r3, #5
 8005b7c:	e021      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b7e:	2304      	movs	r3, #4
 8005b80:	e01f      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b82:	2303      	movs	r3, #3
 8005b84:	e01d      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b86:	2302      	movs	r3, #2
 8005b88:	e01b      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e019      	b.n	8005bc2 <HAL_GPIO_Init+0x25a>
 8005b8e:	bf00      	nop
 8005b90:	58000080 	.word	0x58000080
 8005b94:	58024400 	.word	0x58024400
 8005b98:	58000400 	.word	0x58000400
 8005b9c:	58020000 	.word	0x58020000
 8005ba0:	58020400 	.word	0x58020400
 8005ba4:	58020800 	.word	0x58020800
 8005ba8:	58020c00 	.word	0x58020c00
 8005bac:	58021000 	.word	0x58021000
 8005bb0:	58021400 	.word	0x58021400
 8005bb4:	58021800 	.word	0x58021800
 8005bb8:	58021c00 	.word	0x58021c00
 8005bbc:	58022400 	.word	0x58022400
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	69fa      	ldr	r2, [r7, #28]
 8005bc4:	f002 0203 	and.w	r2, r2, #3
 8005bc8:	0092      	lsls	r2, r2, #2
 8005bca:	4093      	lsls	r3, r2
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005bd2:	4938      	ldr	r1, [pc, #224]	; (8005cb4 <HAL_GPIO_Init+0x34c>)
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	089b      	lsrs	r3, r3, #2
 8005bd8:	3302      	adds	r3, #2
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	43db      	mvns	r3, r3
 8005bea:	69ba      	ldr	r2, [r7, #24]
 8005bec:	4013      	ands	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	69ba      	ldr	r2, [r7, #24]
 8005c08:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	43db      	mvns	r3, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4013      	ands	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	69ba      	ldr	r2, [r7, #24]
 8005c32:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	43db      	mvns	r3, r3
 8005c40:	69ba      	ldr	r2, [r7, #24]
 8005c42:	4013      	ands	r3, r2
 8005c44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_GPIO_Init+0x2f2>
        {
          temp |= iocurrent;
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	43db      	mvns	r3, r3
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	4013      	ands	r3, r2
 8005c72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_GPIO_Init+0x320>
        {
          temp |= iocurrent;
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3301      	adds	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f47f ae6b 	bne.w	800597c <HAL_GPIO_Init+0x14>
  }
}
 8005ca6:	bf00      	nop
 8005ca8:	3724      	adds	r7, #36	; 0x24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	58000400 	.word	0x58000400

08005cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	807b      	strh	r3, [r7, #2]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cc8:	787b      	ldrb	r3, [r7, #1]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d003      	beq.n	8005cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005cce:	887a      	ldrh	r2, [r7, #2]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005cd4:	e003      	b.n	8005cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005cd6:	887b      	ldrh	r3, [r7, #2]
 8005cd8:	041a      	lsls	r2, r3, #16
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	619a      	str	r2, [r3, #24]
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695a      	ldr	r2, [r3, #20]
 8005cfa:	887b      	ldrh	r3, [r7, #2]
 8005cfc:	401a      	ands	r2, r3
 8005cfe:	887b      	ldrh	r3, [r7, #2]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d104      	bne.n	8005d0e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d04:	887b      	ldrh	r3, [r7, #2]
 8005d06:	041a      	lsls	r2, r3, #16
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005d0c:	e002      	b.n	8005d14 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005d0e:	887a      	ldrh	r2, [r7, #2]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	619a      	str	r2, [r3, #24]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d3e:	88fb      	ldrh	r3, [r7, #6]
 8005d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d44:	88fb      	ldrh	r3, [r7, #6]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f000 f804 	bl	8005d54 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
	...

08005d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005d74:	4b19      	ldr	r3, [pc, #100]	; (8005ddc <HAL_PWREx_ConfigSupply+0x70>)
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b04      	cmp	r3, #4
 8005d7e:	d00a      	beq.n	8005d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005d80:	4b16      	ldr	r3, [pc, #88]	; (8005ddc <HAL_PWREx_ConfigSupply+0x70>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d001      	beq.n	8005d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e01f      	b.n	8005dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	e01d      	b.n	8005dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005d96:	4b11      	ldr	r3, [pc, #68]	; (8005ddc <HAL_PWREx_ConfigSupply+0x70>)
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	f023 0207 	bic.w	r2, r3, #7
 8005d9e:	490f      	ldr	r1, [pc, #60]	; (8005ddc <HAL_PWREx_ConfigSupply+0x70>)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005da6:	f7fb ff5d 	bl	8001c64 <HAL_GetTick>
 8005daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dac:	e009      	b.n	8005dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005dae:	f7fb ff59 	bl	8001c64 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005dbc:	d901      	bls.n	8005dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e007      	b.n	8005dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <HAL_PWREx_ConfigSupply+0x70>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dce:	d1ee      	bne.n	8005dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	58024800 	.word	0x58024800

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b08c      	sub	sp, #48	; 0x30
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e37a      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8087 	beq.w	8005f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e00:	4ba0      	ldr	r3, [pc, #640]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e0a:	4b9e      	ldr	r3, [pc, #632]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e12:	2b10      	cmp	r3, #16
 8005e14:	d007      	beq.n	8005e26 <HAL_RCC_OscConfig+0x46>
 8005e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e18:	2b18      	cmp	r3, #24
 8005e1a:	d110      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d10b      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e26:	4b97      	ldr	r3, [pc, #604]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d06c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x12c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d168      	bne.n	8005f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e354      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	d106      	bne.n	8005e56 <HAL_RCC_OscConfig+0x76>
 8005e48:	4b8e      	ldr	r3, [pc, #568]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a8d      	ldr	r2, [pc, #564]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	e02e      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b89      	ldr	r3, [pc, #548]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a88      	ldr	r2, [pc, #544]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b86      	ldr	r3, [pc, #536]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a85      	ldr	r2, [pc, #532]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0xbc>
 8005e82:	4b80      	ldr	r3, [pc, #512]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7f      	ldr	r2, [pc, #508]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b7d      	ldr	r3, [pc, #500]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a7c      	ldr	r2, [pc, #496]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e9c:	4b79      	ldr	r3, [pc, #484]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a78      	ldr	r2, [pc, #480]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b76      	ldr	r3, [pc, #472]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a75      	ldr	r2, [pc, #468]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7fb fed2 	bl	8001c64 <HAL_GetTick>
 8005ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fb fece 	bl	8001c64 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e308      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ed6:	4b6b      	ldr	r3, [pc, #428]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xe4>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fb febe 	bl	8001c64 <HAL_GetTick>
 8005ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fb feba 	bl	8001c64 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e2f4      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005efe:	4b61      	ldr	r3, [pc, #388]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x10c>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d06d      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x216>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f1a:	4b5a      	ldr	r3, [pc, #360]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f24:	4b57      	ldr	r3, [pc, #348]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <HAL_RCC_OscConfig+0x160>
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2b18      	cmp	r3, #24
 8005f34:	d11b      	bne.n	8005f6e <HAL_RCC_OscConfig+0x18e>
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	f003 0303 	and.w	r3, r3, #3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d116      	bne.n	8005f6e <HAL_RCC_OscConfig+0x18e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f40:	4b50      	ldr	r3, [pc, #320]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_OscConfig+0x178>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e2c7      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f58:	4b4a      	ldr	r3, [pc, #296]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	4947      	ldr	r1, [pc, #284]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f6c:	e043      	b.n	8005ff6 <HAL_RCC_OscConfig+0x216>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d026      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x1e4>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f76:	4b43      	ldr	r3, [pc, #268]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 0219 	bic.w	r2, r3, #25
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	4940      	ldr	r1, [pc, #256]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fb fe6c 	bl	8001c64 <HAL_GetTick>
 8005f8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f90:	f7fb fe68 	bl	8001c64 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e2a2      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa2:	4b38      	ldr	r3, [pc, #224]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0304 	and.w	r3, r3, #4
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0x1b0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fae:	4b35      	ldr	r3, [pc, #212]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	061b      	lsls	r3, r3, #24
 8005fbc:	4931      	ldr	r1, [pc, #196]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	604b      	str	r3, [r1, #4]
 8005fc2:	e018      	b.n	8005ff6 <HAL_RCC_OscConfig+0x216>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fc4:	4b2f      	ldr	r3, [pc, #188]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005fca:	f023 0301 	bic.w	r3, r3, #1
 8005fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fd0:	f7fb fe48 	bl	8001c64 <HAL_GetTick>
 8005fd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fd6:	e008      	b.n	8005fea <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fd8:	f7fb fe44 	bl	8001c64 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e27e      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fea:	4b26      	ldr	r3, [pc, #152]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1f0      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0310 	and.w	r3, r3, #16
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d06c      	beq.n	80060dc <HAL_RCC_OscConfig+0x2fc>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800600a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800600c:	4b1d      	ldr	r3, [pc, #116]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 800600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006010:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	2b08      	cmp	r3, #8
 8006016:	d007      	beq.n	8006028 <HAL_RCC_OscConfig+0x248>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b18      	cmp	r3, #24
 800601c:	d11b      	bne.n	8006056 <HAL_RCC_OscConfig+0x276>
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d116      	bne.n	8006056 <HAL_RCC_OscConfig+0x276>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006028:	4b16      	ldr	r3, [pc, #88]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <HAL_RCC_OscConfig+0x260>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	2b80      	cmp	r3, #128	; 0x80
 800603a:	d001      	beq.n	8006040 <HAL_RCC_OscConfig+0x260>
      {
        return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e253      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006040:	4b10      	ldr	r3, [pc, #64]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	061b      	lsls	r3, r3, #24
 800604e:	490d      	ldr	r1, [pc, #52]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8006050:	4313      	orrs	r3, r2
 8006052:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006054:	e042      	b.n	80060dc <HAL_RCC_OscConfig+0x2fc>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d025      	beq.n	80060aa <HAL_RCC_OscConfig+0x2ca>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a08      	ldr	r2, [pc, #32]	; (8006084 <HAL_RCC_OscConfig+0x2a4>)
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fb fdfb 	bl	8001c64 <HAL_GetTick>
 800606e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006070:	e00a      	b.n	8006088 <HAL_RCC_OscConfig+0x2a8>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006072:	f7fb fdf7 	bl	8001c64 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d903      	bls.n	8006088 <HAL_RCC_OscConfig+0x2a8>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e231      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
 8006084:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006088:	4ba3      	ldr	r3, [pc, #652]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0ee      	beq.n	8006072 <HAL_RCC_OscConfig+0x292>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006094:	4ba0      	ldr	r3, [pc, #640]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	061b      	lsls	r3, r3, #24
 80060a2:	499d      	ldr	r1, [pc, #628]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60cb      	str	r3, [r1, #12]
 80060a8:	e018      	b.n	80060dc <HAL_RCC_OscConfig+0x2fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060aa:	4b9b      	ldr	r3, [pc, #620]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a9a      	ldr	r2, [pc, #616]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80060b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fb fdd5 	bl	8001c64 <HAL_GetTick>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060be:	f7fb fdd1 	bl	8001c64 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e20b      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060d0:	4b91      	ldr	r3, [pc, #580]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1f0      	bne.n	80060be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0308 	and.w	r3, r3, #8
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d036      	beq.n	8006156 <HAL_RCC_OscConfig+0x376>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d019      	beq.n	8006124 <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f0:	4b89      	ldr	r3, [pc, #548]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	4a88      	ldr	r2, [pc, #544]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060fc:	f7fb fdb2 	bl	8001c64 <HAL_GetTick>
 8006100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006102:	e008      	b.n	8006116 <HAL_RCC_OscConfig+0x336>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006104:	f7fb fdae 	bl	8001c64 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b02      	cmp	r3, #2
 8006110:	d901      	bls.n	8006116 <HAL_RCC_OscConfig+0x336>
        {
          return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e1e8      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006116:	4b80      	ldr	r3, [pc, #512]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006118:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCC_OscConfig+0x324>
 8006122:	e018      	b.n	8006156 <HAL_RCC_OscConfig+0x376>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006124:	4b7c      	ldr	r3, [pc, #496]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006128:	4a7b      	ldr	r2, [pc, #492]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800612a:	f023 0301 	bic.w	r3, r3, #1
 800612e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fb fd98 	bl	8001c64 <HAL_GetTick>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006136:	e008      	b.n	800614a <HAL_RCC_OscConfig+0x36a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006138:	f7fb fd94 	bl	8001c64 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d901      	bls.n	800614a <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e1ce      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800614a:	4b73      	ldr	r3, [pc, #460]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800614c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800614e:	f003 0302 	and.w	r3, r3, #2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1f0      	bne.n	8006138 <HAL_RCC_OscConfig+0x358>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	d036      	beq.n	80061d0 <HAL_RCC_OscConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d019      	beq.n	800619e <HAL_RCC_OscConfig+0x3be>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800616a:	4b6b      	ldr	r3, [pc, #428]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a6a      	ldr	r2, [pc, #424]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006174:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006176:	f7fb fd75 	bl	8001c64 <HAL_GetTick>
 800617a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800617c:	e008      	b.n	8006190 <HAL_RCC_OscConfig+0x3b0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800617e:	f7fb fd71 	bl	8001c64 <HAL_GetTick>
 8006182:	4602      	mov	r2, r0
 8006184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006186:	1ad3      	subs	r3, r2, r3
 8006188:	2b02      	cmp	r3, #2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x3b0>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e1ab      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006190:	4b61      	ldr	r3, [pc, #388]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0f0      	beq.n	800617e <HAL_RCC_OscConfig+0x39e>
 800619c:	e018      	b.n	80061d0 <HAL_RCC_OscConfig+0x3f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800619e:	4b5e      	ldr	r3, [pc, #376]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a5d      	ldr	r2, [pc, #372]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80061a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061aa:	f7fb fd5b 	bl	8001c64 <HAL_GetTick>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061b0:	e008      	b.n	80061c4 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061b2:	f7fb fd57 	bl	8001c64 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e191      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061c4:	4b54      	ldr	r3, [pc, #336]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1f0      	bne.n	80061b2 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	f000 8081 	beq.w	80062e0 <HAL_RCC_OscConfig+0x500>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80061de:	4b4f      	ldr	r3, [pc, #316]	; (800631c <HAL_RCC_OscConfig+0x53c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a4e      	ldr	r2, [pc, #312]	; (800631c <HAL_RCC_OscConfig+0x53c>)
 80061e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061ea:	f7fb fd3b 	bl	8001c64 <HAL_GetTick>
 80061ee:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80061f0:	e008      	b.n	8006204 <HAL_RCC_OscConfig+0x424>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80061f2:	f7fb fd37 	bl	8001c64 <HAL_GetTick>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b64      	cmp	r3, #100	; 0x64
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x424>
      {
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e171      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006204:	4b45      	ldr	r3, [pc, #276]	; (800631c <HAL_RCC_OscConfig+0x53c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0f0      	beq.n	80061f2 <HAL_RCC_OscConfig+0x412>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d106      	bne.n	8006226 <HAL_RCC_OscConfig+0x446>
 8006218:	4b3f      	ldr	r3, [pc, #252]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	4a3e      	ldr	r2, [pc, #248]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	6713      	str	r3, [r2, #112]	; 0x70
 8006224:	e02d      	b.n	8006282 <HAL_RCC_OscConfig+0x4a2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10c      	bne.n	8006248 <HAL_RCC_OscConfig+0x468>
 800622e:	4b3a      	ldr	r3, [pc, #232]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	4a39      	ldr	r2, [pc, #228]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006234:	f023 0301 	bic.w	r3, r3, #1
 8006238:	6713      	str	r3, [r2, #112]	; 0x70
 800623a:	4b37      	ldr	r3, [pc, #220]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	4a36      	ldr	r2, [pc, #216]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006240:	f023 0304 	bic.w	r3, r3, #4
 8006244:	6713      	str	r3, [r2, #112]	; 0x70
 8006246:	e01c      	b.n	8006282 <HAL_RCC_OscConfig+0x4a2>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b05      	cmp	r3, #5
 800624e:	d10c      	bne.n	800626a <HAL_RCC_OscConfig+0x48a>
 8006250:	4b31      	ldr	r3, [pc, #196]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006254:	4a30      	ldr	r2, [pc, #192]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006256:	f043 0304 	orr.w	r3, r3, #4
 800625a:	6713      	str	r3, [r2, #112]	; 0x70
 800625c:	4b2e      	ldr	r3, [pc, #184]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	4a2d      	ldr	r2, [pc, #180]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	6713      	str	r3, [r2, #112]	; 0x70
 8006268:	e00b      	b.n	8006282 <HAL_RCC_OscConfig+0x4a2>
 800626a:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800626c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800626e:	4a2a      	ldr	r2, [pc, #168]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006270:	f023 0301 	bic.w	r3, r3, #1
 8006274:	6713      	str	r3, [r2, #112]	; 0x70
 8006276:	4b28      	ldr	r3, [pc, #160]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800627a:	4a27      	ldr	r2, [pc, #156]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 800627c:	f023 0304 	bic.w	r3, r3, #4
 8006280:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d015      	beq.n	80062b6 <HAL_RCC_OscConfig+0x4d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628a:	f7fb fceb 	bl	8001c64 <HAL_GetTick>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006290:	e00a      	b.n	80062a8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006292:	f7fb fce7 	bl	8001c64 <HAL_GetTick>
 8006296:	4602      	mov	r2, r0
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e11f      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062a8:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80062aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d0ee      	beq.n	8006292 <HAL_RCC_OscConfig+0x4b2>
 80062b4:	e014      	b.n	80062e0 <HAL_RCC_OscConfig+0x500>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b6:	f7fb fcd5 	bl	8001c64 <HAL_GetTick>
 80062ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062bc:	e00a      	b.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062be:	f7fb fcd1 	bl	8001c64 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d901      	bls.n	80062d4 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e109      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062d4:	4b10      	ldr	r3, [pc, #64]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80062d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d8:	f003 0302 	and.w	r3, r3, #2
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d1ee      	bne.n	80062be <HAL_RCC_OscConfig+0x4de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 80fe 	beq.w	80064e6 <HAL_RCC_OscConfig+0x706>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 80062ec:	691b      	ldr	r3, [r3, #16]
 80062ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062f2:	2b18      	cmp	r3, #24
 80062f4:	f000 80b9 	beq.w	800646a <HAL_RCC_OscConfig+0x68a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	f040 809a 	bne.w	8006436 <HAL_RCC_OscConfig+0x656>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006302:	4b05      	ldr	r3, [pc, #20]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a04      	ldr	r2, [pc, #16]	; (8006318 <HAL_RCC_OscConfig+0x538>)
 8006308:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800630c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630e:	f7fb fca9 	bl	8001c64 <HAL_GetTick>
 8006312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006314:	e00d      	b.n	8006332 <HAL_RCC_OscConfig+0x552>
 8006316:	bf00      	nop
 8006318:	58024400 	.word	0x58024400
 800631c:	58024800 	.word	0x58024800
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006320:	f7fb fca0 	bl	8001c64 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x552>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e0da      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006332:	4b6f      	ldr	r3, [pc, #444]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x540>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800633e:	4b6c      	ldr	r3, [pc, #432]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006342:	4b6c      	ldr	r3, [pc, #432]	; (80064f4 <HAL_RCC_OscConfig+0x714>)
 8006344:	4013      	ands	r3, r2
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800634e:	0112      	lsls	r2, r2, #4
 8006350:	430a      	orrs	r2, r1
 8006352:	4967      	ldr	r1, [pc, #412]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006354:	4313      	orrs	r3, r2
 8006356:	628b      	str	r3, [r1, #40]	; 0x28
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	3b01      	subs	r3, #1
 800635e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006366:	3b01      	subs	r3, #1
 8006368:	025b      	lsls	r3, r3, #9
 800636a:	b29b      	uxth	r3, r3
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006372:	3b01      	subs	r3, #1
 8006374:	041b      	lsls	r3, r3, #16
 8006376:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800637a:	431a      	orrs	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006380:	3b01      	subs	r3, #1
 8006382:	061b      	lsls	r3, r3, #24
 8006384:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006388:	4959      	ldr	r1, [pc, #356]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 800638a:	4313      	orrs	r3, r2
 800638c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800638e:	4b58      	ldr	r3, [pc, #352]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006392:	4a57      	ldr	r2, [pc, #348]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006394:	f023 0301 	bic.w	r3, r3, #1
 8006398:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800639a:	4b55      	ldr	r3, [pc, #340]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 800639c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639e:	4b56      	ldr	r3, [pc, #344]	; (80064f8 <HAL_RCC_OscConfig+0x718>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063a6:	00d2      	lsls	r2, r2, #3
 80063a8:	4951      	ldr	r1, [pc, #324]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063ae:	4b50      	ldr	r3, [pc, #320]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b2:	f023 020c 	bic.w	r2, r3, #12
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	494d      	ldr	r1, [pc, #308]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063c0:	4b4b      	ldr	r3, [pc, #300]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c4:	f023 0202 	bic.w	r2, r3, #2
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063cc:	4948      	ldr	r1, [pc, #288]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063d2:	4b47      	ldr	r3, [pc, #284]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	4a46      	ldr	r2, [pc, #280]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063de:	4b44      	ldr	r3, [pc, #272]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e2:	4a43      	ldr	r2, [pc, #268]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80063ea:	4b41      	ldr	r3, [pc, #260]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ee:	4a40      	ldr	r2, [pc, #256]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80063f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80063f6:	4b3e      	ldr	r3, [pc, #248]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	4a3d      	ldr	r2, [pc, #244]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006402:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a3a      	ldr	r2, [pc, #232]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006408:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800640c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800640e:	f7fb fc29 	bl	8001c64 <HAL_GetTick>
 8006412:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006414:	e008      	b.n	8006428 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006416:	f7fb fc25 	bl	8001c64 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e05f      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006428:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0f0      	beq.n	8006416 <HAL_RCC_OscConfig+0x636>
 8006434:	e057      	b.n	80064e6 <HAL_RCC_OscConfig+0x706>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006436:	4b2e      	ldr	r3, [pc, #184]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a2d      	ldr	r2, [pc, #180]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 800643c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006442:	f7fb fc0f 	bl	8001c64 <HAL_GetTick>
 8006446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006448:	e008      	b.n	800645c <HAL_RCC_OscConfig+0x67c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800644a:	f7fb fc0b 	bl	8001c64 <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	2b02      	cmp	r3, #2
 8006456:	d901      	bls.n	800645c <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e045      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800645c:	4b24      	ldr	r3, [pc, #144]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d1f0      	bne.n	800644a <HAL_RCC_OscConfig+0x66a>
 8006468:	e03d      	b.n	80064e6 <HAL_RCC_OscConfig+0x706>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800646a:	4b21      	ldr	r3, [pc, #132]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006470:	4b1f      	ldr	r3, [pc, #124]	; (80064f0 <HAL_RCC_OscConfig+0x710>)
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2b01      	cmp	r3, #1
 800647c:	d031      	beq.n	80064e2 <HAL_RCC_OscConfig+0x702>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f003 0203 	and.w	r2, r3, #3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d12a      	bne.n	80064e2 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	091b      	lsrs	r3, r3, #4
 8006490:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006498:	429a      	cmp	r2, r3
 800649a:	d122      	bne.n	80064e2 <HAL_RCC_OscConfig+0x702>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d11a      	bne.n	80064e2 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	0a5b      	lsrs	r3, r3, #9
 80064b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064b8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d111      	bne.n	80064e2 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	0c1b      	lsrs	r3, r3, #16
 80064c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d108      	bne.n	80064e2 <HAL_RCC_OscConfig+0x702>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	0e1b      	lsrs	r3, r3, #24
 80064d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80064de:	429a      	cmp	r2, r3
 80064e0:	d001      	beq.n	80064e6 <HAL_RCC_OscConfig+0x706>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <HAL_RCC_OscConfig+0x708>
      }
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3730      	adds	r7, #48	; 0x30
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	58024400 	.word	0x58024400
 80064f4:	fffffc0c 	.word	0xfffffc0c
 80064f8:	ffff0007 	.word	0xffff0007

080064fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b086      	sub	sp, #24
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e19c      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006510:	4b8a      	ldr	r3, [pc, #552]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d910      	bls.n	8006540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651e:	4b87      	ldr	r3, [pc, #540]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f023 020f 	bic.w	r2, r3, #15
 8006526:	4985      	ldr	r1, [pc, #532]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	4313      	orrs	r3, r2
 800652c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800652e:	4b83      	ldr	r3, [pc, #524]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	683a      	ldr	r2, [r7, #0]
 8006538:	429a      	cmp	r2, r3
 800653a:	d001      	beq.n	8006540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e184      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	d010      	beq.n	800656e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	4b7b      	ldr	r3, [pc, #492]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006558:	429a      	cmp	r2, r3
 800655a:	d908      	bls.n	800656e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800655c:	4b78      	ldr	r3, [pc, #480]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	4975      	ldr	r1, [pc, #468]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800656a:	4313      	orrs	r3, r2
 800656c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d010      	beq.n	800659c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	695a      	ldr	r2, [r3, #20]
 800657e:	4b70      	ldr	r3, [pc, #448]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006580:	69db      	ldr	r3, [r3, #28]
 8006582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006586:	429a      	cmp	r2, r3
 8006588:	d908      	bls.n	800659c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800658a:	4b6d      	ldr	r3, [pc, #436]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	496a      	ldr	r1, [pc, #424]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006598:	4313      	orrs	r3, r2
 800659a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0310 	and.w	r3, r3, #16
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d010      	beq.n	80065ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	4b64      	ldr	r3, [pc, #400]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065ae:	69db      	ldr	r3, [r3, #28]
 80065b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d908      	bls.n	80065ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065b8:	4b61      	ldr	r3, [pc, #388]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065ba:	69db      	ldr	r3, [r3, #28]
 80065bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	495e      	ldr	r1, [pc, #376]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	4313      	orrs	r3, r2
 80065c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d010      	beq.n	80065f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	69da      	ldr	r2, [r3, #28]
 80065da:	4b59      	ldr	r3, [pc, #356]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d908      	bls.n	80065f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80065e6:	4b56      	ldr	r3, [pc, #344]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4953      	ldr	r1, [pc, #332]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0302 	and.w	r3, r3, #2
 8006600:	2b00      	cmp	r3, #0
 8006602:	d010      	beq.n	8006626 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	68da      	ldr	r2, [r3, #12]
 8006608:	4b4d      	ldr	r3, [pc, #308]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	429a      	cmp	r2, r3
 8006612:	d908      	bls.n	8006626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006614:	4b4a      	ldr	r3, [pc, #296]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	f023 020f 	bic.w	r2, r3, #15
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	4947      	ldr	r1, [pc, #284]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006622:	4313      	orrs	r3, r2
 8006624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d055      	beq.n	80066de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006632:	4b43      	ldr	r3, [pc, #268]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	4940      	ldr	r1, [pc, #256]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006640:	4313      	orrs	r3, r2
 8006642:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d107      	bne.n	800665c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800664c:	4b3c      	ldr	r3, [pc, #240]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d121      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e0f6      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d107      	bne.n	8006674 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006664:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d115      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0ea      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d107      	bne.n	800668c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800667c:	4b30      	ldr	r3, [pc, #192]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006684:	2b00      	cmp	r3, #0
 8006686:	d109      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e0de      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0d6      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	f023 0207 	bic.w	r2, r3, #7
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	4925      	ldr	r1, [pc, #148]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ae:	f7fb fad9 	bl	8001c64 <HAL_GetTick>
 80066b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066b4:	e00a      	b.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066b6:	f7fb fad5 	bl	8001c64 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d901      	bls.n	80066cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e0be      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066cc:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	00db      	lsls	r3, r3, #3
 80066da:	429a      	cmp	r2, r3
 80066dc:	d1eb      	bne.n	80066b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0302 	and.w	r3, r3, #2
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d010      	beq.n	800670c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	4b14      	ldr	r3, [pc, #80]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d208      	bcs.n	800670c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066fa:	4b11      	ldr	r3, [pc, #68]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	f023 020f 	bic.w	r2, r3, #15
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	490e      	ldr	r1, [pc, #56]	; (8006740 <HAL_RCC_ClockConfig+0x244>)
 8006708:	4313      	orrs	r3, r2
 800670a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 030f 	and.w	r3, r3, #15
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d214      	bcs.n	8006744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671a:	4b08      	ldr	r3, [pc, #32]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f023 020f 	bic.w	r2, r3, #15
 8006722:	4906      	ldr	r1, [pc, #24]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	4313      	orrs	r3, r2
 8006728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <HAL_RCC_ClockConfig+0x240>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 030f 	and.w	r3, r3, #15
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	429a      	cmp	r2, r3
 8006736:	d005      	beq.n	8006744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e086      	b.n	800684a <HAL_RCC_ClockConfig+0x34e>
 800673c:	52002000 	.word	0x52002000
 8006740:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d010      	beq.n	8006772 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	4b3f      	ldr	r3, [pc, #252]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800675c:	429a      	cmp	r2, r3
 800675e:	d208      	bcs.n	8006772 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006760:	4b3c      	ldr	r3, [pc, #240]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	4939      	ldr	r1, [pc, #228]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 800676e:	4313      	orrs	r3, r2
 8006770:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d010      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	695a      	ldr	r2, [r3, #20]
 8006782:	4b34      	ldr	r3, [pc, #208]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800678a:	429a      	cmp	r2, r3
 800678c:	d208      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	492e      	ldr	r1, [pc, #184]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 800679c:	4313      	orrs	r3, r2
 800679e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0310 	and.w	r3, r3, #16
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d010      	beq.n	80067ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	699a      	ldr	r2, [r3, #24]
 80067b0:	4b28      	ldr	r3, [pc, #160]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d208      	bcs.n	80067ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80067bc:	4b25      	ldr	r3, [pc, #148]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	4922      	ldr	r1, [pc, #136]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69da      	ldr	r2, [r3, #28]
 80067de:	4b1d      	ldr	r3, [pc, #116]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d208      	bcs.n	80067fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69db      	ldr	r3, [r3, #28]
 80067f6:	4917      	ldr	r1, [pc, #92]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80067fc:	f000 f834 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006800:	4601      	mov	r1, r0
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	0a1b      	lsrs	r3, r3, #8
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	4a12      	ldr	r2, [pc, #72]	; (8006858 <HAL_RCC_ClockConfig+0x35c>)
 800680e:	5cd3      	ldrb	r3, [r2, r3]
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	fa21 f303 	lsr.w	r3, r1, r3
 8006818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800681a:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <HAL_RCC_ClockConfig+0x358>)
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 030f 	and.w	r3, r3, #15
 8006822:	4a0d      	ldr	r2, [pc, #52]	; (8006858 <HAL_RCC_ClockConfig+0x35c>)
 8006824:	5cd3      	ldrb	r3, [r2, r3]
 8006826:	f003 031f 	and.w	r3, r3, #31
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	fa22 f303 	lsr.w	r3, r2, r3
 8006830:	4a0a      	ldr	r2, [pc, #40]	; (800685c <HAL_RCC_ClockConfig+0x360>)
 8006832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006834:	4a0a      	ldr	r2, [pc, #40]	; (8006860 <HAL_RCC_ClockConfig+0x364>)
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800683a:	4b0a      	ldr	r3, [pc, #40]	; (8006864 <HAL_RCC_ClockConfig+0x368>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f7fa fe36 	bl	80014b0 <HAL_InitTick>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	58024400 	.word	0x58024400
 8006858:	0802103c 	.word	0x0802103c
 800685c:	20000004 	.word	0x20000004
 8006860:	20000000 	.word	0x20000000
 8006864:	20000008 	.word	0x20000008

08006868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	; 0x24
 800686c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800686e:	4baf      	ldr	r3, [pc, #700]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006876:	2b18      	cmp	r3, #24
 8006878:	f200 814e 	bhi.w	8006b18 <HAL_RCC_GetSysClockFreq+0x2b0>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	080068e9 	.word	0x080068e9
 8006888:	08006b19 	.word	0x08006b19
 800688c:	08006b19 	.word	0x08006b19
 8006890:	08006b19 	.word	0x08006b19
 8006894:	08006b19 	.word	0x08006b19
 8006898:	08006b19 	.word	0x08006b19
 800689c:	08006b19 	.word	0x08006b19
 80068a0:	08006b19 	.word	0x08006b19
 80068a4:	0800690f 	.word	0x0800690f
 80068a8:	08006b19 	.word	0x08006b19
 80068ac:	08006b19 	.word	0x08006b19
 80068b0:	08006b19 	.word	0x08006b19
 80068b4:	08006b19 	.word	0x08006b19
 80068b8:	08006b19 	.word	0x08006b19
 80068bc:	08006b19 	.word	0x08006b19
 80068c0:	08006b19 	.word	0x08006b19
 80068c4:	08006915 	.word	0x08006915
 80068c8:	08006b19 	.word	0x08006b19
 80068cc:	08006b19 	.word	0x08006b19
 80068d0:	08006b19 	.word	0x08006b19
 80068d4:	08006b19 	.word	0x08006b19
 80068d8:	08006b19 	.word	0x08006b19
 80068dc:	08006b19 	.word	0x08006b19
 80068e0:	08006b19 	.word	0x08006b19
 80068e4:	0800691b 	.word	0x0800691b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068e8:	4b90      	ldr	r3, [pc, #576]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0320 	and.w	r3, r3, #32
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068f4:	4b8d      	ldr	r3, [pc, #564]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	08db      	lsrs	r3, r3, #3
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	4a8c      	ldr	r2, [pc, #560]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
 8006904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006906:	e10a      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006908:	4b89      	ldr	r3, [pc, #548]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800690a:	61bb      	str	r3, [r7, #24]
    break;
 800690c:	e107      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800690e:	4b89      	ldr	r3, [pc, #548]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006910:	61bb      	str	r3, [r7, #24]
    break;
 8006912:	e104      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006914:	4b88      	ldr	r3, [pc, #544]	; (8006b38 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8006916:	61bb      	str	r3, [r7, #24]
    break;
 8006918:	e101      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800691a:	4b84      	ldr	r3, [pc, #528]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006924:	4b81      	ldr	r3, [pc, #516]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800692e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006930:	4b7e      	ldr	r3, [pc, #504]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800693a:	4b7c      	ldr	r3, [pc, #496]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 80da 	beq.w	8006b12 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d05a      	beq.n	8006a1a <HAL_RCC_GetSysClockFreq+0x1b2>
 8006964:	2b01      	cmp	r3, #1
 8006966:	d302      	bcc.n	800696e <HAL_RCC_GetSysClockFreq+0x106>
 8006968:	2b02      	cmp	r3, #2
 800696a:	d078      	beq.n	8006a5e <HAL_RCC_GetSysClockFreq+0x1f6>
 800696c:	e099      	b.n	8006aa2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800696e:	4b6f      	ldr	r3, [pc, #444]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0320 	and.w	r3, r3, #32
 8006976:	2b00      	cmp	r3, #0
 8006978:	d02d      	beq.n	80069d6 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800697a:	4b6c      	ldr	r3, [pc, #432]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	08db      	lsrs	r3, r3, #3
 8006980:	f003 0303 	and.w	r3, r3, #3
 8006984:	4a6a      	ldr	r2, [pc, #424]	; (8006b30 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8006986:	fa22 f303 	lsr.w	r3, r2, r3
 800698a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	ee07 3a90 	vmov	s15, r3
 800699c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a4:	4b61      	ldr	r3, [pc, #388]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ac:	ee07 3a90 	vmov	s15, r3
 80069b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80069b8:	eddf 5a60 	vldr	s11, [pc, #384]	; 8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 80069bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80069d4:	e087      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	ee07 3a90 	vmov	s15, r3
 80069dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006b40 <HAL_RCC_GetSysClockFreq+0x2d8>
 80069e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069e8:	4b50      	ldr	r3, [pc, #320]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80069ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f0:	ee07 3a90 	vmov	s15, r3
 80069f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80069fc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a18:	e065      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	ee07 3a90 	vmov	s15, r3
 8006a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a24:	eddf 6a47 	vldr	s13, [pc, #284]	; 8006b44 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a2c:	4b3f      	ldr	r3, [pc, #252]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a34:	ee07 3a90 	vmov	s15, r3
 8006a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a3c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a40:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a5c:	e043      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	ee07 3a90 	vmov	s15, r3
 8006a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a68:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006b48 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a70:	4b2e      	ldr	r3, [pc, #184]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a78:	ee07 3a90 	vmov	s15, r3
 8006a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a80:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a84:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aa0:	e021      	b.n	8006ae6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	ee07 3a90 	vmov	s15, r3
 8006aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aac:	eddf 6a25 	vldr	s13, [pc, #148]	; 8006b44 <HAL_RCC_GetSysClockFreq+0x2dc>
 8006ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ab4:	4b1d      	ldr	r3, [pc, #116]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006abc:	ee07 3a90 	vmov	s15, r3
 8006ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ac4:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ac8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8006b3c <HAL_RCC_GetSysClockFreq+0x2d4>
 8006acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ae4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006ae6:	4b11      	ldr	r3, [pc, #68]	; (8006b2c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aea:	0a5b      	lsrs	r3, r3, #9
 8006aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006af0:	3301      	adds	r3, #1
 8006af2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006afe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b0a:	ee17 3a90 	vmov	r3, s15
 8006b0e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b10:	e005      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8006b12:	2300      	movs	r3, #0
 8006b14:	61bb      	str	r3, [r7, #24]
    break;
 8006b16:	e002      	b.n	8006b1e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8006b18:	4b06      	ldr	r3, [pc, #24]	; (8006b34 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8006b1a:	61bb      	str	r3, [r7, #24]
    break;
 8006b1c:	bf00      	nop
  }

  return sysclockfreq;
 8006b1e:	69bb      	ldr	r3, [r7, #24]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3724      	adds	r7, #36	; 0x24
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr
 8006b2c:	58024400 	.word	0x58024400
 8006b30:	03d09000 	.word	0x03d09000
 8006b34:	003d0900 	.word	0x003d0900
 8006b38:	007a1200 	.word	0x007a1200
 8006b3c:	46000000 	.word	0x46000000
 8006b40:	4c742400 	.word	0x4c742400
 8006b44:	4a742400 	.word	0x4a742400
 8006b48:	4af42400 	.word	0x4af42400

08006b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b082      	sub	sp, #8
 8006b50:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006b52:	f7ff fe89 	bl	8006868 <HAL_RCC_GetSysClockFreq>
 8006b56:	4601      	mov	r1, r0
 8006b58:	4b10      	ldr	r3, [pc, #64]	; (8006b9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	0a1b      	lsrs	r3, r3, #8
 8006b5e:	f003 030f 	and.w	r3, r3, #15
 8006b62:	4a0f      	ldr	r2, [pc, #60]	; (8006ba0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b64:	5cd3      	ldrb	r3, [r2, r3]
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8006b6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006b70:	4b0a      	ldr	r3, [pc, #40]	; (8006b9c <HAL_RCC_GetHCLKFreq+0x50>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	4a09      	ldr	r2, [pc, #36]	; (8006ba0 <HAL_RCC_GetHCLKFreq+0x54>)
 8006b7a:	5cd3      	ldrb	r3, [r2, r3]
 8006b7c:	f003 031f 	and.w	r3, r3, #31
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	fa22 f303 	lsr.w	r3, r2, r3
 8006b86:	4a07      	ldr	r2, [pc, #28]	; (8006ba4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006b8a:	4a07      	ldr	r2, [pc, #28]	; (8006ba8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b90:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b92:	681b      	ldr	r3, [r3, #0]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	58024400 	.word	0x58024400
 8006ba0:	0802103c 	.word	0x0802103c
 8006ba4:	20000004 	.word	0x20000004
 8006ba8:	20000000 	.word	0x20000000

08006bac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006bb0:	f7ff ffcc 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8006bb4:	4601      	mov	r1, r0
 8006bb6:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	091b      	lsrs	r3, r3, #4
 8006bbc:	f003 0307 	and.w	r3, r3, #7
 8006bc0:	4a04      	ldr	r2, [pc, #16]	; (8006bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006bc2:	5cd3      	ldrb	r3, [r2, r3]
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	58024400 	.word	0x58024400
 8006bd4:	0802103c 	.word	0x0802103c

08006bd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006bdc:	f7ff ffb6 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 8006be0:	4601      	mov	r1, r0
 8006be2:	4b06      	ldr	r3, [pc, #24]	; (8006bfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	4a04      	ldr	r2, [pc, #16]	; (8006c00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006bee:	5cd3      	ldrb	r3, [r2, r3]
 8006bf0:	f003 031f 	and.w	r3, r3, #31
 8006bf4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	0802103c 	.word	0x0802103c

08006c04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	223f      	movs	r2, #63	; 0x3f
 8006c12:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c14:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_RCC_GetClockConfig+0x7c>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0207 	and.w	r2, r3, #7
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006c20:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <HAL_RCC_GetClockConfig+0x7c>)
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006c2c:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <HAL_RCC_GetClockConfig+0x7c>)
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f003 020f 	and.w	r2, r3, #15
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006c38:	4b11      	ldr	r3, [pc, #68]	; (8006c80 <HAL_RCC_GetClockConfig+0x7c>)
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <HAL_RCC_GetClockConfig+0x7c>)
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <HAL_RCC_GetClockConfig+0x7c>)
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006c5c:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <HAL_RCC_GetClockConfig+0x7c>)
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006c68:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_RCC_GetClockConfig+0x80>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 020f 	and.w	r2, r3, #15
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	58024400 	.word	0x58024400
 8006c84:	52002000 	.word	0x52002000

08006c88 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c90:	2300      	movs	r3, #0
 8006c92:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c94:	2300      	movs	r3, #0
 8006c96:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d03d      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cac:	d013      	beq.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8006cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb2:	d802      	bhi.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006cb8:	e01f      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cbe:	d013      	beq.n	8006ce8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8006cc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cc4:	d01c      	beq.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006cc6:	e018      	b.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc8:	4bae      	ldr	r3, [pc, #696]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ccc:	4aad      	ldr	r2, [pc, #692]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cd4:	e015      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	2102      	movs	r1, #2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f001 f925 	bl	8007f2c <RCCEx_PLL2_Config>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ce6:	e00c      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3324      	adds	r3, #36	; 0x24
 8006cec:	2102      	movs	r1, #2
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 f9ce 	bl	8008090 <RCCEx_PLL3_Config>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cf8:	e003      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfe:	e000      	b.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8006d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d109      	bne.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d08:	4b9e      	ldr	r3, [pc, #632]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d14:	499b      	ldr	r1, [pc, #620]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	650b      	str	r3, [r1, #80]	; 0x50
 8006d1a:	e001      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1c:	7dfb      	ldrb	r3, [r7, #23]
 8006d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d03d      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d30:	2b04      	cmp	r3, #4
 8006d32:	d826      	bhi.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d51 	.word	0x08006d51
 8006d40:	08006d5f 	.word	0x08006d5f
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d89 	.word	0x08006d89
 8006d4c:	08006d89 	.word	0x08006d89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d50:	4b8c      	ldr	r3, [pc, #560]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4a8b      	ldr	r2, [pc, #556]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d5c:	e015      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	3304      	adds	r3, #4
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f001 f8e1 	bl	8007f2c <RCCEx_PLL2_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d6e:	e00c      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3324      	adds	r3, #36	; 0x24
 8006d74:	2100      	movs	r1, #0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f001 f98a 	bl	8008090 <RCCEx_PLL3_Config>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d80:	e003      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	75fb      	strb	r3, [r7, #23]
      break;
 8006d86:	e000      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8006d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d8a:	7dfb      	ldrb	r3, [r7, #23]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d109      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d90:	4b7c      	ldr	r3, [pc, #496]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d94:	f023 0207 	bic.w	r2, r3, #7
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d9c:	4979      	ldr	r1, [pc, #484]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	650b      	str	r3, [r1, #80]	; 0x50
 8006da2:	e001      	b.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d049      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006dba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dbe:	d022      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8006dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dc4:	d805      	bhi.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00d      	beq.n	8006de6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8006dca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dce:	d011      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006dd0:	e022      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006dd6:	d022      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006dd8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006ddc:	d021      	beq.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x19a>
 8006dde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006de2:	d020      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8006de4:	e018      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x190>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de6:	4b67      	ldr	r3, [pc, #412]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dea:	4a66      	ldr	r2, [pc, #408]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006df0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006df2:	e019      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3304      	adds	r3, #4
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f001 f896 	bl	8007f2c <RCCEx_PLL2_Config>
 8006e00:	4603      	mov	r3, r0
 8006e02:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e04:	e010      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3324      	adds	r3, #36	; 0x24
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 f93f 	bl	8008090 <RCCEx_PLL3_Config>
 8006e12:	4603      	mov	r3, r0
 8006e14:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e16:	e007      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8006e1c:	e004      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 8006e1e:	bf00      	nop
 8006e20:	e002      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 8006e22:	bf00      	nop
 8006e24:	e000      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      break;
 8006e26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10a      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e2e:	4b55      	ldr	r3, [pc, #340]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e32:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e3c:	4951      	ldr	r1, [pc, #324]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	658b      	str	r3, [r1, #88]	; 0x58
 8006e42:	e001      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
 8006e46:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d049      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e5e:	d022      	beq.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006e60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e64:	d805      	bhi.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8006e6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e6e:	d011      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8006e70:	e022      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006e72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e76:	d022      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x236>
 8006e78:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006e7c:	d021      	beq.n	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8006e7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006e82:	d020      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8006e84:	e018      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x230>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e86:	4b3f      	ldr	r3, [pc, #252]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	4a3e      	ldr	r2, [pc, #248]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e92:	e019      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3304      	adds	r3, #4
 8006e98:	2100      	movs	r1, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f001 f846 	bl	8007f2c <RCCEx_PLL2_Config>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006ea4:	e010      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3324      	adds	r3, #36	; 0x24
 8006eaa:	2100      	movs	r1, #0
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 f8ef 	bl	8008090 <RCCEx_PLL3_Config>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006eb6:	e007      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
      break;
 8006ebc:	e004      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
      break;
 8006ebe:	bf00      	nop
 8006ec0:	e002      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
      break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x240>
      break;
 8006ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10a      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ece:	4b2d      	ldr	r3, [pc, #180]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006edc:	4929      	ldr	r1, [pc, #164]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	658b      	str	r3, [r1, #88]	; 0x58
 8006ee2:	e001      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
 8006ee6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d032      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ef8:	2b10      	cmp	r3, #16
 8006efa:	d009      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006efc:	2b10      	cmp	r3, #16
 8006efe:	d802      	bhi.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d018      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8006f04:	e014      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d009      	beq.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006f0a:	2b30      	cmp	r3, #48	; 0x30
 8006f0c:	d015      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
 8006f0e:	e00f      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f10:	4b1c      	ldr	r3, [pc, #112]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	4a1b      	ldr	r2, [pc, #108]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006f1c:	e00e      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	3304      	adds	r3, #4
 8006f22:	2102      	movs	r1, #2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f001 f801 	bl	8007f2c <RCCEx_PLL2_Config>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8006f2e:	e005      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	75fb      	strb	r3, [r7, #23]
      break;
 8006f34:	e002      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      break;
 8006f36:	bf00      	nop
 8006f38:	e000      	b.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
      break;
 8006f3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f3c:	7dfb      	ldrb	r3, [r7, #23]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d109      	bne.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006f42:	4b10      	ldr	r3, [pc, #64]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4e:	490d      	ldr	r1, [pc, #52]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f54:	e001      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f56:	7dfb      	ldrb	r3, [r7, #23]
 8006f58:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d045      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f6e:	d022      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8006f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f74:	d808      	bhi.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00d      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x30e>
 8006f7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f7e:	d011      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006f80:	e022      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x340>
 8006f82:	bf00      	nop
 8006f84:	58024400 	.word	0x58024400
 8006f88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006f8c:	d01f      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x346>
 8006f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f92:	d01e      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006f94:	e018      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x340>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f96:	4ba4      	ldr	r3, [pc, #656]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	4aa3      	ldr	r2, [pc, #652]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8006f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fa2:	e017      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x34c>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	2100      	movs	r1, #0
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 ffbe 	bl	8007f2c <RCCEx_PLL2_Config>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fb4:	e00e      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x34c>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3324      	adds	r3, #36	; 0x24
 8006fba:	2100      	movs	r1, #0
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f867 	bl	8008090 <RCCEx_PLL3_Config>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006fc6:	e005      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	75fb      	strb	r3, [r7, #23]
      break;
 8006fcc:	e002      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      break;
 8006fce:	bf00      	nop
 8006fd0:	e000      	b.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
      break;
 8006fd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x366>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006fda:	4b93      	ldr	r3, [pc, #588]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8006fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fde:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe6:	4990      	ldr	r1, [pc, #576]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	650b      	str	r3, [r1, #80]	; 0x50
 8006fec:	e001      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fee:	7dfb      	ldrb	r3, [r7, #23]
 8006ff0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d042      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007002:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007006:	d01b      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 8007008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800700c:	d805      	bhi.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800700e:	2b00      	cmp	r3, #0
 8007010:	d022      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007012:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007016:	d00a      	beq.n	800702e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
 8007018:	e01b      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 800701a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800701e:	d01d      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8007020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007024:	d01c      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8007026:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800702a:	d01b      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 800702c:	e011      	b.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	3304      	adds	r3, #4
 8007032:	2101      	movs	r1, #1
 8007034:	4618      	mov	r0, r3
 8007036:	f000 ff79 	bl	8007f2c <RCCEx_PLL2_Config>
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800703e:	e012      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3324      	adds	r3, #36	; 0x24
 8007044:	2101      	movs	r1, #1
 8007046:	4618      	mov	r0, r3
 8007048:	f001 f822 	bl	8008090 <RCCEx_PLL3_Config>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007050:	e009      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	75fb      	strb	r3, [r7, #23]
      break;
 8007056:	e006      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 8007058:	bf00      	nop
 800705a:	e004      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 800705c:	bf00      	nop
 800705e:	e002      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 8007060:	bf00      	nop
 8007062:	e000      	b.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      break;
 8007064:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007066:	7dfb      	ldrb	r3, [r7, #23]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800706c:	4b6e      	ldr	r3, [pc, #440]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800706e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007070:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007078:	496b      	ldr	r1, [pc, #428]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800707a:	4313      	orrs	r3, r2
 800707c:	650b      	str	r3, [r1, #80]	; 0x50
 800707e:	e001      	b.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d044      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x492>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800709a:	d01b      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800709c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070a0:	d805      	bhi.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x426>
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d022      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x464>
 80070a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070aa:	d00a      	beq.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80070ac:	e01b      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80070ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b2:	d01d      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
 80070b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b8:	d01c      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80070ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80070be:	d01b      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x470>
 80070c0:	e011      	b.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	3304      	adds	r3, #4
 80070c6:	2101      	movs	r1, #1
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 ff2f 	bl	8007f2c <RCCEx_PLL2_Config>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070d2:	e012      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x472>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3324      	adds	r3, #36	; 0x24
 80070d8:	2101      	movs	r1, #1
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 ffd8 	bl	8008090 <RCCEx_PLL3_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80070e4:	e009      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x472>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
      break;
 80070ea:	e006      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 80070ec:	bf00      	nop
 80070ee:	e004      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 80070f0:	bf00      	nop
 80070f2:	e002      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 80070f4:	bf00      	nop
 80070f6:	e000      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x472>
      break;
 80070f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x48e>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007100:	4b49      	ldr	r3, [pc, #292]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8007102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007104:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800710e:	4946      	ldr	r1, [pc, #280]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8007110:	4313      	orrs	r3, r2
 8007112:	658b      	str	r3, [r1, #88]	; 0x58
 8007114:	e001      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x492>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d02d      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800712a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800712e:	d005      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x4b4>
 8007130:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007134:	d009      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d013      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800713a:	e00f      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800713c:	4b3a      	ldr	r3, [pc, #232]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	4a39      	ldr	r2, [pc, #228]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8007142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007148:	e00c      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x4dc>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3304      	adds	r3, #4
 800714e:	2101      	movs	r1, #1
 8007150:	4618      	mov	r0, r3
 8007152:	f000 feeb 	bl	8007f2c <RCCEx_PLL2_Config>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800715a:	e003      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
      break;
 8007160:	e000      	b.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
      break;
 8007162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d109      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800716a:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 800716c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007176:	492c      	ldr	r1, [pc, #176]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 8007178:	4313      	orrs	r3, r2
 800717a:	650b      	str	r3, [r1, #80]	; 0x50
 800717c:	e001      	b.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d031      	beq.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	2b03      	cmp	r3, #3
 8007194:	d81a      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x544>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071d3 	.word	0x080071d3
 80071a0:	080071ad 	.word	0x080071ad
 80071a4:	080071bb 	.word	0x080071bb
 80071a8:	080071d3 	.word	0x080071d3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ac:	4b1e      	ldr	r3, [pc, #120]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	4a1d      	ldr	r2, [pc, #116]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80071b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071b8:	e00c      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	2102      	movs	r1, #2
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 feb3 	bl	8007f2c <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80071ca:	e003      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]
      break;
 80071d0:	e000      	b.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
      break;
 80071d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071d4:	7dfb      	ldrb	r3, [r7, #23]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d109      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x566>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80071da:	4b13      	ldr	r3, [pc, #76]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80071dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071de:	f023 0203 	bic.w	r2, r3, #3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e6:	4910      	ldr	r1, [pc, #64]	; (8007228 <HAL_RCCEx_PeriphCLKConfig+0x5a0>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071ec:	e001      	b.n	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x56a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ee:	7dfb      	ldrb	r3, [r7, #23]
 80071f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 808a 	beq.w	8007314 <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007200:	4b0a      	ldr	r3, [pc, #40]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a09      	ldr	r2, [pc, #36]	; (800722c <HAL_RCCEx_PeriphCLKConfig+0x5a4>)
 8007206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800720a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800720c:	f7fa fd2a 	bl	8001c64 <HAL_GetTick>
 8007210:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007212:	e00d      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007214:	f7fa fd26 	bl	8001c64 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b64      	cmp	r3, #100	; 0x64
 8007220:	d906      	bls.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      {
        ret = HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	75fb      	strb	r3, [r7, #23]
        break;
 8007226:	e009      	b.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007228:	58024400 	.word	0x58024400
 800722c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007230:	4bb9      	ldr	r3, [pc, #740]	; (8007518 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d0eb      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x58c>
      }
    }

    if(ret == HAL_OK)
 800723c:	7dfb      	ldrb	r3, [r7, #23]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d166      	bne.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x688>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007242:	4bb6      	ldr	r3, [pc, #728]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007244:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800724c:	4053      	eors	r3, r2
 800724e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007252:	2b00      	cmp	r3, #0
 8007254:	d013      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x5f6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007256:	4bb1      	ldr	r3, [pc, #708]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800725a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007260:	4bae      	ldr	r3, [pc, #696]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	4aad      	ldr	r2, [pc, #692]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800726a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800726c:	4bab      	ldr	r3, [pc, #684]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800726e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007270:	4aaa      	ldr	r2, [pc, #680]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007276:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007278:	4aa8      	ldr	r2, [pc, #672]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007288:	d115      	bne.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728a:	f7fa fceb 	bl	8001c64 <HAL_GetTick>
 800728e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007290:	e00b      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x622>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007292:	f7fa fce7 	bl	8001c64 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d902      	bls.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x622>
          {
            ret = HAL_TIMEOUT;
 80072a4:	2303      	movs	r3, #3
 80072a6:	75fb      	strb	r3, [r7, #23]
            break;
 80072a8:	e005      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072aa:	4b9c      	ldr	r3, [pc, #624]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80072ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ae:	f003 0302 	and.w	r3, r3, #2
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0ed      	beq.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x60a>
          }
        }
      }

      if(ret == HAL_OK)
 80072b6:	7dfb      	ldrb	r3, [r7, #23]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d126      	bne.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x682>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80072ca:	d10d      	bne.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
 80072cc:	4b93      	ldr	r3, [pc, #588]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072da:	0919      	lsrs	r1, r3, #4
 80072dc:	4b90      	ldr	r3, [pc, #576]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x898>)
 80072de:	400b      	ands	r3, r1
 80072e0:	498e      	ldr	r1, [pc, #568]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	610b      	str	r3, [r1, #16]
 80072e6:	e005      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80072e8:	4b8c      	ldr	r3, [pc, #560]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	4a8b      	ldr	r2, [pc, #556]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80072ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80072f2:	6113      	str	r3, [r2, #16]
 80072f4:	4b89      	ldr	r3, [pc, #548]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 80072f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007302:	4986      	ldr	r1, [pc, #536]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007304:	4313      	orrs	r3, r2
 8007306:	670b      	str	r3, [r1, #112]	; 0x70
 8007308:	e004      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	75bb      	strb	r3, [r7, #22]
 800730e:	e001      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x68c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d07e      	beq.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x796>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007324:	2b28      	cmp	r3, #40	; 0x28
 8007326:	d867      	bhi.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8007328:	a201      	add	r2, pc, #4	; (adr r2, 8007330 <HAL_RCCEx_PeriphCLKConfig+0x6a8>)
 800732a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732e:	bf00      	nop
 8007330:	080073ff 	.word	0x080073ff
 8007334:	080073f9 	.word	0x080073f9
 8007338:	080073f9 	.word	0x080073f9
 800733c:	080073f9 	.word	0x080073f9
 8007340:	080073f9 	.word	0x080073f9
 8007344:	080073f9 	.word	0x080073f9
 8007348:	080073f9 	.word	0x080073f9
 800734c:	080073f9 	.word	0x080073f9
 8007350:	080073d5 	.word	0x080073d5
 8007354:	080073f9 	.word	0x080073f9
 8007358:	080073f9 	.word	0x080073f9
 800735c:	080073f9 	.word	0x080073f9
 8007360:	080073f9 	.word	0x080073f9
 8007364:	080073f9 	.word	0x080073f9
 8007368:	080073f9 	.word	0x080073f9
 800736c:	080073f9 	.word	0x080073f9
 8007370:	080073e7 	.word	0x080073e7
 8007374:	080073f9 	.word	0x080073f9
 8007378:	080073f9 	.word	0x080073f9
 800737c:	080073f9 	.word	0x080073f9
 8007380:	080073f9 	.word	0x080073f9
 8007384:	080073f9 	.word	0x080073f9
 8007388:	080073f9 	.word	0x080073f9
 800738c:	080073f9 	.word	0x080073f9
 8007390:	080073ff 	.word	0x080073ff
 8007394:	080073f9 	.word	0x080073f9
 8007398:	080073f9 	.word	0x080073f9
 800739c:	080073f9 	.word	0x080073f9
 80073a0:	080073f9 	.word	0x080073f9
 80073a4:	080073f9 	.word	0x080073f9
 80073a8:	080073f9 	.word	0x080073f9
 80073ac:	080073f9 	.word	0x080073f9
 80073b0:	080073ff 	.word	0x080073ff
 80073b4:	080073f9 	.word	0x080073f9
 80073b8:	080073f9 	.word	0x080073f9
 80073bc:	080073f9 	.word	0x080073f9
 80073c0:	080073f9 	.word	0x080073f9
 80073c4:	080073f9 	.word	0x080073f9
 80073c8:	080073f9 	.word	0x080073f9
 80073cc:	080073f9 	.word	0x080073f9
 80073d0:	080073ff 	.word	0x080073ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3304      	adds	r3, #4
 80073d8:	2101      	movs	r1, #1
 80073da:	4618      	mov	r0, r3
 80073dc:	f000 fda6 	bl	8007f2c <RCCEx_PLL2_Config>
 80073e0:	4603      	mov	r3, r0
 80073e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073e4:	e00c      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x778>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3324      	adds	r3, #36	; 0x24
 80073ea:	2101      	movs	r1, #1
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fe4f 	bl	8008090 <RCCEx_PLL3_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80073f6:	e003      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x778>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	75fb      	strb	r3, [r7, #23]
      break;
 80073fc:	e000      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x778>
      break;
 80073fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007400:	7dfb      	ldrb	r3, [r7, #23]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d109      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x792>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007406:	4b45      	ldr	r3, [pc, #276]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007412:	4942      	ldr	r1, [pc, #264]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007414:	4313      	orrs	r3, r2
 8007416:	654b      	str	r3, [r1, #84]	; 0x54
 8007418:	e001      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x796>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800741a:	7dfb      	ldrb	r3, [r7, #23]
 800741c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d037      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x812>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	2b05      	cmp	r3, #5
 8007430:	d820      	bhi.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <HAL_RCCEx_PeriphCLKConfig+0x7b0>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	0800747b 	.word	0x0800747b
 800743c:	08007451 	.word	0x08007451
 8007440:	08007463 	.word	0x08007463
 8007444:	0800747b 	.word	0x0800747b
 8007448:	0800747b 	.word	0x0800747b
 800744c:	0800747b 	.word	0x0800747b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	3304      	adds	r3, #4
 8007454:	2101      	movs	r1, #1
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fd68 	bl	8007f2c <RCCEx_PLL2_Config>
 800745c:	4603      	mov	r3, r0
 800745e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007460:	e00c      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x7f4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	3324      	adds	r3, #36	; 0x24
 8007466:	2101      	movs	r1, #1
 8007468:	4618      	mov	r0, r3
 800746a:	f000 fe11 	bl	8008090 <RCCEx_PLL3_Config>
 800746e:	4603      	mov	r3, r0
 8007470:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007472:	e003      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	75fb      	strb	r3, [r7, #23]
      break;
 8007478:	e000      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
      break;
 800747a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007482:	4b26      	ldr	r3, [pc, #152]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007486:	f023 0207 	bic.w	r2, r3, #7
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800748e:	4923      	ldr	r1, [pc, #140]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007490:	4313      	orrs	r3, r2
 8007492:	654b      	str	r3, [r1, #84]	; 0x54
 8007494:	e001      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x812>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d040      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074ac:	2b05      	cmp	r3, #5
 80074ae:	d821      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 80074b0:	a201      	add	r2, pc, #4	; (adr r2, 80074b8 <HAL_RCCEx_PeriphCLKConfig+0x830>)
 80074b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074b6:	bf00      	nop
 80074b8:	080074fb 	.word	0x080074fb
 80074bc:	080074d1 	.word	0x080074d1
 80074c0:	080074e3 	.word	0x080074e3
 80074c4:	080074fb 	.word	0x080074fb
 80074c8:	080074fb 	.word	0x080074fb
 80074cc:	080074fb 	.word	0x080074fb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3304      	adds	r3, #4
 80074d4:	2101      	movs	r1, #1
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 fd28 	bl	8007f2c <RCCEx_PLL2_Config>
 80074dc:	4603      	mov	r3, r0
 80074de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074e0:	e00c      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x874>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3324      	adds	r3, #36	; 0x24
 80074e6:	2101      	movs	r1, #1
 80074e8:	4618      	mov	r0, r3
 80074ea:	f000 fdd1 	bl	8008090 <RCCEx_PLL3_Config>
 80074ee:	4603      	mov	r3, r0
 80074f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80074f2:	e003      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x874>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	75fb      	strb	r3, [r7, #23]
      break;
 80074f8:	e000      	b.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x874>
      break;
 80074fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074fc:	7dfb      	ldrb	r3, [r7, #23]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d110      	bne.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x89c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007502:	4b06      	ldr	r3, [pc, #24]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	f023 0207 	bic.w	r2, r3, #7
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007510:	4902      	ldr	r1, [pc, #8]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x894>)
 8007512:	4313      	orrs	r3, r2
 8007514:	658b      	str	r3, [r1, #88]	; 0x58
 8007516:	e007      	b.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 8007518:	58024800 	.word	0x58024800
 800751c:	58024400 	.word	0x58024400
 8007520:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007524:	7dfb      	ldrb	r3, [r7, #23]
 8007526:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d044      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x936>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800753e:	d01b      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007544:	d805      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
 8007546:	2b00      	cmp	r3, #0
 8007548:	d022      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800754a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800754e:	d00a      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x8de>
 8007550:	e01b      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x902>
 8007552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007556:	d01d      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 8007558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800755c:	d01c      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800755e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007562:	d01b      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007564:	e011      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x902>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	3304      	adds	r3, #4
 800756a:	2100      	movs	r1, #0
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fcdd 	bl	8007f2c <RCCEx_PLL2_Config>
 8007572:	4603      	mov	r3, r0
 8007574:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007576:	e012      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x916>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3324      	adds	r3, #36	; 0x24
 800757c:	2102      	movs	r1, #2
 800757e:	4618      	mov	r0, r3
 8007580:	f000 fd86 	bl	8008090 <RCCEx_PLL3_Config>
 8007584:	4603      	mov	r3, r0
 8007586:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007588:	e009      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x916>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	75fb      	strb	r3, [r7, #23]
      break;
 800758e:	e006      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 8007590:	bf00      	nop
 8007592:	e004      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x916>
      break;
 800759c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d10a      	bne.n	80075ba <HAL_RCCEx_PeriphCLKConfig+0x932>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80075a4:	4bb2      	ldr	r3, [pc, #712]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80075a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b2:	49af      	ldr	r1, [pc, #700]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	654b      	str	r3, [r1, #84]	; 0x54
 80075b8:	e001      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x936>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ba:	7dfb      	ldrb	r3, [r7, #23]
 80075bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d044      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d4:	d01b      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x986>
 80075d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075da:	d805      	bhi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x960>
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d022      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x99e>
 80075e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e4:	d00a      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x974>
 80075e6:	e01b      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x998>
 80075e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ec:	d01d      	beq.n	800762a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
 80075ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80075f2:	d01c      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 80075f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f8:	d01b      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 80075fa:	e011      	b.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x998>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	2100      	movs	r1, #0
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fc92 	bl	8007f2c <RCCEx_PLL2_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800760c:	e012      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x9ac>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	3324      	adds	r3, #36	; 0x24
 8007612:	2102      	movs	r1, #2
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fd3b 	bl	8008090 <RCCEx_PLL3_Config>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800761e:	e009      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	75fb      	strb	r3, [r7, #23]
      break;
 8007624:	e006      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 8007626:	bf00      	nop
 8007628:	e004      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 800762a:	bf00      	nop
 800762c:	e002      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 800762e:	bf00      	nop
 8007630:	e000      	b.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      break;
 8007632:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007634:	7dfb      	ldrb	r3, [r7, #23]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10a      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800763a:	4b8d      	ldr	r3, [pc, #564]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800763c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800763e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007648:	4989      	ldr	r1, [pc, #548]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800764a:	4313      	orrs	r3, r2
 800764c:	658b      	str	r3, [r1, #88]	; 0x58
 800764e:	e001      	b.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b00      	cmp	r3, #0
 800765e:	d044      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xa62>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800766a:	d01b      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xa1c>
 800766c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007670:	d805      	bhi.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d022      	beq.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8007676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767a:	d00a      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800767c:	e01b      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 800767e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007682:	d01d      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0xa38>
 8007684:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007688:	d01c      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
 800768a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800768e:	d01b      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007690:	e011      	b.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3304      	adds	r3, #4
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fc47 	bl	8007f2c <RCCEx_PLL2_Config>
 800769e:	4603      	mov	r3, r0
 80076a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076a2:	e012      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa42>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	3324      	adds	r3, #36	; 0x24
 80076a8:	2102      	movs	r1, #2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fcf0 	bl	8008090 <RCCEx_PLL3_Config>
 80076b0:	4603      	mov	r3, r0
 80076b2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80076b4:	e009      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa42>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	75fb      	strb	r3, [r7, #23]
      break;
 80076ba:	e006      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 80076bc:	bf00      	nop
 80076be:	e004      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 80076c0:	bf00      	nop
 80076c2:	e002      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 80076c4:	bf00      	nop
 80076c6:	e000      	b.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xa42>
      break;
 80076c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10a      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076d0:	4b67      	ldr	r3, [pc, #412]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80076d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076de:	4964      	ldr	r1, [pc, #400]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	658b      	str	r3, [r1, #88]	; 0x58
 80076e4:	e001      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xa62>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
 80076e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d018      	beq.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fe:	d10a      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3324      	adds	r3, #36	; 0x24
 8007704:	2102      	movs	r1, #2
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fcc2 	bl	8008090 <RCCEx_PLL3_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xa8e>
        {
          status = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007716:	4b56      	ldr	r3, [pc, #344]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007722:	4953      	ldr	r1, [pc, #332]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007724:	4313      	orrs	r3, r2
 8007726:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b00      	cmp	r3, #0
 8007732:	d01a      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0xae2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800773a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800773e:	d10a      	bne.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3324      	adds	r3, #36	; 0x24
 8007744:	2102      	movs	r1, #2
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fca2 	bl	8008090 <RCCEx_PLL3_Config>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xace>
      {
        status = HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007756:	4b46      	ldr	r3, [pc, #280]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007764:	4942      	ldr	r1, [pc, #264]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007766:	4313      	orrs	r3, r2
 8007768:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d030      	beq.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800777c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007780:	d00d      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xb16>
 8007782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007786:	d016      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007788:	2b00      	cmp	r3, #0
 800778a:	d111      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xb28>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3304      	adds	r3, #4
 8007790:	2100      	movs	r1, #0
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fbca 	bl	8007f2c <RCCEx_PLL2_Config>
 8007798:	4603      	mov	r3, r0
 800779a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800779c:	e00c      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3324      	adds	r3, #36	; 0x24
 80077a2:	2102      	movs	r1, #2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fc73 	bl	8008090 <RCCEx_PLL3_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80077ae:	e003      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	75fb      	strb	r3, [r7, #23]
      break;
 80077b4:	e000      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80077b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80077be:	4b2c      	ldr	r3, [pc, #176]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077cc:	4928      	ldr	r1, [pc, #160]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	658b      	str	r3, [r1, #88]	; 0x58
 80077d2:	e001      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d4:	7dfb      	ldrb	r3, [r7, #23]
 80077d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d02f      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ee:	d00c      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80077f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80077f4:	d015      	beq.n	8007822 <HAL_RCCEx_PeriphCLKConfig+0xb9a>
 80077f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077fa:	d10f      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xb94>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077fc:	4b1c      	ldr	r3, [pc, #112]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a1b      	ldr	r2, [pc, #108]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007808:	e00c      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3324      	adds	r3, #36	; 0x24
 800780e:	2101      	movs	r1, #1
 8007810:	4618      	mov	r0, r3
 8007812:	f000 fc3d 	bl	8008090 <RCCEx_PLL3_Config>
 8007816:	4603      	mov	r3, r0
 8007818:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800781a:	e003      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	75fb      	strb	r3, [r7, #23]
      break;
 8007820:	e000      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
      break;
 8007822:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10a      	bne.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800782a:	4b11      	ldr	r3, [pc, #68]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800782c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800782e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007838:	490d      	ldr	r1, [pc, #52]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 800783a:	4313      	orrs	r3, r2
 800783c:	654b      	str	r3, [r1, #84]	; 0x54
 800783e:	e001      	b.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d02c      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d003      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 8007858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800785c:	d00a      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xbec>
 800785e:	e012      	b.n	8007886 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007860:	4b03      	ldr	r3, [pc, #12]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	4a02      	ldr	r2, [pc, #8]	; (8007870 <HAL_RCCEx_PeriphCLKConfig+0xbe8>)
 8007866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800786a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800786c:	e00e      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xc04>
 800786e:	bf00      	nop
 8007870:	58024400 	.word	0x58024400

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	3304      	adds	r3, #4
 8007878:	2102      	movs	r1, #2
 800787a:	4618      	mov	r0, r3
 800787c:	f000 fb56 	bl	8007f2c <RCCEx_PLL2_Config>
 8007880:	4603      	mov	r3, r0
 8007882:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007884:	e002      	b.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xc04>

    default:
      ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	75fb      	strb	r3, [r7, #23]
      break;
 800788a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800788c:	7dfb      	ldrb	r3, [r7, #23]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007892:	4b4e      	ldr	r3, [pc, #312]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007896:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800789e:	494b      	ldr	r1, [pc, #300]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80078a4:	e001      	b.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a6:	7dfb      	ldrb	r3, [r7, #23]
 80078a8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3324      	adds	r3, #36	; 0x24
 80078ba:	2102      	movs	r1, #2
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fbe7 	bl	8008090 <RCCEx_PLL3_Config>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d001      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xc44>
    {
      status=HAL_ERROR;
 80078c8:	2301      	movs	r3, #1
 80078ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d02f      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
  {

    switch(PeriphClkInit->RngClockSelection)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e0:	d00c      	beq.n	80078fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80078e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e6:	d802      	bhi.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xc66>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d011      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xc88>
 80078ec:	e00d      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xc82>
 80078ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f2:	d00f      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
 80078f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078f8:	d00e      	beq.n	8007918 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 80078fa:	e006      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078fc:	4b33      	ldr	r3, [pc, #204]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	4a32      	ldr	r2, [pc, #200]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007908:	e007      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xc92>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	75fb      	strb	r3, [r7, #23]
      break;
 800790e:	e004      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xc92>
      break;
 8007910:	bf00      	nop
 8007912:	e002      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xc92>
      break;
 8007914:	bf00      	nop
 8007916:	e000      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xc92>
      break;
 8007918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800791a:	7dfb      	ldrb	r3, [r7, #23]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007920:	4b2a      	ldr	r3, [pc, #168]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800792c:	4927      	ldr	r1, [pc, #156]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800792e:	4313      	orrs	r3, r2
 8007930:	654b      	str	r3, [r1, #84]	; 0x54
 8007932:	e001      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007934:	7dfb      	ldrb	r3, [r7, #23]
 8007936:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d008      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007944:	4b21      	ldr	r3, [pc, #132]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007948:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007950:	491e      	ldr	r1, [pc, #120]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007952:	4313      	orrs	r3, r2
 8007954:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xcec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007962:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007966:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796e:	4917      	ldr	r1, [pc, #92]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007970:	4313      	orrs	r3, r2
 8007972:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00d      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0xd14>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007980:	4b12      	ldr	r3, [pc, #72]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	4a11      	ldr	r2, [pc, #68]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007986:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800798a:	6113      	str	r3, [r2, #16]
 800798c:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800798e:	691a      	ldr	r2, [r3, #16]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007996:	490d      	ldr	r1, [pc, #52]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007998:	4313      	orrs	r3, r2
 800799a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	da08      	bge.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80079a4:	4b09      	ldr	r3, [pc, #36]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80079a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	4906      	ldr	r1, [pc, #24]	; (80079cc <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80079b6:	7dbb      	ldrb	r3, [r7, #22]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d101      	bne.n	80079c0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
  {
    return HAL_OK;
 80079bc:	2300      	movs	r3, #0
 80079be:	e000      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
  }
  return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	58024400 	.word	0x58024400

080079d0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80079d4:	f7ff f8ba 	bl	8006b4c <HAL_RCC_GetHCLKFreq>
 80079d8:	4601      	mov	r1, r0
 80079da:	4b06      	ldr	r3, [pc, #24]	; (80079f4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	091b      	lsrs	r3, r3, #4
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	4a04      	ldr	r2, [pc, #16]	; (80079f8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80079e6:	5cd3      	ldrb	r3, [r2, r3]
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	58024400 	.word	0x58024400
 80079f8:	0802103c 	.word	0x0802103c

080079fc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b089      	sub	sp, #36	; 0x24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a04:	4b9d      	ldr	r3, [pc, #628]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a08:	f003 0303 	and.w	r3, r3, #3
 8007a0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007a0e:	4b9b      	ldr	r3, [pc, #620]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a12:	0b1b      	lsrs	r3, r3, #12
 8007a14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007a1a:	4b98      	ldr	r3, [pc, #608]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a1e:	091b      	lsrs	r3, r3, #4
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007a26:	4b95      	ldr	r3, [pc, #596]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2a:	08db      	lsrs	r3, r3, #3
 8007a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	fb02 f303 	mul.w	r3, r2, r3
 8007a36:	ee07 3a90 	vmov	s15, r3
 8007a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 810a 	beq.w	8007c5e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d05a      	beq.n	8007b06 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d302      	bcc.n	8007a5a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d078      	beq.n	8007b4a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007a58:	e099      	b.n	8007b8e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a5a:	4b88      	ldr	r3, [pc, #544]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0320 	and.w	r3, r3, #32
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d02d      	beq.n	8007ac2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a66:	4b85      	ldr	r3, [pc, #532]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	08db      	lsrs	r3, r3, #3
 8007a6c:	f003 0303 	and.w	r3, r3, #3
 8007a70:	4a83      	ldr	r2, [pc, #524]	; (8007c80 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007a72:	fa22 f303 	lsr.w	r3, r2, r3
 8007a76:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	ee07 3a90 	vmov	s15, r3
 8007a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	ee07 3a90 	vmov	s15, r3
 8007a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a90:	4b7a      	ldr	r3, [pc, #488]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a98:	ee07 3a90 	vmov	s15, r3
 8007a9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007aa4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007aa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ab0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ab4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007abc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ac0:	e087      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	ee07 3a90 	vmov	s15, r3
 8007ac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007acc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007c88 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007ad0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ad4:	4b69      	ldr	r3, [pc, #420]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007adc:	ee07 3a90 	vmov	s15, r3
 8007ae0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ae8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007aec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007af0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007af4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007af8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b04:	e065      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	ee07 3a90 	vmov	s15, r3
 8007b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b10:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b18:	4b58      	ldr	r3, [pc, #352]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b20:	ee07 3a90 	vmov	s15, r3
 8007b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b2c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b48:	e043      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007c90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007b58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5c:	4b47      	ldr	r3, [pc, #284]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b64:	ee07 3a90 	vmov	s15, r3
 8007b68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b70:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007b74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b88:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b8c:	e021      	b.n	8007bd2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	ee07 3a90 	vmov	s15, r3
 8007b94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b98:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8007b9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ba0:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba8:	ee07 3a90 	vmov	s15, r3
 8007bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007c84 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007bb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bcc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bd0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007bd2:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	0a5b      	lsrs	r3, r3, #9
 8007bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bdc:	ee07 3a90 	vmov	s15, r3
 8007be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007be8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bf8:	ee17 2a90 	vmov	r2, s15
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007c00:	4b1e      	ldr	r3, [pc, #120]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c04:	0c1b      	lsrs	r3, r3, #16
 8007c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c0a:	ee07 3a90 	vmov	s15, r3
 8007c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c26:	ee17 2a90 	vmov	r2, s15
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c32:	0e1b      	lsrs	r3, r3, #24
 8007c34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c38:	ee07 3a90 	vmov	s15, r3
 8007c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c54:	ee17 2a90 	vmov	r2, s15
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007c5c:	e008      	b.n	8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
}
 8007c70:	bf00      	nop
 8007c72:	3724      	adds	r7, #36	; 0x24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	58024400 	.word	0x58024400
 8007c80:	03d09000 	.word	0x03d09000
 8007c84:	46000000 	.word	0x46000000
 8007c88:	4c742400 	.word	0x4c742400
 8007c8c:	4a742400 	.word	0x4a742400
 8007c90:	4af42400 	.word	0x4af42400

08007c94 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c9c:	4b9d      	ldr	r3, [pc, #628]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ca0:	f003 0303 	and.w	r3, r3, #3
 8007ca4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007ca6:	4b9b      	ldr	r3, [pc, #620]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007caa:	0d1b      	lsrs	r3, r3, #20
 8007cac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cb0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007cb2:	4b98      	ldr	r3, [pc, #608]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	f003 0301 	and.w	r3, r3, #1
 8007cbc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007cbe:	4b95      	ldr	r3, [pc, #596]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cc2:	08db      	lsrs	r3, r3, #3
 8007cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007cc8:	693a      	ldr	r2, [r7, #16]
 8007cca:	fb02 f303 	mul.w	r3, r2, r3
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 810a 	beq.w	8007ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8007ce2:	69bb      	ldr	r3, [r7, #24]
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d05a      	beq.n	8007d9e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d302      	bcc.n	8007cf2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d078      	beq.n	8007de2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8007cf0:	e099      	b.n	8007e26 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf2:	4b88      	ldr	r3, [pc, #544]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0320 	and.w	r3, r3, #32
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d02d      	beq.n	8007d5a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cfe:	4b85      	ldr	r3, [pc, #532]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	08db      	lsrs	r3, r3, #3
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	4a83      	ldr	r2, [pc, #524]	; (8007f18 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8007d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8007d0e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	ee07 3a90 	vmov	s15, r3
 8007d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d28:	4b7a      	ldr	r3, [pc, #488]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d30:	ee07 3a90 	vmov	s15, r3
 8007d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007d58:	e087      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	ee07 3a90 	vmov	s15, r3
 8007d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007f20 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d6c:	4b69      	ldr	r3, [pc, #420]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d74:	ee07 3a90 	vmov	s15, r3
 8007d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d80:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d9c:	e065      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007dac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007db0:	4b58      	ldr	r3, [pc, #352]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db8:	ee07 3a90 	vmov	s15, r3
 8007dbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dc0:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007dc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007de0:	e043      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007f28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8007df0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df4:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e08:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e24:	e021      	b.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007f24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e48:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007f1c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e68:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e6e:	0a5b      	lsrs	r3, r3, #9
 8007e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e74:	ee07 3a90 	vmov	s15, r3
 8007e78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e84:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e90:	ee17 2a90 	vmov	r2, s15
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007e98:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ea2:	ee07 3a90 	vmov	s15, r3
 8007ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007eae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007eb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007eb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007eba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ebe:	ee17 2a90 	vmov	r2, s15
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ec6:	4b13      	ldr	r3, [pc, #76]	; (8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	0e1b      	lsrs	r3, r3, #24
 8007ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ed0:	ee07 3a90 	vmov	s15, r3
 8007ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007edc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ee0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ee4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ee8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007eec:	ee17 2a90 	vmov	r2, s15
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ef4:	e008      	b.n	8007f08 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	609a      	str	r2, [r3, #8]
}
 8007f08:	bf00      	nop
 8007f0a:	3724      	adds	r7, #36	; 0x24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	58024400 	.word	0x58024400
 8007f18:	03d09000 	.word	0x03d09000
 8007f1c:	46000000 	.word	0x46000000
 8007f20:	4c742400 	.word	0x4c742400
 8007f24:	4a742400 	.word	0x4a742400
 8007f28:	4af42400 	.word	0x4af42400

08007f2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f3a:	4b53      	ldr	r3, [pc, #332]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	f003 0303 	and.w	r3, r3, #3
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d101      	bne.n	8007f4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	e099      	b.n	800807e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007f4a:	4b4f      	ldr	r3, [pc, #316]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a4e      	ldr	r2, [pc, #312]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f56:	f7f9 fe85 	bl	8001c64 <HAL_GetTick>
 8007f5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f5c:	e008      	b.n	8007f70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007f5e:	f7f9 fe81 	bl	8001c64 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d901      	bls.n	8007f70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e086      	b.n	800807e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f70:	4b45      	ldr	r3, [pc, #276]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d1f0      	bne.n	8007f5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007f7c:	4b42      	ldr	r3, [pc, #264]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	031b      	lsls	r3, r3, #12
 8007f8a:	493f      	ldr	r1, [pc, #252]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	025b      	lsls	r3, r3, #9
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	061b      	lsls	r3, r3, #24
 8007fbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007fc0:	4931      	ldr	r1, [pc, #196]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007fc6:	4b30      	ldr	r3, [pc, #192]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	492d      	ldr	r1, [pc, #180]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007fd8:	4b2b      	ldr	r3, [pc, #172]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fdc:	f023 0220 	bic.w	r2, r3, #32
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	4928      	ldr	r1, [pc, #160]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007fea:	4b27      	ldr	r3, [pc, #156]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	4a26      	ldr	r2, [pc, #152]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007ff0:	f023 0310 	bic.w	r3, r3, #16
 8007ff4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8007ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ffa:	4b24      	ldr	r3, [pc, #144]	; (800808c <RCCEx_PLL2_Config+0x160>)
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	69d2      	ldr	r2, [r2, #28]
 8008002:	00d2      	lsls	r2, r2, #3
 8008004:	4920      	ldr	r1, [pc, #128]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008006:	4313      	orrs	r3, r2
 8008008:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800800a:	4b1f      	ldr	r3, [pc, #124]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800800e:	4a1e      	ldr	r2, [pc, #120]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008010:	f043 0310 	orr.w	r3, r3, #16
 8008014:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d106      	bne.n	800802a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800801c:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	4a19      	ldr	r2, [pc, #100]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008022:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008026:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008028:	e00f      	b.n	800804a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d106      	bne.n	800803e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008030:	4b15      	ldr	r3, [pc, #84]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	4a14      	ldr	r2, [pc, #80]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800803a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800803c:	e005      	b.n	800804a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800803e:	4b12      	ldr	r3, [pc, #72]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008042:	4a11      	ldr	r2, [pc, #68]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008048:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800804a:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a0e      	ldr	r2, [pc, #56]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008050:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008056:	f7f9 fe05 	bl	8001c64 <HAL_GetTick>
 800805a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800805c:	e008      	b.n	8008070 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800805e:	f7f9 fe01 	bl	8001c64 <HAL_GetTick>
 8008062:	4602      	mov	r2, r0
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	1ad3      	subs	r3, r2, r3
 8008068:	2b02      	cmp	r3, #2
 800806a:	d901      	bls.n	8008070 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e006      	b.n	800807e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008070:	4b05      	ldr	r3, [pc, #20]	; (8008088 <RCCEx_PLL2_Config+0x15c>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0f0      	beq.n	800805e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800807c:	7bfb      	ldrb	r3, [r7, #15]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	58024400 	.word	0x58024400
 800808c:	ffff0007 	.word	0xffff0007

08008090 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800809e:	4b53      	ldr	r3, [pc, #332]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a2:	f003 0303 	and.w	r3, r3, #3
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d101      	bne.n	80080ae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e099      	b.n	80081e2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80080ae:	4b4f      	ldr	r3, [pc, #316]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a4e      	ldr	r2, [pc, #312]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080ba:	f7f9 fdd3 	bl	8001c64 <HAL_GetTick>
 80080be:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080c0:	e008      	b.n	80080d4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80080c2:	f7f9 fdcf 	bl	8001c64 <HAL_GetTick>
 80080c6:	4602      	mov	r2, r0
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d901      	bls.n	80080d4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e086      	b.n	80081e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80080d4:	4b45      	ldr	r3, [pc, #276]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d1f0      	bne.n	80080c2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80080e0:	4b42      	ldr	r3, [pc, #264]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	051b      	lsls	r3, r3, #20
 80080ee:	493f      	ldr	r1, [pc, #252]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	628b      	str	r3, [r1, #40]	; 0x28
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	3b01      	subs	r3, #1
 8008104:	025b      	lsls	r3, r3, #9
 8008106:	b29b      	uxth	r3, r3
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	3b01      	subs	r3, #1
 8008110:	041b      	lsls	r3, r3, #16
 8008112:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008116:	431a      	orrs	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	3b01      	subs	r3, #1
 800811e:	061b      	lsls	r3, r3, #24
 8008120:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008124:	4931      	ldr	r1, [pc, #196]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008126:	4313      	orrs	r3, r2
 8008128:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800812a:	4b30      	ldr	r3, [pc, #192]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800812c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	492d      	ldr	r1, [pc, #180]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008138:	4313      	orrs	r3, r2
 800813a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800813c:	4b2b      	ldr	r3, [pc, #172]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	4928      	ldr	r1, [pc, #160]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800814a:	4313      	orrs	r3, r2
 800814c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800814e:	4b27      	ldr	r3, [pc, #156]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	4a26      	ldr	r2, [pc, #152]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008158:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800815a:	4b24      	ldr	r3, [pc, #144]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800815c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800815e:	4b24      	ldr	r3, [pc, #144]	; (80081f0 <RCCEx_PLL3_Config+0x160>)
 8008160:	4013      	ands	r3, r2
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	69d2      	ldr	r2, [r2, #28]
 8008166:	00d2      	lsls	r2, r2, #3
 8008168:	4920      	ldr	r1, [pc, #128]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800816a:	4313      	orrs	r3, r2
 800816c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800816e:	4b1f      	ldr	r3, [pc, #124]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008172:	4a1e      	ldr	r2, [pc, #120]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d106      	bne.n	800818e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008180:	4b1a      	ldr	r3, [pc, #104]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008184:	4a19      	ldr	r2, [pc, #100]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008186:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800818a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800818c:	e00f      	b.n	80081ae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	2b01      	cmp	r3, #1
 8008192:	d106      	bne.n	80081a2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008194:	4b15      	ldr	r3, [pc, #84]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	4a14      	ldr	r2, [pc, #80]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 800819a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800819e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80081a0:	e005      	b.n	80081ae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	4a11      	ldr	r2, [pc, #68]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80081ae:	4b0f      	ldr	r3, [pc, #60]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a0e      	ldr	r2, [pc, #56]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ba:	f7f9 fd53 	bl	8001c64 <HAL_GetTick>
 80081be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081c0:	e008      	b.n	80081d4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081c2:	f7f9 fd4f 	bl	8001c64 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d901      	bls.n	80081d4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e006      	b.n	80081e2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80081d4:	4b05      	ldr	r3, [pc, #20]	; (80081ec <RCCEx_PLL3_Config+0x15c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d0f0      	beq.n	80081c2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	58024400 	.word	0x58024400
 80081f0:	ffff0007 	.word	0xffff0007

080081f4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e083      	b.n	800830e <HAL_RNG_Init+0x11a>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	7a5b      	ldrb	r3, [r3, #9]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d105      	bne.n	800821c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7f8 ffc4 	bl	80011a4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2202      	movs	r2, #2
 8008220:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0204 	bic.w	r2, r2, #4
 8008230:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	4b37      	ldr	r3, [pc, #220]	; (8008318 <HAL_RNG_Init+0x124>)
 800823a:	4013      	ands	r3, r2
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	6852      	ldr	r2, [r2, #4]
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800824a:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a32      	ldr	r2, [pc, #200]	; (800831c <HAL_RNG_Init+0x128>)
 8008252:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f247 2274 	movw	r2, #29300	; 0x7274
 800825c:	611a      	str	r2, [r3, #16]
#endif

  /* Writing bits CONDRST=0*/
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800826c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800826e:	f7f9 fcf9 	bl	8001c64 <HAL_GetTick>
 8008272:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008274:	e00e      	b.n	8008294 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008276:	f7f9 fcf5 	bl	8001c64 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d907      	bls.n	8008294 <HAL_RNG_Init+0xa0>
    {
      hrng->State = HAL_RNG_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e03c      	b.n	800830e <HAL_RNG_Init+0x11a>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800829e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a2:	d0e8      	beq.n	8008276 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0204 	orr.w	r2, r2, #4
 80082b2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082be:	2b40      	cmp	r3, #64	; 0x40
 80082c0:	d104      	bne.n	80082cc <HAL_RNG_Init+0xd8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2204      	movs	r2, #4
 80082c6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80082c8:	2301      	movs	r3, #1
 80082ca:	e020      	b.n	800830e <HAL_RNG_Init+0x11a>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80082cc:	f7f9 fcca 	bl	8001c64 <HAL_GetTick>
 80082d0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80082d2:	e00e      	b.n	80082f2 <HAL_RNG_Init+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80082d4:	f7f9 fcc6 	bl	8001c64 <HAL_GetTick>
 80082d8:	4602      	mov	r2, r0
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	2b02      	cmp	r3, #2
 80082e0:	d907      	bls.n	80082f2 <HAL_RNG_Init+0xfe>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2204      	movs	r2, #4
 80082e6:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	e00d      	b.n	800830e <HAL_RNG_Init+0x11a>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d0e9      	beq.n	80082d4 <HAL_RNG_Init+0xe0>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	bfffffdf 	.word	0xbfffffdf
 800831c:	17590abc 	.word	0x17590abc

08008320 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d067      	beq.n	8008402 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7f8 ff4e 	bl	80011e8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2202      	movs	r2, #2
 8008350:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	22ca      	movs	r2, #202	; 0xca
 800835a:	625a      	str	r2, [r3, #36]	; 0x24
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2253      	movs	r2, #83	; 0x53
 8008362:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f879 	bl	800845c <RTC_EnterInitMode>
 800836a:	4603      	mov	r3, r0
 800836c:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d13b      	bne.n	80083ec <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6899      	ldr	r1, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	4b23      	ldr	r3, [pc, #140]	; (800840c <HAL_RTC_Init+0xec>)
 8008380:	400b      	ands	r3, r1
 8008382:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	6899      	ldr	r1, [r3, #8]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	431a      	orrs	r2, r3
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	0419      	lsls	r1, r3, #16
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	68da      	ldr	r2, [r3, #12]
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f881 	bl	80084bc <RTC_ExitInitMode>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d113      	bne.n	80083ec <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0203 	bic.w	r2, r2, #3
 80083d2:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	69da      	ldr	r2, [r3, #28]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	430a      	orrs	r2, r1
 80083ea:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	22ff      	movs	r2, #255	; 0xff
 80083f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80083f4:	7bfb      	ldrb	r3, [r7, #15]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d103      	bne.n	8008402 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8008402:	7bfb      	ldrb	r3, [r7, #15]
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}
 800840c:	ff8fffbf 	.word	0xff8fffbf

08008410 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008426:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 8008428:	f7f9 fc1c 	bl	8001c64 <HAL_GetTick>
 800842c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800842e:	e009      	b.n	8008444 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008430:	f7f9 fc18 	bl	8001c64 <HAL_GetTick>
 8008434:	4602      	mov	r2, r0
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800843e:	d901      	bls.n	8008444 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 8008440:	2303      	movs	r3, #3
 8008442:	e007      	b.n	8008454 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	68db      	ldr	r3, [r3, #12]
 800844a:	f003 0320 	and.w	r3, r3, #32
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0ee      	beq.n	8008430 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d11d      	bne.n	80084b2 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f04f 32ff 	mov.w	r2, #4294967295
 800847e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008480:	f7f9 fbf0 	bl	8001c64 <HAL_GetTick>
 8008484:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008486:	e00d      	b.n	80084a4 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008488:	f7f9 fbec 	bl	8001c64 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008496:	d905      	bls.n	80084a4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2203      	movs	r2, #3
 80084a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0ea      	beq.n	8008488 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3710      	adds	r7, #16
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 80084c8:	4b1a      	ldr	r3, [pc, #104]	; (8008534 <RTC_ExitInitMode+0x78>)
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	4a19      	ldr	r2, [pc, #100]	; (8008534 <RTC_ExitInitMode+0x78>)
 80084ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084d2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80084d4:	4b17      	ldr	r3, [pc, #92]	; (8008534 <RTC_ExitInitMode+0x78>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f003 0320 	and.w	r3, r3, #32
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10c      	bne.n	80084fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff ff95 	bl	8008410 <HAL_RTC_WaitForSynchro>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d01e      	beq.n	800852a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2203      	movs	r2, #3
 80084f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	73fb      	strb	r3, [r7, #15]
 80084f8:	e017      	b.n	800852a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80084fa:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <RTC_ExitInitMode+0x78>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	4a0d      	ldr	r2, [pc, #52]	; (8008534 <RTC_ExitInitMode+0x78>)
 8008500:	f023 0320 	bic.w	r3, r3, #32
 8008504:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ff82 	bl	8008410 <HAL_RTC_WaitForSynchro>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2203      	movs	r2, #3
 8008516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800851e:	4b05      	ldr	r3, [pc, #20]	; (8008534 <RTC_ExitInitMode+0x78>)
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	4a04      	ldr	r2, [pc, #16]	; (8008534 <RTC_ExitInitMode+0x78>)
 8008524:	f043 0320 	orr.w	r3, r3, #32
 8008528:	6093      	str	r3, [r2, #8]
  }

  return status;
 800852a:	7bfb      	ldrb	r3, [r7, #15]
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	58004000 	.word	0x58004000

08008538 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e049      	b.n	80085de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f7f8 fe5c 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2202      	movs	r2, #2
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	3304      	adds	r3, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4610      	mov	r0, r2
 8008578:	f000 fbf4 	bl	8008d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3708      	adds	r7, #8
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b085      	sub	sp, #20
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d001      	beq.n	8008600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085fc:	2301      	movs	r3, #1
 80085fe:	e021      	b.n	8008644 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2202      	movs	r2, #2
 8008604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0201 	orr.w	r2, r2, #1
 8008616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689a      	ldr	r2, [r3, #8]
 800861e:	4b0c      	ldr	r3, [pc, #48]	; (8008650 <HAL_TIM_Base_Start_IT+0x68>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	2b06      	cmp	r3, #6
 8008628:	d00b      	beq.n	8008642 <HAL_TIM_Base_Start_IT+0x5a>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008630:	d007      	beq.n	8008642 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f042 0201 	orr.w	r2, r2, #1
 8008640:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3714      	adds	r7, #20
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	00010007 	.word	0x00010007

08008654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d101      	bne.n	8008666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e049      	b.n	80086fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b00      	cmp	r3, #0
 8008670:	d106      	bne.n	8008680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f841 	bl	8008702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2202      	movs	r2, #2
 8008684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3304      	adds	r3, #4
 8008690:	4619      	mov	r1, r3
 8008692:	4610      	mov	r0, r2
 8008694:	f000 fb66 	bl	8008d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2201      	movs	r2, #1
 800869c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008702:	b480      	push	{r7}
 8008704:	b083      	sub	sp, #12
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008716:	b580      	push	{r7, lr}
 8008718:	b082      	sub	sp, #8
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	691b      	ldr	r3, [r3, #16]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b02      	cmp	r3, #2
 800872a:	d122      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b02      	cmp	r3, #2
 8008738:	d11b      	bne.n	8008772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f06f 0202 	mvn.w	r2, #2
 8008742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	699b      	ldr	r3, [r3, #24]
 8008750:	f003 0303 	and.w	r3, r3, #3
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fae5 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 800875e:	e005      	b.n	800876c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fad7 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fae8 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d122      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d11b      	bne.n	80087c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f06f 0204 	mvn.w	r2, #4
 8008796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fabb 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 80087b2:	e005      	b.n	80087c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 faad 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fabe 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	691b      	ldr	r3, [r3, #16]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d122      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d11b      	bne.n	800881a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f06f 0208 	mvn.w	r2, #8
 80087ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2204      	movs	r2, #4
 80087f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f003 0303 	and.w	r3, r3, #3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d003      	beq.n	8008808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fa91 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 8008806:	e005      	b.n	8008814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa83 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa94 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b10      	cmp	r3, #16
 8008826:	d122      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0310 	and.w	r3, r3, #16
 8008832:	2b10      	cmp	r3, #16
 8008834:	d11b      	bne.n	800886e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0210 	mvn.w	r2, #16
 800883e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2208      	movs	r2, #8
 8008844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008850:	2b00      	cmp	r3, #0
 8008852:	d003      	beq.n	800885c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 fa67 	bl	8008d28 <HAL_TIM_IC_CaptureCallback>
 800885a:	e005      	b.n	8008868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 fa59 	bl	8008d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa6a 	bl	8008d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	691b      	ldr	r3, [r3, #16]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d10e      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0301 	and.w	r3, r3, #1
 8008886:	2b01      	cmp	r3, #1
 8008888:	d107      	bne.n	800889a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f06f 0201 	mvn.w	r2, #1
 8008892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7f8 fc51 	bl	800113c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	691b      	ldr	r3, [r3, #16]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b80      	cmp	r3, #128	; 0x80
 80088a6:	d10e      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d107      	bne.n	80088c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 ff85 	bl	80097d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088d4:	d10e      	bne.n	80088f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e0:	2b80      	cmp	r3, #128	; 0x80
 80088e2:	d107      	bne.n	80088f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80088ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 ff78 	bl	80097e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088fe:	2b40      	cmp	r3, #64	; 0x40
 8008900:	d10e      	bne.n	8008920 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800890c:	2b40      	cmp	r3, #64	; 0x40
 800890e:	d107      	bne.n	8008920 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 fa18 	bl	8008d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b20      	cmp	r3, #32
 800892c:	d10e      	bne.n	800894c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f003 0320 	and.w	r3, r3, #32
 8008938:	2b20      	cmp	r3, #32
 800893a:	d107      	bne.n	800894c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f06f 0220 	mvn.w	r2, #32
 8008944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 ff38 	bl	80097bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	60f8      	str	r0, [r7, #12]
 800895c:	60b9      	str	r1, [r7, #8]
 800895e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008966:	2b01      	cmp	r3, #1
 8008968:	d101      	bne.n	800896e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800896a:	2302      	movs	r3, #2
 800896c:	e0fd      	b.n	8008b6a <HAL_TIM_PWM_ConfigChannel+0x216>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2b14      	cmp	r3, #20
 800897a:	f200 80f0 	bhi.w	8008b5e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	080089d9 	.word	0x080089d9
 8008988:	08008b5f 	.word	0x08008b5f
 800898c:	08008b5f 	.word	0x08008b5f
 8008990:	08008b5f 	.word	0x08008b5f
 8008994:	08008a19 	.word	0x08008a19
 8008998:	08008b5f 	.word	0x08008b5f
 800899c:	08008b5f 	.word	0x08008b5f
 80089a0:	08008b5f 	.word	0x08008b5f
 80089a4:	08008a5b 	.word	0x08008a5b
 80089a8:	08008b5f 	.word	0x08008b5f
 80089ac:	08008b5f 	.word	0x08008b5f
 80089b0:	08008b5f 	.word	0x08008b5f
 80089b4:	08008a9b 	.word	0x08008a9b
 80089b8:	08008b5f 	.word	0x08008b5f
 80089bc:	08008b5f 	.word	0x08008b5f
 80089c0:	08008b5f 	.word	0x08008b5f
 80089c4:	08008add 	.word	0x08008add
 80089c8:	08008b5f 	.word	0x08008b5f
 80089cc:	08008b5f 	.word	0x08008b5f
 80089d0:	08008b5f 	.word	0x08008b5f
 80089d4:	08008b1d 	.word	0x08008b1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68b9      	ldr	r1, [r7, #8]
 80089de:	4618      	mov	r0, r3
 80089e0:	f000 fa66 	bl	8008eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	699a      	ldr	r2, [r3, #24]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f042 0208 	orr.w	r2, r2, #8
 80089f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	699a      	ldr	r2, [r3, #24]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f022 0204 	bic.w	r2, r2, #4
 8008a02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6999      	ldr	r1, [r3, #24]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	619a      	str	r2, [r3, #24]
      break;
 8008a16:	e0a3      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68b9      	ldr	r1, [r7, #8]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f000 fad6 	bl	8008fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	699a      	ldr	r2, [r3, #24]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	699a      	ldr	r2, [r3, #24]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6999      	ldr	r1, [r3, #24]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	021a      	lsls	r2, r3, #8
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	619a      	str	r2, [r3, #24]
      break;
 8008a58:	e082      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68b9      	ldr	r1, [r7, #8]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 fb3f 	bl	80090e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	69da      	ldr	r2, [r3, #28]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f042 0208 	orr.w	r2, r2, #8
 8008a74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	69da      	ldr	r2, [r3, #28]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f022 0204 	bic.w	r2, r2, #4
 8008a84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	69d9      	ldr	r1, [r3, #28]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	691a      	ldr	r2, [r3, #16]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	61da      	str	r2, [r3, #28]
      break;
 8008a98:	e062      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68b9      	ldr	r1, [r7, #8]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fba5 	bl	80091f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	69da      	ldr	r2, [r3, #28]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	69da      	ldr	r2, [r3, #28]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	69d9      	ldr	r1, [r3, #28]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	021a      	lsls	r2, r3, #8
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	430a      	orrs	r2, r1
 8008ad8:	61da      	str	r2, [r3, #28]
      break;
 8008ada:	e041      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	68b9      	ldr	r1, [r7, #8]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 fbec 	bl	80092c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0208 	orr.w	r2, r2, #8
 8008af6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0204 	bic.w	r2, r2, #4
 8008b06:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691a      	ldr	r2, [r3, #16]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b1a:	e021      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fc2e 	bl	8009384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	021a      	lsls	r2, r3, #8
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b5c:	e000      	b.n	8008b60 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8008b5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop

08008b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_TIM_ConfigClockSource+0x18>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e0b7      	b.n	8008cfc <HAL_TIM_ConfigClockSource+0x188>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2202      	movs	r2, #2
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4b57      	ldr	r3, [pc, #348]	; (8008d04 <HAL_TIM_ConfigClockSource+0x190>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bb2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b70      	cmp	r3, #112	; 0x70
 8008bc2:	d02e      	beq.n	8008c22 <HAL_TIM_ConfigClockSource+0xae>
 8008bc4:	2b70      	cmp	r3, #112	; 0x70
 8008bc6:	d812      	bhi.n	8008bee <HAL_TIM_ConfigClockSource+0x7a>
 8008bc8:	2b30      	cmp	r3, #48	; 0x30
 8008bca:	f000 8084 	beq.w	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
 8008bce:	2b30      	cmp	r3, #48	; 0x30
 8008bd0:	d806      	bhi.n	8008be0 <HAL_TIM_ConfigClockSource+0x6c>
 8008bd2:	2b10      	cmp	r3, #16
 8008bd4:	d07f      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
 8008bd6:	2b20      	cmp	r3, #32
 8008bd8:	d07d      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d07b      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008bde:	e084      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008be0:	2b50      	cmp	r3, #80	; 0x50
 8008be2:	d048      	beq.n	8008c76 <HAL_TIM_ConfigClockSource+0x102>
 8008be4:	2b60      	cmp	r3, #96	; 0x60
 8008be6:	d056      	beq.n	8008c96 <HAL_TIM_ConfigClockSource+0x122>
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	d064      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0x142>
      break;
 8008bec:	e07d      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008bee:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bf2:	d070      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
 8008bf4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008bf8:	d809      	bhi.n	8008c0e <HAL_TIM_ConfigClockSource+0x9a>
 8008bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008bfe:	d027      	beq.n	8008c50 <HAL_TIM_ConfigClockSource+0xdc>
 8008c00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c04:	d067      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
 8008c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c0a:	d06d      	beq.n	8008ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c0c:	e06d      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
  switch (sClockSourceConfig->ClockSource)
 8008c0e:	4a3e      	ldr	r2, [pc, #248]	; (8008d08 <HAL_TIM_ConfigClockSource+0x194>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d060      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
 8008c14:	4a3d      	ldr	r2, [pc, #244]	; (8008d0c <HAL_TIM_ConfigClockSource+0x198>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d05d      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
 8008c1a:	4a3d      	ldr	r2, [pc, #244]	; (8008d10 <HAL_TIM_ConfigClockSource+0x19c>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d05a      	beq.n	8008cd6 <HAL_TIM_ConfigClockSource+0x162>
      break;
 8008c20:	e063      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6818      	ldr	r0, [r3, #0]
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	6899      	ldr	r1, [r3, #8]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	f000 fc89 	bl	8009548 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	609a      	str	r2, [r3, #8]
      break;
 8008c4e:	e04c      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6818      	ldr	r0, [r3, #0]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	6899      	ldr	r1, [r3, #8]
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f000 fc72 	bl	8009548 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	689a      	ldr	r2, [r3, #8]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c72:	609a      	str	r2, [r3, #8]
      break;
 8008c74:	e039      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	6859      	ldr	r1, [r3, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f000 fbe2 	bl	800944c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2150      	movs	r1, #80	; 0x50
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fc3c 	bl	800950c <TIM_ITRx_SetConfig>
      break;
 8008c94:	e029      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	6859      	ldr	r1, [r3, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f000 fc01 	bl	80094aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2160      	movs	r1, #96	; 0x60
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fc2c 	bl	800950c <TIM_ITRx_SetConfig>
      break;
 8008cb4:	e019      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6859      	ldr	r1, [r3, #4]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	f000 fbc2 	bl	800944c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2140      	movs	r1, #64	; 0x40
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f000 fc1c 	bl	800950c <TIM_ITRx_SetConfig>
      break;
 8008cd4:	e009      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	f000 fc13 	bl	800950c <TIM_ITRx_SetConfig>
      break;
 8008ce6:	e000      	b.n	8008cea <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008ce8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2201      	movs	r2, #1
 8008cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	ffceff88 	.word	0xffceff88
 8008d08:	00100030 	.word	0x00100030
 8008d0c:	00100040 	.word	0x00100040
 8008d10:	00100020 	.word	0x00100020

08008d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b085      	sub	sp, #20
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a44      	ldr	r2, [pc, #272]	; (8008e88 <TIM_Base_SetConfig+0x124>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d013      	beq.n	8008da4 <TIM_Base_SetConfig+0x40>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d82:	d00f      	beq.n	8008da4 <TIM_Base_SetConfig+0x40>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4a41      	ldr	r2, [pc, #260]	; (8008e8c <TIM_Base_SetConfig+0x128>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d00b      	beq.n	8008da4 <TIM_Base_SetConfig+0x40>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a40      	ldr	r2, [pc, #256]	; (8008e90 <TIM_Base_SetConfig+0x12c>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d007      	beq.n	8008da4 <TIM_Base_SetConfig+0x40>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a3f      	ldr	r2, [pc, #252]	; (8008e94 <TIM_Base_SetConfig+0x130>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d003      	beq.n	8008da4 <TIM_Base_SetConfig+0x40>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a3e      	ldr	r2, [pc, #248]	; (8008e98 <TIM_Base_SetConfig+0x134>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d108      	bne.n	8008db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a33      	ldr	r2, [pc, #204]	; (8008e88 <TIM_Base_SetConfig+0x124>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d027      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dc4:	d023      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a30      	ldr	r2, [pc, #192]	; (8008e8c <TIM_Base_SetConfig+0x128>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d01f      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a2f      	ldr	r2, [pc, #188]	; (8008e90 <TIM_Base_SetConfig+0x12c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d01b      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a2e      	ldr	r2, [pc, #184]	; (8008e94 <TIM_Base_SetConfig+0x130>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d017      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a2d      	ldr	r2, [pc, #180]	; (8008e98 <TIM_Base_SetConfig+0x134>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a2c      	ldr	r2, [pc, #176]	; (8008e9c <TIM_Base_SetConfig+0x138>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d00f      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a2b      	ldr	r2, [pc, #172]	; (8008ea0 <TIM_Base_SetConfig+0x13c>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d00b      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a2a      	ldr	r2, [pc, #168]	; (8008ea4 <TIM_Base_SetConfig+0x140>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d007      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a29      	ldr	r2, [pc, #164]	; (8008ea8 <TIM_Base_SetConfig+0x144>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d003      	beq.n	8008e0e <TIM_Base_SetConfig+0xaa>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a28      	ldr	r2, [pc, #160]	; (8008eac <TIM_Base_SetConfig+0x148>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d108      	bne.n	8008e20 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	689a      	ldr	r2, [r3, #8]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a10      	ldr	r2, [pc, #64]	; (8008e88 <TIM_Base_SetConfig+0x124>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00f      	beq.n	8008e6c <TIM_Base_SetConfig+0x108>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a12      	ldr	r2, [pc, #72]	; (8008e98 <TIM_Base_SetConfig+0x134>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00b      	beq.n	8008e6c <TIM_Base_SetConfig+0x108>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a11      	ldr	r2, [pc, #68]	; (8008e9c <TIM_Base_SetConfig+0x138>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d007      	beq.n	8008e6c <TIM_Base_SetConfig+0x108>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a10      	ldr	r2, [pc, #64]	; (8008ea0 <TIM_Base_SetConfig+0x13c>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_Base_SetConfig+0x108>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a0f      	ldr	r2, [pc, #60]	; (8008ea4 <TIM_Base_SetConfig+0x140>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d103      	bne.n	8008e74 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e6c:	683b      	ldr	r3, [r7, #0]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	615a      	str	r2, [r3, #20]
}
 8008e7a:	bf00      	nop
 8008e7c:	3714      	adds	r7, #20
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	40010000 	.word	0x40010000
 8008e8c:	40000400 	.word	0x40000400
 8008e90:	40000800 	.word	0x40000800
 8008e94:	40000c00 	.word	0x40000c00
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400
 8008ea4:	40014800 	.word	0x40014800
 8008ea8:	4000e000 	.word	0x4000e000
 8008eac:	4000e400 	.word	0x4000e400

08008eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f023 0201 	bic.w	r2, r3, #1
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a1b      	ldr	r3, [r3, #32]
 8008eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	699b      	ldr	r3, [r3, #24]
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ed8:	68fa      	ldr	r2, [r7, #12]
 8008eda:	4b37      	ldr	r3, [pc, #220]	; (8008fb8 <TIM_OC1_SetConfig+0x108>)
 8008edc:	4013      	ands	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 0303 	bic.w	r3, r3, #3
 8008ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f023 0302 	bic.w	r3, r3, #2
 8008ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a2d      	ldr	r2, [pc, #180]	; (8008fbc <TIM_OC1_SetConfig+0x10c>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d00f      	beq.n	8008f2c <TIM_OC1_SetConfig+0x7c>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a2c      	ldr	r2, [pc, #176]	; (8008fc0 <TIM_OC1_SetConfig+0x110>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00b      	beq.n	8008f2c <TIM_OC1_SetConfig+0x7c>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a2b      	ldr	r2, [pc, #172]	; (8008fc4 <TIM_OC1_SetConfig+0x114>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d007      	beq.n	8008f2c <TIM_OC1_SetConfig+0x7c>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a2a      	ldr	r2, [pc, #168]	; (8008fc8 <TIM_OC1_SetConfig+0x118>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d003      	beq.n	8008f2c <TIM_OC1_SetConfig+0x7c>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a29      	ldr	r2, [pc, #164]	; (8008fcc <TIM_OC1_SetConfig+0x11c>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d10c      	bne.n	8008f46 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	f023 0308 	bic.w	r3, r3, #8
 8008f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	68db      	ldr	r3, [r3, #12]
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	f023 0304 	bic.w	r3, r3, #4
 8008f44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a1c      	ldr	r2, [pc, #112]	; (8008fbc <TIM_OC1_SetConfig+0x10c>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d00f      	beq.n	8008f6e <TIM_OC1_SetConfig+0xbe>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a1b      	ldr	r2, [pc, #108]	; (8008fc0 <TIM_OC1_SetConfig+0x110>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d00b      	beq.n	8008f6e <TIM_OC1_SetConfig+0xbe>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a1a      	ldr	r2, [pc, #104]	; (8008fc4 <TIM_OC1_SetConfig+0x114>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d007      	beq.n	8008f6e <TIM_OC1_SetConfig+0xbe>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a19      	ldr	r2, [pc, #100]	; (8008fc8 <TIM_OC1_SetConfig+0x118>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d003      	beq.n	8008f6e <TIM_OC1_SetConfig+0xbe>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a18      	ldr	r2, [pc, #96]	; (8008fcc <TIM_OC1_SetConfig+0x11c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d111      	bne.n	8008f92 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	695b      	ldr	r3, [r3, #20]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	621a      	str	r2, [r3, #32]
}
 8008fac:	bf00      	nop
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	fffeff8f 	.word	0xfffeff8f
 8008fbc:	40010000 	.word	0x40010000
 8008fc0:	40010400 	.word	0x40010400
 8008fc4:	40014000 	.word	0x40014000
 8008fc8:	40014400 	.word	0x40014400
 8008fcc:	40014800 	.word	0x40014800

08008fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0210 	bic.w	r2, r3, #16
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4b34      	ldr	r3, [pc, #208]	; (80090cc <TIM_OC2_SetConfig+0xfc>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f023 0320 	bic.w	r3, r3, #32
 800901a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	4a29      	ldr	r2, [pc, #164]	; (80090d0 <TIM_OC2_SetConfig+0x100>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d003      	beq.n	8009038 <TIM_OC2_SetConfig+0x68>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a28      	ldr	r2, [pc, #160]	; (80090d4 <TIM_OC2_SetConfig+0x104>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d10d      	bne.n	8009054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800903e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	011b      	lsls	r3, r3, #4
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a1e      	ldr	r2, [pc, #120]	; (80090d0 <TIM_OC2_SetConfig+0x100>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d00f      	beq.n	800907c <TIM_OC2_SetConfig+0xac>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a1d      	ldr	r2, [pc, #116]	; (80090d4 <TIM_OC2_SetConfig+0x104>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d00b      	beq.n	800907c <TIM_OC2_SetConfig+0xac>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a1c      	ldr	r2, [pc, #112]	; (80090d8 <TIM_OC2_SetConfig+0x108>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d007      	beq.n	800907c <TIM_OC2_SetConfig+0xac>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a1b      	ldr	r2, [pc, #108]	; (80090dc <TIM_OC2_SetConfig+0x10c>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_OC2_SetConfig+0xac>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a1a      	ldr	r2, [pc, #104]	; (80090e0 <TIM_OC2_SetConfig+0x110>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d113      	bne.n	80090a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009082:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800908a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	693a      	ldr	r2, [r7, #16]
 8009094:	4313      	orrs	r3, r2
 8009096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	699b      	ldr	r3, [r3, #24]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	693a      	ldr	r2, [r7, #16]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	621a      	str	r2, [r3, #32]
}
 80090be:	bf00      	nop
 80090c0:	371c      	adds	r7, #28
 80090c2:	46bd      	mov	sp, r7
 80090c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	feff8fff 	.word	0xfeff8fff
 80090d0:	40010000 	.word	0x40010000
 80090d4:	40010400 	.word	0x40010400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	40014800 	.word	0x40014800

080090e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	69db      	ldr	r3, [r3, #28]
 800910a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f023 0303 	bic.w	r3, r3, #3
 800911a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800912c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a27      	ldr	r2, [pc, #156]	; (80091dc <TIM_OC3_SetConfig+0xf8>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d003      	beq.n	800914a <TIM_OC3_SetConfig+0x66>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <TIM_OC3_SetConfig+0xfc>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d10d      	bne.n	8009166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	021b      	lsls	r3, r3, #8
 8009158:	697a      	ldr	r2, [r7, #20]
 800915a:	4313      	orrs	r3, r2
 800915c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	4a1c      	ldr	r2, [pc, #112]	; (80091dc <TIM_OC3_SetConfig+0xf8>)
 800916a:	4293      	cmp	r3, r2
 800916c:	d00f      	beq.n	800918e <TIM_OC3_SetConfig+0xaa>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	4a1b      	ldr	r2, [pc, #108]	; (80091e0 <TIM_OC3_SetConfig+0xfc>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d00b      	beq.n	800918e <TIM_OC3_SetConfig+0xaa>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	4a1a      	ldr	r2, [pc, #104]	; (80091e4 <TIM_OC3_SetConfig+0x100>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d007      	beq.n	800918e <TIM_OC3_SetConfig+0xaa>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4a19      	ldr	r2, [pc, #100]	; (80091e8 <TIM_OC3_SetConfig+0x104>)
 8009182:	4293      	cmp	r3, r2
 8009184:	d003      	beq.n	800918e <TIM_OC3_SetConfig+0xaa>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	4a18      	ldr	r2, [pc, #96]	; (80091ec <TIM_OC3_SetConfig+0x108>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d113      	bne.n	80091b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800919c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	011b      	lsls	r3, r3, #4
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	011b      	lsls	r3, r3, #4
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	621a      	str	r2, [r3, #32]
}
 80091d0:	bf00      	nop
 80091d2:	371c      	adds	r7, #28
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40010000 	.word	0x40010000
 80091e0:	40010400 	.word	0x40010400
 80091e4:	40014000 	.word	0x40014000
 80091e8:	40014400 	.word	0x40014400
 80091ec:	40014800 	.word	0x40014800

080091f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a1b      	ldr	r3, [r3, #32]
 80091fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800921e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	021b      	lsls	r3, r3, #8
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	4313      	orrs	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800923a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	031b      	lsls	r3, r3, #12
 8009242:	693a      	ldr	r2, [r7, #16]
 8009244:	4313      	orrs	r3, r2
 8009246:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a18      	ldr	r2, [pc, #96]	; (80092ac <TIM_OC4_SetConfig+0xbc>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d00f      	beq.n	8009270 <TIM_OC4_SetConfig+0x80>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a17      	ldr	r2, [pc, #92]	; (80092b0 <TIM_OC4_SetConfig+0xc0>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d00b      	beq.n	8009270 <TIM_OC4_SetConfig+0x80>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a16      	ldr	r2, [pc, #88]	; (80092b4 <TIM_OC4_SetConfig+0xc4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d007      	beq.n	8009270 <TIM_OC4_SetConfig+0x80>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <TIM_OC4_SetConfig+0xc8>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d003      	beq.n	8009270 <TIM_OC4_SetConfig+0x80>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a14      	ldr	r2, [pc, #80]	; (80092bc <TIM_OC4_SetConfig+0xcc>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d109      	bne.n	8009284 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009276:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	695b      	ldr	r3, [r3, #20]
 800927c:	019b      	lsls	r3, r3, #6
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	4313      	orrs	r3, r2
 8009282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	685a      	ldr	r2, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	621a      	str	r2, [r3, #32]
}
 800929e:	bf00      	nop
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	40010000 	.word	0x40010000
 80092b0:	40010400 	.word	0x40010400
 80092b4:	40014000 	.word	0x40014000
 80092b8:	40014400 	.word	0x40014400
 80092bc:	40014800 	.word	0x40014800

080092c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
 80092c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a1b      	ldr	r3, [r3, #32]
 80092ce:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	041b      	lsls	r3, r3, #16
 8009308:	693a      	ldr	r2, [r7, #16]
 800930a:	4313      	orrs	r3, r2
 800930c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a17      	ldr	r2, [pc, #92]	; (8009370 <TIM_OC5_SetConfig+0xb0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d00f      	beq.n	8009336 <TIM_OC5_SetConfig+0x76>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a16      	ldr	r2, [pc, #88]	; (8009374 <TIM_OC5_SetConfig+0xb4>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d00b      	beq.n	8009336 <TIM_OC5_SetConfig+0x76>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a15      	ldr	r2, [pc, #84]	; (8009378 <TIM_OC5_SetConfig+0xb8>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d007      	beq.n	8009336 <TIM_OC5_SetConfig+0x76>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a14      	ldr	r2, [pc, #80]	; (800937c <TIM_OC5_SetConfig+0xbc>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d003      	beq.n	8009336 <TIM_OC5_SetConfig+0x76>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a13      	ldr	r2, [pc, #76]	; (8009380 <TIM_OC5_SetConfig+0xc0>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d109      	bne.n	800934a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800933c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	021b      	lsls	r3, r3, #8
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	685a      	ldr	r2, [r3, #4]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	621a      	str	r2, [r3, #32]
}
 8009364:	bf00      	nop
 8009366:	371c      	adds	r7, #28
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	40010000 	.word	0x40010000
 8009374:	40010400 	.word	0x40010400
 8009378:	40014000 	.word	0x40014000
 800937c:	40014400 	.word	0x40014400
 8009380:	40014800 	.word	0x40014800

08009384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009384:	b480      	push	{r7}
 8009386:	b087      	sub	sp, #28
 8009388:	af00      	add	r7, sp, #0
 800938a:	6078      	str	r0, [r7, #4]
 800938c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	021b      	lsls	r3, r3, #8
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	4313      	orrs	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	051b      	lsls	r3, r3, #20
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	4313      	orrs	r3, r2
 80093d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4a18      	ldr	r2, [pc, #96]	; (8009438 <TIM_OC6_SetConfig+0xb4>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d00f      	beq.n	80093fc <TIM_OC6_SetConfig+0x78>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a17      	ldr	r2, [pc, #92]	; (800943c <TIM_OC6_SetConfig+0xb8>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d00b      	beq.n	80093fc <TIM_OC6_SetConfig+0x78>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	4a16      	ldr	r2, [pc, #88]	; (8009440 <TIM_OC6_SetConfig+0xbc>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d007      	beq.n	80093fc <TIM_OC6_SetConfig+0x78>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a15      	ldr	r2, [pc, #84]	; (8009444 <TIM_OC6_SetConfig+0xc0>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d003      	beq.n	80093fc <TIM_OC6_SetConfig+0x78>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a14      	ldr	r2, [pc, #80]	; (8009448 <TIM_OC6_SetConfig+0xc4>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d109      	bne.n	8009410 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009402:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	695b      	ldr	r3, [r3, #20]
 8009408:	029b      	lsls	r3, r3, #10
 800940a:	697a      	ldr	r2, [r7, #20]
 800940c:	4313      	orrs	r3, r2
 800940e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	697a      	ldr	r2, [r7, #20]
 8009414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	693a      	ldr	r2, [r7, #16]
 8009428:	621a      	str	r2, [r3, #32]
}
 800942a:	bf00      	nop
 800942c:	371c      	adds	r7, #28
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	40010000 	.word	0x40010000
 800943c:	40010400 	.word	0x40010400
 8009440:	40014000 	.word	0x40014000
 8009444:	40014400 	.word	0x40014400
 8009448:	40014800 	.word	0x40014800

0800944c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800944c:	b480      	push	{r7}
 800944e:	b087      	sub	sp, #28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1b      	ldr	r3, [r3, #32]
 8009462:	f023 0201 	bic.w	r2, r3, #1
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	011b      	lsls	r3, r3, #4
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f023 030a 	bic.w	r3, r3, #10
 8009488:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4313      	orrs	r3, r2
 8009490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	693a      	ldr	r2, [r7, #16]
 8009496:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	621a      	str	r2, [r3, #32]
}
 800949e:	bf00      	nop
 80094a0:	371c      	adds	r7, #28
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b087      	sub	sp, #28
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	f023 0210 	bic.w	r2, r3, #16
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80094d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	031b      	lsls	r3, r3, #12
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	4313      	orrs	r3, r2
 80094de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80094e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	011b      	lsls	r3, r3, #4
 80094ec:	693a      	ldr	r2, [r7, #16]
 80094ee:	4313      	orrs	r3, r2
 80094f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	621a      	str	r2, [r3, #32]
}
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
	...

0800950c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	4b09      	ldr	r3, [pc, #36]	; (8009544 <TIM_ITRx_SetConfig+0x38>)
 8009520:	4013      	ands	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009524:	683a      	ldr	r2, [r7, #0]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	f043 0307 	orr.w	r3, r3, #7
 800952e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68fa      	ldr	r2, [r7, #12]
 8009534:	609a      	str	r2, [r3, #8]
}
 8009536:	bf00      	nop
 8009538:	3714      	adds	r7, #20
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	ffcfff8f 	.word	0xffcfff8f

08009548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
 8009554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	021a      	lsls	r2, r3, #8
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	431a      	orrs	r2, r3
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4313      	orrs	r3, r2
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	4313      	orrs	r3, r2
 8009574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	609a      	str	r2, [r3, #8]
}
 800957c:	bf00      	nop
 800957e:	371c      	adds	r7, #28
 8009580:	46bd      	mov	sp, r7
 8009582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009586:	4770      	bx	lr

08009588 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800959c:	2302      	movs	r3, #2
 800959e:	e077      	b.n	8009690 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a35      	ldr	r2, [pc, #212]	; (800969c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d004      	beq.n	80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a34      	ldr	r2, [pc, #208]	; (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d108      	bne.n	80095e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	68fa      	ldr	r2, [r7, #12]
 80095e2:	4313      	orrs	r3, r2
 80095e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a25      	ldr	r2, [pc, #148]	; (800969c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d02c      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009612:	d027      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a22      	ldr	r2, [pc, #136]	; (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d022      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a21      	ldr	r2, [pc, #132]	; (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d01d      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a1f      	ldr	r2, [pc, #124]	; (80096ac <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d018      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a1a      	ldr	r2, [pc, #104]	; (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d013      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a1b      	ldr	r2, [pc, #108]	; (80096b0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d00e      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a1a      	ldr	r2, [pc, #104]	; (80096b4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d009      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a18      	ldr	r2, [pc, #96]	; (80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d004      	beq.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a17      	ldr	r2, [pc, #92]	; (80096bc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d10c      	bne.n	800967e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800966a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	68ba      	ldr	r2, [r7, #8]
 8009672:	4313      	orrs	r3, r2
 8009674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2200      	movs	r2, #0
 800968a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	40010000 	.word	0x40010000
 80096a0:	40010400 	.word	0x40010400
 80096a4:	40000400 	.word	0x40000400
 80096a8:	40000800 	.word	0x40000800
 80096ac:	40000c00 	.word	0x40000c00
 80096b0:	40001800 	.word	0x40001800
 80096b4:	40014000 	.word	0x40014000
 80096b8:	4000e000 	.word	0x4000e000
 80096bc:	4000e400 	.word	0x4000e400

080096c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096d8:	2302      	movs	r3, #2
 80096da:	e065      	b.n	80097a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4313      	orrs	r3, r2
 800971a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	4313      	orrs	r3, r2
 8009736:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009742:	4313      	orrs	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	041b      	lsls	r3, r3, #16
 8009752:	4313      	orrs	r3, r2
 8009754:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a16      	ldr	r2, [pc, #88]	; (80097b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d004      	beq.n	800976a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a14      	ldr	r2, [pc, #80]	; (80097b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d115      	bne.n	8009796 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009774:	051b      	lsls	r3, r3, #20
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	69db      	ldr	r3, [r3, #28]
 8009784:	4313      	orrs	r3, r2
 8009786:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	40010000 	.word	0x40010000
 80097b8:	40010400 	.word	0x40010400

080097bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009806:	2301      	movs	r3, #1
 8009808:	e042      	b.n	8009890 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009810:	2b00      	cmp	r3, #0
 8009812:	d106      	bne.n	8009822 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f7f7 fd5b 	bl	80012d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2224      	movs	r2, #36	; 0x24
 8009826:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fa56 	bl	8009cec <UART_SetConfig>
 8009840:	4603      	mov	r3, r0
 8009842:	2b01      	cmp	r3, #1
 8009844:	d101      	bne.n	800984a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e022      	b.n	8009890 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d002      	beq.n	8009858 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f001 f8f6 	bl	800aa44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009866:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	689a      	ldr	r2, [r3, #8]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009876:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f001 f97d 	bl	800ab88 <UART_CheckIdleState>
 800988e:	4603      	mov	r3, r0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3708      	adds	r7, #8
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	; 0x28
 800989c:	af02      	add	r7, sp, #8
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	603b      	str	r3, [r7, #0]
 80098a4:	4613      	mov	r3, r2
 80098a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098ae:	2b20      	cmp	r3, #32
 80098b0:	f040 8083 	bne.w	80099ba <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d002      	beq.n	80098c0 <HAL_UART_Transmit+0x28>
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d101      	bne.n	80098c4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	e07b      	b.n	80099bc <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d101      	bne.n	80098d2 <HAL_UART_Transmit+0x3a>
 80098ce:	2302      	movs	r3, #2
 80098d0:	e074      	b.n	80099bc <HAL_UART_Transmit+0x124>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2221      	movs	r2, #33	; 0x21
 80098e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80098ea:	f7f8 f9bb 	bl	8001c64 <HAL_GetTick>
 80098ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	88fa      	ldrh	r2, [r7, #6]
 80098f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	88fa      	ldrh	r2, [r7, #6]
 80098fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009908:	d108      	bne.n	800991c <HAL_UART_Transmit+0x84>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d104      	bne.n	800991c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009912:	2300      	movs	r3, #0
 8009914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	61bb      	str	r3, [r7, #24]
 800991a:	e003      	b.n	8009924 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009920:	2300      	movs	r3, #0
 8009922:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800992c:	e02c      	b.n	8009988 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	9300      	str	r3, [sp, #0]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	2200      	movs	r2, #0
 8009936:	2180      	movs	r1, #128	; 0x80
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f001 f96d 	bl	800ac18 <UART_WaitOnFlagUntilTimeout>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009944:	2303      	movs	r3, #3
 8009946:	e039      	b.n	80099bc <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10b      	bne.n	8009966 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800995c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	3302      	adds	r3, #2
 8009962:	61bb      	str	r3, [r7, #24]
 8009964:	e007      	b.n	8009976 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	781a      	ldrb	r2, [r3, #0]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	3301      	adds	r3, #1
 8009974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800998e:	b29b      	uxth	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1cc      	bne.n	800992e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	9300      	str	r3, [sp, #0]
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	2200      	movs	r2, #0
 800999c:	2140      	movs	r1, #64	; 0x40
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f001 f93a 	bl	800ac18 <UART_WaitOnFlagUntilTimeout>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d001      	beq.n	80099ae <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e006      	b.n	80099bc <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2220      	movs	r2, #32
 80099b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80099b6:	2300      	movs	r3, #0
 80099b8:	e000      	b.n	80099bc <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80099ba:	2302      	movs	r3, #2
  }
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b088      	sub	sp, #32
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	69db      	ldr	r3, [r3, #28]
 80099d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80099ea:	4013      	ands	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d118      	bne.n	8009a26 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d013      	beq.n	8009a26 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	f003 0320 	and.w	r3, r3, #32
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d104      	bne.n	8009a12 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d009      	beq.n	8009a26 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 8145 	beq.w	8009ca6 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	4798      	blx	r3
      }
      return;
 8009a24:	e13f      	b.n	8009ca6 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	f000 80e8 	beq.w	8009bfe <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	4ba1      	ldr	r3, [pc, #644]	; (8009cb8 <HAL_UART_IRQHandler+0x2f4>)
 8009a32:	4013      	ands	r3, r2
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d105      	bne.n	8009a44 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	4ba0      	ldr	r3, [pc, #640]	; (8009cbc <HAL_UART_IRQHandler+0x2f8>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 80dd 	beq.w	8009bfe <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d010      	beq.n	8009a70 <HAL_UART_IRQHandler+0xac>
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00b      	beq.n	8009a70 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a66:	f043 0201 	orr.w	r2, r3, #1
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d010      	beq.n	8009a9c <HAL_UART_IRQHandler+0xd8>
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00b      	beq.n	8009a9c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2202      	movs	r2, #2
 8009a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a92:	f043 0204 	orr.w	r2, r3, #4
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d010      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x104>
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	f003 0301 	and.w	r3, r3, #1
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2204      	movs	r2, #4
 8009ab6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009abe:	f043 0202 	orr.w	r2, r3, #2
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009ac8:	69fb      	ldr	r3, [r7, #28]
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d015      	beq.n	8009afe <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	f003 0320 	and.w	r3, r3, #32
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d104      	bne.n	8009ae6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009adc:	697a      	ldr	r2, [r7, #20]
 8009ade:	4b76      	ldr	r3, [pc, #472]	; (8009cb8 <HAL_UART_IRQHandler+0x2f4>)
 8009ae0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d00b      	beq.n	8009afe <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2208      	movs	r2, #8
 8009aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009af4:	f043 0208 	orr.w	r2, r3, #8
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d011      	beq.n	8009b2c <HAL_UART_IRQHandler+0x168>
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00c      	beq.n	8009b2c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b22:	f043 0220 	orr.w	r2, r3, #32
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 80b9 	beq.w	8009caa <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b38:	69fb      	ldr	r3, [r7, #28]
 8009b3a:	f003 0320 	and.w	r3, r3, #32
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d011      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d104      	bne.n	8009b56 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d007      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d003      	beq.n	8009b66 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b6c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b78:	2b40      	cmp	r3, #64	; 0x40
 8009b7a:	d004      	beq.n	8009b86 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d031      	beq.n	8009bea <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 f8c6 	bl	800ad18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
 8009b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b96:	2b40      	cmp	r3, #64	; 0x40
 8009b98:	d123      	bne.n	8009be2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ba8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d013      	beq.n	8009bda <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bb6:	4a42      	ldr	r2, [pc, #264]	; (8009cc0 <HAL_UART_IRQHandler+0x2fc>)
 8009bb8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7f8 fcaa 	bl	8002518 <HAL_DMA_Abort_IT>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d017      	beq.n	8009bfa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bd8:	e00f      	b.n	8009bfa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 f87c 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be0:	e00b      	b.n	8009bfa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f878 	bl	8009cd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009be8:	e007      	b.n	8009bfa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 f874 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8009bf8:	e057      	b.n	8009caa <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009bfa:	bf00      	nop
    return;
 8009bfc:	e055      	b.n	8009caa <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00d      	beq.n	8009c24 <HAL_UART_IRQHandler+0x260>
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d008      	beq.n	8009c24 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 f8cf 	bl	800adc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c22:	e045      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d012      	beq.n	8009c54 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d104      	bne.n	8009c42 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d008      	beq.n	8009c54 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d031      	beq.n	8009cae <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	4798      	blx	r3
    }
    return;
 8009c52:	e02c      	b.n	8009cae <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c54:	69fb      	ldr	r3, [r7, #28]
 8009c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d008      	beq.n	8009c70 <HAL_UART_IRQHandler+0x2ac>
 8009c5e:	69bb      	ldr	r3, [r7, #24]
 8009c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d003      	beq.n	8009c70 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f001 f88f 	bl	800ad8c <UART_EndTransmit_IT>
    return;
 8009c6e:	e01f      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d008      	beq.n	8009c8c <HAL_UART_IRQHandler+0x2c8>
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d003      	beq.n	8009c8c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f001 f8af 	bl	800ade8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c8a:	e011      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d00c      	beq.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da09      	bge.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 f899 	bl	800add4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ca2:	bf00      	nop
 8009ca4:	e004      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8009ca6:	bf00      	nop
 8009ca8:	e002      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009caa:	bf00      	nop
 8009cac:	e000      	b.n	8009cb0 <HAL_UART_IRQHandler+0x2ec>
    return;
 8009cae:	bf00      	nop
  }
}
 8009cb0:	3720      	adds	r7, #32
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	10000001 	.word	0x10000001
 8009cbc:	04000120 	.word	0x04000120
 8009cc0:	0800ad61 	.word	0x0800ad61

08009cc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b083      	sub	sp, #12
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr

08009cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cec:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009cf0:	b08e      	sub	sp, #56	; 0x38
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689a      	ldr	r2, [r3, #8]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	431a      	orrs	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	695b      	ldr	r3, [r3, #20]
 8009d0a:	431a      	orrs	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	4313      	orrs	r3, r2
 8009d12:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	4bc1      	ldr	r3, [pc, #772]	; (800a02c <UART_SetConfig+0x340>)
 8009d26:	4013      	ands	r3, r2
 8009d28:	687a      	ldr	r2, [r7, #4]
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d2e:	430b      	orrs	r3, r1
 8009d30:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	430a      	orrs	r2, r1
 8009d46:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	699b      	ldr	r3, [r3, #24]
 8009d4c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4ab7      	ldr	r2, [pc, #732]	; (800a030 <UART_SetConfig+0x344>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d004      	beq.n	8009d62 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6a1b      	ldr	r3, [r3, #32]
 8009d5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	689a      	ldr	r2, [r3, #8]
 8009d68:	4bb2      	ldr	r3, [pc, #712]	; (800a034 <UART_SetConfig+0x348>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	6812      	ldr	r2, [r2, #0]
 8009d70:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009d72:	430b      	orrs	r3, r1
 8009d74:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	f023 010f 	bic.w	r1, r3, #15
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	430a      	orrs	r2, r1
 8009d8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4aa9      	ldr	r2, [pc, #676]	; (800a038 <UART_SetConfig+0x34c>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d177      	bne.n	8009e86 <UART_SetConfig+0x19a>
 8009d96:	4ba9      	ldr	r3, [pc, #676]	; (800a03c <UART_SetConfig+0x350>)
 8009d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d9e:	2b28      	cmp	r3, #40	; 0x28
 8009da0:	d86c      	bhi.n	8009e7c <UART_SetConfig+0x190>
 8009da2:	a201      	add	r2, pc, #4	; (adr r2, 8009da8 <UART_SetConfig+0xbc>)
 8009da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da8:	08009e4d 	.word	0x08009e4d
 8009dac:	08009e7d 	.word	0x08009e7d
 8009db0:	08009e7d 	.word	0x08009e7d
 8009db4:	08009e7d 	.word	0x08009e7d
 8009db8:	08009e7d 	.word	0x08009e7d
 8009dbc:	08009e7d 	.word	0x08009e7d
 8009dc0:	08009e7d 	.word	0x08009e7d
 8009dc4:	08009e7d 	.word	0x08009e7d
 8009dc8:	08009e55 	.word	0x08009e55
 8009dcc:	08009e7d 	.word	0x08009e7d
 8009dd0:	08009e7d 	.word	0x08009e7d
 8009dd4:	08009e7d 	.word	0x08009e7d
 8009dd8:	08009e7d 	.word	0x08009e7d
 8009ddc:	08009e7d 	.word	0x08009e7d
 8009de0:	08009e7d 	.word	0x08009e7d
 8009de4:	08009e7d 	.word	0x08009e7d
 8009de8:	08009e5d 	.word	0x08009e5d
 8009dec:	08009e7d 	.word	0x08009e7d
 8009df0:	08009e7d 	.word	0x08009e7d
 8009df4:	08009e7d 	.word	0x08009e7d
 8009df8:	08009e7d 	.word	0x08009e7d
 8009dfc:	08009e7d 	.word	0x08009e7d
 8009e00:	08009e7d 	.word	0x08009e7d
 8009e04:	08009e7d 	.word	0x08009e7d
 8009e08:	08009e65 	.word	0x08009e65
 8009e0c:	08009e7d 	.word	0x08009e7d
 8009e10:	08009e7d 	.word	0x08009e7d
 8009e14:	08009e7d 	.word	0x08009e7d
 8009e18:	08009e7d 	.word	0x08009e7d
 8009e1c:	08009e7d 	.word	0x08009e7d
 8009e20:	08009e7d 	.word	0x08009e7d
 8009e24:	08009e7d 	.word	0x08009e7d
 8009e28:	08009e6d 	.word	0x08009e6d
 8009e2c:	08009e7d 	.word	0x08009e7d
 8009e30:	08009e7d 	.word	0x08009e7d
 8009e34:	08009e7d 	.word	0x08009e7d
 8009e38:	08009e7d 	.word	0x08009e7d
 8009e3c:	08009e7d 	.word	0x08009e7d
 8009e40:	08009e7d 	.word	0x08009e7d
 8009e44:	08009e7d 	.word	0x08009e7d
 8009e48:	08009e75 	.word	0x08009e75
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e52:	e339      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009e54:	2304      	movs	r3, #4
 8009e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e5a:	e335      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009e5c:	2308      	movs	r3, #8
 8009e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e62:	e331      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009e64:	2310      	movs	r3, #16
 8009e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e6a:	e32d      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009e6c:	2320      	movs	r3, #32
 8009e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e72:	e329      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009e74:	2340      	movs	r3, #64	; 0x40
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e325      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009e7c:	2380      	movs	r3, #128	; 0x80
 8009e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e82:	bf00      	nop
 8009e84:	e320      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a6d      	ldr	r2, [pc, #436]	; (800a040 <UART_SetConfig+0x354>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d132      	bne.n	8009ef6 <UART_SetConfig+0x20a>
 8009e90:	4b6a      	ldr	r3, [pc, #424]	; (800a03c <UART_SetConfig+0x350>)
 8009e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	2b05      	cmp	r3, #5
 8009e9a:	d827      	bhi.n	8009eec <UART_SetConfig+0x200>
 8009e9c:	a201      	add	r2, pc, #4	; (adr r2, 8009ea4 <UART_SetConfig+0x1b8>)
 8009e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea2:	bf00      	nop
 8009ea4:	08009ebd 	.word	0x08009ebd
 8009ea8:	08009ec5 	.word	0x08009ec5
 8009eac:	08009ecd 	.word	0x08009ecd
 8009eb0:	08009ed5 	.word	0x08009ed5
 8009eb4:	08009edd 	.word	0x08009edd
 8009eb8:	08009ee5 	.word	0x08009ee5
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec2:	e301      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009ec4:	2304      	movs	r3, #4
 8009ec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eca:	e2fd      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009ecc:	2308      	movs	r3, #8
 8009ece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ed2:	e2f9      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009ed4:	2310      	movs	r3, #16
 8009ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eda:	e2f5      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009edc:	2320      	movs	r3, #32
 8009ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ee2:	e2f1      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009ee4:	2340      	movs	r3, #64	; 0x40
 8009ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eea:	e2ed      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009eec:	2380      	movs	r3, #128	; 0x80
 8009eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ef2:	bf00      	nop
 8009ef4:	e2e8      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a52      	ldr	r2, [pc, #328]	; (800a044 <UART_SetConfig+0x358>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d132      	bne.n	8009f66 <UART_SetConfig+0x27a>
 8009f00:	4b4e      	ldr	r3, [pc, #312]	; (800a03c <UART_SetConfig+0x350>)
 8009f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f04:	f003 0307 	and.w	r3, r3, #7
 8009f08:	2b05      	cmp	r3, #5
 8009f0a:	d827      	bhi.n	8009f5c <UART_SetConfig+0x270>
 8009f0c:	a201      	add	r2, pc, #4	; (adr r2, 8009f14 <UART_SetConfig+0x228>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f2d 	.word	0x08009f2d
 8009f18:	08009f35 	.word	0x08009f35
 8009f1c:	08009f3d 	.word	0x08009f3d
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f4d 	.word	0x08009f4d
 8009f28:	08009f55 	.word	0x08009f55
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f32:	e2c9      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009f34:	2304      	movs	r3, #4
 8009f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f3a:	e2c5      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009f3c:	2308      	movs	r3, #8
 8009f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f42:	e2c1      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009f44:	2310      	movs	r3, #16
 8009f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4a:	e2bd      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009f4c:	2320      	movs	r3, #32
 8009f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f52:	e2b9      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f5a:	e2b5      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009f5c:	2380      	movs	r3, #128	; 0x80
 8009f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f62:	bf00      	nop
 8009f64:	e2b0      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a37      	ldr	r2, [pc, #220]	; (800a048 <UART_SetConfig+0x35c>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d132      	bne.n	8009fd6 <UART_SetConfig+0x2ea>
 8009f70:	4b32      	ldr	r3, [pc, #200]	; (800a03c <UART_SetConfig+0x350>)
 8009f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f74:	f003 0307 	and.w	r3, r3, #7
 8009f78:	2b05      	cmp	r3, #5
 8009f7a:	d827      	bhi.n	8009fcc <UART_SetConfig+0x2e0>
 8009f7c:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <UART_SetConfig+0x298>)
 8009f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f82:	bf00      	nop
 8009f84:	08009f9d 	.word	0x08009f9d
 8009f88:	08009fa5 	.word	0x08009fa5
 8009f8c:	08009fad 	.word	0x08009fad
 8009f90:	08009fb5 	.word	0x08009fb5
 8009f94:	08009fbd 	.word	0x08009fbd
 8009f98:	08009fc5 	.word	0x08009fc5
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa2:	e291      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009fa4:	2304      	movs	r3, #4
 8009fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009faa:	e28d      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009fac:	2308      	movs	r3, #8
 8009fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb2:	e289      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009fb4:	2310      	movs	r3, #16
 8009fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fba:	e285      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009fbc:	2320      	movs	r3, #32
 8009fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc2:	e281      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fca:	e27d      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009fcc:	2380      	movs	r3, #128	; 0x80
 8009fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fd2:	bf00      	nop
 8009fd4:	e278      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a1c      	ldr	r2, [pc, #112]	; (800a04c <UART_SetConfig+0x360>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d144      	bne.n	800a06a <UART_SetConfig+0x37e>
 8009fe0:	4b16      	ldr	r3, [pc, #88]	; (800a03c <UART_SetConfig+0x350>)
 8009fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fe4:	f003 0307 	and.w	r3, r3, #7
 8009fe8:	2b05      	cmp	r3, #5
 8009fea:	d839      	bhi.n	800a060 <UART_SetConfig+0x374>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x308>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a00d 	.word	0x0800a00d
 8009ff8:	0800a015 	.word	0x0800a015
 8009ffc:	0800a01d 	.word	0x0800a01d
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a051 	.word	0x0800a051
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	2300      	movs	r3, #0
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	e259      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a014:	2304      	movs	r3, #4
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01a:	e255      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a01c:	2308      	movs	r3, #8
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a022:	e251      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a024:	2310      	movs	r3, #16
 800a026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02a:	e24d      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a02c:	cfff69f3 	.word	0xcfff69f3
 800a030:	58000c00 	.word	0x58000c00
 800a034:	11fff4ff 	.word	0x11fff4ff
 800a038:	40011000 	.word	0x40011000
 800a03c:	58024400 	.word	0x58024400
 800a040:	40004400 	.word	0x40004400
 800a044:	40004800 	.word	0x40004800
 800a048:	40004c00 	.word	0x40004c00
 800a04c:	40005000 	.word	0x40005000
 800a050:	2320      	movs	r3, #32
 800a052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a056:	e237      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a05e:	e233      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a060:	2380      	movs	r3, #128	; 0x80
 800a062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a066:	bf00      	nop
 800a068:	e22e      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4ab5      	ldr	r2, [pc, #724]	; (800a344 <UART_SetConfig+0x658>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d178      	bne.n	800a166 <UART_SetConfig+0x47a>
 800a074:	4bb4      	ldr	r3, [pc, #720]	; (800a348 <UART_SetConfig+0x65c>)
 800a076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a078:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a07c:	2b28      	cmp	r3, #40	; 0x28
 800a07e:	d86d      	bhi.n	800a15c <UART_SetConfig+0x470>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <UART_SetConfig+0x39c>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a12d 	.word	0x0800a12d
 800a08c:	0800a15d 	.word	0x0800a15d
 800a090:	0800a15d 	.word	0x0800a15d
 800a094:	0800a15d 	.word	0x0800a15d
 800a098:	0800a15d 	.word	0x0800a15d
 800a09c:	0800a15d 	.word	0x0800a15d
 800a0a0:	0800a15d 	.word	0x0800a15d
 800a0a4:	0800a15d 	.word	0x0800a15d
 800a0a8:	0800a135 	.word	0x0800a135
 800a0ac:	0800a15d 	.word	0x0800a15d
 800a0b0:	0800a15d 	.word	0x0800a15d
 800a0b4:	0800a15d 	.word	0x0800a15d
 800a0b8:	0800a15d 	.word	0x0800a15d
 800a0bc:	0800a15d 	.word	0x0800a15d
 800a0c0:	0800a15d 	.word	0x0800a15d
 800a0c4:	0800a15d 	.word	0x0800a15d
 800a0c8:	0800a13d 	.word	0x0800a13d
 800a0cc:	0800a15d 	.word	0x0800a15d
 800a0d0:	0800a15d 	.word	0x0800a15d
 800a0d4:	0800a15d 	.word	0x0800a15d
 800a0d8:	0800a15d 	.word	0x0800a15d
 800a0dc:	0800a15d 	.word	0x0800a15d
 800a0e0:	0800a15d 	.word	0x0800a15d
 800a0e4:	0800a15d 	.word	0x0800a15d
 800a0e8:	0800a145 	.word	0x0800a145
 800a0ec:	0800a15d 	.word	0x0800a15d
 800a0f0:	0800a15d 	.word	0x0800a15d
 800a0f4:	0800a15d 	.word	0x0800a15d
 800a0f8:	0800a15d 	.word	0x0800a15d
 800a0fc:	0800a15d 	.word	0x0800a15d
 800a100:	0800a15d 	.word	0x0800a15d
 800a104:	0800a15d 	.word	0x0800a15d
 800a108:	0800a14d 	.word	0x0800a14d
 800a10c:	0800a15d 	.word	0x0800a15d
 800a110:	0800a15d 	.word	0x0800a15d
 800a114:	0800a15d 	.word	0x0800a15d
 800a118:	0800a15d 	.word	0x0800a15d
 800a11c:	0800a15d 	.word	0x0800a15d
 800a120:	0800a15d 	.word	0x0800a15d
 800a124:	0800a15d 	.word	0x0800a15d
 800a128:	0800a155 	.word	0x0800a155
 800a12c:	2301      	movs	r3, #1
 800a12e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a132:	e1c9      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a134:	2304      	movs	r3, #4
 800a136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a13a:	e1c5      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a13c:	2308      	movs	r3, #8
 800a13e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a142:	e1c1      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a144:	2310      	movs	r3, #16
 800a146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a14a:	e1bd      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a14c:	2320      	movs	r3, #32
 800a14e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a152:	e1b9      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a154:	2340      	movs	r3, #64	; 0x40
 800a156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a15a:	e1b5      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a15c:	2380      	movs	r3, #128	; 0x80
 800a15e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a162:	bf00      	nop
 800a164:	e1b0      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a78      	ldr	r2, [pc, #480]	; (800a34c <UART_SetConfig+0x660>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d132      	bne.n	800a1d6 <UART_SetConfig+0x4ea>
 800a170:	4b75      	ldr	r3, [pc, #468]	; (800a348 <UART_SetConfig+0x65c>)
 800a172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a174:	f003 0307 	and.w	r3, r3, #7
 800a178:	2b05      	cmp	r3, #5
 800a17a:	d827      	bhi.n	800a1cc <UART_SetConfig+0x4e0>
 800a17c:	a201      	add	r2, pc, #4	; (adr r2, 800a184 <UART_SetConfig+0x498>)
 800a17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a182:	bf00      	nop
 800a184:	0800a19d 	.word	0x0800a19d
 800a188:	0800a1a5 	.word	0x0800a1a5
 800a18c:	0800a1ad 	.word	0x0800a1ad
 800a190:	0800a1b5 	.word	0x0800a1b5
 800a194:	0800a1bd 	.word	0x0800a1bd
 800a198:	0800a1c5 	.word	0x0800a1c5
 800a19c:	2300      	movs	r3, #0
 800a19e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1a2:	e191      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a1a4:	2304      	movs	r3, #4
 800a1a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1aa:	e18d      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a1ac:	2308      	movs	r3, #8
 800a1ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1b2:	e189      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a1b4:	2310      	movs	r3, #16
 800a1b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ba:	e185      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a1bc:	2320      	movs	r3, #32
 800a1be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1c2:	e181      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e17d      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a1cc:	2380      	movs	r3, #128	; 0x80
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	bf00      	nop
 800a1d4:	e178      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a5d      	ldr	r2, [pc, #372]	; (800a350 <UART_SetConfig+0x664>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d132      	bne.n	800a246 <UART_SetConfig+0x55a>
 800a1e0:	4b59      	ldr	r3, [pc, #356]	; (800a348 <UART_SetConfig+0x65c>)
 800a1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e4:	f003 0307 	and.w	r3, r3, #7
 800a1e8:	2b05      	cmp	r3, #5
 800a1ea:	d827      	bhi.n	800a23c <UART_SetConfig+0x550>
 800a1ec:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <UART_SetConfig+0x508>)
 800a1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f2:	bf00      	nop
 800a1f4:	0800a20d 	.word	0x0800a20d
 800a1f8:	0800a215 	.word	0x0800a215
 800a1fc:	0800a21d 	.word	0x0800a21d
 800a200:	0800a225 	.word	0x0800a225
 800a204:	0800a22d 	.word	0x0800a22d
 800a208:	0800a235 	.word	0x0800a235
 800a20c:	2300      	movs	r3, #0
 800a20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a212:	e159      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a214:	2304      	movs	r3, #4
 800a216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a21a:	e155      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a21c:	2308      	movs	r3, #8
 800a21e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a222:	e151      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a224:	2310      	movs	r3, #16
 800a226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a22a:	e14d      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a22c:	2320      	movs	r3, #32
 800a22e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a232:	e149      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a234:	2340      	movs	r3, #64	; 0x40
 800a236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23a:	e145      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a23c:	2380      	movs	r3, #128	; 0x80
 800a23e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a242:	bf00      	nop
 800a244:	e140      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a42      	ldr	r2, [pc, #264]	; (800a354 <UART_SetConfig+0x668>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	f040 8083 	bne.w	800a358 <UART_SetConfig+0x66c>
 800a252:	4b3d      	ldr	r3, [pc, #244]	; (800a348 <UART_SetConfig+0x65c>)
 800a254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a25a:	2b28      	cmp	r3, #40	; 0x28
 800a25c:	d86c      	bhi.n	800a338 <UART_SetConfig+0x64c>
 800a25e:	a201      	add	r2, pc, #4	; (adr r2, 800a264 <UART_SetConfig+0x578>)
 800a260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a264:	0800a309 	.word	0x0800a309
 800a268:	0800a339 	.word	0x0800a339
 800a26c:	0800a339 	.word	0x0800a339
 800a270:	0800a339 	.word	0x0800a339
 800a274:	0800a339 	.word	0x0800a339
 800a278:	0800a339 	.word	0x0800a339
 800a27c:	0800a339 	.word	0x0800a339
 800a280:	0800a339 	.word	0x0800a339
 800a284:	0800a311 	.word	0x0800a311
 800a288:	0800a339 	.word	0x0800a339
 800a28c:	0800a339 	.word	0x0800a339
 800a290:	0800a339 	.word	0x0800a339
 800a294:	0800a339 	.word	0x0800a339
 800a298:	0800a339 	.word	0x0800a339
 800a29c:	0800a339 	.word	0x0800a339
 800a2a0:	0800a339 	.word	0x0800a339
 800a2a4:	0800a319 	.word	0x0800a319
 800a2a8:	0800a339 	.word	0x0800a339
 800a2ac:	0800a339 	.word	0x0800a339
 800a2b0:	0800a339 	.word	0x0800a339
 800a2b4:	0800a339 	.word	0x0800a339
 800a2b8:	0800a339 	.word	0x0800a339
 800a2bc:	0800a339 	.word	0x0800a339
 800a2c0:	0800a339 	.word	0x0800a339
 800a2c4:	0800a321 	.word	0x0800a321
 800a2c8:	0800a339 	.word	0x0800a339
 800a2cc:	0800a339 	.word	0x0800a339
 800a2d0:	0800a339 	.word	0x0800a339
 800a2d4:	0800a339 	.word	0x0800a339
 800a2d8:	0800a339 	.word	0x0800a339
 800a2dc:	0800a339 	.word	0x0800a339
 800a2e0:	0800a339 	.word	0x0800a339
 800a2e4:	0800a329 	.word	0x0800a329
 800a2e8:	0800a339 	.word	0x0800a339
 800a2ec:	0800a339 	.word	0x0800a339
 800a2f0:	0800a339 	.word	0x0800a339
 800a2f4:	0800a339 	.word	0x0800a339
 800a2f8:	0800a339 	.word	0x0800a339
 800a2fc:	0800a339 	.word	0x0800a339
 800a300:	0800a339 	.word	0x0800a339
 800a304:	0800a331 	.word	0x0800a331
 800a308:	2301      	movs	r3, #1
 800a30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30e:	e0db      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a310:	2304      	movs	r3, #4
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	e0d7      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a318:	2308      	movs	r3, #8
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31e:	e0d3      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a320:	2310      	movs	r3, #16
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e0cf      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a328:	2320      	movs	r3, #32
 800a32a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a32e:	e0cb      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a330:	2340      	movs	r3, #64	; 0x40
 800a332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a336:	e0c7      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a338:	2380      	movs	r3, #128	; 0x80
 800a33a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a33e:	bf00      	nop
 800a340:	e0c2      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a342:	bf00      	nop
 800a344:	40011400 	.word	0x40011400
 800a348:	58024400 	.word	0x58024400
 800a34c:	40007800 	.word	0x40007800
 800a350:	40007c00 	.word	0x40007c00
 800a354:	40011800 	.word	0x40011800
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4ab2      	ldr	r2, [pc, #712]	; (800a628 <UART_SetConfig+0x93c>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d177      	bne.n	800a452 <UART_SetConfig+0x766>
 800a362:	4bb2      	ldr	r3, [pc, #712]	; (800a62c <UART_SetConfig+0x940>)
 800a364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a366:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a36a:	2b28      	cmp	r3, #40	; 0x28
 800a36c:	d86c      	bhi.n	800a448 <UART_SetConfig+0x75c>
 800a36e:	a201      	add	r2, pc, #4	; (adr r2, 800a374 <UART_SetConfig+0x688>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a419 	.word	0x0800a419
 800a378:	0800a449 	.word	0x0800a449
 800a37c:	0800a449 	.word	0x0800a449
 800a380:	0800a449 	.word	0x0800a449
 800a384:	0800a449 	.word	0x0800a449
 800a388:	0800a449 	.word	0x0800a449
 800a38c:	0800a449 	.word	0x0800a449
 800a390:	0800a449 	.word	0x0800a449
 800a394:	0800a421 	.word	0x0800a421
 800a398:	0800a449 	.word	0x0800a449
 800a39c:	0800a449 	.word	0x0800a449
 800a3a0:	0800a449 	.word	0x0800a449
 800a3a4:	0800a449 	.word	0x0800a449
 800a3a8:	0800a449 	.word	0x0800a449
 800a3ac:	0800a449 	.word	0x0800a449
 800a3b0:	0800a449 	.word	0x0800a449
 800a3b4:	0800a429 	.word	0x0800a429
 800a3b8:	0800a449 	.word	0x0800a449
 800a3bc:	0800a449 	.word	0x0800a449
 800a3c0:	0800a449 	.word	0x0800a449
 800a3c4:	0800a449 	.word	0x0800a449
 800a3c8:	0800a449 	.word	0x0800a449
 800a3cc:	0800a449 	.word	0x0800a449
 800a3d0:	0800a449 	.word	0x0800a449
 800a3d4:	0800a431 	.word	0x0800a431
 800a3d8:	0800a449 	.word	0x0800a449
 800a3dc:	0800a449 	.word	0x0800a449
 800a3e0:	0800a449 	.word	0x0800a449
 800a3e4:	0800a449 	.word	0x0800a449
 800a3e8:	0800a449 	.word	0x0800a449
 800a3ec:	0800a449 	.word	0x0800a449
 800a3f0:	0800a449 	.word	0x0800a449
 800a3f4:	0800a439 	.word	0x0800a439
 800a3f8:	0800a449 	.word	0x0800a449
 800a3fc:	0800a449 	.word	0x0800a449
 800a400:	0800a449 	.word	0x0800a449
 800a404:	0800a449 	.word	0x0800a449
 800a408:	0800a449 	.word	0x0800a449
 800a40c:	0800a449 	.word	0x0800a449
 800a410:	0800a449 	.word	0x0800a449
 800a414:	0800a441 	.word	0x0800a441
 800a418:	2301      	movs	r3, #1
 800a41a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41e:	e053      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a420:	2304      	movs	r3, #4
 800a422:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a426:	e04f      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a428:	2308      	movs	r3, #8
 800a42a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42e:	e04b      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a430:	2310      	movs	r3, #16
 800a432:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a436:	e047      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a438:	2320      	movs	r3, #32
 800a43a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43e:	e043      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a440:	2340      	movs	r3, #64	; 0x40
 800a442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a446:	e03f      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a448:	2380      	movs	r3, #128	; 0x80
 800a44a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44e:	bf00      	nop
 800a450:	e03a      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a76      	ldr	r2, [pc, #472]	; (800a630 <UART_SetConfig+0x944>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d132      	bne.n	800a4c2 <UART_SetConfig+0x7d6>
 800a45c:	4b73      	ldr	r3, [pc, #460]	; (800a62c <UART_SetConfig+0x940>)
 800a45e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a460:	f003 0307 	and.w	r3, r3, #7
 800a464:	2b05      	cmp	r3, #5
 800a466:	d827      	bhi.n	800a4b8 <UART_SetConfig+0x7cc>
 800a468:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <UART_SetConfig+0x784>)
 800a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46e:	bf00      	nop
 800a470:	0800a489 	.word	0x0800a489
 800a474:	0800a491 	.word	0x0800a491
 800a478:	0800a499 	.word	0x0800a499
 800a47c:	0800a4a1 	.word	0x0800a4a1
 800a480:	0800a4a9 	.word	0x0800a4a9
 800a484:	0800a4b1 	.word	0x0800a4b1
 800a488:	2302      	movs	r3, #2
 800a48a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48e:	e01b      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a490:	2304      	movs	r3, #4
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e017      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a498:	2308      	movs	r3, #8
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e013      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a4a0:	2310      	movs	r3, #16
 800a4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a6:	e00f      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a4a8:	2320      	movs	r3, #32
 800a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ae:	e00b      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a4b0:	2340      	movs	r3, #64	; 0x40
 800a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b6:	e007      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a4b8:	2380      	movs	r3, #128	; 0x80
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	bf00      	nop
 800a4c0:	e002      	b.n	800a4c8 <UART_SetConfig+0x7dc>
 800a4c2:	2380      	movs	r3, #128	; 0x80
 800a4c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	4a58      	ldr	r2, [pc, #352]	; (800a630 <UART_SetConfig+0x944>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	f040 80b6 	bne.w	800a640 <UART_SetConfig+0x954>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4d8:	2b08      	cmp	r3, #8
 800a4da:	d019      	beq.n	800a510 <UART_SetConfig+0x824>
 800a4dc:	2b08      	cmp	r3, #8
 800a4de:	dc04      	bgt.n	800a4ea <UART_SetConfig+0x7fe>
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d009      	beq.n	800a4f8 <UART_SetConfig+0x80c>
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d00b      	beq.n	800a500 <UART_SetConfig+0x814>
 800a4e8:	e034      	b.n	800a554 <UART_SetConfig+0x868>
 800a4ea:	2b20      	cmp	r3, #32
 800a4ec:	d02b      	beq.n	800a546 <UART_SetConfig+0x85a>
 800a4ee:	2b40      	cmp	r3, #64	; 0x40
 800a4f0:	d02c      	beq.n	800a54c <UART_SetConfig+0x860>
 800a4f2:	2b10      	cmp	r3, #16
 800a4f4:	d014      	beq.n	800a520 <UART_SetConfig+0x834>
 800a4f6:	e02d      	b.n	800a554 <UART_SetConfig+0x868>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4f8:	f7fd fa6a 	bl	80079d0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a4fe:	e02f      	b.n	800a560 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a500:	f107 0314 	add.w	r3, r7, #20
 800a504:	4618      	mov	r0, r3
 800a506:	f7fd fa79 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a50a:	69bb      	ldr	r3, [r7, #24]
 800a50c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a50e:	e027      	b.n	800a560 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a510:	f107 0308 	add.w	r3, r7, #8
 800a514:	4618      	mov	r0, r3
 800a516:	f7fd fbbd 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a51e:	e01f      	b.n	800a560 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a520:	4b42      	ldr	r3, [pc, #264]	; (800a62c <UART_SetConfig+0x940>)
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 0320 	and.w	r3, r3, #32
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d009      	beq.n	800a540 <UART_SetConfig+0x854>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a52c:	4b3f      	ldr	r3, [pc, #252]	; (800a62c <UART_SetConfig+0x940>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	08db      	lsrs	r3, r3, #3
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	4a3f      	ldr	r2, [pc, #252]	; (800a634 <UART_SetConfig+0x948>)
 800a538:	fa22 f303 	lsr.w	r3, r2, r3
 800a53c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a53e:	e00f      	b.n	800a560 <UART_SetConfig+0x874>
          pclk = (uint32_t) HSI_VALUE;
 800a540:	4b3c      	ldr	r3, [pc, #240]	; (800a634 <UART_SetConfig+0x948>)
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a544:	e00c      	b.n	800a560 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a546:	4b3c      	ldr	r3, [pc, #240]	; (800a638 <UART_SetConfig+0x94c>)
 800a548:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a54a:	e009      	b.n	800a560 <UART_SetConfig+0x874>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a54c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a550:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a552:	e005      	b.n	800a560 <UART_SetConfig+0x874>
      default:
        pclk = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a558:	2301      	movs	r3, #1
 800a55a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a55e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 8251 	beq.w	800aa0a <UART_SetConfig+0xd1e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	4a33      	ldr	r2, [pc, #204]	; (800a63c <UART_SetConfig+0x950>)
 800a56e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a572:	461a      	mov	r2, r3
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	fbb3 f3f2 	udiv	r3, r3, r2
 800a57a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	4613      	mov	r3, r2
 800a582:	005b      	lsls	r3, r3, #1
 800a584:	4413      	add	r3, r2
 800a586:	6a3a      	ldr	r2, [r7, #32]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d305      	bcc.n	800a598 <UART_SetConfig+0x8ac>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a592:	6a3a      	ldr	r2, [r7, #32]
 800a594:	429a      	cmp	r2, r3
 800a596:	d903      	bls.n	800a5a0 <UART_SetConfig+0x8b4>
      {
        ret = HAL_ERROR;
 800a598:	2301      	movs	r3, #1
 800a59a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a59e:	e234      	b.n	800aa0a <UART_SetConfig+0xd1e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f04f 0100 	mov.w	r1, #0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	4a23      	ldr	r2, [pc, #140]	; (800a63c <UART_SetConfig+0x950>)
 800a5ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	f04f 0400 	mov.w	r4, #0
 800a5b8:	461a      	mov	r2, r3
 800a5ba:	4623      	mov	r3, r4
 800a5bc:	f7f5 fef8 	bl	80003b0 <__aeabi_uldivmod>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4622      	mov	r2, r4
 800a5c8:	f04f 0300 	mov.w	r3, #0
 800a5cc:	f04f 0400 	mov.w	r4, #0
 800a5d0:	0214      	lsls	r4, r2, #8
 800a5d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a5d6:	020b      	lsls	r3, r1, #8
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	6852      	ldr	r2, [r2, #4]
 800a5dc:	0852      	lsrs	r2, r2, #1
 800a5de:	4611      	mov	r1, r2
 800a5e0:	f04f 0200 	mov.w	r2, #0
 800a5e4:	eb13 0b01 	adds.w	fp, r3, r1
 800a5e8:	eb44 0c02 	adc.w	ip, r4, r2
 800a5ec:	4658      	mov	r0, fp
 800a5ee:	4661      	mov	r1, ip
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f04f 0400 	mov.w	r4, #0
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4623      	mov	r3, r4
 800a5fc:	f7f5 fed8 	bl	80003b0 <__aeabi_uldivmod>
 800a600:	4603      	mov	r3, r0
 800a602:	460c      	mov	r4, r1
 800a604:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a608:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a60c:	d308      	bcc.n	800a620 <UART_SetConfig+0x934>
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a614:	d204      	bcs.n	800a620 <UART_SetConfig+0x934>
        {
          huart->Instance->BRR = usartdiv;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a61c:	60da      	str	r2, [r3, #12]
 800a61e:	e1f4      	b.n	800aa0a <UART_SetConfig+0xd1e>
        }
        else
        {
          ret = HAL_ERROR;
 800a620:	2301      	movs	r3, #1
 800a622:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a626:	e1f0      	b.n	800aa0a <UART_SetConfig+0xd1e>
 800a628:	40011c00 	.word	0x40011c00
 800a62c:	58024400 	.word	0x58024400
 800a630:	58000c00 	.word	0x58000c00
 800a634:	03d09000 	.word	0x03d09000
 800a638:	003d0900 	.word	0x003d0900
 800a63c:	08021054 	.word	0x08021054
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a648:	f040 80f8 	bne.w	800a83c <UART_SetConfig+0xb50>
  {
    switch (clocksource)
 800a64c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a650:	2b40      	cmp	r3, #64	; 0x40
 800a652:	f200 80b7 	bhi.w	800a7c4 <UART_SetConfig+0xad8>
 800a656:	a201      	add	r2, pc, #4	; (adr r2, 800a65c <UART_SetConfig+0x970>)
 800a658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a65c:	0800a761 	.word	0x0800a761
 800a660:	0800a769 	.word	0x0800a769
 800a664:	0800a7c5 	.word	0x0800a7c5
 800a668:	0800a7c5 	.word	0x0800a7c5
 800a66c:	0800a771 	.word	0x0800a771
 800a670:	0800a7c5 	.word	0x0800a7c5
 800a674:	0800a7c5 	.word	0x0800a7c5
 800a678:	0800a7c5 	.word	0x0800a7c5
 800a67c:	0800a781 	.word	0x0800a781
 800a680:	0800a7c5 	.word	0x0800a7c5
 800a684:	0800a7c5 	.word	0x0800a7c5
 800a688:	0800a7c5 	.word	0x0800a7c5
 800a68c:	0800a7c5 	.word	0x0800a7c5
 800a690:	0800a7c5 	.word	0x0800a7c5
 800a694:	0800a7c5 	.word	0x0800a7c5
 800a698:	0800a7c5 	.word	0x0800a7c5
 800a69c:	0800a791 	.word	0x0800a791
 800a6a0:	0800a7c5 	.word	0x0800a7c5
 800a6a4:	0800a7c5 	.word	0x0800a7c5
 800a6a8:	0800a7c5 	.word	0x0800a7c5
 800a6ac:	0800a7c5 	.word	0x0800a7c5
 800a6b0:	0800a7c5 	.word	0x0800a7c5
 800a6b4:	0800a7c5 	.word	0x0800a7c5
 800a6b8:	0800a7c5 	.word	0x0800a7c5
 800a6bc:	0800a7c5 	.word	0x0800a7c5
 800a6c0:	0800a7c5 	.word	0x0800a7c5
 800a6c4:	0800a7c5 	.word	0x0800a7c5
 800a6c8:	0800a7c5 	.word	0x0800a7c5
 800a6cc:	0800a7c5 	.word	0x0800a7c5
 800a6d0:	0800a7c5 	.word	0x0800a7c5
 800a6d4:	0800a7c5 	.word	0x0800a7c5
 800a6d8:	0800a7c5 	.word	0x0800a7c5
 800a6dc:	0800a7b7 	.word	0x0800a7b7
 800a6e0:	0800a7c5 	.word	0x0800a7c5
 800a6e4:	0800a7c5 	.word	0x0800a7c5
 800a6e8:	0800a7c5 	.word	0x0800a7c5
 800a6ec:	0800a7c5 	.word	0x0800a7c5
 800a6f0:	0800a7c5 	.word	0x0800a7c5
 800a6f4:	0800a7c5 	.word	0x0800a7c5
 800a6f8:	0800a7c5 	.word	0x0800a7c5
 800a6fc:	0800a7c5 	.word	0x0800a7c5
 800a700:	0800a7c5 	.word	0x0800a7c5
 800a704:	0800a7c5 	.word	0x0800a7c5
 800a708:	0800a7c5 	.word	0x0800a7c5
 800a70c:	0800a7c5 	.word	0x0800a7c5
 800a710:	0800a7c5 	.word	0x0800a7c5
 800a714:	0800a7c5 	.word	0x0800a7c5
 800a718:	0800a7c5 	.word	0x0800a7c5
 800a71c:	0800a7c5 	.word	0x0800a7c5
 800a720:	0800a7c5 	.word	0x0800a7c5
 800a724:	0800a7c5 	.word	0x0800a7c5
 800a728:	0800a7c5 	.word	0x0800a7c5
 800a72c:	0800a7c5 	.word	0x0800a7c5
 800a730:	0800a7c5 	.word	0x0800a7c5
 800a734:	0800a7c5 	.word	0x0800a7c5
 800a738:	0800a7c5 	.word	0x0800a7c5
 800a73c:	0800a7c5 	.word	0x0800a7c5
 800a740:	0800a7c5 	.word	0x0800a7c5
 800a744:	0800a7c5 	.word	0x0800a7c5
 800a748:	0800a7c5 	.word	0x0800a7c5
 800a74c:	0800a7c5 	.word	0x0800a7c5
 800a750:	0800a7c5 	.word	0x0800a7c5
 800a754:	0800a7c5 	.word	0x0800a7c5
 800a758:	0800a7c5 	.word	0x0800a7c5
 800a75c:	0800a7bd 	.word	0x0800a7bd
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a760:	f7fc fa24 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 800a764:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a766:	e033      	b.n	800a7d0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a768:	f7fc fa36 	bl	8006bd8 <HAL_RCC_GetPCLK2Freq>
 800a76c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a76e:	e02f      	b.n	800a7d0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a770:	f107 0314 	add.w	r3, r7, #20
 800a774:	4618      	mov	r0, r3
 800a776:	f7fd f941 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a77e:	e027      	b.n	800a7d0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a780:	f107 0308 	add.w	r3, r7, #8
 800a784:	4618      	mov	r0, r3
 800a786:	f7fd fa85 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a78e:	e01f      	b.n	800a7d0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a790:	4ba8      	ldr	r3, [pc, #672]	; (800aa34 <UART_SetConfig+0xd48>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0320 	and.w	r3, r3, #32
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d009      	beq.n	800a7b0 <UART_SetConfig+0xac4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a79c:	4ba5      	ldr	r3, [pc, #660]	; (800aa34 <UART_SetConfig+0xd48>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	08db      	lsrs	r3, r3, #3
 800a7a2:	f003 0303 	and.w	r3, r3, #3
 800a7a6:	4aa4      	ldr	r2, [pc, #656]	; (800aa38 <UART_SetConfig+0xd4c>)
 800a7a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7ae:	e00f      	b.n	800a7d0 <UART_SetConfig+0xae4>
          pclk = (uint32_t) HSI_VALUE;
 800a7b0:	4ba1      	ldr	r3, [pc, #644]	; (800aa38 <UART_SetConfig+0xd4c>)
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7b4:	e00c      	b.n	800a7d0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7b6:	4ba1      	ldr	r3, [pc, #644]	; (800aa3c <UART_SetConfig+0xd50>)
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7ba:	e009      	b.n	800a7d0 <UART_SetConfig+0xae4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7c2:	e005      	b.n	800a7d0 <UART_SetConfig+0xae4>
      default:
        pclk = 0U;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 8119 	beq.w	800aa0a <UART_SetConfig+0xd1e>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7dc:	4a98      	ldr	r2, [pc, #608]	; (800aa40 <UART_SetConfig+0xd54>)
 800a7de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7ea:	005a      	lsls	r2, r3, #1
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	085b      	lsrs	r3, r3, #1
 800a7f2:	441a      	add	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a802:	2b0f      	cmp	r3, #15
 800a804:	d916      	bls.n	800a834 <UART_SetConfig+0xb48>
 800a806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a80c:	d212      	bcs.n	800a834 <UART_SetConfig+0xb48>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	b29b      	uxth	r3, r3
 800a812:	f023 030f 	bic.w	r3, r3, #15
 800a816:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81a:	085b      	lsrs	r3, r3, #1
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	f003 0307 	and.w	r3, r3, #7
 800a822:	b29a      	uxth	r2, r3
 800a824:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a826:	4313      	orrs	r3, r2
 800a828:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a830:	60da      	str	r2, [r3, #12]
 800a832:	e0ea      	b.n	800aa0a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a83a:	e0e6      	b.n	800aa0a <UART_SetConfig+0xd1e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a83c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a840:	2b40      	cmp	r3, #64	; 0x40
 800a842:	f200 80b7 	bhi.w	800a9b4 <UART_SetConfig+0xcc8>
 800a846:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <UART_SetConfig+0xb60>)
 800a848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84c:	0800a951 	.word	0x0800a951
 800a850:	0800a959 	.word	0x0800a959
 800a854:	0800a9b5 	.word	0x0800a9b5
 800a858:	0800a9b5 	.word	0x0800a9b5
 800a85c:	0800a961 	.word	0x0800a961
 800a860:	0800a9b5 	.word	0x0800a9b5
 800a864:	0800a9b5 	.word	0x0800a9b5
 800a868:	0800a9b5 	.word	0x0800a9b5
 800a86c:	0800a971 	.word	0x0800a971
 800a870:	0800a9b5 	.word	0x0800a9b5
 800a874:	0800a9b5 	.word	0x0800a9b5
 800a878:	0800a9b5 	.word	0x0800a9b5
 800a87c:	0800a9b5 	.word	0x0800a9b5
 800a880:	0800a9b5 	.word	0x0800a9b5
 800a884:	0800a9b5 	.word	0x0800a9b5
 800a888:	0800a9b5 	.word	0x0800a9b5
 800a88c:	0800a981 	.word	0x0800a981
 800a890:	0800a9b5 	.word	0x0800a9b5
 800a894:	0800a9b5 	.word	0x0800a9b5
 800a898:	0800a9b5 	.word	0x0800a9b5
 800a89c:	0800a9b5 	.word	0x0800a9b5
 800a8a0:	0800a9b5 	.word	0x0800a9b5
 800a8a4:	0800a9b5 	.word	0x0800a9b5
 800a8a8:	0800a9b5 	.word	0x0800a9b5
 800a8ac:	0800a9b5 	.word	0x0800a9b5
 800a8b0:	0800a9b5 	.word	0x0800a9b5
 800a8b4:	0800a9b5 	.word	0x0800a9b5
 800a8b8:	0800a9b5 	.word	0x0800a9b5
 800a8bc:	0800a9b5 	.word	0x0800a9b5
 800a8c0:	0800a9b5 	.word	0x0800a9b5
 800a8c4:	0800a9b5 	.word	0x0800a9b5
 800a8c8:	0800a9b5 	.word	0x0800a9b5
 800a8cc:	0800a9a7 	.word	0x0800a9a7
 800a8d0:	0800a9b5 	.word	0x0800a9b5
 800a8d4:	0800a9b5 	.word	0x0800a9b5
 800a8d8:	0800a9b5 	.word	0x0800a9b5
 800a8dc:	0800a9b5 	.word	0x0800a9b5
 800a8e0:	0800a9b5 	.word	0x0800a9b5
 800a8e4:	0800a9b5 	.word	0x0800a9b5
 800a8e8:	0800a9b5 	.word	0x0800a9b5
 800a8ec:	0800a9b5 	.word	0x0800a9b5
 800a8f0:	0800a9b5 	.word	0x0800a9b5
 800a8f4:	0800a9b5 	.word	0x0800a9b5
 800a8f8:	0800a9b5 	.word	0x0800a9b5
 800a8fc:	0800a9b5 	.word	0x0800a9b5
 800a900:	0800a9b5 	.word	0x0800a9b5
 800a904:	0800a9b5 	.word	0x0800a9b5
 800a908:	0800a9b5 	.word	0x0800a9b5
 800a90c:	0800a9b5 	.word	0x0800a9b5
 800a910:	0800a9b5 	.word	0x0800a9b5
 800a914:	0800a9b5 	.word	0x0800a9b5
 800a918:	0800a9b5 	.word	0x0800a9b5
 800a91c:	0800a9b5 	.word	0x0800a9b5
 800a920:	0800a9b5 	.word	0x0800a9b5
 800a924:	0800a9b5 	.word	0x0800a9b5
 800a928:	0800a9b5 	.word	0x0800a9b5
 800a92c:	0800a9b5 	.word	0x0800a9b5
 800a930:	0800a9b5 	.word	0x0800a9b5
 800a934:	0800a9b5 	.word	0x0800a9b5
 800a938:	0800a9b5 	.word	0x0800a9b5
 800a93c:	0800a9b5 	.word	0x0800a9b5
 800a940:	0800a9b5 	.word	0x0800a9b5
 800a944:	0800a9b5 	.word	0x0800a9b5
 800a948:	0800a9b5 	.word	0x0800a9b5
 800a94c:	0800a9ad 	.word	0x0800a9ad
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a950:	f7fc f92c 	bl	8006bac <HAL_RCC_GetPCLK1Freq>
 800a954:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a956:	e033      	b.n	800a9c0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a958:	f7fc f93e 	bl	8006bd8 <HAL_RCC_GetPCLK2Freq>
 800a95c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a95e:	e02f      	b.n	800a9c0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a960:	f107 0314 	add.w	r3, r7, #20
 800a964:	4618      	mov	r0, r3
 800a966:	f7fd f849 	bl	80079fc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a96e:	e027      	b.n	800a9c0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a970:	f107 0308 	add.w	r3, r7, #8
 800a974:	4618      	mov	r0, r3
 800a976:	f7fd f98d 	bl	8007c94 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a97e:	e01f      	b.n	800a9c0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a980:	4b2c      	ldr	r3, [pc, #176]	; (800aa34 <UART_SetConfig+0xd48>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 0320 	and.w	r3, r3, #32
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d009      	beq.n	800a9a0 <UART_SetConfig+0xcb4>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a98c:	4b29      	ldr	r3, [pc, #164]	; (800aa34 <UART_SetConfig+0xd48>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	08db      	lsrs	r3, r3, #3
 800a992:	f003 0303 	and.w	r3, r3, #3
 800a996:	4a28      	ldr	r2, [pc, #160]	; (800aa38 <UART_SetConfig+0xd4c>)
 800a998:	fa22 f303 	lsr.w	r3, r2, r3
 800a99c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a99e:	e00f      	b.n	800a9c0 <UART_SetConfig+0xcd4>
          pclk = (uint32_t) HSI_VALUE;
 800a9a0:	4b25      	ldr	r3, [pc, #148]	; (800aa38 <UART_SetConfig+0xd4c>)
 800a9a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9a4:	e00c      	b.n	800a9c0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a9a6:	4b25      	ldr	r3, [pc, #148]	; (800aa3c <UART_SetConfig+0xd50>)
 800a9a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9aa:	e009      	b.n	800a9c0 <UART_SetConfig+0xcd4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a9ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a9b2:	e005      	b.n	800a9c0 <UART_SetConfig+0xcd4>
      default:
        pclk = 0U;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a9be:	bf00      	nop
    }

    if (pclk != 0U)
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d021      	beq.n	800aa0a <UART_SetConfig+0xd1e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ca:	4a1d      	ldr	r2, [pc, #116]	; (800aa40 <UART_SetConfig+0xd54>)
 800a9cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	085b      	lsrs	r3, r3, #1
 800a9de:	441a      	add	r2, r3
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	2b0f      	cmp	r3, #15
 800a9f0:	d908      	bls.n	800aa04 <UART_SetConfig+0xd18>
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9f8:	d204      	bcs.n	800aa04 <UART_SetConfig+0xd18>
      {
        huart->Instance->BRR = usartdiv;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa00:	60da      	str	r2, [r3, #12]
 800aa02:	e002      	b.n	800aa0a <UART_SetConfig+0xd1e>
      }
      else
      {
        ret = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2201      	movs	r2, #1
 800aa16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800aa26:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3738      	adds	r7, #56	; 0x38
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800aa34:	58024400 	.word	0x58024400
 800aa38:	03d09000 	.word	0x03d09000
 800aa3c:	003d0900 	.word	0x003d0900
 800aa40:	08021054 	.word	0x08021054

0800aa44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00a      	beq.n	800aa6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa72:	f003 0302 	and.w	r3, r3, #2
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa94:	f003 0304 	and.w	r3, r3, #4
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00a      	beq.n	800aab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab6:	f003 0308 	and.w	r3, r3, #8
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00a      	beq.n	800aad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad8:	f003 0310 	and.w	r3, r3, #16
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00a      	beq.n	800aaf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aafa:	f003 0320 	and.w	r3, r3, #32
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d00a      	beq.n	800ab18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	430a      	orrs	r2, r1
 800ab16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d01a      	beq.n	800ab5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab42:	d10a      	bne.n	800ab5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	605a      	str	r2, [r3, #4]
  }
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af02      	add	r7, sp, #8
 800ab8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ab98:	f7f7 f864 	bl	8001c64 <HAL_GetTick>
 800ab9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0308 	and.w	r3, r3, #8
 800aba8:	2b08      	cmp	r3, #8
 800abaa:	d10e      	bne.n	800abca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abb0:	9300      	str	r3, [sp, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 f82c 	bl	800ac18 <UART_WaitOnFlagUntilTimeout>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d001      	beq.n	800abca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abc6:	2303      	movs	r3, #3
 800abc8:	e022      	b.n	800ac10 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f003 0304 	and.w	r3, r3, #4
 800abd4:	2b04      	cmp	r3, #4
 800abd6:	d10e      	bne.n	800abf6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 f816 	bl	800ac18 <UART_WaitOnFlagUntilTimeout>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d001      	beq.n	800abf6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e00c      	b.n	800ac10 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	60f8      	str	r0, [r7, #12]
 800ac20:	60b9      	str	r1, [r7, #8]
 800ac22:	603b      	str	r3, [r7, #0]
 800ac24:	4613      	mov	r3, r2
 800ac26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac28:	e062      	b.n	800acf0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac30:	d05e      	beq.n	800acf0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac32:	f7f7 f817 	bl	8001c64 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	69ba      	ldr	r2, [r7, #24]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d302      	bcc.n	800ac48 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d11d      	bne.n	800ac84 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ac56:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689a      	ldr	r2, [r3, #8]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0201 	bic.w	r2, r2, #1
 800ac66:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2220      	movs	r2, #32
 800ac74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e045      	b.n	800ad10 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d02e      	beq.n	800acf0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	69db      	ldr	r3, [r3, #28]
 800ac98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aca0:	d126      	bne.n	800acf0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acaa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800acba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	689a      	ldr	r2, [r3, #8]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f022 0201 	bic.w	r2, r2, #1
 800acca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2220      	movs	r2, #32
 800acd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2220      	movs	r2, #32
 800acd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2220      	movs	r2, #32
 800ace0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e00f      	b.n	800ad10 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	69da      	ldr	r2, [r3, #28]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	4013      	ands	r3, r2
 800acfa:	68ba      	ldr	r2, [r7, #8]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	bf0c      	ite	eq
 800ad00:	2301      	moveq	r3, #1
 800ad02:	2300      	movne	r3, #0
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	461a      	mov	r2, r3
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d08d      	beq.n	800ac2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad0e:	2300      	movs	r3, #0
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ad2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	6899      	ldr	r1, [r3, #8]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <UART_EndRxTransfer+0x44>)
 800ad3c:	400b      	ands	r3, r1
 800ad3e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2220      	movs	r2, #32
 800ad44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800ad4e:	bf00      	nop
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr
 800ad5a:	bf00      	nop
 800ad5c:	effffffe 	.word	0xeffffffe

0800ad60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7fe ffaa 	bl	8009cd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad84:	bf00      	nop
 800ad86:	3710      	adds	r7, #16
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ada2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2220      	movs	r2, #32
 800ada8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7fe ff86 	bl	8009cc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800adb8:	bf00      	nop
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b083      	sub	sp, #12
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800adc8:	bf00      	nop
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800addc:	bf00      	nop
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d101      	bne.n	800ae12 <HAL_UARTEx_DisableFifoMode+0x16>
 800ae0e:	2302      	movs	r3, #2
 800ae10:	e027      	b.n	800ae62 <HAL_UARTEx_DisableFifoMode+0x66>
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2224      	movs	r2, #36	; 0x24
 800ae1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	681a      	ldr	r2, [r3, #0]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0201 	bic.w	r2, r2, #1
 800ae38:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ae40:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2220      	movs	r2, #32
 800ae54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3714      	adds	r7, #20
 800ae66:	46bd      	mov	sp, r7
 800ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6c:	4770      	bx	lr

0800ae6e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae6e:	b580      	push	{r7, lr}
 800ae70:	b084      	sub	sp, #16
 800ae72:	af00      	add	r7, sp, #0
 800ae74:	6078      	str	r0, [r7, #4]
 800ae76:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae82:	2302      	movs	r3, #2
 800ae84:	e02d      	b.n	800aee2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2224      	movs	r2, #36	; 0x24
 800ae92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f022 0201 	bic.w	r2, r2, #1
 800aeac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	689b      	ldr	r3, [r3, #8]
 800aeb4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	683a      	ldr	r2, [r7, #0]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 f850 	bl	800af68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3710      	adds	r7, #16
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}

0800aeea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aeea:	b580      	push	{r7, lr}
 800aeec:	b084      	sub	sp, #16
 800aeee:	af00      	add	r7, sp, #0
 800aef0:	6078      	str	r0, [r7, #4]
 800aef2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d101      	bne.n	800af02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aefe:	2302      	movs	r3, #2
 800af00:	e02d      	b.n	800af5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2224      	movs	r2, #36	; 0x24
 800af0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f022 0201 	bic.w	r2, r2, #1
 800af28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	689b      	ldr	r3, [r3, #8]
 800af30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	430a      	orrs	r2, r1
 800af3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f812 	bl	800af68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68fa      	ldr	r2, [r7, #12]
 800af4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2220      	movs	r2, #32
 800af50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af5c:	2300      	movs	r3, #0
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af68:	b480      	push	{r7}
 800af6a:	b089      	sub	sp, #36	; 0x24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800af70:	4a2f      	ldr	r2, [pc, #188]	; (800b030 <UARTEx_SetNbDataToProcess+0xc8>)
 800af72:	f107 0314 	add.w	r3, r7, #20
 800af76:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af7a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800af7e:	4a2d      	ldr	r2, [pc, #180]	; (800b034 <UARTEx_SetNbDataToProcess+0xcc>)
 800af80:	f107 030c 	add.w	r3, r7, #12
 800af84:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af88:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af90:	2b00      	cmp	r3, #0
 800af92:	d108      	bne.n	800afa6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2201      	movs	r2, #1
 800af98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800afa4:	e03d      	b.n	800b022 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800afa6:	2310      	movs	r3, #16
 800afa8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800afaa:	2310      	movs	r3, #16
 800afac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	689b      	ldr	r3, [r3, #8]
 800afb4:	0e5b      	lsrs	r3, r3, #25
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	f003 0307 	and.w	r3, r3, #7
 800afbc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	689b      	ldr	r3, [r3, #8]
 800afc4:	0f5b      	lsrs	r3, r3, #29
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	f003 0307 	and.w	r3, r3, #7
 800afcc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800afce:	7fbb      	ldrb	r3, [r7, #30]
 800afd0:	7f3a      	ldrb	r2, [r7, #28]
 800afd2:	f107 0120 	add.w	r1, r7, #32
 800afd6:	440a      	add	r2, r1
 800afd8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800afdc:	fb02 f303 	mul.w	r3, r2, r3
 800afe0:	7f3a      	ldrb	r2, [r7, #28]
 800afe2:	f107 0120 	add.w	r1, r7, #32
 800afe6:	440a      	add	r2, r1
 800afe8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800afec:	fb93 f3f2 	sdiv	r3, r3, r2
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800aff8:	7ffb      	ldrb	r3, [r7, #31]
 800affa:	7f7a      	ldrb	r2, [r7, #29]
 800affc:	f107 0120 	add.w	r1, r7, #32
 800b000:	440a      	add	r2, r1
 800b002:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b006:	fb02 f303 	mul.w	r3, r2, r3
 800b00a:	7f7a      	ldrb	r2, [r7, #29]
 800b00c:	f107 0120 	add.w	r1, r7, #32
 800b010:	440a      	add	r2, r1
 800b012:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b016:	fb93 f3f2 	sdiv	r3, r3, r2
 800b01a:	b29a      	uxth	r2, r3
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b022:	bf00      	nop
 800b024:	3724      	adds	r7, #36	; 0x24
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	0801dab8 	.word	0x0801dab8
 800b034:	0801dac0 	.word	0x0801dac0

0800b038 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b038:	b5b0      	push	{r4, r5, r7, lr}
 800b03a:	b08c      	sub	sp, #48	; 0x30
 800b03c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 800b03e:	4b96      	ldr	r3, [pc, #600]	; (800b298 <MX_LWIP_Init+0x260>)
 800b040:	22a9      	movs	r2, #169	; 0xa9
 800b042:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 800b044:	4b94      	ldr	r3, [pc, #592]	; (800b298 <MX_LWIP_Init+0x260>)
 800b046:	22fe      	movs	r2, #254	; 0xfe
 800b048:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 24;
 800b04a:	4b93      	ldr	r3, [pc, #588]	; (800b298 <MX_LWIP_Init+0x260>)
 800b04c:	2218      	movs	r2, #24
 800b04e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 157;
 800b050:	4b91      	ldr	r3, [pc, #580]	; (800b298 <MX_LWIP_Init+0x260>)
 800b052:	229d      	movs	r2, #157	; 0x9d
 800b054:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b056:	4b91      	ldr	r3, [pc, #580]	; (800b29c <MX_LWIP_Init+0x264>)
 800b058:	22ff      	movs	r2, #255	; 0xff
 800b05a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b05c:	4b8f      	ldr	r3, [pc, #572]	; (800b29c <MX_LWIP_Init+0x264>)
 800b05e:	22ff      	movs	r2, #255	; 0xff
 800b060:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b062:	4b8e      	ldr	r3, [pc, #568]	; (800b29c <MX_LWIP_Init+0x264>)
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b068:	4b8c      	ldr	r3, [pc, #560]	; (800b29c <MX_LWIP_Init+0x264>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 800b06e:	4b8c      	ldr	r3, [pc, #560]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b070:	22a9      	movs	r2, #169	; 0xa9
 800b072:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 800b074:	4b8a      	ldr	r3, [pc, #552]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b076:	22fe      	movs	r2, #254	; 0xfe
 800b078:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 24;
 800b07a:	4b89      	ldr	r3, [pc, #548]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b07c:	2218      	movs	r2, #24
 800b07e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 255;
 800b080:	4b87      	ldr	r3, [pc, #540]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b082:	22ff      	movs	r2, #255	; 0xff
 800b084:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b086:	2100      	movs	r1, #0
 800b088:	2000      	movs	r0, #0
 800b08a:	f006 f9a9 	bl	80113e0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b08e:	4b82      	ldr	r3, [pc, #520]	; (800b298 <MX_LWIP_Init+0x260>)
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	061a      	lsls	r2, r3, #24
 800b094:	4b80      	ldr	r3, [pc, #512]	; (800b298 <MX_LWIP_Init+0x260>)
 800b096:	785b      	ldrb	r3, [r3, #1]
 800b098:	041b      	lsls	r3, r3, #16
 800b09a:	431a      	orrs	r2, r3
 800b09c:	4b7e      	ldr	r3, [pc, #504]	; (800b298 <MX_LWIP_Init+0x260>)
 800b09e:	789b      	ldrb	r3, [r3, #2]
 800b0a0:	021b      	lsls	r3, r3, #8
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	4a7c      	ldr	r2, [pc, #496]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0a6:	78d2      	ldrb	r2, [r2, #3]
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	061a      	lsls	r2, r3, #24
 800b0ac:	4b7a      	ldr	r3, [pc, #488]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	0619      	lsls	r1, r3, #24
 800b0b2:	4b79      	ldr	r3, [pc, #484]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0b4:	785b      	ldrb	r3, [r3, #1]
 800b0b6:	041b      	lsls	r3, r3, #16
 800b0b8:	4319      	orrs	r1, r3
 800b0ba:	4b77      	ldr	r3, [pc, #476]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0bc:	789b      	ldrb	r3, [r3, #2]
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	430b      	orrs	r3, r1
 800b0c2:	4975      	ldr	r1, [pc, #468]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0c4:	78c9      	ldrb	r1, [r1, #3]
 800b0c6:	430b      	orrs	r3, r1
 800b0c8:	021b      	lsls	r3, r3, #8
 800b0ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b0ce:	431a      	orrs	r2, r3
 800b0d0:	4b71      	ldr	r3, [pc, #452]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	0619      	lsls	r1, r3, #24
 800b0d6:	4b70      	ldr	r3, [pc, #448]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	4319      	orrs	r1, r3
 800b0de:	4b6e      	ldr	r3, [pc, #440]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0e0:	789b      	ldrb	r3, [r3, #2]
 800b0e2:	021b      	lsls	r3, r3, #8
 800b0e4:	430b      	orrs	r3, r1
 800b0e6:	496c      	ldr	r1, [pc, #432]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0e8:	78c9      	ldrb	r1, [r1, #3]
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	0a1b      	lsrs	r3, r3, #8
 800b0ee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	4b68      	ldr	r3, [pc, #416]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	0619      	lsls	r1, r3, #24
 800b0fa:	4b67      	ldr	r3, [pc, #412]	; (800b298 <MX_LWIP_Init+0x260>)
 800b0fc:	785b      	ldrb	r3, [r3, #1]
 800b0fe:	041b      	lsls	r3, r3, #16
 800b100:	4319      	orrs	r1, r3
 800b102:	4b65      	ldr	r3, [pc, #404]	; (800b298 <MX_LWIP_Init+0x260>)
 800b104:	789b      	ldrb	r3, [r3, #2]
 800b106:	021b      	lsls	r3, r3, #8
 800b108:	430b      	orrs	r3, r1
 800b10a:	4963      	ldr	r1, [pc, #396]	; (800b298 <MX_LWIP_Init+0x260>)
 800b10c:	78c9      	ldrb	r1, [r1, #3]
 800b10e:	430b      	orrs	r3, r1
 800b110:	0e1b      	lsrs	r3, r3, #24
 800b112:	4313      	orrs	r3, r2
 800b114:	4a63      	ldr	r2, [pc, #396]	; (800b2a4 <MX_LWIP_Init+0x26c>)
 800b116:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b118:	4b60      	ldr	r3, [pc, #384]	; (800b29c <MX_LWIP_Init+0x264>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	061a      	lsls	r2, r3, #24
 800b11e:	4b5f      	ldr	r3, [pc, #380]	; (800b29c <MX_LWIP_Init+0x264>)
 800b120:	785b      	ldrb	r3, [r3, #1]
 800b122:	041b      	lsls	r3, r3, #16
 800b124:	431a      	orrs	r2, r3
 800b126:	4b5d      	ldr	r3, [pc, #372]	; (800b29c <MX_LWIP_Init+0x264>)
 800b128:	789b      	ldrb	r3, [r3, #2]
 800b12a:	021b      	lsls	r3, r3, #8
 800b12c:	4313      	orrs	r3, r2
 800b12e:	4a5b      	ldr	r2, [pc, #364]	; (800b29c <MX_LWIP_Init+0x264>)
 800b130:	78d2      	ldrb	r2, [r2, #3]
 800b132:	4313      	orrs	r3, r2
 800b134:	061a      	lsls	r2, r3, #24
 800b136:	4b59      	ldr	r3, [pc, #356]	; (800b29c <MX_LWIP_Init+0x264>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	0619      	lsls	r1, r3, #24
 800b13c:	4b57      	ldr	r3, [pc, #348]	; (800b29c <MX_LWIP_Init+0x264>)
 800b13e:	785b      	ldrb	r3, [r3, #1]
 800b140:	041b      	lsls	r3, r3, #16
 800b142:	4319      	orrs	r1, r3
 800b144:	4b55      	ldr	r3, [pc, #340]	; (800b29c <MX_LWIP_Init+0x264>)
 800b146:	789b      	ldrb	r3, [r3, #2]
 800b148:	021b      	lsls	r3, r3, #8
 800b14a:	430b      	orrs	r3, r1
 800b14c:	4953      	ldr	r1, [pc, #332]	; (800b29c <MX_LWIP_Init+0x264>)
 800b14e:	78c9      	ldrb	r1, [r1, #3]
 800b150:	430b      	orrs	r3, r1
 800b152:	021b      	lsls	r3, r3, #8
 800b154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b158:	431a      	orrs	r2, r3
 800b15a:	4b50      	ldr	r3, [pc, #320]	; (800b29c <MX_LWIP_Init+0x264>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	0619      	lsls	r1, r3, #24
 800b160:	4b4e      	ldr	r3, [pc, #312]	; (800b29c <MX_LWIP_Init+0x264>)
 800b162:	785b      	ldrb	r3, [r3, #1]
 800b164:	041b      	lsls	r3, r3, #16
 800b166:	4319      	orrs	r1, r3
 800b168:	4b4c      	ldr	r3, [pc, #304]	; (800b29c <MX_LWIP_Init+0x264>)
 800b16a:	789b      	ldrb	r3, [r3, #2]
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	430b      	orrs	r3, r1
 800b170:	494a      	ldr	r1, [pc, #296]	; (800b29c <MX_LWIP_Init+0x264>)
 800b172:	78c9      	ldrb	r1, [r1, #3]
 800b174:	430b      	orrs	r3, r1
 800b176:	0a1b      	lsrs	r3, r3, #8
 800b178:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b17c:	431a      	orrs	r2, r3
 800b17e:	4b47      	ldr	r3, [pc, #284]	; (800b29c <MX_LWIP_Init+0x264>)
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	0619      	lsls	r1, r3, #24
 800b184:	4b45      	ldr	r3, [pc, #276]	; (800b29c <MX_LWIP_Init+0x264>)
 800b186:	785b      	ldrb	r3, [r3, #1]
 800b188:	041b      	lsls	r3, r3, #16
 800b18a:	4319      	orrs	r1, r3
 800b18c:	4b43      	ldr	r3, [pc, #268]	; (800b29c <MX_LWIP_Init+0x264>)
 800b18e:	789b      	ldrb	r3, [r3, #2]
 800b190:	021b      	lsls	r3, r3, #8
 800b192:	430b      	orrs	r3, r1
 800b194:	4941      	ldr	r1, [pc, #260]	; (800b29c <MX_LWIP_Init+0x264>)
 800b196:	78c9      	ldrb	r1, [r1, #3]
 800b198:	430b      	orrs	r3, r1
 800b19a:	0e1b      	lsrs	r3, r3, #24
 800b19c:	4313      	orrs	r3, r2
 800b19e:	4a42      	ldr	r2, [pc, #264]	; (800b2a8 <MX_LWIP_Init+0x270>)
 800b1a0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b1a2:	4b3f      	ldr	r3, [pc, #252]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	061a      	lsls	r2, r3, #24
 800b1a8:	4b3d      	ldr	r3, [pc, #244]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1aa:	785b      	ldrb	r3, [r3, #1]
 800b1ac:	041b      	lsls	r3, r3, #16
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	4b3b      	ldr	r3, [pc, #236]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1b2:	789b      	ldrb	r3, [r3, #2]
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	4a39      	ldr	r2, [pc, #228]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1ba:	78d2      	ldrb	r2, [r2, #3]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	061a      	lsls	r2, r3, #24
 800b1c0:	4b37      	ldr	r3, [pc, #220]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	0619      	lsls	r1, r3, #24
 800b1c6:	4b36      	ldr	r3, [pc, #216]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	041b      	lsls	r3, r3, #16
 800b1cc:	4319      	orrs	r1, r3
 800b1ce:	4b34      	ldr	r3, [pc, #208]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1d0:	789b      	ldrb	r3, [r3, #2]
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	430b      	orrs	r3, r1
 800b1d6:	4932      	ldr	r1, [pc, #200]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1d8:	78c9      	ldrb	r1, [r1, #3]
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b1e2:	431a      	orrs	r2, r3
 800b1e4:	4b2e      	ldr	r3, [pc, #184]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1e6:	781b      	ldrb	r3, [r3, #0]
 800b1e8:	0619      	lsls	r1, r3, #24
 800b1ea:	4b2d      	ldr	r3, [pc, #180]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1ec:	785b      	ldrb	r3, [r3, #1]
 800b1ee:	041b      	lsls	r3, r3, #16
 800b1f0:	4319      	orrs	r1, r3
 800b1f2:	4b2b      	ldr	r3, [pc, #172]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1f4:	789b      	ldrb	r3, [r3, #2]
 800b1f6:	021b      	lsls	r3, r3, #8
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	4929      	ldr	r1, [pc, #164]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b1fc:	78c9      	ldrb	r1, [r1, #3]
 800b1fe:	430b      	orrs	r3, r1
 800b200:	0a1b      	lsrs	r3, r3, #8
 800b202:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b206:	431a      	orrs	r2, r3
 800b208:	4b25      	ldr	r3, [pc, #148]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	0619      	lsls	r1, r3, #24
 800b20e:	4b24      	ldr	r3, [pc, #144]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b210:	785b      	ldrb	r3, [r3, #1]
 800b212:	041b      	lsls	r3, r3, #16
 800b214:	4319      	orrs	r1, r3
 800b216:	4b22      	ldr	r3, [pc, #136]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b218:	789b      	ldrb	r3, [r3, #2]
 800b21a:	021b      	lsls	r3, r3, #8
 800b21c:	430b      	orrs	r3, r1
 800b21e:	4920      	ldr	r1, [pc, #128]	; (800b2a0 <MX_LWIP_Init+0x268>)
 800b220:	78c9      	ldrb	r1, [r1, #3]
 800b222:	430b      	orrs	r3, r1
 800b224:	0e1b      	lsrs	r3, r3, #24
 800b226:	4313      	orrs	r3, r2
 800b228:	4a20      	ldr	r2, [pc, #128]	; (800b2ac <MX_LWIP_Init+0x274>)
 800b22a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b22c:	4b20      	ldr	r3, [pc, #128]	; (800b2b0 <MX_LWIP_Init+0x278>)
 800b22e:	9302      	str	r3, [sp, #8]
 800b230:	4b20      	ldr	r3, [pc, #128]	; (800b2b4 <MX_LWIP_Init+0x27c>)
 800b232:	9301      	str	r3, [sp, #4]
 800b234:	2300      	movs	r3, #0
 800b236:	9300      	str	r3, [sp, #0]
 800b238:	4b1c      	ldr	r3, [pc, #112]	; (800b2ac <MX_LWIP_Init+0x274>)
 800b23a:	4a1b      	ldr	r2, [pc, #108]	; (800b2a8 <MX_LWIP_Init+0x270>)
 800b23c:	4919      	ldr	r1, [pc, #100]	; (800b2a4 <MX_LWIP_Init+0x26c>)
 800b23e:	481e      	ldr	r0, [pc, #120]	; (800b2b8 <MX_LWIP_Init+0x280>)
 800b240:	f007 f80c 	bl	801225c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b244:	481c      	ldr	r0, [pc, #112]	; (800b2b8 <MX_LWIP_Init+0x280>)
 800b246:	f007 f9bb 	bl	80125c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b24a:	4b1b      	ldr	r3, [pc, #108]	; (800b2b8 <MX_LWIP_Init+0x280>)
 800b24c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b250:	089b      	lsrs	r3, r3, #2
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d003      	beq.n	800b264 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b25c:	4816      	ldr	r0, [pc, #88]	; (800b2b8 <MX_LWIP_Init+0x280>)
 800b25e:	f007 f9bf 	bl	80125e0 <netif_set_up>
 800b262:	e002      	b.n	800b26a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b264:	4814      	ldr	r0, [pc, #80]	; (800b2b8 <MX_LWIP_Init+0x280>)
 800b266:	f007 fa27 	bl	80126b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b26a:	4914      	ldr	r1, [pc, #80]	; (800b2bc <MX_LWIP_Init+0x284>)
 800b26c:	4812      	ldr	r0, [pc, #72]	; (800b2b8 <MX_LWIP_Init+0x280>)
 800b26e:	f007 fab9 	bl	80127e4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <MX_LWIP_Init+0x288>)
 800b274:	1d3c      	adds	r4, r7, #4
 800b276:	461d      	mov	r5, r3
 800b278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b27a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b27c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800b284:	1d3b      	adds	r3, r7, #4
 800b286:	490c      	ldr	r1, [pc, #48]	; (800b2b8 <MX_LWIP_Init+0x280>)
 800b288:	4618      	mov	r0, r3
 800b28a:	f000 fce0 	bl	800bc4e <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b28e:	bf00      	nop
 800b290:	3720      	adds	r7, #32
 800b292:	46bd      	mov	sp, r7
 800b294:	bdb0      	pop	{r4, r5, r7, pc}
 800b296:	bf00      	nop
 800b298:	20008b14 	.word	0x20008b14
 800b29c:	20008b10 	.word	0x20008b10
 800b2a0:	20008ad4 	.word	0x20008ad4
 800b2a4:	20008b0c 	.word	0x20008b0c
 800b2a8:	20008b18 	.word	0x20008b18
 800b2ac:	20008b1c 	.word	0x20008b1c
 800b2b0:	080112f1 	.word	0x080112f1
 800b2b4:	0800b999 	.word	0x0800b999
 800b2b8:	20008ad8 	.word	0x20008ad8
 800b2bc:	0800b2c5 	.word	0x0800b2c5
 800b2c0:	0801dad0 	.word	0x0801dad0

0800b2c4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b2cc:	bf00      	nop
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b087      	sub	sp, #28
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800b2ea:	2320      	movs	r3, #32
 800b2ec:	60fb      	str	r3, [r7, #12]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800b2ee:	f3bf 8f4f 	dsb	sy

    __DSB();

    while (op_size > 0) {
 800b2f2:	e00b      	b.n	800b30c <SCB_InvalidateDCache_by_Addr+0x34>
      SCB->DCIMVAC = op_addr;
 800b2f4:	4a0c      	ldr	r2, [pc, #48]	; (800b328 <SCB_InvalidateDCache_by_Addr+0x50>)
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	4413      	add	r3, r2
 800b302:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	dcf0      	bgt.n	800b2f4 <SCB_InvalidateDCache_by_Addr+0x1c>
 800b312:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800b316:	f3bf 8f6f 	isb	sy
    }

    __DSB();
    __ISB();
  #endif
}
 800b31a:	bf00      	nop
 800b31c:	371c      	adds	r7, #28
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr
 800b326:	bf00      	nop
 800b328:	e000ed00 	.word	0xe000ed00

0800b32c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08e      	sub	sp, #56	; 0x38
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
 800b33c:	605a      	str	r2, [r3, #4]
 800b33e:	609a      	str	r2, [r3, #8]
 800b340:	60da      	str	r2, [r3, #12]
 800b342:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a5d      	ldr	r2, [pc, #372]	; (800b4c0 <HAL_ETH_MspInit+0x194>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	f040 80b3 	bne.w	800b4b6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b350:	4b5c      	ldr	r3, [pc, #368]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b352:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b356:	4a5b      	ldr	r2, [pc, #364]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b358:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b35c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b360:	4b58      	ldr	r3, [pc, #352]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b362:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b36a:	623b      	str	r3, [r7, #32]
 800b36c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b36e:	4b55      	ldr	r3, [pc, #340]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b370:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b374:	4a53      	ldr	r2, [pc, #332]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b376:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b37a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b37e:	4b51      	ldr	r3, [pc, #324]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b380:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b388:	61fb      	str	r3, [r7, #28]
 800b38a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b38c:	4b4d      	ldr	r3, [pc, #308]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b38e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b392:	4a4c      	ldr	r2, [pc, #304]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b398:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b39c:	4b49      	ldr	r3, [pc, #292]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b39e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b3a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3a6:	61bb      	str	r3, [r7, #24]
 800b3a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3aa:	4b46      	ldr	r3, [pc, #280]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3b0:	4a44      	ldr	r2, [pc, #272]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3b2:	f043 0304 	orr.w	r3, r3, #4
 800b3b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3ba:	4b42      	ldr	r3, [pc, #264]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	617b      	str	r3, [r7, #20]
 800b3c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b3c8:	4b3e      	ldr	r3, [pc, #248]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3ce:	4a3d      	ldr	r2, [pc, #244]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3d0:	f043 0301 	orr.w	r3, r3, #1
 800b3d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3d8:	4b3a      	ldr	r3, [pc, #232]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3de:	f003 0301 	and.w	r3, r3, #1
 800b3e2:	613b      	str	r3, [r7, #16]
 800b3e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b3e6:	4b37      	ldr	r3, [pc, #220]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3ec:	4a35      	ldr	r2, [pc, #212]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3ee:	f043 0302 	orr.w	r3, r3, #2
 800b3f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b3f6:	4b33      	ldr	r3, [pc, #204]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b3f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b3fc:	f003 0302 	and.w	r3, r3, #2
 800b400:	60fb      	str	r3, [r7, #12]
 800b402:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b404:	4b2f      	ldr	r3, [pc, #188]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b40a:	4a2e      	ldr	r2, [pc, #184]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b414:	4b2b      	ldr	r3, [pc, #172]	; (800b4c4 <HAL_ETH_MspInit+0x198>)
 800b416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b41a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b41e:	60bb      	str	r3, [r7, #8]
 800b420:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b422:	2332      	movs	r3, #50	; 0x32
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b426:	2302      	movs	r3, #2
 800b428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b42e:	2303      	movs	r3, #3
 800b430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b432:	230b      	movs	r3, #11
 800b434:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b43a:	4619      	mov	r1, r3
 800b43c:	4822      	ldr	r0, [pc, #136]	; (800b4c8 <HAL_ETH_MspInit+0x19c>)
 800b43e:	f7fa fa93 	bl	8005968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b442:	2386      	movs	r3, #134	; 0x86
 800b444:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b446:	2302      	movs	r3, #2
 800b448:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b44e:	2303      	movs	r3, #3
 800b450:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b452:	230b      	movs	r3, #11
 800b454:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b45a:	4619      	mov	r1, r3
 800b45c:	481b      	ldr	r0, [pc, #108]	; (800b4cc <HAL_ETH_MspInit+0x1a0>)
 800b45e:	f7fa fa83 	bl	8005968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b468:	2302      	movs	r3, #2
 800b46a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b46c:	2300      	movs	r3, #0
 800b46e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b470:	2303      	movs	r3, #3
 800b472:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b474:	230b      	movs	r3, #11
 800b476:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b47c:	4619      	mov	r1, r3
 800b47e:	4814      	ldr	r0, [pc, #80]	; (800b4d0 <HAL_ETH_MspInit+0x1a4>)
 800b480:	f7fa fa72 	bl	8005968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b484:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b48a:	2302      	movs	r3, #2
 800b48c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b48e:	2300      	movs	r3, #0
 800b490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b492:	2303      	movs	r3, #3
 800b494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b496:	230b      	movs	r3, #11
 800b498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b49a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b49e:	4619      	mov	r1, r3
 800b4a0:	480c      	ldr	r0, [pc, #48]	; (800b4d4 <HAL_ETH_MspInit+0x1a8>)
 800b4a2:	f7fa fa61 	bl	8005968 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	2105      	movs	r1, #5
 800b4aa:	203d      	movs	r0, #61	; 0x3d
 800b4ac:	f7f6 fcb2 	bl	8001e14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b4b0:	203d      	movs	r0, #61	; 0x3d
 800b4b2:	f7f6 fcc9 	bl	8001e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b4b6:	bf00      	nop
 800b4b8:	3738      	adds	r7, #56	; 0x38
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	40028000 	.word	0x40028000
 800b4c4:	58024400 	.word	0x58024400
 800b4c8:	58020800 	.word	0x58020800
 800b4cc:	58020000 	.word	0x58020000
 800b4d0:	58020400 	.word	0x58020400
 800b4d4:	58021800 	.word	0x58021800

0800b4d8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b4e0:	4b04      	ldr	r3, [pc, #16]	; (800b4f4 <HAL_ETH_RxCpltCallback+0x1c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fd31 	bl	800bf4c <osSemaphoreRelease>
}
 800b4ea:	bf00      	nop
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	20000570 	.word	0x20000570

0800b4f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b4f8:	b5b0      	push	{r4, r5, r7, lr}
 800b4fa:	b0ac      	sub	sp, #176	; 0xb0
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b500:	2300      	movs	r3, #0
 800b502:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b512:	4b91      	ldr	r3, [pc, #580]	; (800b758 <low_level_init+0x260>)
 800b514:	4a91      	ldr	r2, [pc, #580]	; (800b75c <low_level_init+0x264>)
 800b516:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800b51e:	2380      	movs	r3, #128	; 0x80
 800b520:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800b524:	23e1      	movs	r3, #225	; 0xe1
 800b526:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800b52a:	2300      	movs	r3, #0
 800b52c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800b530:	2300      	movs	r3, #0
 800b532:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800b536:	2300      	movs	r3, #0
 800b538:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800b53c:	4a86      	ldr	r2, [pc, #536]	; (800b758 <low_level_init+0x260>)
 800b53e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b542:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b544:	4b84      	ldr	r3, [pc, #528]	; (800b758 <low_level_init+0x260>)
 800b546:	2201      	movs	r2, #1
 800b548:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b54a:	4b83      	ldr	r3, [pc, #524]	; (800b758 <low_level_init+0x260>)
 800b54c:	4a84      	ldr	r2, [pc, #528]	; (800b760 <low_level_init+0x268>)
 800b54e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b550:	4b81      	ldr	r3, [pc, #516]	; (800b758 <low_level_init+0x260>)
 800b552:	4a84      	ldr	r2, [pc, #528]	; (800b764 <low_level_init+0x26c>)
 800b554:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800b556:	4b80      	ldr	r3, [pc, #512]	; (800b758 <low_level_init+0x260>)
 800b558:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b55c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b55e:	487e      	ldr	r0, [pc, #504]	; (800b758 <low_level_init+0x260>)
 800b560:	f7f8 fb84 	bl	8003c6c <HAL_ETH_Init>
 800b564:	4603      	mov	r3, r0
 800b566:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b56a:	2234      	movs	r2, #52	; 0x34
 800b56c:	2100      	movs	r1, #0
 800b56e:	487e      	ldr	r0, [pc, #504]	; (800b768 <low_level_init+0x270>)
 800b570:	f011 fb22 	bl	801cbb8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b574:	4b7c      	ldr	r3, [pc, #496]	; (800b768 <low_level_init+0x270>)
 800b576:	2221      	movs	r2, #33	; 0x21
 800b578:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b57a:	4b7b      	ldr	r3, [pc, #492]	; (800b768 <low_level_init+0x270>)
 800b57c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b580:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b582:	4b79      	ldr	r3, [pc, #484]	; (800b768 <low_level_init+0x270>)
 800b584:	2200      	movs	r2, #0
 800b586:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b588:	4878      	ldr	r0, [pc, #480]	; (800b76c <low_level_init+0x274>)
 800b58a:	f006 fd21 	bl	8011fd0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2206      	movs	r2, #6
 800b592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b596:	4b70      	ldr	r3, [pc, #448]	; (800b758 <low_level_init+0x260>)
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	781a      	ldrb	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b5a2:	4b6d      	ldr	r3, [pc, #436]	; (800b758 <low_level_init+0x260>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	785a      	ldrb	r2, [r3, #1]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b5ae:	4b6a      	ldr	r3, [pc, #424]	; (800b758 <low_level_init+0x260>)
 800b5b0:	685b      	ldr	r3, [r3, #4]
 800b5b2:	789a      	ldrb	r2, [r3, #2]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b5ba:	4b67      	ldr	r3, [pc, #412]	; (800b758 <low_level_init+0x260>)
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	78da      	ldrb	r2, [r3, #3]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b5c6:	4b64      	ldr	r3, [pc, #400]	; (800b758 <low_level_init+0x260>)
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	791a      	ldrb	r2, [r3, #4]
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b5d2:	4b61      	ldr	r3, [pc, #388]	; (800b758 <low_level_init+0x260>)
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	795a      	ldrb	r2, [r3, #5]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b5e4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5ec:	f043 030a 	orr.w	r3, r3, #10
 800b5f0:	b2da      	uxtb	r2, r3
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b5fe:	e012      	b.n	800b626 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800b600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b604:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b608:	fb02 f303 	mul.w	r3, r2, r3
 800b60c:	4a58      	ldr	r2, [pc, #352]	; (800b770 <low_level_init+0x278>)
 800b60e:	441a      	add	r2, r3
 800b610:	2300      	movs	r3, #0
 800b612:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b616:	4850      	ldr	r0, [pc, #320]	; (800b758 <low_level_init+0x260>)
 800b618:	f7f8 fc02 	bl	8003e20 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b61c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b620:	3301      	adds	r3, #1
 800b622:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b626:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	d9e8      	bls.n	800b600 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800b62e:	2300      	movs	r3, #0
 800b630:	62bb      	str	r3, [r7, #40]	; 0x28
 800b632:	2300      	movs	r3, #0
 800b634:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800b636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b63a:	2101      	movs	r1, #1
 800b63c:	4618      	mov	r0, r3
 800b63e:	f000 fc03 	bl	800be48 <osSemaphoreCreate>
 800b642:	4602      	mov	r2, r0
 800b644:	4b4b      	ldr	r3, [pc, #300]	; (800b774 <low_level_init+0x27c>)
 800b646:	601a      	str	r2, [r3, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b648:	4b4b      	ldr	r3, [pc, #300]	; (800b778 <low_level_init+0x280>)
 800b64a:	f107 040c 	add.w	r4, r7, #12
 800b64e:	461d      	mov	r5, r3
 800b650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b65c:	f107 030c 	add.w	r3, r7, #12
 800b660:	6879      	ldr	r1, [r7, #4]
 800b662:	4618      	mov	r0, r3
 800b664:	f000 faf3 	bl	800bc4e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b668:	4944      	ldr	r1, [pc, #272]	; (800b77c <low_level_init+0x284>)
 800b66a:	4845      	ldr	r0, [pc, #276]	; (800b780 <low_level_init+0x288>)
 800b66c:	f7f6 f949 	bl	8001902 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b670:	4843      	ldr	r0, [pc, #268]	; (800b780 <low_level_init+0x288>)
 800b672:	f7f6 f978 	bl	8001966 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b676:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d165      	bne.n	800b74a <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b67e:	4840      	ldr	r0, [pc, #256]	; (800b780 <low_level_init+0x288>)
 800b680:	f7f6 fa19 	bl	8001ab6 <LAN8742_GetLinkState>
 800b684:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	dc06      	bgt.n	800b69e <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f007 f877 	bl	8012784 <netif_set_link_down>
      netif_set_down(netif);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f007 f80e 	bl	80126b8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b69c:	e057      	b.n	800b74e <low_level_init+0x256>
      switch (PHYLinkState)
 800b69e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b6a2:	3b02      	subs	r3, #2
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	d82b      	bhi.n	800b700 <low_level_init+0x208>
 800b6a8:	a201      	add	r2, pc, #4	; (adr r2, 800b6b0 <low_level_init+0x1b8>)
 800b6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ae:	bf00      	nop
 800b6b0:	0800b6c1 	.word	0x0800b6c1
 800b6b4:	0800b6d3 	.word	0x0800b6d3
 800b6b8:	0800b6e3 	.word	0x0800b6e3
 800b6bc:	0800b6f3 	.word	0x0800b6f3
        duplex = ETH_FULLDUPLEX_MODE;
 800b6c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b6c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b6d0:	e01f      	b.n	800b712 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b6d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b6dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b6e0:	e017      	b.n	800b712 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b6e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b6e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b6f0:	e00f      	b.n	800b712 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b6fe:	e008      	b.n	800b712 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b704:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b70c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b710:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b716:	4619      	mov	r1, r3
 800b718:	480f      	ldr	r0, [pc, #60]	; (800b758 <low_level_init+0x260>)
 800b71a:	f7f9 f94f 	bl	80049bc <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b71e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b722:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800b724:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b728:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b72a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b72e:	4619      	mov	r1, r3
 800b730:	4809      	ldr	r0, [pc, #36]	; (800b758 <low_level_init+0x260>)
 800b732:	f7f9 fb17 	bl	8004d64 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b736:	4808      	ldr	r0, [pc, #32]	; (800b758 <low_level_init+0x260>)
 800b738:	f7f8 fbb3 	bl	8003ea2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f006 ff4f 	bl	80125e0 <netif_set_up>
    netif_set_link_up(netif);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f006 ffea 	bl	801271c <netif_set_link_up>
}
 800b748:	e001      	b.n	800b74e <low_level_init+0x256>
    Error_Handler();
 800b74a:	f7f5 fd09 	bl	8001160 <Error_Handler>
}
 800b74e:	bf00      	nop
 800b750:	37b0      	adds	r7, #176	; 0xb0
 800b752:	46bd      	mov	sp, r7
 800b754:	bdb0      	pop	{r4, r5, r7, pc}
 800b756:	bf00      	nop
 800b758:	20008c0c 	.word	0x20008c0c
 800b75c:	40028000 	.word	0x40028000
 800b760:	30000060 	.word	0x30000060
 800b764:	30000000 	.word	0x30000000
 800b768:	20008c7c 	.word	0x20008c7c
 800b76c:	0802106c 	.word	0x0802106c
 800b770:	30000200 	.word	0x30000200
 800b774:	20000570 	.word	0x20000570
 800b778:	0801daf4 	.word	0x0801daf4
 800b77c:	20000010 	.word	0x20000010
 800b780:	20008bec 	.word	0x20008bec

0800b784 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b092      	sub	sp, #72	; 0x48
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800b78e:	2300      	movs	r3, #0
 800b790:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800b792:	2300      	movs	r3, #0
 800b794:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b798:	f107 030c 	add.w	r3, r7, #12
 800b79c:	2230      	movs	r2, #48	; 0x30
 800b79e:	2100      	movs	r1, #0
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f011 fa09 	bl	801cbb8 <memset>

  for(q = p; q != NULL; q = q->next)
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	643b      	str	r3, [r7, #64]	; 0x40
 800b7aa:	e049      	b.n	800b840 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b7ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ae:	2b03      	cmp	r3, #3
 800b7b0:	d902      	bls.n	800b7b8 <low_level_output+0x34>
      return ERR_IF;
 800b7b2:	f06f 030b 	mvn.w	r3, #11
 800b7b6:	e056      	b.n	800b866 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800b7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ba:	6859      	ldr	r1, [r3, #4]
 800b7bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7be:	4613      	mov	r3, r2
 800b7c0:	005b      	lsls	r3, r3, #1
 800b7c2:	4413      	add	r3, r2
 800b7c4:	009b      	lsls	r3, r3, #2
 800b7c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b7ca:	4413      	add	r3, r2
 800b7cc:	3b3c      	subs	r3, #60	; 0x3c
 800b7ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b7d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7d2:	895b      	ldrh	r3, [r3, #10]
 800b7d4:	4619      	mov	r1, r3
 800b7d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7d8:	4613      	mov	r3, r2
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	4413      	add	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3b38      	subs	r3, #56	; 0x38
 800b7e8:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b7ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d012      	beq.n	800b816 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b7f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7f2:	1e5a      	subs	r2, r3, #1
 800b7f4:	f107 000c 	add.w	r0, r7, #12
 800b7f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	440b      	add	r3, r1
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	18c1      	adds	r1, r0, r3
 800b804:	4613      	mov	r3, r2
 800b806:	005b      	lsls	r3, r3, #1
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b810:	4413      	add	r3, r2
 800b812:	3b34      	subs	r3, #52	; 0x34
 800b814:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10a      	bne.n	800b834 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800b81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b820:	4613      	mov	r3, r2
 800b822:	005b      	lsls	r3, r3, #1
 800b824:	4413      	add	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b82c:	4413      	add	r3, r2
 800b82e:	3b34      	subs	r3, #52	; 0x34
 800b830:	2200      	movs	r2, #0
 800b832:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b834:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b836:	3301      	adds	r3, #1
 800b838:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b83a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	643b      	str	r3, [r7, #64]	; 0x40
 800b840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b842:	2b00      	cmp	r3, #0
 800b844:	d1b2      	bne.n	800b7ac <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	891b      	ldrh	r3, [r3, #8]
 800b84a:	461a      	mov	r2, r3
 800b84c:	4b08      	ldr	r3, [pc, #32]	; (800b870 <low_level_output+0xec>)
 800b84e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b850:	4a07      	ldr	r2, [pc, #28]	; (800b870 <low_level_output+0xec>)
 800b852:	f107 030c 	add.w	r3, r7, #12
 800b856:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b858:	2214      	movs	r2, #20
 800b85a:	4905      	ldr	r1, [pc, #20]	; (800b870 <low_level_output+0xec>)
 800b85c:	4805      	ldr	r0, [pc, #20]	; (800b874 <low_level_output+0xf0>)
 800b85e:	f7f8 fc1f 	bl	80040a0 <HAL_ETH_Transmit>

  return errval;
 800b862:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b866:	4618      	mov	r0, r3
 800b868:	3748      	adds	r7, #72	; 0x48
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	20008c7c 	.word	0x20008c7c
 800b874:	20008c0c 	.word	0x20008c0c

0800b878 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b094      	sub	sp, #80	; 0x50
 800b87c:	af02      	add	r7, sp, #8
 800b87e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	647b      	str	r3, [r7, #68]	; 0x44
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	60bb      	str	r3, [r7, #8]
 800b888:	2300      	movs	r3, #0
 800b88a:	643b      	str	r3, [r7, #64]	; 0x40
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b88c:	f107 030c 	add.w	r3, r7, #12
 800b890:	2230      	movs	r2, #48	; 0x30
 800b892:	2100      	movs	r1, #0
 800b894:	4618      	mov	r0, r3
 800b896:	f011 f98f 	bl	801cbb8 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b89a:	2300      	movs	r3, #0
 800b89c:	643b      	str	r3, [r7, #64]	; 0x40
 800b89e:	e015      	b.n	800b8cc <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800b8a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	f107 010c 	add.w	r1, r7, #12
 800b8a8:	4613      	mov	r3, r2
 800b8aa:	005b      	lsls	r3, r3, #1
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	4419      	add	r1, r3
 800b8b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	005b      	lsls	r3, r3, #1
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b8c0:	4413      	add	r3, r2
 800b8c2:	3b34      	subs	r3, #52	; 0x34
 800b8c4:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b8c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c8:	3301      	adds	r3, #1
 800b8ca:	643b      	str	r3, [r7, #64]	; 0x40
 800b8cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d9e6      	bls.n	800b8a0 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800b8d2:	f107 030c 	add.w	r3, r7, #12
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	4818      	ldr	r0, [pc, #96]	; (800b93c <low_level_input+0xc4>)
 800b8da:	f7f8 fd5a 	bl	8004392 <HAL_ETH_GetRxDataBuffer>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d125      	bne.n	800b930 <low_level_input+0xb8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800b8e4:	f107 0308 	add.w	r3, r7, #8
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4814      	ldr	r0, [pc, #80]	; (800b93c <low_level_input+0xc4>)
 800b8ec:	f7f8 fdef 	bl	80044ce <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800b8f0:	4812      	ldr	r0, [pc, #72]	; (800b93c <low_level_input+0xc4>)
 800b8f2:	f7f8 fe1f 	bl	8004534 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7ff fceb 	bl	800b2d8 <SCB_InvalidateDCache_by_Addr>
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b902:	480f      	ldr	r0, [pc, #60]	; (800b940 <low_level_input+0xc8>)
 800b904:	f006 fbe0 	bl	80120c8 <memp_malloc_pool>
 800b908:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(custom_pbuf != NULL)
 800b90a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00f      	beq.n	800b930 <low_level_input+0xb8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800b910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b912:	4a0c      	ldr	r2, [pc, #48]	; (800b944 <low_level_input+0xcc>)
 800b914:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	b299      	uxth	r1, r3
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	b292      	uxth	r2, r2
 800b920:	9201      	str	r2, [sp, #4]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b926:	2241      	movs	r2, #65	; 0x41
 800b928:	2000      	movs	r0, #0
 800b92a:	f007 f94b 	bl	8012bc4 <pbuf_alloced_custom>
 800b92e:	6478      	str	r0, [r7, #68]	; 0x44
    }
  }

  return p;
 800b930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b932:	4618      	mov	r0, r3
 800b934:	3748      	adds	r7, #72	; 0x48
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20008c0c 	.word	0x20008c0c
 800b940:	0802106c 	.word	0x0802106c
 800b944:	0800b9f5 	.word	0x0800b9f5

0800b948 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b954:	4b0f      	ldr	r3, [pc, #60]	; (800b994 <ethernetif_input+0x4c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f04f 31ff 	mov.w	r1, #4294967295
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 faa7 	bl	800beb0 <osSemaphoreWait>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d1f5      	bne.n	800b954 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7ff ff85 	bl	800b878 <low_level_input>
 800b96e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	691b      	ldr	r3, [r3, #16]
 800b97a:	68f9      	ldr	r1, [r7, #12]
 800b97c:	68b8      	ldr	r0, [r7, #8]
 800b97e:	4798      	blx	r3
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800b986:	68b8      	ldr	r0, [r7, #8]
 800b988:	f007 fad6 	bl	8012f38 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1ea      	bne.n	800b968 <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b992:	e7df      	b.n	800b954 <ethernetif_input+0xc>
 800b994:	20000570 	.word	0x20000570

0800b998 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d106      	bne.n	800b9b4 <ethernetif_init+0x1c>
 800b9a6:	4b0e      	ldr	r3, [pc, #56]	; (800b9e0 <ethernetif_init+0x48>)
 800b9a8:	f44f 7212 	mov.w	r2, #584	; 0x248
 800b9ac:	490d      	ldr	r1, [pc, #52]	; (800b9e4 <ethernetif_init+0x4c>)
 800b9ae:	480e      	ldr	r0, [pc, #56]	; (800b9e8 <ethernetif_init+0x50>)
 800b9b0:	f011 f90a 	bl	801cbc8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2273      	movs	r2, #115	; 0x73
 800b9b8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2274      	movs	r2, #116	; 0x74
 800b9c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	4a09      	ldr	r2, [pc, #36]	; (800b9ec <ethernetif_init+0x54>)
 800b9c8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	4a08      	ldr	r2, [pc, #32]	; (800b9f0 <ethernetif_init+0x58>)
 800b9ce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f7ff fd91 	bl	800b4f8 <low_level_init>

  return ERR_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3708      	adds	r7, #8
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	0801db10 	.word	0x0801db10
 800b9e4:	0801db2c 	.word	0x0801db2c
 800b9e8:	0801db3c 	.word	0x0801db3c
 800b9ec:	0801aa51 	.word	0x0801aa51
 800b9f0:	0800b785 	.word	0x0800b785

0800b9f4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ba00:	68f9      	ldr	r1, [r7, #12]
 800ba02:	4803      	ldr	r0, [pc, #12]	; (800ba10 <pbuf_free_custom+0x1c>)
 800ba04:	f006 fbd4 	bl	80121b0 <memp_free_pool>
}
 800ba08:	bf00      	nop
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	0802106c 	.word	0x0802106c

0800ba14 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ba18:	f7f6 f924 	bl	8001c64 <HAL_GetTick>
 800ba1c:	4603      	mov	r3, r0
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ba28:	4802      	ldr	r0, [pc, #8]	; (800ba34 <ETH_PHY_IO_Init+0x10>)
 800ba2a:	f7f9 f9b5 	bl	8004d98 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20008c0c 	.word	0x20008c0c

0800ba38 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	af00      	add	r7, sp, #0
  return 0;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	68f9      	ldr	r1, [r7, #12]
 800ba5a:	4807      	ldr	r0, [pc, #28]	; (800ba78 <ETH_PHY_IO_ReadReg+0x30>)
 800ba5c:	f7f8 ff06 	bl	800486c <HAL_ETH_ReadPHYRegister>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295
 800ba6a:	e000      	b.n	800ba6e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ba6c:	2300      	movs	r3, #0
}
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	20008c0c 	.word	0x20008c0c

0800ba7c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	68f9      	ldr	r1, [r7, #12]
 800ba8e:	4807      	ldr	r0, [pc, #28]	; (800baac <ETH_PHY_IO_WriteReg+0x30>)
 800ba90:	f7f8 ff40 	bl	8004914 <HAL_ETH_WritePHYRegister>
 800ba94:	4603      	mov	r3, r0
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d002      	beq.n	800baa0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ba9a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba9e:	e000      	b.n	800baa2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800baa0:	2300      	movs	r3, #0
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3710      	adds	r7, #16
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	20008c0c 	.word	0x20008c0c

0800bab0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bab4:	f7f6 f8d6 	bl	8001c64 <HAL_GetTick>
 800bab8:	4603      	mov	r3, r0
}
 800baba:	4618      	mov	r0, r3
 800babc:	bd80      	pop	{r7, pc}
	...

0800bac0 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b0a0      	sub	sp, #128	; 0x80
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  uint32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800bac8:	2300      	movs	r3, #0
 800baca:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bacc:	2300      	movs	r3, #0
 800bace:	67bb      	str	r3, [r7, #120]	; 0x78
 800bad0:	2300      	movs	r3, #0
 800bad2:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bad8:	483a      	ldr	r0, [pc, #232]	; (800bbc4 <ethernet_link_thread+0x104>)
 800bada:	f7f5 ffec 	bl	8001ab6 <LAN8742_GetLinkState>
 800bade:	4603      	mov	r3, r0
 800bae0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800bae2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bae8:	089b      	lsrs	r3, r3, #2
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d00c      	beq.n	800bb0e <ethernet_link_thread+0x4e>
 800baf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d809      	bhi.n	800bb0e <ethernet_link_thread+0x4e>
  {
    HAL_ETH_Stop_IT(&heth);
 800bafa:	4833      	ldr	r0, [pc, #204]	; (800bbc8 <ethernet_link_thread+0x108>)
 800bafc:	f7f8 fa56 	bl	8003fac <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800bb00:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800bb02:	f006 fdd9 	bl	80126b8 <netif_set_down>
    netif_set_link_down(netif);
 800bb06:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800bb08:	f006 fe3c 	bl	8012784 <netif_set_link_down>
 800bb0c:	e055      	b.n	800bbba <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800bb0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb14:	f003 0304 	and.w	r3, r3, #4
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d14e      	bne.n	800bbba <ethernet_link_thread+0xfa>
 800bb1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d94b      	bls.n	800bbba <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 800bb22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb24:	3b02      	subs	r3, #2
 800bb26:	2b03      	cmp	r3, #3
 800bb28:	d82a      	bhi.n	800bb80 <ethernet_link_thread+0xc0>
 800bb2a:	a201      	add	r2, pc, #4	; (adr r2, 800bb30 <ethernet_link_thread+0x70>)
 800bb2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb30:	0800bb41 	.word	0x0800bb41
 800bb34:	0800bb53 	.word	0x0800bb53
 800bb38:	0800bb63 	.word	0x0800bb63
 800bb3c:	0800bb73 	.word	0x0800bb73
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800bb40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb44:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800bb46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb4a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bb50:	e017      	b.n	800bb82 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bb52:	2300      	movs	r3, #0
 800bb54:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800bb56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb5a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bb5c:	2301      	movs	r3, #1
 800bb5e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bb60:	e00f      	b.n	800bb82 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800bb62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb66:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bb70:	e007      	b.n	800bb82 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800bb72:	2300      	movs	r3, #0
 800bb74:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800bb76:	2300      	movs	r3, #0
 800bb78:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800bb7e:	e000      	b.n	800bb82 <ethernet_link_thread+0xc2>
    default:
      break;
 800bb80:	bf00      	nop
    }

    if(linkchanged)
 800bb82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d018      	beq.n	800bbba <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bb88:	f107 0308 	add.w	r3, r7, #8
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	480e      	ldr	r0, [pc, #56]	; (800bbc8 <ethernet_link_thread+0x108>)
 800bb90:	f7f8 ff14 	bl	80049bc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800bb94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb96:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800bb98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb9a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bb9c:	f107 0308 	add.w	r3, r7, #8
 800bba0:	4619      	mov	r1, r3
 800bba2:	4809      	ldr	r0, [pc, #36]	; (800bbc8 <ethernet_link_thread+0x108>)
 800bba4:	f7f9 f8de 	bl	8004d64 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800bba8:	4807      	ldr	r0, [pc, #28]	; (800bbc8 <ethernet_link_thread+0x108>)
 800bbaa:	f7f8 f97a 	bl	8003ea2 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800bbae:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800bbb0:	f006 fd16 	bl	80125e0 <netif_set_up>
      netif_set_link_up(netif);
 800bbb4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800bbb6:	f006 fdb1 	bl	801271c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800bbba:	2064      	movs	r0, #100	; 0x64
 800bbbc:	f000 f893 	bl	800bce6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bbc0:	e78a      	b.n	800bad8 <ethernet_link_thread+0x18>
 800bbc2:	bf00      	nop
 800bbc4:	20008bec 	.word	0x20008bec
 800bbc8:	20008c0c 	.word	0x20008c0c

0800bbcc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b085      	sub	sp, #20
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bbda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbde:	2b84      	cmp	r3, #132	; 0x84
 800bbe0:	d005      	beq.n	800bbee <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bbe2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	4413      	add	r3, r2
 800bbea:	3303      	adds	r3, #3
 800bbec:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bbee:	68fb      	ldr	r3, [r7, #12]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr

0800bbfc <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc02:	f3ef 8305 	mrs	r3, IPSR
 800bc06:	607b      	str	r3, [r7, #4]
  return(result);
 800bc08:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bf14      	ite	ne
 800bc0e:	2301      	movne	r3, #1
 800bc10:	2300      	moveq	r3, #0
 800bc12:	b2db      	uxtb	r3, r3
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bc24:	f001 fd10 	bl	800d648 <vTaskStartScheduler>
  
  return osOK;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	bd80      	pop	{r7, pc}

0800bc2e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800bc2e:	b580      	push	{r7, lr}
 800bc30:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800bc32:	f7ff ffe3 	bl	800bbfc <inHandlerMode>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d003      	beq.n	800bc44 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800bc3c:	f001 fe1c 	bl	800d878 <xTaskGetTickCountFromISR>
 800bc40:	4603      	mov	r3, r0
 800bc42:	e002      	b.n	800bc4a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800bc44:	f001 fe08 	bl	800d858 <xTaskGetTickCount>
 800bc48:	4603      	mov	r3, r0
  }
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bc4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc50:	b089      	sub	sp, #36	; 0x24
 800bc52:	af04      	add	r7, sp, #16
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	695b      	ldr	r3, [r3, #20]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d020      	beq.n	800bca2 <osThreadCreate+0x54>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	699b      	ldr	r3, [r3, #24]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d01c      	beq.n	800bca2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685c      	ldr	r4, [r3, #4]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681d      	ldr	r5, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	691e      	ldr	r6, [r3, #16]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff ffa6 	bl	800bbcc <makeFreeRtosPriority>
 800bc80:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	695b      	ldr	r3, [r3, #20]
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bc8a:	9202      	str	r2, [sp, #8]
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	9100      	str	r1, [sp, #0]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	4632      	mov	r2, r6
 800bc94:	4629      	mov	r1, r5
 800bc96:	4620      	mov	r0, r4
 800bc98:	f001 fb0a 	bl	800d2b0 <xTaskCreateStatic>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	60fb      	str	r3, [r7, #12]
 800bca0:	e01c      	b.n	800bcdc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	685c      	ldr	r4, [r3, #4]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bcae:	b29e      	uxth	r6, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7ff ff88 	bl	800bbcc <makeFreeRtosPriority>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	f107 030c 	add.w	r3, r7, #12
 800bcc2:	9301      	str	r3, [sp, #4]
 800bcc4:	9200      	str	r2, [sp, #0]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	4632      	mov	r2, r6
 800bcca:	4629      	mov	r1, r5
 800bccc:	4620      	mov	r0, r4
 800bcce:	f001 fb49 	bl	800d364 <xTaskCreate>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d001      	beq.n	800bcdc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e000      	b.n	800bcde <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bce6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b084      	sub	sp, #16
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <osDelay+0x16>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	e000      	b.n	800bcfe <osDelay+0x18>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f001 fc6e 	bl	800d5e0 <vTaskDelay>
  
  return osOK;
 800bd04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	3710      	adds	r7, #16
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d007      	beq.n	800bd2e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	4619      	mov	r1, r3
 800bd24:	2001      	movs	r0, #1
 800bd26:	f000 fc80 	bl	800c62a <xQueueCreateMutexStatic>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	e003      	b.n	800bd36 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bd2e:	2001      	movs	r0, #1
 800bd30:	f000 fc63 	bl	800c5fa <xQueueCreateMutex>
 800bd34:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3708      	adds	r7, #8
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d101      	bne.n	800bd58 <osMutexWait+0x18>
    return osErrorParameter;
 800bd54:	2380      	movs	r3, #128	; 0x80
 800bd56:	e03a      	b.n	800bdce <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd62:	d103      	bne.n	800bd6c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bd64:	f04f 33ff 	mov.w	r3, #4294967295
 800bd68:	60fb      	str	r3, [r7, #12]
 800bd6a:	e009      	b.n	800bd80 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d006      	beq.n	800bd80 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <osMutexWait+0x40>
      ticks = 1;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bd80:	f7ff ff3c 	bl	800bbfc <inHandlerMode>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d017      	beq.n	800bdba <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bd8a:	f107 0308 	add.w	r3, r7, #8
 800bd8e:	461a      	mov	r2, r3
 800bd90:	2100      	movs	r1, #0
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f001 f860 	bl	800ce58 <xQueueReceiveFromISR>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d001      	beq.n	800bda2 <osMutexWait+0x62>
      return osErrorOS;
 800bd9e:	23ff      	movs	r3, #255	; 0xff
 800bda0:	e015      	b.n	800bdce <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d011      	beq.n	800bdcc <osMutexWait+0x8c>
 800bda8:	4b0b      	ldr	r3, [pc, #44]	; (800bdd8 <osMutexWait+0x98>)
 800bdaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	f3bf 8f4f 	dsb	sy
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	e008      	b.n	800bdcc <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bdba:	68f9      	ldr	r1, [r7, #12]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 ff43 	bl	800cc48 <xQueueSemaphoreTake>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d001      	beq.n	800bdcc <osMutexWait+0x8c>
    return osErrorOS;
 800bdc8:	23ff      	movs	r3, #255	; 0xff
 800bdca:	e000      	b.n	800bdce <osMutexWait+0x8e>
  }
  
  return osOK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	bf00      	nop
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bde4:	2300      	movs	r3, #0
 800bde6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bde8:	2300      	movs	r3, #0
 800bdea:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bdec:	f7ff ff06 	bl	800bbfc <inHandlerMode>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d016      	beq.n	800be24 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bdf6:	f107 0308 	add.w	r3, r7, #8
 800bdfa:	4619      	mov	r1, r3
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 fdbd 	bl	800c97c <xQueueGiveFromISR>
 800be02:	4603      	mov	r3, r0
 800be04:	2b01      	cmp	r3, #1
 800be06:	d001      	beq.n	800be0c <osMutexRelease+0x30>
      return osErrorOS;
 800be08:	23ff      	movs	r3, #255	; 0xff
 800be0a:	e017      	b.n	800be3c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d013      	beq.n	800be3a <osMutexRelease+0x5e>
 800be12:	4b0c      	ldr	r3, [pc, #48]	; (800be44 <osMutexRelease+0x68>)
 800be14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	e00a      	b.n	800be3a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800be24:	2300      	movs	r3, #0
 800be26:	2200      	movs	r2, #0
 800be28:	2100      	movs	r1, #0
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fc18 	bl	800c660 <xQueueGenericSend>
 800be30:	4603      	mov	r3, r0
 800be32:	2b01      	cmp	r3, #1
 800be34:	d001      	beq.n	800be3a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800be36:	23ff      	movs	r3, #255	; 0xff
 800be38:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800be3a:	68fb      	ldr	r3, [r7, #12]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3710      	adds	r7, #16
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}
 800be44:	e000ed04 	.word	0xe000ed04

0800be48 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800be48:	b580      	push	{r7, lr}
 800be4a:	b086      	sub	sp, #24
 800be4c:	af02      	add	r7, sp, #8
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	2b00      	cmp	r3, #0
 800be58:	d010      	beq.n	800be7c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d10b      	bne.n	800be78 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	685a      	ldr	r2, [r3, #4]
 800be64:	2303      	movs	r3, #3
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	4613      	mov	r3, r2
 800be6a:	2200      	movs	r2, #0
 800be6c:	2100      	movs	r1, #0
 800be6e:	2001      	movs	r0, #1
 800be70:	f000 fad8 	bl	800c424 <xQueueGenericCreateStatic>
 800be74:	4603      	mov	r3, r0
 800be76:	e016      	b.n	800bea6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800be78:	2300      	movs	r3, #0
 800be7a:	e014      	b.n	800bea6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d110      	bne.n	800bea4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800be82:	2203      	movs	r2, #3
 800be84:	2100      	movs	r1, #0
 800be86:	2001      	movs	r0, #1
 800be88:	f000 fb3f 	bl	800c50a <xQueueGenericCreate>
 800be8c:	60f8      	str	r0, [r7, #12]
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d005      	beq.n	800bea0 <osSemaphoreCreate+0x58>
 800be94:	2300      	movs	r3, #0
 800be96:	2200      	movs	r2, #0
 800be98:	2100      	movs	r1, #0
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f000 fbe0 	bl	800c660 <xQueueGenericSend>
      return sema;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	e000      	b.n	800bea6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bea4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
	...

0800beb0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800beba:	2300      	movs	r3, #0
 800bebc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d101      	bne.n	800bec8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bec4:	2380      	movs	r3, #128	; 0x80
 800bec6:	e03a      	b.n	800bf3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed2:	d103      	bne.n	800bedc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bed4:	f04f 33ff 	mov.w	r3, #4294967295
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	e009      	b.n	800bef0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d006      	beq.n	800bef0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d101      	bne.n	800bef0 <osSemaphoreWait+0x40>
      ticks = 1;
 800beec:	2301      	movs	r3, #1
 800beee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bef0:	f7ff fe84 	bl	800bbfc <inHandlerMode>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d017      	beq.n	800bf2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800befa:	f107 0308 	add.w	r3, r7, #8
 800befe:	461a      	mov	r2, r3
 800bf00:	2100      	movs	r1, #0
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f000 ffa8 	bl	800ce58 <xQueueReceiveFromISR>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b01      	cmp	r3, #1
 800bf0c:	d001      	beq.n	800bf12 <osSemaphoreWait+0x62>
      return osErrorOS;
 800bf0e:	23ff      	movs	r3, #255	; 0xff
 800bf10:	e015      	b.n	800bf3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d011      	beq.n	800bf3c <osSemaphoreWait+0x8c>
 800bf18:	4b0b      	ldr	r3, [pc, #44]	; (800bf48 <osSemaphoreWait+0x98>)
 800bf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf1e:	601a      	str	r2, [r3, #0]
 800bf20:	f3bf 8f4f 	dsb	sy
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	e008      	b.n	800bf3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	f000 fe8b 	bl	800cc48 <xQueueSemaphoreTake>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d001      	beq.n	800bf3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800bf38:	23ff      	movs	r3, #255	; 0xff
 800bf3a:	e000      	b.n	800bf3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800bf3c:	2300      	movs	r3, #0
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	e000ed04 	.word	0xe000ed04

0800bf4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bf54:	2300      	movs	r3, #0
 800bf56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bf5c:	f7ff fe4e 	bl	800bbfc <inHandlerMode>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d016      	beq.n	800bf94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bf66:	f107 0308 	add.w	r3, r7, #8
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fd05 	bl	800c97c <xQueueGiveFromISR>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d001      	beq.n	800bf7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bf78:	23ff      	movs	r3, #255	; 0xff
 800bf7a:	e017      	b.n	800bfac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d013      	beq.n	800bfaa <osSemaphoreRelease+0x5e>
 800bf82:	4b0c      	ldr	r3, [pc, #48]	; (800bfb4 <osSemaphoreRelease+0x68>)
 800bf84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf88:	601a      	str	r2, [r3, #0]
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	f3bf 8f6f 	isb	sy
 800bf92:	e00a      	b.n	800bfaa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bf94:	2300      	movs	r3, #0
 800bf96:	2200      	movs	r2, #0
 800bf98:	2100      	movs	r1, #0
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fb60 	bl	800c660 <xQueueGenericSend>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d001      	beq.n	800bfaa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bfa6:	23ff      	movs	r3, #255	; 0xff
 800bfa8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3710      	adds	r7, #16
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	e000ed04 	.word	0xe000ed04

0800bfb8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b082      	sub	sp, #8
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800bfc0:	f7ff fe1c 	bl	800bbfc <inHandlerMode>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d001      	beq.n	800bfce <osSemaphoreDelete+0x16>
    return osErrorISR;
 800bfca:	2382      	movs	r3, #130	; 0x82
 800bfcc:	e003      	b.n	800bfd6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fff9 	bl	800cfc6 <vQueueDelete>

  return osOK; 
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3708      	adds	r7, #8
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bfde:	b590      	push	{r4, r7, lr}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af02      	add	r7, sp, #8
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	689b      	ldr	r3, [r3, #8]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d012      	beq.n	800c016 <osMessageCreate+0x38>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00e      	beq.n	800c016 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6818      	ldr	r0, [r3, #0]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6859      	ldr	r1, [r3, #4]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	689a      	ldr	r2, [r3, #8]
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	68dc      	ldr	r4, [r3, #12]
 800c008:	2300      	movs	r3, #0
 800c00a:	9300      	str	r3, [sp, #0]
 800c00c:	4623      	mov	r3, r4
 800c00e:	f000 fa09 	bl	800c424 <xQueueGenericCreateStatic>
 800c012:	4603      	mov	r3, r0
 800c014:	e008      	b.n	800c028 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6818      	ldr	r0, [r3, #0]
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	4619      	mov	r1, r3
 800c022:	f000 fa72 	bl	800c50a <xQueueGenericCreate>
 800c026:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c028:	4618      	mov	r0, r3
 800c02a:	370c      	adds	r7, #12
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd90      	pop	{r4, r7, pc}

0800c030 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	60f8      	str	r0, [r7, #12]
 800c038:	60b9      	str	r1, [r7, #8]
 800c03a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c03c:	2300      	movs	r3, #0
 800c03e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <osMessagePut+0x1e>
    ticks = 1;
 800c04a:	2301      	movs	r3, #1
 800c04c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c04e:	f7ff fdd5 	bl	800bbfc <inHandlerMode>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d018      	beq.n	800c08a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c058:	f107 0210 	add.w	r2, r7, #16
 800c05c:	f107 0108 	add.w	r1, r7, #8
 800c060:	2300      	movs	r3, #0
 800c062:	68f8      	ldr	r0, [r7, #12]
 800c064:	f000 fbf6 	bl	800c854 <xQueueGenericSendFromISR>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d001      	beq.n	800c072 <osMessagePut+0x42>
      return osErrorOS;
 800c06e:	23ff      	movs	r3, #255	; 0xff
 800c070:	e018      	b.n	800c0a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d014      	beq.n	800c0a2 <osMessagePut+0x72>
 800c078:	4b0c      	ldr	r3, [pc, #48]	; (800c0ac <osMessagePut+0x7c>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	e00b      	b.n	800c0a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c08a:	f107 0108 	add.w	r1, r7, #8
 800c08e:	2300      	movs	r3, #0
 800c090:	697a      	ldr	r2, [r7, #20]
 800c092:	68f8      	ldr	r0, [r7, #12]
 800c094:	f000 fae4 	bl	800c660 <xQueueGenericSend>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d001      	beq.n	800c0a2 <osMessagePut+0x72>
      return osErrorOS;
 800c09e:	23ff      	movs	r3, #255	; 0xff
 800c0a0:	e000      	b.n	800c0a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c0a2:	2300      	movs	r3, #0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	e000ed04 	.word	0xe000ed04

0800c0b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c0b0:	b590      	push	{r4, r7, lr}
 800c0b2:	b08b      	sub	sp, #44	; 0x2c
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	60f8      	str	r0, [r7, #12]
 800c0b8:	60b9      	str	r1, [r7, #8]
 800c0ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10a      	bne.n	800c0e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c0ca:	2380      	movs	r3, #128	; 0x80
 800c0cc:	617b      	str	r3, [r7, #20]
    return event;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	461c      	mov	r4, r3
 800c0d2:	f107 0314 	add.w	r3, r7, #20
 800c0d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0de:	e054      	b.n	800c18a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ee:	d103      	bne.n	800c0f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0f6:	e009      	b.n	800c10c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d006      	beq.n	800c10c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <osMessageGet+0x5c>
      ticks = 1;
 800c108:	2301      	movs	r3, #1
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c10c:	f7ff fd76 	bl	800bbfc <inHandlerMode>
 800c110:	4603      	mov	r3, r0
 800c112:	2b00      	cmp	r3, #0
 800c114:	d01c      	beq.n	800c150 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c116:	f107 0220 	add.w	r2, r7, #32
 800c11a:	f107 0314 	add.w	r3, r7, #20
 800c11e:	3304      	adds	r3, #4
 800c120:	4619      	mov	r1, r3
 800c122:	68b8      	ldr	r0, [r7, #8]
 800c124:	f000 fe98 	bl	800ce58 <xQueueReceiveFromISR>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d102      	bne.n	800c134 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c12e:	2310      	movs	r3, #16
 800c130:	617b      	str	r3, [r7, #20]
 800c132:	e001      	b.n	800c138 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c134:	2300      	movs	r3, #0
 800c136:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c138:	6a3b      	ldr	r3, [r7, #32]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d01d      	beq.n	800c17a <osMessageGet+0xca>
 800c13e:	4b15      	ldr	r3, [pc, #84]	; (800c194 <osMessageGet+0xe4>)
 800c140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c144:	601a      	str	r2, [r3, #0]
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	f3bf 8f6f 	isb	sy
 800c14e:	e014      	b.n	800c17a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c150:	f107 0314 	add.w	r3, r7, #20
 800c154:	3304      	adds	r3, #4
 800c156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c158:	4619      	mov	r1, r3
 800c15a:	68b8      	ldr	r0, [r7, #8]
 800c15c:	f000 fc98 	bl	800ca90 <xQueueReceive>
 800c160:	4603      	mov	r3, r0
 800c162:	2b01      	cmp	r3, #1
 800c164:	d102      	bne.n	800c16c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c166:	2310      	movs	r3, #16
 800c168:	617b      	str	r3, [r7, #20]
 800c16a:	e006      	b.n	800c17a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <osMessageGet+0xc6>
 800c172:	2300      	movs	r3, #0
 800c174:	e000      	b.n	800c178 <osMessageGet+0xc8>
 800c176:	2340      	movs	r3, #64	; 0x40
 800c178:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	461c      	mov	r4, r3
 800c17e:	f107 0314 	add.w	r3, r7, #20
 800c182:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c186:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c18a:	68f8      	ldr	r0, [r7, #12]
 800c18c:	372c      	adds	r7, #44	; 0x2c
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd90      	pop	{r4, r7, pc}
 800c192:	bf00      	nop
 800c194:	e000ed04 	.word	0xe000ed04

0800c198 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c1a0:	f7ff fd2c 	bl	800bbfc <inHandlerMode>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d004      	beq.n	800c1b4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 feee 	bl	800cf8c <uxQueueMessagesWaitingFromISR>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	e003      	b.n	800c1bc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fecc 	bl	800cf52 <uxQueueMessagesWaiting>
 800c1ba:	4603      	mov	r3, r0
  }
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c1cc:	f7ff fd16 	bl	800bbfc <inHandlerMode>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <osMessageDelete+0x16>
    return osErrorISR;
 800c1d6:	2382      	movs	r3, #130	; 0x82
 800c1d8:	e003      	b.n	800c1e2 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fef3 	bl	800cfc6 <vQueueDelete>

  return osOK; 
 800c1e0:	2300      	movs	r3, #0
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1ea:	b480      	push	{r7}
 800c1ec:	b083      	sub	sp, #12
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f103 0208 	add.w	r2, r3, #8
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c202:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f103 0208 	add.w	r2, r3, #8
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f103 0208 	add.w	r2, r3, #8
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c21e:	bf00      	nop
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr

0800c22a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c22a:	b480      	push	{r7}
 800c22c:	b083      	sub	sp, #12
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2200      	movs	r2, #0
 800c236:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c238:	bf00      	nop
 800c23a:	370c      	adds	r7, #12
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	68fa      	ldr	r2, [r7, #12]
 800c258:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	689a      	ldr	r2, [r3, #8]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	689b      	ldr	r3, [r3, #8]
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	601a      	str	r2, [r3, #0]
}
 800c280:	bf00      	nop
 800c282:	3714      	adds	r7, #20
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c28c:	b480      	push	{r7}
 800c28e:	b085      	sub	sp, #20
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a2:	d103      	bne.n	800c2ac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	60fb      	str	r3, [r7, #12]
 800c2aa:	e00c      	b.n	800c2c6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	60fb      	str	r3, [r7, #12]
 800c2b2:	e002      	b.n	800c2ba <vListInsert+0x2e>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	60fb      	str	r3, [r7, #12]
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	68ba      	ldr	r2, [r7, #8]
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d2f6      	bcs.n	800c2b4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	685a      	ldr	r2, [r3, #4]
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	685b      	ldr	r3, [r3, #4]
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	601a      	str	r2, [r3, #0]
}
 800c2f2:	bf00      	nop
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2fe:	b480      	push	{r7}
 800c300:	b085      	sub	sp, #20
 800c302:	af00      	add	r7, sp, #0
 800c304:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	685b      	ldr	r3, [r3, #4]
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	6892      	ldr	r2, [r2, #8]
 800c314:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	687a      	ldr	r2, [r7, #4]
 800c31c:	6852      	ldr	r2, [r2, #4]
 800c31e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	429a      	cmp	r2, r3
 800c328:	d103      	bne.n	800c332 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689a      	ldr	r2, [r3, #8]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2200      	movs	r2, #0
 800c336:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	1e5a      	subs	r2, r3, #1
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3714      	adds	r7, #20
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr
	...

0800c354 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d109      	bne.n	800c37c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	60bb      	str	r3, [r7, #8]
 800c37a:	e7fe      	b.n	800c37a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800c37c:	f002 f8fe 	bl	800e57c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c388:	68f9      	ldr	r1, [r7, #12]
 800c38a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c38c:	fb01 f303 	mul.w	r3, r1, r3
 800c390:	441a      	add	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2200      	movs	r2, #0
 800c39a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	681a      	ldr	r2, [r3, #0]
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681a      	ldr	r2, [r3, #0]
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	68f9      	ldr	r1, [r7, #12]
 800c3b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c3b2:	fb01 f303 	mul.w	r3, r1, r3
 800c3b6:	441a      	add	r2, r3
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	22ff      	movs	r2, #255	; 0xff
 800c3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	22ff      	movs	r2, #255	; 0xff
 800c3c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d114      	bne.n	800c3fc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d01a      	beq.n	800c410 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3310      	adds	r3, #16
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f001 fbb8 	bl	800db54 <xTaskRemoveFromEventList>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d012      	beq.n	800c410 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3ea:	4b0d      	ldr	r3, [pc, #52]	; (800c420 <xQueueGenericReset+0xcc>)
 800c3ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	f3bf 8f4f 	dsb	sy
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	e009      	b.n	800c410 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	3310      	adds	r3, #16
 800c400:	4618      	mov	r0, r3
 800c402:	f7ff fef2 	bl	800c1ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	3324      	adds	r3, #36	; 0x24
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7ff feed 	bl	800c1ea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c410:	f002 f8e2 	bl	800e5d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c414:	2301      	movs	r3, #1
}
 800c416:	4618      	mov	r0, r3
 800c418:	3710      	adds	r7, #16
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08e      	sub	sp, #56	; 0x38
 800c428:	af02      	add	r7, sp, #8
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d109      	bne.n	800c44c <xQueueGenericCreateStatic+0x28>
 800c438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c43c:	f383 8811 	msr	BASEPRI, r3
 800c440:	f3bf 8f6f 	isb	sy
 800c444:	f3bf 8f4f 	dsb	sy
 800c448:	62bb      	str	r3, [r7, #40]	; 0x28
 800c44a:	e7fe      	b.n	800c44a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d109      	bne.n	800c466 <xQueueGenericCreateStatic+0x42>
 800c452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c456:	f383 8811 	msr	BASEPRI, r3
 800c45a:	f3bf 8f6f 	isb	sy
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	627b      	str	r3, [r7, #36]	; 0x24
 800c464:	e7fe      	b.n	800c464 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d002      	beq.n	800c472 <xQueueGenericCreateStatic+0x4e>
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d001      	beq.n	800c476 <xQueueGenericCreateStatic+0x52>
 800c472:	2301      	movs	r3, #1
 800c474:	e000      	b.n	800c478 <xQueueGenericCreateStatic+0x54>
 800c476:	2300      	movs	r3, #0
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d109      	bne.n	800c490 <xQueueGenericCreateStatic+0x6c>
 800c47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c480:	f383 8811 	msr	BASEPRI, r3
 800c484:	f3bf 8f6f 	isb	sy
 800c488:	f3bf 8f4f 	dsb	sy
 800c48c:	623b      	str	r3, [r7, #32]
 800c48e:	e7fe      	b.n	800c48e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d102      	bne.n	800c49c <xQueueGenericCreateStatic+0x78>
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d101      	bne.n	800c4a0 <xQueueGenericCreateStatic+0x7c>
 800c49c:	2301      	movs	r3, #1
 800c49e:	e000      	b.n	800c4a2 <xQueueGenericCreateStatic+0x7e>
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <xQueueGenericCreateStatic+0x96>
 800c4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	61fb      	str	r3, [r7, #28]
 800c4b8:	e7fe      	b.n	800c4b8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c4ba:	2348      	movs	r3, #72	; 0x48
 800c4bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	2b48      	cmp	r3, #72	; 0x48
 800c4c2:	d009      	beq.n	800c4d8 <xQueueGenericCreateStatic+0xb4>
 800c4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c8:	f383 8811 	msr	BASEPRI, r3
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	61bb      	str	r3, [r7, #24]
 800c4d6:	e7fe      	b.n	800c4d6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00d      	beq.n	800c500 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4ec:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	4613      	mov	r3, r2
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	68b9      	ldr	r1, [r7, #8]
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f000 f844 	bl	800c588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c502:	4618      	mov	r0, r3
 800c504:	3730      	adds	r7, #48	; 0x30
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b08a      	sub	sp, #40	; 0x28
 800c50e:	af02      	add	r7, sp, #8
 800c510:	60f8      	str	r0, [r7, #12]
 800c512:	60b9      	str	r1, [r7, #8]
 800c514:	4613      	mov	r3, r2
 800c516:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <xQueueGenericCreate+0x28>
 800c51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c522:	f383 8811 	msr	BASEPRI, r3
 800c526:	f3bf 8f6f 	isb	sy
 800c52a:	f3bf 8f4f 	dsb	sy
 800c52e:	613b      	str	r3, [r7, #16]
 800c530:	e7fe      	b.n	800c530 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c538:	2300      	movs	r3, #0
 800c53a:	61fb      	str	r3, [r7, #28]
 800c53c:	e004      	b.n	800c548 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	fb02 f303 	mul.w	r3, r2, r3
 800c546:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	3348      	adds	r3, #72	; 0x48
 800c54c:	4618      	mov	r0, r3
 800c54e:	f002 f92f 	bl	800e7b0 <pvPortMalloc>
 800c552:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c554:	69bb      	ldr	r3, [r7, #24]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d011      	beq.n	800c57e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	3348      	adds	r3, #72	; 0x48
 800c562:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c56c:	79fa      	ldrb	r2, [r7, #7]
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	9300      	str	r3, [sp, #0]
 800c572:	4613      	mov	r3, r2
 800c574:	697a      	ldr	r2, [r7, #20]
 800c576:	68b9      	ldr	r1, [r7, #8]
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f000 f805 	bl	800c588 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c57e:	69bb      	ldr	r3, [r7, #24]
	}
 800c580:	4618      	mov	r0, r3
 800c582:	3720      	adds	r7, #32
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b084      	sub	sp, #16
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	607a      	str	r2, [r7, #4]
 800c594:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d103      	bne.n	800c5a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	69ba      	ldr	r2, [r7, #24]
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	e002      	b.n	800c5aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c5b0:	69bb      	ldr	r3, [r7, #24]
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c5b6:	2101      	movs	r1, #1
 800c5b8:	69b8      	ldr	r0, [r7, #24]
 800c5ba:	f7ff fecb 	bl	800c354 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c5be:	bf00      	nop
 800c5c0:	3710      	adds	r7, #16
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}

0800c5c6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c5c6:	b580      	push	{r7, lr}
 800c5c8:	b082      	sub	sp, #8
 800c5ca:	af00      	add	r7, sp, #0
 800c5cc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d00e      	beq.n	800c5f2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	2100      	movs	r1, #0
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f837 	bl	800c660 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c5f2:	bf00      	nop
 800c5f4:	3708      	adds	r7, #8
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}

0800c5fa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c5fa:	b580      	push	{r7, lr}
 800c5fc:	b086      	sub	sp, #24
 800c5fe:	af00      	add	r7, sp, #0
 800c600:	4603      	mov	r3, r0
 800c602:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c604:	2301      	movs	r3, #1
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	2300      	movs	r3, #0
 800c60a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c60c:	79fb      	ldrb	r3, [r7, #7]
 800c60e:	461a      	mov	r2, r3
 800c610:	6939      	ldr	r1, [r7, #16]
 800c612:	6978      	ldr	r0, [r7, #20]
 800c614:	f7ff ff79 	bl	800c50a <xQueueGenericCreate>
 800c618:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f7ff ffd3 	bl	800c5c6 <prvInitialiseMutex>

		return xNewQueue;
 800c620:	68fb      	ldr	r3, [r7, #12]
	}
 800c622:	4618      	mov	r0, r3
 800c624:	3718      	adds	r7, #24
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}

0800c62a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c62a:	b580      	push	{r7, lr}
 800c62c:	b088      	sub	sp, #32
 800c62e:	af02      	add	r7, sp, #8
 800c630:	4603      	mov	r3, r0
 800c632:	6039      	str	r1, [r7, #0]
 800c634:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c636:	2301      	movs	r3, #1
 800c638:	617b      	str	r3, [r7, #20]
 800c63a:	2300      	movs	r3, #0
 800c63c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c63e:	79fb      	ldrb	r3, [r7, #7]
 800c640:	9300      	str	r3, [sp, #0]
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2200      	movs	r2, #0
 800c646:	6939      	ldr	r1, [r7, #16]
 800c648:	6978      	ldr	r0, [r7, #20]
 800c64a:	f7ff feeb 	bl	800c424 <xQueueGenericCreateStatic>
 800c64e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7ff ffb8 	bl	800c5c6 <prvInitialiseMutex>

		return xNewQueue;
 800c656:	68fb      	ldr	r3, [r7, #12]
	}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b08e      	sub	sp, #56	; 0x38
 800c664:	af00      	add	r7, sp, #0
 800c666:	60f8      	str	r0, [r7, #12]
 800c668:	60b9      	str	r1, [r7, #8]
 800c66a:	607a      	str	r2, [r7, #4]
 800c66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c66e:	2300      	movs	r3, #0
 800c670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d109      	bne.n	800c690 <xQueueGenericSend+0x30>
 800c67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c680:	f383 8811 	msr	BASEPRI, r3
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c68e:	e7fe      	b.n	800c68e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d103      	bne.n	800c69e <xQueueGenericSend+0x3e>
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d101      	bne.n	800c6a2 <xQueueGenericSend+0x42>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	e000      	b.n	800c6a4 <xQueueGenericSend+0x44>
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d109      	bne.n	800c6bc <xQueueGenericSend+0x5c>
 800c6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ac:	f383 8811 	msr	BASEPRI, r3
 800c6b0:	f3bf 8f6f 	isb	sy
 800c6b4:	f3bf 8f4f 	dsb	sy
 800c6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c6ba:	e7fe      	b.n	800c6ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d103      	bne.n	800c6ca <xQueueGenericSend+0x6a>
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d101      	bne.n	800c6ce <xQueueGenericSend+0x6e>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e000      	b.n	800c6d0 <xQueueGenericSend+0x70>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d109      	bne.n	800c6e8 <xQueueGenericSend+0x88>
 800c6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	623b      	str	r3, [r7, #32]
 800c6e6:	e7fe      	b.n	800c6e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6e8:	f001 fbea 	bl	800dec0 <xTaskGetSchedulerState>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d102      	bne.n	800c6f8 <xQueueGenericSend+0x98>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <xQueueGenericSend+0x9c>
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e000      	b.n	800c6fe <xQueueGenericSend+0x9e>
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <xQueueGenericSend+0xb6>
 800c702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c706:	f383 8811 	msr	BASEPRI, r3
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	f3bf 8f4f 	dsb	sy
 800c712:	61fb      	str	r3, [r7, #28]
 800c714:	e7fe      	b.n	800c714 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c716:	f001 ff31 	bl	800e57c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c722:	429a      	cmp	r2, r3
 800c724:	d302      	bcc.n	800c72c <xQueueGenericSend+0xcc>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d129      	bne.n	800c780 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c72c:	683a      	ldr	r2, [r7, #0]
 800c72e:	68b9      	ldr	r1, [r7, #8]
 800c730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c732:	f000 fc82 	bl	800d03a <prvCopyDataToQueue>
 800c736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d010      	beq.n	800c762 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c742:	3324      	adds	r3, #36	; 0x24
 800c744:	4618      	mov	r0, r3
 800c746:	f001 fa05 	bl	800db54 <xTaskRemoveFromEventList>
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d013      	beq.n	800c778 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c750:	4b3f      	ldr	r3, [pc, #252]	; (800c850 <xQueueGenericSend+0x1f0>)
 800c752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c756:	601a      	str	r2, [r3, #0]
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	e00a      	b.n	800c778 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c764:	2b00      	cmp	r3, #0
 800c766:	d007      	beq.n	800c778 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c768:	4b39      	ldr	r3, [pc, #228]	; (800c850 <xQueueGenericSend+0x1f0>)
 800c76a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c76e:	601a      	str	r2, [r3, #0]
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c778:	f001 ff2e 	bl	800e5d8 <vPortExitCritical>
				return pdPASS;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e063      	b.n	800c848 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d103      	bne.n	800c78e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c786:	f001 ff27 	bl	800e5d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c78a:	2300      	movs	r3, #0
 800c78c:	e05c      	b.n	800c848 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c790:	2b00      	cmp	r3, #0
 800c792:	d106      	bne.n	800c7a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c794:	f107 0314 	add.w	r3, r7, #20
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 fa3d 	bl	800dc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7a2:	f001 ff19 	bl	800e5d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7a6:	f000 ffad 	bl	800d704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7aa:	f001 fee7 	bl	800e57c <vPortEnterCritical>
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7b4:	b25b      	sxtb	r3, r3
 800c7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ba:	d103      	bne.n	800c7c4 <xQueueGenericSend+0x164>
 800c7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ca:	b25b      	sxtb	r3, r3
 800c7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d0:	d103      	bne.n	800c7da <xQueueGenericSend+0x17a>
 800c7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7da:	f001 fefd 	bl	800e5d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7de:	1d3a      	adds	r2, r7, #4
 800c7e0:	f107 0314 	add.w	r3, r7, #20
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f001 fa2c 	bl	800dc44 <xTaskCheckForTimeOut>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d124      	bne.n	800c83c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7f4:	f000 fd19 	bl	800d22a <prvIsQueueFull>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d018      	beq.n	800c830 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	3310      	adds	r3, #16
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	4611      	mov	r1, r2
 800c806:	4618      	mov	r0, r3
 800c808:	f001 f980 	bl	800db0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c80c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c80e:	f000 fca4 	bl	800d15a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c812:	f000 ff85 	bl	800d720 <xTaskResumeAll>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f47f af7c 	bne.w	800c716 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c81e:	4b0c      	ldr	r3, [pc, #48]	; (800c850 <xQueueGenericSend+0x1f0>)
 800c820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	f3bf 8f4f 	dsb	sy
 800c82a:	f3bf 8f6f 	isb	sy
 800c82e:	e772      	b.n	800c716 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c832:	f000 fc92 	bl	800d15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c836:	f000 ff73 	bl	800d720 <xTaskResumeAll>
 800c83a:	e76c      	b.n	800c716 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c83c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c83e:	f000 fc8c 	bl	800d15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c842:	f000 ff6d 	bl	800d720 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3738      	adds	r7, #56	; 0x38
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	e000ed04 	.word	0xe000ed04

0800c854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b08e      	sub	sp, #56	; 0x38
 800c858:	af00      	add	r7, sp, #0
 800c85a:	60f8      	str	r0, [r7, #12]
 800c85c:	60b9      	str	r1, [r7, #8]
 800c85e:	607a      	str	r2, [r7, #4]
 800c860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d109      	bne.n	800c880 <xQueueGenericSendFromISR+0x2c>
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	627b      	str	r3, [r7, #36]	; 0x24
 800c87e:	e7fe      	b.n	800c87e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d103      	bne.n	800c88e <xQueueGenericSendFromISR+0x3a>
 800c886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d101      	bne.n	800c892 <xQueueGenericSendFromISR+0x3e>
 800c88e:	2301      	movs	r3, #1
 800c890:	e000      	b.n	800c894 <xQueueGenericSendFromISR+0x40>
 800c892:	2300      	movs	r3, #0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d109      	bne.n	800c8ac <xQueueGenericSendFromISR+0x58>
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	f383 8811 	msr	BASEPRI, r3
 800c8a0:	f3bf 8f6f 	isb	sy
 800c8a4:	f3bf 8f4f 	dsb	sy
 800c8a8:	623b      	str	r3, [r7, #32]
 800c8aa:	e7fe      	b.n	800c8aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d103      	bne.n	800c8ba <xQueueGenericSendFromISR+0x66>
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d101      	bne.n	800c8be <xQueueGenericSendFromISR+0x6a>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e000      	b.n	800c8c0 <xQueueGenericSendFromISR+0x6c>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d109      	bne.n	800c8d8 <xQueueGenericSendFromISR+0x84>
 800c8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c8:	f383 8811 	msr	BASEPRI, r3
 800c8cc:	f3bf 8f6f 	isb	sy
 800c8d0:	f3bf 8f4f 	dsb	sy
 800c8d4:	61fb      	str	r3, [r7, #28]
 800c8d6:	e7fe      	b.n	800c8d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8d8:	f001 ff2c 	bl	800e734 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c8dc:	f3ef 8211 	mrs	r2, BASEPRI
 800c8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	61ba      	str	r2, [r7, #24]
 800c8f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c8f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c900:	429a      	cmp	r2, r3
 800c902:	d302      	bcc.n	800c90a <xQueueGenericSendFromISR+0xb6>
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d12c      	bne.n	800c964 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c910:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	68b9      	ldr	r1, [r7, #8]
 800c918:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c91a:	f000 fb8e 	bl	800d03a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c91e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c926:	d112      	bne.n	800c94e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d016      	beq.n	800c95e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c932:	3324      	adds	r3, #36	; 0x24
 800c934:	4618      	mov	r0, r3
 800c936:	f001 f90d 	bl	800db54 <xTaskRemoveFromEventList>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00e      	beq.n	800c95e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00b      	beq.n	800c95e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2201      	movs	r2, #1
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	e007      	b.n	800c95e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c94e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c952:	3301      	adds	r3, #1
 800c954:	b2db      	uxtb	r3, r3
 800c956:	b25a      	sxtb	r2, r3
 800c958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c95e:	2301      	movs	r3, #1
 800c960:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c962:	e001      	b.n	800c968 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c964:	2300      	movs	r3, #0
 800c966:	637b      	str	r3, [r7, #52]	; 0x34
 800c968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c974:	4618      	mov	r0, r3
 800c976:	3738      	adds	r7, #56	; 0x38
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08e      	sub	sp, #56	; 0x38
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
 800c984:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d109      	bne.n	800c9a4 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	623b      	str	r3, [r7, #32]
 800c9a2:	e7fe      	b.n	800c9a2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d009      	beq.n	800c9c0 <xQueueGiveFromISR+0x44>
 800c9ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b0:	f383 8811 	msr	BASEPRI, r3
 800c9b4:	f3bf 8f6f 	isb	sy
 800c9b8:	f3bf 8f4f 	dsb	sy
 800c9bc:	61fb      	str	r3, [r7, #28]
 800c9be:	e7fe      	b.n	800c9be <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <xQueueGiveFromISR+0x54>
 800c9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d101      	bne.n	800c9d4 <xQueueGiveFromISR+0x58>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e000      	b.n	800c9d6 <xQueueGiveFromISR+0x5a>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d109      	bne.n	800c9ee <xQueueGiveFromISR+0x72>
 800c9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	61bb      	str	r3, [r7, #24]
 800c9ec:	e7fe      	b.n	800c9ec <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c9ee:	f001 fea1 	bl	800e734 <vPortValidateInterruptPriority>
	__asm volatile
 800c9f2:	f3ef 8211 	mrs	r2, BASEPRI
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	617a      	str	r2, [r7, #20]
 800ca08:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ca0a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca12:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ca14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d22b      	bcs.n	800ca76 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2a:	1c5a      	adds	r2, r3, #1
 800ca2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca2e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca38:	d112      	bne.n	800ca60 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d016      	beq.n	800ca70 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	3324      	adds	r3, #36	; 0x24
 800ca46:	4618      	mov	r0, r3
 800ca48:	f001 f884 	bl	800db54 <xTaskRemoveFromEventList>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d00e      	beq.n	800ca70 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d00b      	beq.n	800ca70 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	601a      	str	r2, [r3, #0]
 800ca5e:	e007      	b.n	800ca70 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca64:	3301      	adds	r3, #1
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	b25a      	sxtb	r2, r3
 800ca6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca70:	2301      	movs	r3, #1
 800ca72:	637b      	str	r3, [r7, #52]	; 0x34
 800ca74:	e001      	b.n	800ca7a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca76:	2300      	movs	r3, #0
 800ca78:	637b      	str	r3, [r7, #52]	; 0x34
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ca84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3738      	adds	r7, #56	; 0x38
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
	...

0800ca90 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b08c      	sub	sp, #48	; 0x30
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800caa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d109      	bne.n	800cabe <xQueueReceive+0x2e>
	__asm volatile
 800caaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caae:	f383 8811 	msr	BASEPRI, r3
 800cab2:	f3bf 8f6f 	isb	sy
 800cab6:	f3bf 8f4f 	dsb	sy
 800caba:	623b      	str	r3, [r7, #32]
 800cabc:	e7fe      	b.n	800cabc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d103      	bne.n	800cacc <xQueueReceive+0x3c>
 800cac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d101      	bne.n	800cad0 <xQueueReceive+0x40>
 800cacc:	2301      	movs	r3, #1
 800cace:	e000      	b.n	800cad2 <xQueueReceive+0x42>
 800cad0:	2300      	movs	r3, #0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d109      	bne.n	800caea <xQueueReceive+0x5a>
 800cad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cada:	f383 8811 	msr	BASEPRI, r3
 800cade:	f3bf 8f6f 	isb	sy
 800cae2:	f3bf 8f4f 	dsb	sy
 800cae6:	61fb      	str	r3, [r7, #28]
 800cae8:	e7fe      	b.n	800cae8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800caea:	f001 f9e9 	bl	800dec0 <xTaskGetSchedulerState>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d102      	bne.n	800cafa <xQueueReceive+0x6a>
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d101      	bne.n	800cafe <xQueueReceive+0x6e>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <xQueueReceive+0x70>
 800cafe:	2300      	movs	r3, #0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d109      	bne.n	800cb18 <xQueueReceive+0x88>
 800cb04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	61bb      	str	r3, [r7, #24]
 800cb16:	e7fe      	b.n	800cb16 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb18:	f001 fd30 	bl	800e57c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb20:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d01f      	beq.n	800cb68 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb28:	68b9      	ldr	r1, [r7, #8]
 800cb2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb2c:	f000 faef 	bl	800d10e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb32:	1e5a      	subs	r2, r3, #1
 800cb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb36:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb3a:	691b      	ldr	r3, [r3, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00f      	beq.n	800cb60 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb42:	3310      	adds	r3, #16
 800cb44:	4618      	mov	r0, r3
 800cb46:	f001 f805 	bl	800db54 <xTaskRemoveFromEventList>
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d007      	beq.n	800cb60 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb50:	4b3c      	ldr	r3, [pc, #240]	; (800cc44 <xQueueReceive+0x1b4>)
 800cb52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb56:	601a      	str	r2, [r3, #0]
 800cb58:	f3bf 8f4f 	dsb	sy
 800cb5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb60:	f001 fd3a 	bl	800e5d8 <vPortExitCritical>
				return pdPASS;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e069      	b.n	800cc3c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d103      	bne.n	800cb76 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb6e:	f001 fd33 	bl	800e5d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb72:	2300      	movs	r3, #0
 800cb74:	e062      	b.n	800cc3c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d106      	bne.n	800cb8a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cb7c:	f107 0310 	add.w	r3, r7, #16
 800cb80:	4618      	mov	r0, r3
 800cb82:	f001 f849 	bl	800dc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cb86:	2301      	movs	r3, #1
 800cb88:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cb8a:	f001 fd25 	bl	800e5d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cb8e:	f000 fdb9 	bl	800d704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cb92:	f001 fcf3 	bl	800e57c <vPortEnterCritical>
 800cb96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb9c:	b25b      	sxtb	r3, r3
 800cb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cba2:	d103      	bne.n	800cbac <xQueueReceive+0x11c>
 800cba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbb2:	b25b      	sxtb	r3, r3
 800cbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbb8:	d103      	bne.n	800cbc2 <xQueueReceive+0x132>
 800cbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbc2:	f001 fd09 	bl	800e5d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbc6:	1d3a      	adds	r2, r7, #4
 800cbc8:	f107 0310 	add.w	r3, r7, #16
 800cbcc:	4611      	mov	r1, r2
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f001 f838 	bl	800dc44 <xTaskCheckForTimeOut>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d123      	bne.n	800cc22 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cbda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbdc:	f000 fb0f 	bl	800d1fe <prvIsQueueEmpty>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d017      	beq.n	800cc16 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cbe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe8:	3324      	adds	r3, #36	; 0x24
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 ff8c 	bl	800db0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cbf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cbf6:	f000 fab0 	bl	800d15a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cbfa:	f000 fd91 	bl	800d720 <xTaskResumeAll>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d189      	bne.n	800cb18 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800cc04:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <xQueueReceive+0x1b4>)
 800cc06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	f3bf 8f4f 	dsb	sy
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	e780      	b.n	800cb18 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cc16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc18:	f000 fa9f 	bl	800d15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc1c:	f000 fd80 	bl	800d720 <xTaskResumeAll>
 800cc20:	e77a      	b.n	800cb18 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc24:	f000 fa99 	bl	800d15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc28:	f000 fd7a 	bl	800d720 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc2e:	f000 fae6 	bl	800d1fe <prvIsQueueEmpty>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	f43f af6f 	beq.w	800cb18 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3730      	adds	r7, #48	; 0x30
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	e000ed04 	.word	0xe000ed04

0800cc48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b08e      	sub	sp, #56	; 0x38
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc52:	2300      	movs	r3, #0
 800cc54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d109      	bne.n	800cc78 <xQueueSemaphoreTake+0x30>
 800cc64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc68:	f383 8811 	msr	BASEPRI, r3
 800cc6c:	f3bf 8f6f 	isb	sy
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	623b      	str	r3, [r7, #32]
 800cc76:	e7fe      	b.n	800cc76 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d009      	beq.n	800cc94 <xQueueSemaphoreTake+0x4c>
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	61fb      	str	r3, [r7, #28]
 800cc92:	e7fe      	b.n	800cc92 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc94:	f001 f914 	bl	800dec0 <xTaskGetSchedulerState>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d102      	bne.n	800cca4 <xQueueSemaphoreTake+0x5c>
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d101      	bne.n	800cca8 <xQueueSemaphoreTake+0x60>
 800cca4:	2301      	movs	r3, #1
 800cca6:	e000      	b.n	800ccaa <xQueueSemaphoreTake+0x62>
 800cca8:	2300      	movs	r3, #0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d109      	bne.n	800ccc2 <xQueueSemaphoreTake+0x7a>
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	61bb      	str	r3, [r7, #24]
 800ccc0:	e7fe      	b.n	800ccc0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ccc2:	f001 fc5b 	bl	800e57c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ccc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d024      	beq.n	800cd1c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	1e5a      	subs	r2, r3, #1
 800ccd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d104      	bne.n	800ccec <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cce2:	f001 faa7 	bl	800e234 <pvTaskIncrementMutexHeldCount>
 800cce6:	4602      	mov	r2, r0
 800cce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccea:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d00f      	beq.n	800cd14 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf6:	3310      	adds	r3, #16
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 ff2b 	bl	800db54 <xTaskRemoveFromEventList>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d007      	beq.n	800cd14 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd04:	4b53      	ldr	r3, [pc, #332]	; (800ce54 <xQueueSemaphoreTake+0x20c>)
 800cd06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd14:	f001 fc60 	bl	800e5d8 <vPortExitCritical>
				return pdPASS;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e096      	b.n	800ce4a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d110      	bne.n	800cd44 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d009      	beq.n	800cd3c <xQueueSemaphoreTake+0xf4>
 800cd28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd2c:	f383 8811 	msr	BASEPRI, r3
 800cd30:	f3bf 8f6f 	isb	sy
 800cd34:	f3bf 8f4f 	dsb	sy
 800cd38:	617b      	str	r3, [r7, #20]
 800cd3a:	e7fe      	b.n	800cd3a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cd3c:	f001 fc4c 	bl	800e5d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd40:	2300      	movs	r3, #0
 800cd42:	e082      	b.n	800ce4a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d106      	bne.n	800cd58 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd4a:	f107 030c 	add.w	r3, r7, #12
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 ff62 	bl	800dc18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd54:	2301      	movs	r3, #1
 800cd56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd58:	f001 fc3e 	bl	800e5d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd5c:	f000 fcd2 	bl	800d704 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd60:	f001 fc0c 	bl	800e57c <vPortEnterCritical>
 800cd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd6a:	b25b      	sxtb	r3, r3
 800cd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd70:	d103      	bne.n	800cd7a <xQueueSemaphoreTake+0x132>
 800cd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd80:	b25b      	sxtb	r3, r3
 800cd82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd86:	d103      	bne.n	800cd90 <xQueueSemaphoreTake+0x148>
 800cd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd90:	f001 fc22 	bl	800e5d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd94:	463a      	mov	r2, r7
 800cd96:	f107 030c 	add.w	r3, r7, #12
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 ff51 	bl	800dc44 <xTaskCheckForTimeOut>
 800cda2:	4603      	mov	r3, r0
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d132      	bne.n	800ce0e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cda8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdaa:	f000 fa28 	bl	800d1fe <prvIsQueueEmpty>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d026      	beq.n	800ce02 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d109      	bne.n	800cdd0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800cdbc:	f001 fbde 	bl	800e57c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f001 f899 	bl	800defc <xTaskPriorityInherit>
 800cdca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cdcc:	f001 fc04 	bl	800e5d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	3324      	adds	r3, #36	; 0x24
 800cdd4:	683a      	ldr	r2, [r7, #0]
 800cdd6:	4611      	mov	r1, r2
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 fe97 	bl	800db0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cdde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cde0:	f000 f9bb 	bl	800d15a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cde4:	f000 fc9c 	bl	800d720 <xTaskResumeAll>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	f47f af69 	bne.w	800ccc2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800cdf0:	4b18      	ldr	r3, [pc, #96]	; (800ce54 <xQueueSemaphoreTake+0x20c>)
 800cdf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	e75f      	b.n	800ccc2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ce02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce04:	f000 f9a9 	bl	800d15a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce08:	f000 fc8a 	bl	800d720 <xTaskResumeAll>
 800ce0c:	e759      	b.n	800ccc2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ce0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce10:	f000 f9a3 	bl	800d15a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce14:	f000 fc84 	bl	800d720 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce1a:	f000 f9f0 	bl	800d1fe <prvIsQueueEmpty>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	f43f af4e 	beq.w	800ccc2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ce26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00d      	beq.n	800ce48 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ce2c:	f001 fba6 	bl	800e57c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ce30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce32:	f000 f8ea 	bl	800d00a <prvGetDisinheritPriorityAfterTimeout>
 800ce36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f001 f960 	bl	800e104 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ce44:	f001 fbc8 	bl	800e5d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3738      	adds	r7, #56	; 0x38
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	e000ed04 	.word	0xe000ed04

0800ce58 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b08e      	sub	sp, #56	; 0x38
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d109      	bne.n	800ce82 <xQueueReceiveFromISR+0x2a>
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	623b      	str	r3, [r7, #32]
 800ce80:	e7fe      	b.n	800ce80 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d103      	bne.n	800ce90 <xQueueReceiveFromISR+0x38>
 800ce88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <xQueueReceiveFromISR+0x3c>
 800ce90:	2301      	movs	r3, #1
 800ce92:	e000      	b.n	800ce96 <xQueueReceiveFromISR+0x3e>
 800ce94:	2300      	movs	r3, #0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d109      	bne.n	800ceae <xQueueReceiveFromISR+0x56>
 800ce9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9e:	f383 8811 	msr	BASEPRI, r3
 800cea2:	f3bf 8f6f 	isb	sy
 800cea6:	f3bf 8f4f 	dsb	sy
 800ceaa:	61fb      	str	r3, [r7, #28]
 800ceac:	e7fe      	b.n	800ceac <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ceae:	f001 fc41 	bl	800e734 <vPortValidateInterruptPriority>
	__asm volatile
 800ceb2:	f3ef 8211 	mrs	r2, BASEPRI
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	f383 8811 	msr	BASEPRI, r3
 800cebe:	f3bf 8f6f 	isb	sy
 800cec2:	f3bf 8f4f 	dsb	sy
 800cec6:	61ba      	str	r2, [r7, #24]
 800cec8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ceca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cecc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d02f      	beq.n	800cf3a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ceda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cedc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cee4:	68b9      	ldr	r1, [r7, #8]
 800cee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cee8:	f000 f911 	bl	800d10e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ceec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceee:	1e5a      	subs	r2, r3, #1
 800cef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefc:	d112      	bne.n	800cf24 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d016      	beq.n	800cf34 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	3310      	adds	r3, #16
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fe22 	bl	800db54 <xTaskRemoveFromEventList>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00e      	beq.n	800cf34 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d00b      	beq.n	800cf34 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2201      	movs	r2, #1
 800cf20:	601a      	str	r2, [r3, #0]
 800cf22:	e007      	b.n	800cf34 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cf24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf28:	3301      	adds	r3, #1
 800cf2a:	b2db      	uxtb	r3, r3
 800cf2c:	b25a      	sxtb	r2, r3
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cf34:	2301      	movs	r3, #1
 800cf36:	637b      	str	r3, [r7, #52]	; 0x34
 800cf38:	e001      	b.n	800cf3e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf40:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3738      	adds	r7, #56	; 0x38
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d109      	bne.n	800cf74 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	60bb      	str	r3, [r7, #8]
 800cf72:	e7fe      	b.n	800cf72 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800cf74:	f001 fb02 	bl	800e57c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800cf7e:	f001 fb2b 	bl	800e5d8 <vPortExitCritical>

	return uxReturn;
 800cf82:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cf84:	4618      	mov	r0, r3
 800cf86:	3710      	adds	r7, #16
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d109      	bne.n	800cfb2 <uxQueueMessagesWaitingFromISR+0x26>
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	e7fe      	b.n	800cfb0 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800cfb8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cfba:	4618      	mov	r0, r3
 800cfbc:	371c      	adds	r7, #28
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr

0800cfc6 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cfc6:	b580      	push	{r7, lr}
 800cfc8:	b084      	sub	sp, #16
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d109      	bne.n	800cfec <vQueueDelete+0x26>
 800cfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	60bb      	str	r3, [r7, #8]
 800cfea:	e7fe      	b.n	800cfea <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cfec:	68f8      	ldr	r0, [r7, #12]
 800cfee:	f000 f935 	bl	800d25c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d102      	bne.n	800d002 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f001 fc99 	bl	800e934 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d002:	bf00      	nop
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d00a:	b480      	push	{r7}
 800d00c:	b085      	sub	sp, #20
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d016:	2b00      	cmp	r3, #0
 800d018:	d006      	beq.n	800d028 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f1c3 0307 	rsb	r3, r3, #7
 800d024:	60fb      	str	r3, [r7, #12]
 800d026:	e001      	b.n	800d02c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d028:	2300      	movs	r3, #0
 800d02a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d02c:	68fb      	ldr	r3, [r7, #12]
	}
 800d02e:	4618      	mov	r0, r3
 800d030:	3714      	adds	r7, #20
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b086      	sub	sp, #24
 800d03e:	af00      	add	r7, sp, #0
 800d040:	60f8      	str	r0, [r7, #12]
 800d042:	60b9      	str	r1, [r7, #8]
 800d044:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d046:	2300      	movs	r3, #0
 800d048:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d054:	2b00      	cmp	r3, #0
 800d056:	d10d      	bne.n	800d074 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d14d      	bne.n	800d0fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	4618      	mov	r0, r3
 800d066:	f000 ffc9 	bl	800dffc <xTaskPriorityDisinherit>
 800d06a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	609a      	str	r2, [r3, #8]
 800d072:	e043      	b.n	800d0fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d119      	bne.n	800d0ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6858      	ldr	r0, [r3, #4]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d082:	461a      	mov	r2, r3
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	f00f fd8c 	bl	801cba2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	685a      	ldr	r2, [r3, #4]
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d092:	441a      	add	r2, r3
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	685a      	ldr	r2, [r3, #4]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	689b      	ldr	r3, [r3, #8]
 800d0a0:	429a      	cmp	r2, r3
 800d0a2:	d32b      	bcc.n	800d0fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	605a      	str	r2, [r3, #4]
 800d0ac:	e026      	b.n	800d0fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	68d8      	ldr	r0, [r3, #12]
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	68b9      	ldr	r1, [r7, #8]
 800d0ba:	f00f fd72 	bl	801cba2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	68da      	ldr	r2, [r3, #12]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	425b      	negs	r3, r3
 800d0c8:	441a      	add	r2, r3
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d207      	bcs.n	800d0ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	689a      	ldr	r2, [r3, #8]
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e2:	425b      	negs	r3, r3
 800d0e4:	441a      	add	r2, r3
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2b02      	cmp	r3, #2
 800d0ee:	d105      	bne.n	800d0fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d002      	beq.n	800d0fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0f6:	693b      	ldr	r3, [r7, #16]
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	1c5a      	adds	r2, r3, #1
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d104:	697b      	ldr	r3, [r7, #20]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b082      	sub	sp, #8
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
 800d116:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d018      	beq.n	800d152 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	68da      	ldr	r2, [r3, #12]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d128:	441a      	add	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	68da      	ldr	r2, [r3, #12]
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	689b      	ldr	r3, [r3, #8]
 800d136:	429a      	cmp	r2, r3
 800d138:	d303      	bcc.n	800d142 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	68d9      	ldr	r1, [r3, #12]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d14a:	461a      	mov	r2, r3
 800d14c:	6838      	ldr	r0, [r7, #0]
 800d14e:	f00f fd28 	bl	801cba2 <memcpy>
	}
}
 800d152:	bf00      	nop
 800d154:	3708      	adds	r7, #8
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b084      	sub	sp, #16
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d162:	f001 fa0b 	bl	800e57c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d16c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d16e:	e011      	b.n	800d194 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d174:	2b00      	cmp	r3, #0
 800d176:	d012      	beq.n	800d19e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3324      	adds	r3, #36	; 0x24
 800d17c:	4618      	mov	r0, r3
 800d17e:	f000 fce9 	bl	800db54 <xTaskRemoveFromEventList>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d001      	beq.n	800d18c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d188:	f000 fdbc 	bl	800dd04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
 800d18e:	3b01      	subs	r3, #1
 800d190:	b2db      	uxtb	r3, r3
 800d192:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	dce9      	bgt.n	800d170 <prvUnlockQueue+0x16>
 800d19c:	e000      	b.n	800d1a0 <prvUnlockQueue+0x46>
					break;
 800d19e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	22ff      	movs	r2, #255	; 0xff
 800d1a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d1a8:	f001 fa16 	bl	800e5d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d1ac:	f001 f9e6 	bl	800e57c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d1b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1b8:	e011      	b.n	800d1de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d012      	beq.n	800d1e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	3310      	adds	r3, #16
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f000 fcc4 	bl	800db54 <xTaskRemoveFromEventList>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d001      	beq.n	800d1d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d1d2:	f000 fd97 	bl	800dd04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d1d6:	7bbb      	ldrb	r3, [r7, #14]
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	dce9      	bgt.n	800d1ba <prvUnlockQueue+0x60>
 800d1e6:	e000      	b.n	800d1ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d1e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	22ff      	movs	r2, #255	; 0xff
 800d1ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d1f2:	f001 f9f1 	bl	800e5d8 <vPortExitCritical>
}
 800d1f6:	bf00      	nop
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}

0800d1fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1fe:	b580      	push	{r7, lr}
 800d200:	b084      	sub	sp, #16
 800d202:	af00      	add	r7, sp, #0
 800d204:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d206:	f001 f9b9 	bl	800e57c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d102      	bne.n	800d218 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d212:	2301      	movs	r3, #1
 800d214:	60fb      	str	r3, [r7, #12]
 800d216:	e001      	b.n	800d21c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d218:	2300      	movs	r3, #0
 800d21a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d21c:	f001 f9dc 	bl	800e5d8 <vPortExitCritical>

	return xReturn;
 800d220:	68fb      	ldr	r3, [r7, #12]
}
 800d222:	4618      	mov	r0, r3
 800d224:	3710      	adds	r7, #16
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b084      	sub	sp, #16
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d232:	f001 f9a3 	bl	800e57c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d23e:	429a      	cmp	r2, r3
 800d240:	d102      	bne.n	800d248 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d242:	2301      	movs	r3, #1
 800d244:	60fb      	str	r3, [r7, #12]
 800d246:	e001      	b.n	800d24c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d248:	2300      	movs	r3, #0
 800d24a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d24c:	f001 f9c4 	bl	800e5d8 <vPortExitCritical>

	return xReturn;
 800d250:	68fb      	ldr	r3, [r7, #12]
}
 800d252:	4618      	mov	r0, r3
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
	...

0800d25c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d264:	2300      	movs	r3, #0
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	e016      	b.n	800d298 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d26a:	4a10      	ldr	r2, [pc, #64]	; (800d2ac <vQueueUnregisterQueue+0x50>)
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	00db      	lsls	r3, r3, #3
 800d270:	4413      	add	r3, r2
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	429a      	cmp	r2, r3
 800d278:	d10b      	bne.n	800d292 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d27a:	4a0c      	ldr	r2, [pc, #48]	; (800d2ac <vQueueUnregisterQueue+0x50>)
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2100      	movs	r1, #0
 800d280:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d284:	4a09      	ldr	r2, [pc, #36]	; (800d2ac <vQueueUnregisterQueue+0x50>)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	00db      	lsls	r3, r3, #3
 800d28a:	4413      	add	r3, r2
 800d28c:	2200      	movs	r2, #0
 800d28e:	605a      	str	r2, [r3, #4]
				break;
 800d290:	e005      	b.n	800d29e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	3301      	adds	r3, #1
 800d296:	60fb      	str	r3, [r7, #12]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2b07      	cmp	r3, #7
 800d29c:	d9e5      	bls.n	800d26a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d29e:	bf00      	nop
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	20008cb0 	.word	0x20008cb0

0800d2b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b08e      	sub	sp, #56	; 0x38
 800d2b4:	af04      	add	r7, sp, #16
 800d2b6:	60f8      	str	r0, [r7, #12]
 800d2b8:	60b9      	str	r1, [r7, #8]
 800d2ba:	607a      	str	r2, [r7, #4]
 800d2bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d109      	bne.n	800d2d8 <xTaskCreateStatic+0x28>
 800d2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2c8:	f383 8811 	msr	BASEPRI, r3
 800d2cc:	f3bf 8f6f 	isb	sy
 800d2d0:	f3bf 8f4f 	dsb	sy
 800d2d4:	623b      	str	r3, [r7, #32]
 800d2d6:	e7fe      	b.n	800d2d6 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d109      	bne.n	800d2f2 <xTaskCreateStatic+0x42>
 800d2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2e2:	f383 8811 	msr	BASEPRI, r3
 800d2e6:	f3bf 8f6f 	isb	sy
 800d2ea:	f3bf 8f4f 	dsb	sy
 800d2ee:	61fb      	str	r3, [r7, #28]
 800d2f0:	e7fe      	b.n	800d2f0 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d2f2:	2354      	movs	r3, #84	; 0x54
 800d2f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	2b54      	cmp	r3, #84	; 0x54
 800d2fa:	d009      	beq.n	800d310 <xTaskCreateStatic+0x60>
 800d2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d300:	f383 8811 	msr	BASEPRI, r3
 800d304:	f3bf 8f6f 	isb	sy
 800d308:	f3bf 8f4f 	dsb	sy
 800d30c:	61bb      	str	r3, [r7, #24]
 800d30e:	e7fe      	b.n	800d30e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d310:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	2b00      	cmp	r3, #0
 800d316:	d01e      	beq.n	800d356 <xTaskCreateStatic+0xa6>
 800d318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d01b      	beq.n	800d356 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d320:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d324:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d326:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	2202      	movs	r2, #2
 800d32c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d330:	2300      	movs	r3, #0
 800d332:	9303      	str	r3, [sp, #12]
 800d334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d336:	9302      	str	r3, [sp, #8]
 800d338:	f107 0314 	add.w	r3, r7, #20
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d340:	9300      	str	r3, [sp, #0]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	68b9      	ldr	r1, [r7, #8]
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f850 	bl	800d3ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d34e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d350:	f000 f8dc 	bl	800d50c <prvAddNewTaskToReadyList>
 800d354:	e001      	b.n	800d35a <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800d356:	2300      	movs	r3, #0
 800d358:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d35a:	697b      	ldr	r3, [r7, #20]
	}
 800d35c:	4618      	mov	r0, r3
 800d35e:	3728      	adds	r7, #40	; 0x28
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08c      	sub	sp, #48	; 0x30
 800d368:	af04      	add	r7, sp, #16
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	603b      	str	r3, [r7, #0]
 800d370:	4613      	mov	r3, r2
 800d372:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d374:	88fb      	ldrh	r3, [r7, #6]
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	4618      	mov	r0, r3
 800d37a:	f001 fa19 	bl	800e7b0 <pvPortMalloc>
 800d37e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00e      	beq.n	800d3a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d386:	2054      	movs	r0, #84	; 0x54
 800d388:	f001 fa12 	bl	800e7b0 <pvPortMalloc>
 800d38c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d38e:	69fb      	ldr	r3, [r7, #28]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d003      	beq.n	800d39c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	697a      	ldr	r2, [r7, #20]
 800d398:	631a      	str	r2, [r3, #48]	; 0x30
 800d39a:	e005      	b.n	800d3a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d39c:	6978      	ldr	r0, [r7, #20]
 800d39e:	f001 fac9 	bl	800e934 <vPortFree>
 800d3a2:	e001      	b.n	800d3a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d017      	beq.n	800d3de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d3b6:	88fa      	ldrh	r2, [r7, #6]
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	9303      	str	r3, [sp, #12]
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	9302      	str	r3, [sp, #8]
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	9301      	str	r3, [sp, #4]
 800d3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c6:	9300      	str	r3, [sp, #0]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	68b9      	ldr	r1, [r7, #8]
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f000 f80e 	bl	800d3ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3d2:	69f8      	ldr	r0, [r7, #28]
 800d3d4:	f000 f89a 	bl	800d50c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	61bb      	str	r3, [r7, #24]
 800d3dc:	e002      	b.n	800d3e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d3de:	f04f 33ff 	mov.w	r3, #4294967295
 800d3e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d3e4:	69bb      	ldr	r3, [r7, #24]
	}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3720      	adds	r7, #32
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b088      	sub	sp, #32
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	607a      	str	r2, [r7, #4]
 800d3fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	461a      	mov	r2, r3
 800d406:	21a5      	movs	r1, #165	; 0xa5
 800d408:	f00f fbd6 	bl	801cbb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d416:	440b      	add	r3, r1
 800d418:	009b      	lsls	r3, r3, #2
 800d41a:	4413      	add	r3, r2
 800d41c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d41e:	69bb      	ldr	r3, [r7, #24]
 800d420:	f023 0307 	bic.w	r3, r3, #7
 800d424:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	f003 0307 	and.w	r3, r3, #7
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d009      	beq.n	800d444 <prvInitialiseNewTask+0x56>
 800d430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d434:	f383 8811 	msr	BASEPRI, r3
 800d438:	f3bf 8f6f 	isb	sy
 800d43c:	f3bf 8f4f 	dsb	sy
 800d440:	617b      	str	r3, [r7, #20]
 800d442:	e7fe      	b.n	800d442 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d01f      	beq.n	800d48a <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d44a:	2300      	movs	r3, #0
 800d44c:	61fb      	str	r3, [r7, #28]
 800d44e:	e012      	b.n	800d476 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d450:	68ba      	ldr	r2, [r7, #8]
 800d452:	69fb      	ldr	r3, [r7, #28]
 800d454:	4413      	add	r3, r2
 800d456:	7819      	ldrb	r1, [r3, #0]
 800d458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	4413      	add	r3, r2
 800d45e:	3334      	adds	r3, #52	; 0x34
 800d460:	460a      	mov	r2, r1
 800d462:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	4413      	add	r3, r2
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d006      	beq.n	800d47e <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d470:	69fb      	ldr	r3, [r7, #28]
 800d472:	3301      	adds	r3, #1
 800d474:	61fb      	str	r3, [r7, #28]
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	2b0f      	cmp	r3, #15
 800d47a:	d9e9      	bls.n	800d450 <prvInitialiseNewTask+0x62>
 800d47c:	e000      	b.n	800d480 <prvInitialiseNewTask+0x92>
			{
				break;
 800d47e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d482:	2200      	movs	r2, #0
 800d484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d488:	e003      	b.n	800d492 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d48c:	2200      	movs	r2, #0
 800d48e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	2b06      	cmp	r3, #6
 800d496:	d901      	bls.n	800d49c <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d498:	2306      	movs	r3, #6
 800d49a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe feb9 	bl	800c22a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	3318      	adds	r3, #24
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fe feb4 	bl	800c22a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ca:	f1c3 0207 	rsb	r2, r3, #7
 800d4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	2200      	movs	r2, #0
 800d4dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4e6:	683a      	ldr	r2, [r7, #0]
 800d4e8:	68f9      	ldr	r1, [r7, #12]
 800d4ea:	69b8      	ldr	r0, [r7, #24]
 800d4ec:	f000 ff1c 	bl	800e328 <pxPortInitialiseStack>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d500:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d502:	bf00      	nop
 800d504:	3720      	adds	r7, #32
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}
	...

0800d50c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d514:	f001 f832 	bl	800e57c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d518:	4b2a      	ldr	r3, [pc, #168]	; (800d5c4 <prvAddNewTaskToReadyList+0xb8>)
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	3301      	adds	r3, #1
 800d51e:	4a29      	ldr	r2, [pc, #164]	; (800d5c4 <prvAddNewTaskToReadyList+0xb8>)
 800d520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d522:	4b29      	ldr	r3, [pc, #164]	; (800d5c8 <prvAddNewTaskToReadyList+0xbc>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d109      	bne.n	800d53e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d52a:	4a27      	ldr	r2, [pc, #156]	; (800d5c8 <prvAddNewTaskToReadyList+0xbc>)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d530:	4b24      	ldr	r3, [pc, #144]	; (800d5c4 <prvAddNewTaskToReadyList+0xb8>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d110      	bne.n	800d55a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d538:	f000 fc08 	bl	800dd4c <prvInitialiseTaskLists>
 800d53c:	e00d      	b.n	800d55a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d53e:	4b23      	ldr	r3, [pc, #140]	; (800d5cc <prvAddNewTaskToReadyList+0xc0>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d109      	bne.n	800d55a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d546:	4b20      	ldr	r3, [pc, #128]	; (800d5c8 <prvAddNewTaskToReadyList+0xbc>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d550:	429a      	cmp	r2, r3
 800d552:	d802      	bhi.n	800d55a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d554:	4a1c      	ldr	r2, [pc, #112]	; (800d5c8 <prvAddNewTaskToReadyList+0xbc>)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d55a:	4b1d      	ldr	r3, [pc, #116]	; (800d5d0 <prvAddNewTaskToReadyList+0xc4>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3301      	adds	r3, #1
 800d560:	4a1b      	ldr	r2, [pc, #108]	; (800d5d0 <prvAddNewTaskToReadyList+0xc4>)
 800d562:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	2201      	movs	r2, #1
 800d56a:	409a      	lsls	r2, r3
 800d56c:	4b19      	ldr	r3, [pc, #100]	; (800d5d4 <prvAddNewTaskToReadyList+0xc8>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	4313      	orrs	r3, r2
 800d572:	4a18      	ldr	r2, [pc, #96]	; (800d5d4 <prvAddNewTaskToReadyList+0xc8>)
 800d574:	6013      	str	r3, [r2, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d57a:	4613      	mov	r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	4413      	add	r3, r2
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	4a15      	ldr	r2, [pc, #84]	; (800d5d8 <prvAddNewTaskToReadyList+0xcc>)
 800d584:	441a      	add	r2, r3
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	3304      	adds	r3, #4
 800d58a:	4619      	mov	r1, r3
 800d58c:	4610      	mov	r0, r2
 800d58e:	f7fe fe59 	bl	800c244 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d592:	f001 f821 	bl	800e5d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d596:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <prvAddNewTaskToReadyList+0xc0>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00e      	beq.n	800d5bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d59e:	4b0a      	ldr	r3, [pc, #40]	; (800d5c8 <prvAddNewTaskToReadyList+0xbc>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d207      	bcs.n	800d5bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d5ac:	4b0b      	ldr	r3, [pc, #44]	; (800d5dc <prvAddNewTaskToReadyList+0xd0>)
 800d5ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5b2:	601a      	str	r2, [r3, #0]
 800d5b4:	f3bf 8f4f 	dsb	sy
 800d5b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	20000678 	.word	0x20000678
 800d5c8:	20000578 	.word	0x20000578
 800d5cc:	20000684 	.word	0x20000684
 800d5d0:	20000694 	.word	0x20000694
 800d5d4:	20000680 	.word	0x20000680
 800d5d8:	2000057c 	.word	0x2000057c
 800d5dc:	e000ed04 	.word	0xe000ed04

0800d5e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d016      	beq.n	800d620 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d5f2:	4b13      	ldr	r3, [pc, #76]	; (800d640 <vTaskDelay+0x60>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d009      	beq.n	800d60e <vTaskDelay+0x2e>
 800d5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5fe:	f383 8811 	msr	BASEPRI, r3
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	60bb      	str	r3, [r7, #8]
 800d60c:	e7fe      	b.n	800d60c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800d60e:	f000 f879 	bl	800d704 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d612:	2100      	movs	r1, #0
 800d614:	6878      	ldr	r0, [r7, #4]
 800d616:	f000 fe21 	bl	800e25c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d61a:	f000 f881 	bl	800d720 <xTaskResumeAll>
 800d61e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d107      	bne.n	800d636 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800d626:	4b07      	ldr	r3, [pc, #28]	; (800d644 <vTaskDelay+0x64>)
 800d628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d62c:	601a      	str	r2, [r3, #0]
 800d62e:	f3bf 8f4f 	dsb	sy
 800d632:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d636:	bf00      	nop
 800d638:	3710      	adds	r7, #16
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	200006a0 	.word	0x200006a0
 800d644:	e000ed04 	.word	0xe000ed04

0800d648 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08a      	sub	sp, #40	; 0x28
 800d64c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d64e:	2300      	movs	r3, #0
 800d650:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d652:	2300      	movs	r3, #0
 800d654:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d656:	463a      	mov	r2, r7
 800d658:	1d39      	adds	r1, r7, #4
 800d65a:	f107 0308 	add.w	r3, r7, #8
 800d65e:	4618      	mov	r0, r3
 800d660:	f7f3 f836 	bl	80006d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d664:	6839      	ldr	r1, [r7, #0]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	9202      	str	r2, [sp, #8]
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	2300      	movs	r3, #0
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	2300      	movs	r3, #0
 800d674:	460a      	mov	r2, r1
 800d676:	491d      	ldr	r1, [pc, #116]	; (800d6ec <vTaskStartScheduler+0xa4>)
 800d678:	481d      	ldr	r0, [pc, #116]	; (800d6f0 <vTaskStartScheduler+0xa8>)
 800d67a:	f7ff fe19 	bl	800d2b0 <xTaskCreateStatic>
 800d67e:	4602      	mov	r2, r0
 800d680:	4b1c      	ldr	r3, [pc, #112]	; (800d6f4 <vTaskStartScheduler+0xac>)
 800d682:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d684:	4b1b      	ldr	r3, [pc, #108]	; (800d6f4 <vTaskStartScheduler+0xac>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d68c:	2301      	movs	r3, #1
 800d68e:	617b      	str	r3, [r7, #20]
 800d690:	e001      	b.n	800d696 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d692:	2300      	movs	r3, #0
 800d694:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d115      	bne.n	800d6c8 <vTaskStartScheduler+0x80>
 800d69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d6ae:	4b12      	ldr	r3, [pc, #72]	; (800d6f8 <vTaskStartScheduler+0xb0>)
 800d6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d6b6:	4b11      	ldr	r3, [pc, #68]	; (800d6fc <vTaskStartScheduler+0xb4>)
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d6bc:	4b10      	ldr	r3, [pc, #64]	; (800d700 <vTaskStartScheduler+0xb8>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d6c2:	f000 febd 	bl	800e440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d6c6:	e00d      	b.n	800d6e4 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ce:	d109      	bne.n	800d6e4 <vTaskStartScheduler+0x9c>
 800d6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	60fb      	str	r3, [r7, #12]
 800d6e2:	e7fe      	b.n	800d6e2 <vTaskStartScheduler+0x9a>
}
 800d6e4:	bf00      	nop
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	0801db64 	.word	0x0801db64
 800d6f0:	0800dd1d 	.word	0x0800dd1d
 800d6f4:	2000069c 	.word	0x2000069c
 800d6f8:	20000698 	.word	0x20000698
 800d6fc:	20000684 	.word	0x20000684
 800d700:	2000067c 	.word	0x2000067c

0800d704 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d704:	b480      	push	{r7}
 800d706:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d708:	4b04      	ldr	r3, [pc, #16]	; (800d71c <vTaskSuspendAll+0x18>)
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	3301      	adds	r3, #1
 800d70e:	4a03      	ldr	r2, [pc, #12]	; (800d71c <vTaskSuspendAll+0x18>)
 800d710:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d712:	bf00      	nop
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	200006a0 	.word	0x200006a0

0800d720 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d72a:	2300      	movs	r3, #0
 800d72c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d72e:	4b41      	ldr	r3, [pc, #260]	; (800d834 <xTaskResumeAll+0x114>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d109      	bne.n	800d74a <xTaskResumeAll+0x2a>
 800d736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73a:	f383 8811 	msr	BASEPRI, r3
 800d73e:	f3bf 8f6f 	isb	sy
 800d742:	f3bf 8f4f 	dsb	sy
 800d746:	603b      	str	r3, [r7, #0]
 800d748:	e7fe      	b.n	800d748 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d74a:	f000 ff17 	bl	800e57c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d74e:	4b39      	ldr	r3, [pc, #228]	; (800d834 <xTaskResumeAll+0x114>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	3b01      	subs	r3, #1
 800d754:	4a37      	ldr	r2, [pc, #220]	; (800d834 <xTaskResumeAll+0x114>)
 800d756:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d758:	4b36      	ldr	r3, [pc, #216]	; (800d834 <xTaskResumeAll+0x114>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d161      	bne.n	800d824 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d760:	4b35      	ldr	r3, [pc, #212]	; (800d838 <xTaskResumeAll+0x118>)
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d05d      	beq.n	800d824 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d768:	e02e      	b.n	800d7c8 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d76a:	4b34      	ldr	r3, [pc, #208]	; (800d83c <xTaskResumeAll+0x11c>)
 800d76c:	68db      	ldr	r3, [r3, #12]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	3318      	adds	r3, #24
 800d776:	4618      	mov	r0, r3
 800d778:	f7fe fdc1 	bl	800c2fe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	3304      	adds	r3, #4
 800d780:	4618      	mov	r0, r3
 800d782:	f7fe fdbc 	bl	800c2fe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d78a:	2201      	movs	r2, #1
 800d78c:	409a      	lsls	r2, r3
 800d78e:	4b2c      	ldr	r3, [pc, #176]	; (800d840 <xTaskResumeAll+0x120>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4313      	orrs	r3, r2
 800d794:	4a2a      	ldr	r2, [pc, #168]	; (800d840 <xTaskResumeAll+0x120>)
 800d796:	6013      	str	r3, [r2, #0]
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d79c:	4613      	mov	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4413      	add	r3, r2
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	4a27      	ldr	r2, [pc, #156]	; (800d844 <xTaskResumeAll+0x124>)
 800d7a6:	441a      	add	r2, r3
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	4610      	mov	r0, r2
 800d7b0:	f7fe fd48 	bl	800c244 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b8:	4b23      	ldr	r3, [pc, #140]	; (800d848 <xTaskResumeAll+0x128>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d302      	bcc.n	800d7c8 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800d7c2:	4b22      	ldr	r3, [pc, #136]	; (800d84c <xTaskResumeAll+0x12c>)
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7c8:	4b1c      	ldr	r3, [pc, #112]	; (800d83c <xTaskResumeAll+0x11c>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d1cc      	bne.n	800d76a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d7d6:	f000 fb53 	bl	800de80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d7da:	4b1d      	ldr	r3, [pc, #116]	; (800d850 <xTaskResumeAll+0x130>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d010      	beq.n	800d808 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d7e6:	f000 f859 	bl	800d89c <xTaskIncrementTick>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d002      	beq.n	800d7f6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800d7f0:	4b16      	ldr	r3, [pc, #88]	; (800d84c <xTaskResumeAll+0x12c>)
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	3b01      	subs	r3, #1
 800d7fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1f1      	bne.n	800d7e6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800d802:	4b13      	ldr	r3, [pc, #76]	; (800d850 <xTaskResumeAll+0x130>)
 800d804:	2200      	movs	r2, #0
 800d806:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d808:	4b10      	ldr	r3, [pc, #64]	; (800d84c <xTaskResumeAll+0x12c>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d009      	beq.n	800d824 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d814:	4b0f      	ldr	r3, [pc, #60]	; (800d854 <xTaskResumeAll+0x134>)
 800d816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d81a:	601a      	str	r2, [r3, #0]
 800d81c:	f3bf 8f4f 	dsb	sy
 800d820:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d824:	f000 fed8 	bl	800e5d8 <vPortExitCritical>

	return xAlreadyYielded;
 800d828:	68bb      	ldr	r3, [r7, #8]
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}
 800d832:	bf00      	nop
 800d834:	200006a0 	.word	0x200006a0
 800d838:	20000678 	.word	0x20000678
 800d83c:	20000638 	.word	0x20000638
 800d840:	20000680 	.word	0x20000680
 800d844:	2000057c 	.word	0x2000057c
 800d848:	20000578 	.word	0x20000578
 800d84c:	2000068c 	.word	0x2000068c
 800d850:	20000688 	.word	0x20000688
 800d854:	e000ed04 	.word	0xe000ed04

0800d858 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d85e:	4b05      	ldr	r3, [pc, #20]	; (800d874 <xTaskGetTickCount+0x1c>)
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d864:	687b      	ldr	r3, [r7, #4]
}
 800d866:	4618      	mov	r0, r3
 800d868:	370c      	adds	r7, #12
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	2000067c 	.word	0x2000067c

0800d878 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d87e:	f000 ff59 	bl	800e734 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d882:	2300      	movs	r3, #0
 800d884:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d886:	4b04      	ldr	r3, [pc, #16]	; (800d898 <xTaskGetTickCountFromISR+0x20>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d88c:	683b      	ldr	r3, [r7, #0]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	2000067c 	.word	0x2000067c

0800d89c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b086      	sub	sp, #24
 800d8a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8a6:	4b4e      	ldr	r3, [pc, #312]	; (800d9e0 <xTaskIncrementTick+0x144>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f040 8087 	bne.w	800d9be <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d8b0:	4b4c      	ldr	r3, [pc, #304]	; (800d9e4 <xTaskIncrementTick+0x148>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d8b8:	4a4a      	ldr	r2, [pc, #296]	; (800d9e4 <xTaskIncrementTick+0x148>)
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d11f      	bne.n	800d904 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d8c4:	4b48      	ldr	r3, [pc, #288]	; (800d9e8 <xTaskIncrementTick+0x14c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d009      	beq.n	800d8e2 <xTaskIncrementTick+0x46>
 800d8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d2:	f383 8811 	msr	BASEPRI, r3
 800d8d6:	f3bf 8f6f 	isb	sy
 800d8da:	f3bf 8f4f 	dsb	sy
 800d8de:	603b      	str	r3, [r7, #0]
 800d8e0:	e7fe      	b.n	800d8e0 <xTaskIncrementTick+0x44>
 800d8e2:	4b41      	ldr	r3, [pc, #260]	; (800d9e8 <xTaskIncrementTick+0x14c>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	60fb      	str	r3, [r7, #12]
 800d8e8:	4b40      	ldr	r3, [pc, #256]	; (800d9ec <xTaskIncrementTick+0x150>)
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a3e      	ldr	r2, [pc, #248]	; (800d9e8 <xTaskIncrementTick+0x14c>)
 800d8ee:	6013      	str	r3, [r2, #0]
 800d8f0:	4a3e      	ldr	r2, [pc, #248]	; (800d9ec <xTaskIncrementTick+0x150>)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	6013      	str	r3, [r2, #0]
 800d8f6:	4b3e      	ldr	r3, [pc, #248]	; (800d9f0 <xTaskIncrementTick+0x154>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	3301      	adds	r3, #1
 800d8fc:	4a3c      	ldr	r2, [pc, #240]	; (800d9f0 <xTaskIncrementTick+0x154>)
 800d8fe:	6013      	str	r3, [r2, #0]
 800d900:	f000 fabe 	bl	800de80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d904:	4b3b      	ldr	r3, [pc, #236]	; (800d9f4 <xTaskIncrementTick+0x158>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d348      	bcc.n	800d9a0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d90e:	4b36      	ldr	r3, [pc, #216]	; (800d9e8 <xTaskIncrementTick+0x14c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d104      	bne.n	800d922 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d918:	4b36      	ldr	r3, [pc, #216]	; (800d9f4 <xTaskIncrementTick+0x158>)
 800d91a:	f04f 32ff 	mov.w	r2, #4294967295
 800d91e:	601a      	str	r2, [r3, #0]
					break;
 800d920:	e03e      	b.n	800d9a0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d922:	4b31      	ldr	r3, [pc, #196]	; (800d9e8 <xTaskIncrementTick+0x14c>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	68db      	ldr	r3, [r3, #12]
 800d928:	68db      	ldr	r3, [r3, #12]
 800d92a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	685b      	ldr	r3, [r3, #4]
 800d930:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	429a      	cmp	r2, r3
 800d938:	d203      	bcs.n	800d942 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d93a:	4a2e      	ldr	r2, [pc, #184]	; (800d9f4 <xTaskIncrementTick+0x158>)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d940:	e02e      	b.n	800d9a0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	3304      	adds	r3, #4
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe fcd9 	bl	800c2fe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	3318      	adds	r3, #24
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe fcd0 	bl	800c2fe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d962:	2201      	movs	r2, #1
 800d964:	409a      	lsls	r2, r3
 800d966:	4b24      	ldr	r3, [pc, #144]	; (800d9f8 <xTaskIncrementTick+0x15c>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	4a22      	ldr	r2, [pc, #136]	; (800d9f8 <xTaskIncrementTick+0x15c>)
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4a1f      	ldr	r2, [pc, #124]	; (800d9fc <xTaskIncrementTick+0x160>)
 800d97e:	441a      	add	r2, r3
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	3304      	adds	r3, #4
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fe fc5c 	bl	800c244 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d990:	4b1b      	ldr	r3, [pc, #108]	; (800da00 <xTaskIncrementTick+0x164>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d996:	429a      	cmp	r2, r3
 800d998:	d3b9      	bcc.n	800d90e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d99a:	2301      	movs	r3, #1
 800d99c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d99e:	e7b6      	b.n	800d90e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9a0:	4b17      	ldr	r3, [pc, #92]	; (800da00 <xTaskIncrementTick+0x164>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9a6:	4915      	ldr	r1, [pc, #84]	; (800d9fc <xTaskIncrementTick+0x160>)
 800d9a8:	4613      	mov	r3, r2
 800d9aa:	009b      	lsls	r3, r3, #2
 800d9ac:	4413      	add	r3, r2
 800d9ae:	009b      	lsls	r3, r3, #2
 800d9b0:	440b      	add	r3, r1
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b01      	cmp	r3, #1
 800d9b6:	d907      	bls.n	800d9c8 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	e004      	b.n	800d9c8 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d9be:	4b11      	ldr	r3, [pc, #68]	; (800da04 <xTaskIncrementTick+0x168>)
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	4a0f      	ldr	r2, [pc, #60]	; (800da04 <xTaskIncrementTick+0x168>)
 800d9c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d9c8:	4b0f      	ldr	r3, [pc, #60]	; (800da08 <xTaskIncrementTick+0x16c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d9d4:	697b      	ldr	r3, [r7, #20]
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3718      	adds	r7, #24
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	200006a0 	.word	0x200006a0
 800d9e4:	2000067c 	.word	0x2000067c
 800d9e8:	20000630 	.word	0x20000630
 800d9ec:	20000634 	.word	0x20000634
 800d9f0:	20000690 	.word	0x20000690
 800d9f4:	20000698 	.word	0x20000698
 800d9f8:	20000680 	.word	0x20000680
 800d9fc:	2000057c 	.word	0x2000057c
 800da00:	20000578 	.word	0x20000578
 800da04:	20000688 	.word	0x20000688
 800da08:	2000068c 	.word	0x2000068c

0800da0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b088      	sub	sp, #32
 800da10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da12:	4b39      	ldr	r3, [pc, #228]	; (800daf8 <vTaskSwitchContext+0xec>)
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da1a:	4b38      	ldr	r3, [pc, #224]	; (800dafc <vTaskSwitchContext+0xf0>)
 800da1c:	2201      	movs	r2, #1
 800da1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da20:	e065      	b.n	800daee <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 800da22:	4b36      	ldr	r3, [pc, #216]	; (800dafc <vTaskSwitchContext+0xf0>)
 800da24:	2200      	movs	r2, #0
 800da26:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800da28:	4b35      	ldr	r3, [pc, #212]	; (800db00 <vTaskSwitchContext+0xf4>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da2e:	61fb      	str	r3, [r7, #28]
 800da30:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800da34:	61bb      	str	r3, [r7, #24]
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	69ba      	ldr	r2, [r7, #24]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d111      	bne.n	800da64 <vTaskSwitchContext+0x58>
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	3304      	adds	r3, #4
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	69ba      	ldr	r2, [r7, #24]
 800da48:	429a      	cmp	r2, r3
 800da4a:	d10b      	bne.n	800da64 <vTaskSwitchContext+0x58>
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	3308      	adds	r3, #8
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	69ba      	ldr	r2, [r7, #24]
 800da54:	429a      	cmp	r2, r3
 800da56:	d105      	bne.n	800da64 <vTaskSwitchContext+0x58>
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	330c      	adds	r3, #12
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	69ba      	ldr	r2, [r7, #24]
 800da60:	429a      	cmp	r2, r3
 800da62:	d008      	beq.n	800da76 <vTaskSwitchContext+0x6a>
 800da64:	4b26      	ldr	r3, [pc, #152]	; (800db00 <vTaskSwitchContext+0xf4>)
 800da66:	681a      	ldr	r2, [r3, #0]
 800da68:	4b25      	ldr	r3, [pc, #148]	; (800db00 <vTaskSwitchContext+0xf4>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	3334      	adds	r3, #52	; 0x34
 800da6e:	4619      	mov	r1, r3
 800da70:	4610      	mov	r0, r2
 800da72:	f7f2 fe1d 	bl	80006b0 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da76:	4b23      	ldr	r3, [pc, #140]	; (800db04 <vTaskSwitchContext+0xf8>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	fab3 f383 	clz	r3, r3
 800da82:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800da84:	7afb      	ldrb	r3, [r7, #11]
 800da86:	f1c3 031f 	rsb	r3, r3, #31
 800da8a:	617b      	str	r3, [r7, #20]
 800da8c:	491e      	ldr	r1, [pc, #120]	; (800db08 <vTaskSwitchContext+0xfc>)
 800da8e:	697a      	ldr	r2, [r7, #20]
 800da90:	4613      	mov	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	440b      	add	r3, r1
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d109      	bne.n	800dab4 <vTaskSwitchContext+0xa8>
	__asm volatile
 800daa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	607b      	str	r3, [r7, #4]
 800dab2:	e7fe      	b.n	800dab2 <vTaskSwitchContext+0xa6>
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	4613      	mov	r3, r2
 800dab8:	009b      	lsls	r3, r3, #2
 800daba:	4413      	add	r3, r2
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4a12      	ldr	r2, [pc, #72]	; (800db08 <vTaskSwitchContext+0xfc>)
 800dac0:	4413      	add	r3, r2
 800dac2:	613b      	str	r3, [r7, #16]
 800dac4:	693b      	ldr	r3, [r7, #16]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	685a      	ldr	r2, [r3, #4]
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	605a      	str	r2, [r3, #4]
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	685a      	ldr	r2, [r3, #4]
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	3308      	adds	r3, #8
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d104      	bne.n	800dae4 <vTaskSwitchContext+0xd8>
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	685b      	ldr	r3, [r3, #4]
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	693b      	ldr	r3, [r7, #16]
 800dae2:	605a      	str	r2, [r3, #4]
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	4a05      	ldr	r2, [pc, #20]	; (800db00 <vTaskSwitchContext+0xf4>)
 800daec:	6013      	str	r3, [r2, #0]
}
 800daee:	bf00      	nop
 800daf0:	3720      	adds	r7, #32
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	200006a0 	.word	0x200006a0
 800dafc:	2000068c 	.word	0x2000068c
 800db00:	20000578 	.word	0x20000578
 800db04:	20000680 	.word	0x20000680
 800db08:	2000057c 	.word	0x2000057c

0800db0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d109      	bne.n	800db30 <vTaskPlaceOnEventList+0x24>
 800db1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db20:	f383 8811 	msr	BASEPRI, r3
 800db24:	f3bf 8f6f 	isb	sy
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	e7fe      	b.n	800db2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db30:	4b07      	ldr	r3, [pc, #28]	; (800db50 <vTaskPlaceOnEventList+0x44>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	3318      	adds	r3, #24
 800db36:	4619      	mov	r1, r3
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f7fe fba7 	bl	800c28c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db3e:	2101      	movs	r1, #1
 800db40:	6838      	ldr	r0, [r7, #0]
 800db42:	f000 fb8b 	bl	800e25c <prvAddCurrentTaskToDelayedList>
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
 800db4e:	bf00      	nop
 800db50:	20000578 	.word	0x20000578

0800db54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b086      	sub	sp, #24
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	68db      	ldr	r3, [r3, #12]
 800db60:	68db      	ldr	r3, [r3, #12]
 800db62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d109      	bne.n	800db7e <xTaskRemoveFromEventList+0x2a>
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	f383 8811 	msr	BASEPRI, r3
 800db72:	f3bf 8f6f 	isb	sy
 800db76:	f3bf 8f4f 	dsb	sy
 800db7a:	60fb      	str	r3, [r7, #12]
 800db7c:	e7fe      	b.n	800db7c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	3318      	adds	r3, #24
 800db82:	4618      	mov	r0, r3
 800db84:	f7fe fbbb 	bl	800c2fe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db88:	4b1d      	ldr	r3, [pc, #116]	; (800dc00 <xTaskRemoveFromEventList+0xac>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d11c      	bne.n	800dbca <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	3304      	adds	r3, #4
 800db94:	4618      	mov	r0, r3
 800db96:	f7fe fbb2 	bl	800c2fe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db9e:	2201      	movs	r2, #1
 800dba0:	409a      	lsls	r2, r3
 800dba2:	4b18      	ldr	r3, [pc, #96]	; (800dc04 <xTaskRemoveFromEventList+0xb0>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	4313      	orrs	r3, r2
 800dba8:	4a16      	ldr	r2, [pc, #88]	; (800dc04 <xTaskRemoveFromEventList+0xb0>)
 800dbaa:	6013      	str	r3, [r2, #0]
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	009b      	lsls	r3, r3, #2
 800dbb4:	4413      	add	r3, r2
 800dbb6:	009b      	lsls	r3, r3, #2
 800dbb8:	4a13      	ldr	r2, [pc, #76]	; (800dc08 <xTaskRemoveFromEventList+0xb4>)
 800dbba:	441a      	add	r2, r3
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	3304      	adds	r3, #4
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	4610      	mov	r0, r2
 800dbc4:	f7fe fb3e 	bl	800c244 <vListInsertEnd>
 800dbc8:	e005      	b.n	800dbd6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	3318      	adds	r3, #24
 800dbce:	4619      	mov	r1, r3
 800dbd0:	480e      	ldr	r0, [pc, #56]	; (800dc0c <xTaskRemoveFromEventList+0xb8>)
 800dbd2:	f7fe fb37 	bl	800c244 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbda:	4b0d      	ldr	r3, [pc, #52]	; (800dc10 <xTaskRemoveFromEventList+0xbc>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d905      	bls.n	800dbf0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dbe4:	2301      	movs	r3, #1
 800dbe6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dbe8:	4b0a      	ldr	r3, [pc, #40]	; (800dc14 <xTaskRemoveFromEventList+0xc0>)
 800dbea:	2201      	movs	r2, #1
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	e001      	b.n	800dbf4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dbf4:	697b      	ldr	r3, [r7, #20]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3718      	adds	r7, #24
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	200006a0 	.word	0x200006a0
 800dc04:	20000680 	.word	0x20000680
 800dc08:	2000057c 	.word	0x2000057c
 800dc0c:	20000638 	.word	0x20000638
 800dc10:	20000578 	.word	0x20000578
 800dc14:	2000068c 	.word	0x2000068c

0800dc18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc20:	4b06      	ldr	r3, [pc, #24]	; (800dc3c <vTaskInternalSetTimeOutState+0x24>)
 800dc22:	681a      	ldr	r2, [r3, #0]
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc28:	4b05      	ldr	r3, [pc, #20]	; (800dc40 <vTaskInternalSetTimeOutState+0x28>)
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	605a      	str	r2, [r3, #4]
}
 800dc30:	bf00      	nop
 800dc32:	370c      	adds	r7, #12
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr
 800dc3c:	20000690 	.word	0x20000690
 800dc40:	2000067c 	.word	0x2000067c

0800dc44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b088      	sub	sp, #32
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d109      	bne.n	800dc68 <xTaskCheckForTimeOut+0x24>
 800dc54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	613b      	str	r3, [r7, #16]
 800dc66:	e7fe      	b.n	800dc66 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d109      	bne.n	800dc82 <xTaskCheckForTimeOut+0x3e>
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	60fb      	str	r3, [r7, #12]
 800dc80:	e7fe      	b.n	800dc80 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800dc82:	f000 fc7b 	bl	800e57c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc86:	4b1d      	ldr	r3, [pc, #116]	; (800dcfc <xTaskCheckForTimeOut+0xb8>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	69ba      	ldr	r2, [r7, #24]
 800dc92:	1ad3      	subs	r3, r2, r3
 800dc94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc9e:	d102      	bne.n	800dca6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	61fb      	str	r3, [r7, #28]
 800dca4:	e023      	b.n	800dcee <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	4b15      	ldr	r3, [pc, #84]	; (800dd00 <xTaskCheckForTimeOut+0xbc>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d007      	beq.n	800dcc2 <xTaskCheckForTimeOut+0x7e>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	685b      	ldr	r3, [r3, #4]
 800dcb6:	69ba      	ldr	r2, [r7, #24]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d302      	bcc.n	800dcc2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	61fb      	str	r3, [r7, #28]
 800dcc0:	e015      	b.n	800dcee <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	697a      	ldr	r2, [r7, #20]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d20b      	bcs.n	800dce4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	1ad2      	subs	r2, r2, r3
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff ff9d 	bl	800dc18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dcde:	2300      	movs	r3, #0
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	e004      	b.n	800dcee <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	2200      	movs	r2, #0
 800dce8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dcea:	2301      	movs	r3, #1
 800dcec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dcee:	f000 fc73 	bl	800e5d8 <vPortExitCritical>

	return xReturn;
 800dcf2:	69fb      	ldr	r3, [r7, #28]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3720      	adds	r7, #32
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	2000067c 	.word	0x2000067c
 800dd00:	20000690 	.word	0x20000690

0800dd04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd04:	b480      	push	{r7}
 800dd06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd08:	4b03      	ldr	r3, [pc, #12]	; (800dd18 <vTaskMissedYield+0x14>)
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	601a      	str	r2, [r3, #0]
}
 800dd0e:	bf00      	nop
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	2000068c 	.word	0x2000068c

0800dd1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd24:	f000 f852 	bl	800ddcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd28:	4b06      	ldr	r3, [pc, #24]	; (800dd44 <prvIdleTask+0x28>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d9f9      	bls.n	800dd24 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dd30:	4b05      	ldr	r3, [pc, #20]	; (800dd48 <prvIdleTask+0x2c>)
 800dd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd36:	601a      	str	r2, [r3, #0]
 800dd38:	f3bf 8f4f 	dsb	sy
 800dd3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dd40:	e7f0      	b.n	800dd24 <prvIdleTask+0x8>
 800dd42:	bf00      	nop
 800dd44:	2000057c 	.word	0x2000057c
 800dd48:	e000ed04 	.word	0xe000ed04

0800dd4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b082      	sub	sp, #8
 800dd50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd52:	2300      	movs	r3, #0
 800dd54:	607b      	str	r3, [r7, #4]
 800dd56:	e00c      	b.n	800dd72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	4613      	mov	r3, r2
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4a12      	ldr	r2, [pc, #72]	; (800ddac <prvInitialiseTaskLists+0x60>)
 800dd64:	4413      	add	r3, r2
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7fe fa3f 	bl	800c1ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	607b      	str	r3, [r7, #4]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2b06      	cmp	r3, #6
 800dd76:	d9ef      	bls.n	800dd58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd78:	480d      	ldr	r0, [pc, #52]	; (800ddb0 <prvInitialiseTaskLists+0x64>)
 800dd7a:	f7fe fa36 	bl	800c1ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd7e:	480d      	ldr	r0, [pc, #52]	; (800ddb4 <prvInitialiseTaskLists+0x68>)
 800dd80:	f7fe fa33 	bl	800c1ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd84:	480c      	ldr	r0, [pc, #48]	; (800ddb8 <prvInitialiseTaskLists+0x6c>)
 800dd86:	f7fe fa30 	bl	800c1ea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd8a:	480c      	ldr	r0, [pc, #48]	; (800ddbc <prvInitialiseTaskLists+0x70>)
 800dd8c:	f7fe fa2d 	bl	800c1ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd90:	480b      	ldr	r0, [pc, #44]	; (800ddc0 <prvInitialiseTaskLists+0x74>)
 800dd92:	f7fe fa2a 	bl	800c1ea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd96:	4b0b      	ldr	r3, [pc, #44]	; (800ddc4 <prvInitialiseTaskLists+0x78>)
 800dd98:	4a05      	ldr	r2, [pc, #20]	; (800ddb0 <prvInitialiseTaskLists+0x64>)
 800dd9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd9c:	4b0a      	ldr	r3, [pc, #40]	; (800ddc8 <prvInitialiseTaskLists+0x7c>)
 800dd9e:	4a05      	ldr	r2, [pc, #20]	; (800ddb4 <prvInitialiseTaskLists+0x68>)
 800dda0:	601a      	str	r2, [r3, #0]
}
 800dda2:	bf00      	nop
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	2000057c 	.word	0x2000057c
 800ddb0:	20000608 	.word	0x20000608
 800ddb4:	2000061c 	.word	0x2000061c
 800ddb8:	20000638 	.word	0x20000638
 800ddbc:	2000064c 	.word	0x2000064c
 800ddc0:	20000664 	.word	0x20000664
 800ddc4:	20000630 	.word	0x20000630
 800ddc8:	20000634 	.word	0x20000634

0800ddcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b082      	sub	sp, #8
 800ddd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddd2:	e019      	b.n	800de08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ddd4:	f000 fbd2 	bl	800e57c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ddd8:	4b0f      	ldr	r3, [pc, #60]	; (800de18 <prvCheckTasksWaitingTermination+0x4c>)
 800ddda:	68db      	ldr	r3, [r3, #12]
 800dddc:	68db      	ldr	r3, [r3, #12]
 800ddde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3304      	adds	r3, #4
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fe fa8a 	bl	800c2fe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ddea:	4b0c      	ldr	r3, [pc, #48]	; (800de1c <prvCheckTasksWaitingTermination+0x50>)
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	3b01      	subs	r3, #1
 800ddf0:	4a0a      	ldr	r2, [pc, #40]	; (800de1c <prvCheckTasksWaitingTermination+0x50>)
 800ddf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ddf4:	4b0a      	ldr	r3, [pc, #40]	; (800de20 <prvCheckTasksWaitingTermination+0x54>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	3b01      	subs	r3, #1
 800ddfa:	4a09      	ldr	r2, [pc, #36]	; (800de20 <prvCheckTasksWaitingTermination+0x54>)
 800ddfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ddfe:	f000 fbeb 	bl	800e5d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f80e 	bl	800de24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de08:	4b05      	ldr	r3, [pc, #20]	; (800de20 <prvCheckTasksWaitingTermination+0x54>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1e1      	bne.n	800ddd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de10:	bf00      	nop
 800de12:	3708      	adds	r7, #8
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}
 800de18:	2000064c 	.word	0x2000064c
 800de1c:	20000678 	.word	0x20000678
 800de20:	20000660 	.word	0x20000660

0800de24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de24:	b580      	push	{r7, lr}
 800de26:	b084      	sub	sp, #16
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de32:	2b00      	cmp	r3, #0
 800de34:	d108      	bne.n	800de48 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3a:	4618      	mov	r0, r3
 800de3c:	f000 fd7a 	bl	800e934 <vPortFree>
				vPortFree( pxTCB );
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f000 fd77 	bl	800e934 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de46:	e017      	b.n	800de78 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de4e:	2b01      	cmp	r3, #1
 800de50:	d103      	bne.n	800de5a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 fd6e 	bl	800e934 <vPortFree>
	}
 800de58:	e00e      	b.n	800de78 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800de60:	2b02      	cmp	r3, #2
 800de62:	d009      	beq.n	800de78 <prvDeleteTCB+0x54>
 800de64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de68:	f383 8811 	msr	BASEPRI, r3
 800de6c:	f3bf 8f6f 	isb	sy
 800de70:	f3bf 8f4f 	dsb	sy
 800de74:	60fb      	str	r3, [r7, #12]
 800de76:	e7fe      	b.n	800de76 <prvDeleteTCB+0x52>
	}
 800de78:	bf00      	nop
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de86:	4b0c      	ldr	r3, [pc, #48]	; (800deb8 <prvResetNextTaskUnblockTime+0x38>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d104      	bne.n	800de9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de90:	4b0a      	ldr	r3, [pc, #40]	; (800debc <prvResetNextTaskUnblockTime+0x3c>)
 800de92:	f04f 32ff 	mov.w	r2, #4294967295
 800de96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de98:	e008      	b.n	800deac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de9a:	4b07      	ldr	r3, [pc, #28]	; (800deb8 <prvResetNextTaskUnblockTime+0x38>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	4a04      	ldr	r2, [pc, #16]	; (800debc <prvResetNextTaskUnblockTime+0x3c>)
 800deaa:	6013      	str	r3, [r2, #0]
}
 800deac:	bf00      	nop
 800deae:	370c      	adds	r7, #12
 800deb0:	46bd      	mov	sp, r7
 800deb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb6:	4770      	bx	lr
 800deb8:	20000630 	.word	0x20000630
 800debc:	20000698 	.word	0x20000698

0800dec0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dec0:	b480      	push	{r7}
 800dec2:	b083      	sub	sp, #12
 800dec4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dec6:	4b0b      	ldr	r3, [pc, #44]	; (800def4 <xTaskGetSchedulerState+0x34>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d102      	bne.n	800ded4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800dece:	2301      	movs	r3, #1
 800ded0:	607b      	str	r3, [r7, #4]
 800ded2:	e008      	b.n	800dee6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ded4:	4b08      	ldr	r3, [pc, #32]	; (800def8 <xTaskGetSchedulerState+0x38>)
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dedc:	2302      	movs	r3, #2
 800dede:	607b      	str	r3, [r7, #4]
 800dee0:	e001      	b.n	800dee6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dee2:	2300      	movs	r3, #0
 800dee4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dee6:	687b      	ldr	r3, [r7, #4]
	}
 800dee8:	4618      	mov	r0, r3
 800deea:	370c      	adds	r7, #12
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr
 800def4:	20000684 	.word	0x20000684
 800def8:	200006a0 	.word	0x200006a0

0800defc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800df08:	2300      	movs	r3, #0
 800df0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d069      	beq.n	800dfe6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df16:	4b36      	ldr	r3, [pc, #216]	; (800dff0 <xTaskPriorityInherit+0xf4>)
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d259      	bcs.n	800dfd4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	699b      	ldr	r3, [r3, #24]
 800df24:	2b00      	cmp	r3, #0
 800df26:	db06      	blt.n	800df36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df28:	4b31      	ldr	r3, [pc, #196]	; (800dff0 <xTaskPriorityInherit+0xf4>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2e:	f1c3 0207 	rsb	r2, r3, #7
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	6959      	ldr	r1, [r3, #20]
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3e:	4613      	mov	r3, r2
 800df40:	009b      	lsls	r3, r3, #2
 800df42:	4413      	add	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4a2b      	ldr	r2, [pc, #172]	; (800dff4 <xTaskPriorityInherit+0xf8>)
 800df48:	4413      	add	r3, r2
 800df4a:	4299      	cmp	r1, r3
 800df4c:	d13a      	bne.n	800dfc4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	3304      	adds	r3, #4
 800df52:	4618      	mov	r0, r3
 800df54:	f7fe f9d3 	bl	800c2fe <uxListRemove>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d115      	bne.n	800df8a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df62:	4924      	ldr	r1, [pc, #144]	; (800dff4 <xTaskPriorityInherit+0xf8>)
 800df64:	4613      	mov	r3, r2
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	4413      	add	r3, r2
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	440b      	add	r3, r1
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10a      	bne.n	800df8a <xTaskPriorityInherit+0x8e>
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df78:	2201      	movs	r2, #1
 800df7a:	fa02 f303 	lsl.w	r3, r2, r3
 800df7e:	43da      	mvns	r2, r3
 800df80:	4b1d      	ldr	r3, [pc, #116]	; (800dff8 <xTaskPriorityInherit+0xfc>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	4013      	ands	r3, r2
 800df86:	4a1c      	ldr	r2, [pc, #112]	; (800dff8 <xTaskPriorityInherit+0xfc>)
 800df88:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df8a:	4b19      	ldr	r3, [pc, #100]	; (800dff0 <xTaskPriorityInherit+0xf4>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df98:	2201      	movs	r2, #1
 800df9a:	409a      	lsls	r2, r3
 800df9c:	4b16      	ldr	r3, [pc, #88]	; (800dff8 <xTaskPriorityInherit+0xfc>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	4a15      	ldr	r2, [pc, #84]	; (800dff8 <xTaskPriorityInherit+0xfc>)
 800dfa4:	6013      	str	r3, [r2, #0]
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfaa:	4613      	mov	r3, r2
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	4413      	add	r3, r2
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	4a10      	ldr	r2, [pc, #64]	; (800dff4 <xTaskPriorityInherit+0xf8>)
 800dfb4:	441a      	add	r2, r3
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	3304      	adds	r3, #4
 800dfba:	4619      	mov	r1, r3
 800dfbc:	4610      	mov	r0, r2
 800dfbe:	f7fe f941 	bl	800c244 <vListInsertEnd>
 800dfc2:	e004      	b.n	800dfce <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dfc4:	4b0a      	ldr	r3, [pc, #40]	; (800dff0 <xTaskPriorityInherit+0xf4>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	60fb      	str	r3, [r7, #12]
 800dfd2:	e008      	b.n	800dfe6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dfd4:	68bb      	ldr	r3, [r7, #8]
 800dfd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dfd8:	4b05      	ldr	r3, [pc, #20]	; (800dff0 <xTaskPriorityInherit+0xf4>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d201      	bcs.n	800dfe6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
	}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3710      	adds	r7, #16
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	20000578 	.word	0x20000578
 800dff4:	2000057c 	.word	0x2000057c
 800dff8:	20000680 	.word	0x20000680

0800dffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b086      	sub	sp, #24
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e008:	2300      	movs	r3, #0
 800e00a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d06c      	beq.n	800e0ec <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e012:	4b39      	ldr	r3, [pc, #228]	; (800e0f8 <xTaskPriorityDisinherit+0xfc>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	693a      	ldr	r2, [r7, #16]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d009      	beq.n	800e030 <xTaskPriorityDisinherit+0x34>
 800e01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e020:	f383 8811 	msr	BASEPRI, r3
 800e024:	f3bf 8f6f 	isb	sy
 800e028:	f3bf 8f4f 	dsb	sy
 800e02c:	60fb      	str	r3, [r7, #12]
 800e02e:	e7fe      	b.n	800e02e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e034:	2b00      	cmp	r3, #0
 800e036:	d109      	bne.n	800e04c <xTaskPriorityDisinherit+0x50>
 800e038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e03c:	f383 8811 	msr	BASEPRI, r3
 800e040:	f3bf 8f6f 	isb	sy
 800e044:	f3bf 8f4f 	dsb	sy
 800e048:	60bb      	str	r3, [r7, #8]
 800e04a:	e7fe      	b.n	800e04a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e050:	1e5a      	subs	r2, r3, #1
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e05e:	429a      	cmp	r2, r3
 800e060:	d044      	beq.n	800e0ec <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e066:	2b00      	cmp	r3, #0
 800e068:	d140      	bne.n	800e0ec <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	3304      	adds	r3, #4
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fe f945 	bl	800c2fe <uxListRemove>
 800e074:	4603      	mov	r3, r0
 800e076:	2b00      	cmp	r3, #0
 800e078:	d115      	bne.n	800e0a6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07e:	491f      	ldr	r1, [pc, #124]	; (800e0fc <xTaskPriorityDisinherit+0x100>)
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	440b      	add	r3, r1
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d10a      	bne.n	800e0a6 <xTaskPriorityDisinherit+0xaa>
 800e090:	693b      	ldr	r3, [r7, #16]
 800e092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e094:	2201      	movs	r2, #1
 800e096:	fa02 f303 	lsl.w	r3, r2, r3
 800e09a:	43da      	mvns	r2, r3
 800e09c:	4b18      	ldr	r3, [pc, #96]	; (800e100 <xTaskPriorityDisinherit+0x104>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	4013      	ands	r3, r2
 800e0a2:	4a17      	ldr	r2, [pc, #92]	; (800e100 <xTaskPriorityDisinherit+0x104>)
 800e0a4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0ae:	693b      	ldr	r3, [r7, #16]
 800e0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b2:	f1c3 0207 	rsb	r2, r3, #7
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0be:	2201      	movs	r2, #1
 800e0c0:	409a      	lsls	r2, r3
 800e0c2:	4b0f      	ldr	r3, [pc, #60]	; (800e100 <xTaskPriorityDisinherit+0x104>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	4a0d      	ldr	r2, [pc, #52]	; (800e100 <xTaskPriorityDisinherit+0x104>)
 800e0ca:	6013      	str	r3, [r2, #0]
 800e0cc:	693b      	ldr	r3, [r7, #16]
 800e0ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4a08      	ldr	r2, [pc, #32]	; (800e0fc <xTaskPriorityDisinherit+0x100>)
 800e0da:	441a      	add	r2, r3
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	3304      	adds	r3, #4
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	4610      	mov	r0, r2
 800e0e4:	f7fe f8ae 	bl	800c244 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e0ec:	697b      	ldr	r3, [r7, #20]
	}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3718      	adds	r7, #24
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop
 800e0f8:	20000578 	.word	0x20000578
 800e0fc:	2000057c 	.word	0x2000057c
 800e100:	20000680 	.word	0x20000680

0800e104 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e112:	2301      	movs	r3, #1
 800e114:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f000 8081 	beq.w	800e220 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e122:	2b00      	cmp	r3, #0
 800e124:	d109      	bne.n	800e13a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800e126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12a:	f383 8811 	msr	BASEPRI, r3
 800e12e:	f3bf 8f6f 	isb	sy
 800e132:	f3bf 8f4f 	dsb	sy
 800e136:	60fb      	str	r3, [r7, #12]
 800e138:	e7fe      	b.n	800e138 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	429a      	cmp	r2, r3
 800e142:	d902      	bls.n	800e14a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	61fb      	str	r3, [r7, #28]
 800e148:	e002      	b.n	800e150 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e14e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e154:	69fa      	ldr	r2, [r7, #28]
 800e156:	429a      	cmp	r2, r3
 800e158:	d062      	beq.n	800e220 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e15a:	69bb      	ldr	r3, [r7, #24]
 800e15c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	429a      	cmp	r2, r3
 800e162:	d15d      	bne.n	800e220 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e164:	4b30      	ldr	r3, [pc, #192]	; (800e228 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	69ba      	ldr	r2, [r7, #24]
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d109      	bne.n	800e182 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800e16e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e172:	f383 8811 	msr	BASEPRI, r3
 800e176:	f3bf 8f6f 	isb	sy
 800e17a:	f3bf 8f4f 	dsb	sy
 800e17e:	60bb      	str	r3, [r7, #8]
 800e180:	e7fe      	b.n	800e180 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e182:	69bb      	ldr	r3, [r7, #24]
 800e184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e186:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e188:	69bb      	ldr	r3, [r7, #24]
 800e18a:	69fa      	ldr	r2, [r7, #28]
 800e18c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	699b      	ldr	r3, [r3, #24]
 800e192:	2b00      	cmp	r3, #0
 800e194:	db04      	blt.n	800e1a0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e196:	69fb      	ldr	r3, [r7, #28]
 800e198:	f1c3 0207 	rsb	r2, r3, #7
 800e19c:	69bb      	ldr	r3, [r7, #24]
 800e19e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e1a0:	69bb      	ldr	r3, [r7, #24]
 800e1a2:	6959      	ldr	r1, [r3, #20]
 800e1a4:	693a      	ldr	r2, [r7, #16]
 800e1a6:	4613      	mov	r3, r2
 800e1a8:	009b      	lsls	r3, r3, #2
 800e1aa:	4413      	add	r3, r2
 800e1ac:	009b      	lsls	r3, r3, #2
 800e1ae:	4a1f      	ldr	r2, [pc, #124]	; (800e22c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800e1b0:	4413      	add	r3, r2
 800e1b2:	4299      	cmp	r1, r3
 800e1b4:	d134      	bne.n	800e220 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe f89f 	bl	800c2fe <uxListRemove>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d115      	bne.n	800e1f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e1c6:	69bb      	ldr	r3, [r7, #24]
 800e1c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1ca:	4918      	ldr	r1, [pc, #96]	; (800e22c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	4413      	add	r3, r2
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	440b      	add	r3, r1
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d10a      	bne.n	800e1f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1e6:	43da      	mvns	r2, r3
 800e1e8:	4b11      	ldr	r3, [pc, #68]	; (800e230 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4013      	ands	r3, r2
 800e1ee:	4a10      	ldr	r2, [pc, #64]	; (800e230 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e1f0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f6:	2201      	movs	r2, #1
 800e1f8:	409a      	lsls	r2, r3
 800e1fa:	4b0d      	ldr	r3, [pc, #52]	; (800e230 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4313      	orrs	r3, r2
 800e200:	4a0b      	ldr	r2, [pc, #44]	; (800e230 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800e202:	6013      	str	r3, [r2, #0]
 800e204:	69bb      	ldr	r3, [r7, #24]
 800e206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e208:	4613      	mov	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	4a06      	ldr	r2, [pc, #24]	; (800e22c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800e212:	441a      	add	r2, r3
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	3304      	adds	r3, #4
 800e218:	4619      	mov	r1, r3
 800e21a:	4610      	mov	r0, r2
 800e21c:	f7fe f812 	bl	800c244 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e220:	bf00      	nop
 800e222:	3720      	adds	r7, #32
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	20000578 	.word	0x20000578
 800e22c:	2000057c 	.word	0x2000057c
 800e230:	20000680 	.word	0x20000680

0800e234 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e234:	b480      	push	{r7}
 800e236:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e238:	4b07      	ldr	r3, [pc, #28]	; (800e258 <pvTaskIncrementMutexHeldCount+0x24>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d004      	beq.n	800e24a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e240:	4b05      	ldr	r3, [pc, #20]	; (800e258 <pvTaskIncrementMutexHeldCount+0x24>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e246:	3201      	adds	r2, #1
 800e248:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e24a:	4b03      	ldr	r3, [pc, #12]	; (800e258 <pvTaskIncrementMutexHeldCount+0x24>)
 800e24c:	681b      	ldr	r3, [r3, #0]
	}
 800e24e:	4618      	mov	r0, r3
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	20000578 	.word	0x20000578

0800e25c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b084      	sub	sp, #16
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e266:	4b29      	ldr	r3, [pc, #164]	; (800e30c <prvAddCurrentTaskToDelayedList+0xb0>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e26c:	4b28      	ldr	r3, [pc, #160]	; (800e310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	3304      	adds	r3, #4
 800e272:	4618      	mov	r0, r3
 800e274:	f7fe f843 	bl	800c2fe <uxListRemove>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10b      	bne.n	800e296 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e27e:	4b24      	ldr	r3, [pc, #144]	; (800e310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e284:	2201      	movs	r2, #1
 800e286:	fa02 f303 	lsl.w	r3, r2, r3
 800e28a:	43da      	mvns	r2, r3
 800e28c:	4b21      	ldr	r3, [pc, #132]	; (800e314 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	4013      	ands	r3, r2
 800e292:	4a20      	ldr	r2, [pc, #128]	; (800e314 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e294:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29c:	d10a      	bne.n	800e2b4 <prvAddCurrentTaskToDelayedList+0x58>
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d007      	beq.n	800e2b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2a4:	4b1a      	ldr	r3, [pc, #104]	; (800e310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	481a      	ldr	r0, [pc, #104]	; (800e318 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e2ae:	f7fd ffc9 	bl	800c244 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2b2:	e026      	b.n	800e302 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2b4:	68fa      	ldr	r2, [r7, #12]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2bc:	4b14      	ldr	r3, [pc, #80]	; (800e310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	68ba      	ldr	r2, [r7, #8]
 800e2c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2c4:	68ba      	ldr	r2, [r7, #8]
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d209      	bcs.n	800e2e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2cc:	4b13      	ldr	r3, [pc, #76]	; (800e31c <prvAddCurrentTaskToDelayedList+0xc0>)
 800e2ce:	681a      	ldr	r2, [r3, #0]
 800e2d0:	4b0f      	ldr	r3, [pc, #60]	; (800e310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	3304      	adds	r3, #4
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	4610      	mov	r0, r2
 800e2da:	f7fd ffd7 	bl	800c28c <vListInsert>
}
 800e2de:	e010      	b.n	800e302 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2e0:	4b0f      	ldr	r3, [pc, #60]	; (800e320 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e2e2:	681a      	ldr	r2, [r3, #0]
 800e2e4:	4b0a      	ldr	r3, [pc, #40]	; (800e310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	3304      	adds	r3, #4
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	4610      	mov	r0, r2
 800e2ee:	f7fd ffcd 	bl	800c28c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2f2:	4b0c      	ldr	r3, [pc, #48]	; (800e324 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	68ba      	ldr	r2, [r7, #8]
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d202      	bcs.n	800e302 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e2fc:	4a09      	ldr	r2, [pc, #36]	; (800e324 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	6013      	str	r3, [r2, #0]
}
 800e302:	bf00      	nop
 800e304:	3710      	adds	r7, #16
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}
 800e30a:	bf00      	nop
 800e30c:	2000067c 	.word	0x2000067c
 800e310:	20000578 	.word	0x20000578
 800e314:	20000680 	.word	0x20000680
 800e318:	20000664 	.word	0x20000664
 800e31c:	20000634 	.word	0x20000634
 800e320:	20000630 	.word	0x20000630
 800e324:	20000698 	.word	0x20000698

0800e328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e328:	b480      	push	{r7}
 800e32a:	b085      	sub	sp, #20
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	60f8      	str	r0, [r7, #12]
 800e330:	60b9      	str	r1, [r7, #8]
 800e332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	3b04      	subs	r3, #4
 800e338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	3b04      	subs	r3, #4
 800e346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	f023 0201 	bic.w	r2, r3, #1
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	3b04      	subs	r3, #4
 800e356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e358:	4a0c      	ldr	r2, [pc, #48]	; (800e38c <pxPortInitialiseStack+0x64>)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3b14      	subs	r3, #20
 800e362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	3b04      	subs	r3, #4
 800e36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	f06f 0202 	mvn.w	r2, #2
 800e376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3b20      	subs	r3, #32
 800e37c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e37e:	68fb      	ldr	r3, [r7, #12]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr
 800e38c:	0800e391 	.word	0x0800e391

0800e390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e396:	2300      	movs	r3, #0
 800e398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e39a:	4b11      	ldr	r3, [pc, #68]	; (800e3e0 <prvTaskExitError+0x50>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a2:	d009      	beq.n	800e3b8 <prvTaskExitError+0x28>
 800e3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a8:	f383 8811 	msr	BASEPRI, r3
 800e3ac:	f3bf 8f6f 	isb	sy
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	60fb      	str	r3, [r7, #12]
 800e3b6:	e7fe      	b.n	800e3b6 <prvTaskExitError+0x26>
 800e3b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3bc:	f383 8811 	msr	BASEPRI, r3
 800e3c0:	f3bf 8f6f 	isb	sy
 800e3c4:	f3bf 8f4f 	dsb	sy
 800e3c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e3ca:	bf00      	nop
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d0fc      	beq.n	800e3cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e3d2:	bf00      	nop
 800e3d4:	3714      	adds	r7, #20
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	20000024 	.word	0x20000024
	...

0800e3f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e3f0:	4b07      	ldr	r3, [pc, #28]	; (800e410 <pxCurrentTCBConst2>)
 800e3f2:	6819      	ldr	r1, [r3, #0]
 800e3f4:	6808      	ldr	r0, [r1, #0]
 800e3f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3fa:	f380 8809 	msr	PSP, r0
 800e3fe:	f3bf 8f6f 	isb	sy
 800e402:	f04f 0000 	mov.w	r0, #0
 800e406:	f380 8811 	msr	BASEPRI, r0
 800e40a:	4770      	bx	lr
 800e40c:	f3af 8000 	nop.w

0800e410 <pxCurrentTCBConst2>:
 800e410:	20000578 	.word	0x20000578
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e414:	bf00      	nop
 800e416:	bf00      	nop

0800e418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e418:	4808      	ldr	r0, [pc, #32]	; (800e43c <prvPortStartFirstTask+0x24>)
 800e41a:	6800      	ldr	r0, [r0, #0]
 800e41c:	6800      	ldr	r0, [r0, #0]
 800e41e:	f380 8808 	msr	MSP, r0
 800e422:	f04f 0000 	mov.w	r0, #0
 800e426:	f380 8814 	msr	CONTROL, r0
 800e42a:	b662      	cpsie	i
 800e42c:	b661      	cpsie	f
 800e42e:	f3bf 8f4f 	dsb	sy
 800e432:	f3bf 8f6f 	isb	sy
 800e436:	df00      	svc	0
 800e438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e43a:	bf00      	nop
 800e43c:	e000ed08 	.word	0xe000ed08

0800e440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e446:	4b44      	ldr	r3, [pc, #272]	; (800e558 <xPortStartScheduler+0x118>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	4a44      	ldr	r2, [pc, #272]	; (800e55c <xPortStartScheduler+0x11c>)
 800e44c:	4293      	cmp	r3, r2
 800e44e:	d109      	bne.n	800e464 <xPortStartScheduler+0x24>
 800e450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	613b      	str	r3, [r7, #16]
 800e462:	e7fe      	b.n	800e462 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e464:	4b3c      	ldr	r3, [pc, #240]	; (800e558 <xPortStartScheduler+0x118>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	4a3d      	ldr	r2, [pc, #244]	; (800e560 <xPortStartScheduler+0x120>)
 800e46a:	4293      	cmp	r3, r2
 800e46c:	d109      	bne.n	800e482 <xPortStartScheduler+0x42>
 800e46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e472:	f383 8811 	msr	BASEPRI, r3
 800e476:	f3bf 8f6f 	isb	sy
 800e47a:	f3bf 8f4f 	dsb	sy
 800e47e:	60fb      	str	r3, [r7, #12]
 800e480:	e7fe      	b.n	800e480 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e482:	4b38      	ldr	r3, [pc, #224]	; (800e564 <xPortStartScheduler+0x124>)
 800e484:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	b2db      	uxtb	r3, r3
 800e48c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	22ff      	movs	r2, #255	; 0xff
 800e492:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e49c:	78fb      	ldrb	r3, [r7, #3]
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e4a4:	b2da      	uxtb	r2, r3
 800e4a6:	4b30      	ldr	r3, [pc, #192]	; (800e568 <xPortStartScheduler+0x128>)
 800e4a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e4aa:	4b30      	ldr	r3, [pc, #192]	; (800e56c <xPortStartScheduler+0x12c>)
 800e4ac:	2207      	movs	r2, #7
 800e4ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4b0:	e009      	b.n	800e4c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800e4b2:	4b2e      	ldr	r3, [pc, #184]	; (800e56c <xPortStartScheduler+0x12c>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	3b01      	subs	r3, #1
 800e4b8:	4a2c      	ldr	r2, [pc, #176]	; (800e56c <xPortStartScheduler+0x12c>)
 800e4ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e4bc:	78fb      	ldrb	r3, [r7, #3]
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	005b      	lsls	r3, r3, #1
 800e4c2:	b2db      	uxtb	r3, r3
 800e4c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e4c6:	78fb      	ldrb	r3, [r7, #3]
 800e4c8:	b2db      	uxtb	r3, r3
 800e4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e4ce:	2b80      	cmp	r3, #128	; 0x80
 800e4d0:	d0ef      	beq.n	800e4b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e4d2:	4b26      	ldr	r3, [pc, #152]	; (800e56c <xPortStartScheduler+0x12c>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	f1c3 0307 	rsb	r3, r3, #7
 800e4da:	2b04      	cmp	r3, #4
 800e4dc:	d009      	beq.n	800e4f2 <xPortStartScheduler+0xb2>
 800e4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4e2:	f383 8811 	msr	BASEPRI, r3
 800e4e6:	f3bf 8f6f 	isb	sy
 800e4ea:	f3bf 8f4f 	dsb	sy
 800e4ee:	60bb      	str	r3, [r7, #8]
 800e4f0:	e7fe      	b.n	800e4f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e4f2:	4b1e      	ldr	r3, [pc, #120]	; (800e56c <xPortStartScheduler+0x12c>)
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	021b      	lsls	r3, r3, #8
 800e4f8:	4a1c      	ldr	r2, [pc, #112]	; (800e56c <xPortStartScheduler+0x12c>)
 800e4fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e4fc:	4b1b      	ldr	r3, [pc, #108]	; (800e56c <xPortStartScheduler+0x12c>)
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e504:	4a19      	ldr	r2, [pc, #100]	; (800e56c <xPortStartScheduler+0x12c>)
 800e506:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e510:	4b17      	ldr	r3, [pc, #92]	; (800e570 <xPortStartScheduler+0x130>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a16      	ldr	r2, [pc, #88]	; (800e570 <xPortStartScheduler+0x130>)
 800e516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e51a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e51c:	4b14      	ldr	r3, [pc, #80]	; (800e570 <xPortStartScheduler+0x130>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	4a13      	ldr	r2, [pc, #76]	; (800e570 <xPortStartScheduler+0x130>)
 800e522:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e526:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e528:	f000 f8d6 	bl	800e6d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e52c:	4b11      	ldr	r3, [pc, #68]	; (800e574 <xPortStartScheduler+0x134>)
 800e52e:	2200      	movs	r2, #0
 800e530:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e532:	f000 f8f5 	bl	800e720 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e536:	4b10      	ldr	r3, [pc, #64]	; (800e578 <xPortStartScheduler+0x138>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	4a0f      	ldr	r2, [pc, #60]	; (800e578 <xPortStartScheduler+0x138>)
 800e53c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e540:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e542:	f7ff ff69 	bl	800e418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e546:	f7ff fa61 	bl	800da0c <vTaskSwitchContext>
	prvTaskExitError();
 800e54a:	f7ff ff21 	bl	800e390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	3718      	adds	r7, #24
 800e554:	46bd      	mov	sp, r7
 800e556:	bd80      	pop	{r7, pc}
 800e558:	e000ed00 	.word	0xe000ed00
 800e55c:	410fc271 	.word	0x410fc271
 800e560:	410fc270 	.word	0x410fc270
 800e564:	e000e400 	.word	0xe000e400
 800e568:	200006a4 	.word	0x200006a4
 800e56c:	200006a8 	.word	0x200006a8
 800e570:	e000ed20 	.word	0xe000ed20
 800e574:	20000024 	.word	0x20000024
 800e578:	e000ef34 	.word	0xe000ef34

0800e57c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e57c:	b480      	push	{r7}
 800e57e:	b083      	sub	sp, #12
 800e580:	af00      	add	r7, sp, #0
 800e582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e586:	f383 8811 	msr	BASEPRI, r3
 800e58a:	f3bf 8f6f 	isb	sy
 800e58e:	f3bf 8f4f 	dsb	sy
 800e592:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e594:	4b0e      	ldr	r3, [pc, #56]	; (800e5d0 <vPortEnterCritical+0x54>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3301      	adds	r3, #1
 800e59a:	4a0d      	ldr	r2, [pc, #52]	; (800e5d0 <vPortEnterCritical+0x54>)
 800e59c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e59e:	4b0c      	ldr	r3, [pc, #48]	; (800e5d0 <vPortEnterCritical+0x54>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d10e      	bne.n	800e5c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e5a6:	4b0b      	ldr	r3, [pc, #44]	; (800e5d4 <vPortEnterCritical+0x58>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d009      	beq.n	800e5c4 <vPortEnterCritical+0x48>
 800e5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5b4:	f383 8811 	msr	BASEPRI, r3
 800e5b8:	f3bf 8f6f 	isb	sy
 800e5bc:	f3bf 8f4f 	dsb	sy
 800e5c0:	603b      	str	r3, [r7, #0]
 800e5c2:	e7fe      	b.n	800e5c2 <vPortEnterCritical+0x46>
	}
}
 800e5c4:	bf00      	nop
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr
 800e5d0:	20000024 	.word	0x20000024
 800e5d4:	e000ed04 	.word	0xe000ed04

0800e5d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e5de:	4b11      	ldr	r3, [pc, #68]	; (800e624 <vPortExitCritical+0x4c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d109      	bne.n	800e5fa <vPortExitCritical+0x22>
 800e5e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ea:	f383 8811 	msr	BASEPRI, r3
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f3bf 8f4f 	dsb	sy
 800e5f6:	607b      	str	r3, [r7, #4]
 800e5f8:	e7fe      	b.n	800e5f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800e5fa:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <vPortExitCritical+0x4c>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	3b01      	subs	r3, #1
 800e600:	4a08      	ldr	r2, [pc, #32]	; (800e624 <vPortExitCritical+0x4c>)
 800e602:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e604:	4b07      	ldr	r3, [pc, #28]	; (800e624 <vPortExitCritical+0x4c>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d104      	bne.n	800e616 <vPortExitCritical+0x3e>
 800e60c:	2300      	movs	r3, #0
 800e60e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800e616:	bf00      	nop
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	20000024 	.word	0x20000024
	...

0800e630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e630:	f3ef 8009 	mrs	r0, PSP
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	4b15      	ldr	r3, [pc, #84]	; (800e690 <pxCurrentTCBConst>)
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	f01e 0f10 	tst.w	lr, #16
 800e640:	bf08      	it	eq
 800e642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64a:	6010      	str	r0, [r2, #0]
 800e64c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e650:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e654:	f380 8811 	msr	BASEPRI, r0
 800e658:	f3bf 8f4f 	dsb	sy
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f7ff f9d4 	bl	800da0c <vTaskSwitchContext>
 800e664:	f04f 0000 	mov.w	r0, #0
 800e668:	f380 8811 	msr	BASEPRI, r0
 800e66c:	bc09      	pop	{r0, r3}
 800e66e:	6819      	ldr	r1, [r3, #0]
 800e670:	6808      	ldr	r0, [r1, #0]
 800e672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e676:	f01e 0f10 	tst.w	lr, #16
 800e67a:	bf08      	it	eq
 800e67c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e680:	f380 8809 	msr	PSP, r0
 800e684:	f3bf 8f6f 	isb	sy
 800e688:	4770      	bx	lr
 800e68a:	bf00      	nop
 800e68c:	f3af 8000 	nop.w

0800e690 <pxCurrentTCBConst>:
 800e690:	20000578 	.word	0x20000578
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e694:	bf00      	nop
 800e696:	bf00      	nop

0800e698 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
	__asm volatile
 800e69e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a2:	f383 8811 	msr	BASEPRI, r3
 800e6a6:	f3bf 8f6f 	isb	sy
 800e6aa:	f3bf 8f4f 	dsb	sy
 800e6ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e6b0:	f7ff f8f4 	bl	800d89c <xTaskIncrementTick>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d003      	beq.n	800e6c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e6ba:	4b06      	ldr	r3, [pc, #24]	; (800e6d4 <SysTick_Handler+0x3c>)
 800e6bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6c0:	601a      	str	r2, [r3, #0]
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800e6cc:	bf00      	nop
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	e000ed04 	.word	0xe000ed04

0800e6d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e6d8:	b480      	push	{r7}
 800e6da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e6dc:	4b0b      	ldr	r3, [pc, #44]	; (800e70c <vPortSetupTimerInterrupt+0x34>)
 800e6de:	2200      	movs	r2, #0
 800e6e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e6e2:	4b0b      	ldr	r3, [pc, #44]	; (800e710 <vPortSetupTimerInterrupt+0x38>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e6e8:	4b0a      	ldr	r3, [pc, #40]	; (800e714 <vPortSetupTimerInterrupt+0x3c>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a0a      	ldr	r2, [pc, #40]	; (800e718 <vPortSetupTimerInterrupt+0x40>)
 800e6ee:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f2:	099b      	lsrs	r3, r3, #6
 800e6f4:	4a09      	ldr	r2, [pc, #36]	; (800e71c <vPortSetupTimerInterrupt+0x44>)
 800e6f6:	3b01      	subs	r3, #1
 800e6f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e6fa:	4b04      	ldr	r3, [pc, #16]	; (800e70c <vPortSetupTimerInterrupt+0x34>)
 800e6fc:	2207      	movs	r2, #7
 800e6fe:	601a      	str	r2, [r3, #0]
}
 800e700:	bf00      	nop
 800e702:	46bd      	mov	sp, r7
 800e704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop
 800e70c:	e000e010 	.word	0xe000e010
 800e710:	e000e018 	.word	0xe000e018
 800e714:	20000000 	.word	0x20000000
 800e718:	10624dd3 	.word	0x10624dd3
 800e71c:	e000e014 	.word	0xe000e014

0800e720 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e720:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e730 <vPortEnableVFP+0x10>
 800e724:	6801      	ldr	r1, [r0, #0]
 800e726:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e72a:	6001      	str	r1, [r0, #0]
 800e72c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e72e:	bf00      	nop
 800e730:	e000ed88 	.word	0xe000ed88

0800e734 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e734:	b480      	push	{r7}
 800e736:	b085      	sub	sp, #20
 800e738:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e73a:	f3ef 8305 	mrs	r3, IPSR
 800e73e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2b0f      	cmp	r3, #15
 800e744:	d913      	bls.n	800e76e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e746:	4a16      	ldr	r2, [pc, #88]	; (800e7a0 <vPortValidateInterruptPriority+0x6c>)
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	4413      	add	r3, r2
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e750:	4b14      	ldr	r3, [pc, #80]	; (800e7a4 <vPortValidateInterruptPriority+0x70>)
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	7afa      	ldrb	r2, [r7, #11]
 800e756:	429a      	cmp	r2, r3
 800e758:	d209      	bcs.n	800e76e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800e75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e75e:	f383 8811 	msr	BASEPRI, r3
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	f3bf 8f4f 	dsb	sy
 800e76a:	607b      	str	r3, [r7, #4]
 800e76c:	e7fe      	b.n	800e76c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e76e:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <vPortValidateInterruptPriority+0x74>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e776:	4b0d      	ldr	r3, [pc, #52]	; (800e7ac <vPortValidateInterruptPriority+0x78>)
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d909      	bls.n	800e792 <vPortValidateInterruptPriority+0x5e>
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	603b      	str	r3, [r7, #0]
 800e790:	e7fe      	b.n	800e790 <vPortValidateInterruptPriority+0x5c>
	}
 800e792:	bf00      	nop
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr
 800e79e:	bf00      	nop
 800e7a0:	e000e3f0 	.word	0xe000e3f0
 800e7a4:	200006a4 	.word	0x200006a4
 800e7a8:	e000ed0c 	.word	0xe000ed0c
 800e7ac:	200006a8 	.word	0x200006a8

0800e7b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b08a      	sub	sp, #40	; 0x28
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7bc:	f7fe ffa2 	bl	800d704 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7c0:	4b57      	ldr	r3, [pc, #348]	; (800e920 <pvPortMalloc+0x170>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d101      	bne.n	800e7cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7c8:	f000 f90c 	bl	800e9e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7cc:	4b55      	ldr	r3, [pc, #340]	; (800e924 <pvPortMalloc+0x174>)
 800e7ce:	681a      	ldr	r2, [r3, #0]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	f040 808c 	bne.w	800e8f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d01c      	beq.n	800e81a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800e7e0:	2208      	movs	r2, #8
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f003 0307 	and.w	r3, r3, #7
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d013      	beq.n	800e81a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	f023 0307 	bic.w	r3, r3, #7
 800e7f8:	3308      	adds	r3, #8
 800e7fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f003 0307 	and.w	r3, r3, #7
 800e802:	2b00      	cmp	r3, #0
 800e804:	d009      	beq.n	800e81a <pvPortMalloc+0x6a>
 800e806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80a:	f383 8811 	msr	BASEPRI, r3
 800e80e:	f3bf 8f6f 	isb	sy
 800e812:	f3bf 8f4f 	dsb	sy
 800e816:	617b      	str	r3, [r7, #20]
 800e818:	e7fe      	b.n	800e818 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d068      	beq.n	800e8f2 <pvPortMalloc+0x142>
 800e820:	4b41      	ldr	r3, [pc, #260]	; (800e928 <pvPortMalloc+0x178>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	429a      	cmp	r2, r3
 800e828:	d863      	bhi.n	800e8f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e82a:	4b40      	ldr	r3, [pc, #256]	; (800e92c <pvPortMalloc+0x17c>)
 800e82c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e82e:	4b3f      	ldr	r3, [pc, #252]	; (800e92c <pvPortMalloc+0x17c>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e834:	e004      	b.n	800e840 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800e836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e838:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	429a      	cmp	r2, r3
 800e848:	d903      	bls.n	800e852 <pvPortMalloc+0xa2>
 800e84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d1f1      	bne.n	800e836 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e852:	4b33      	ldr	r3, [pc, #204]	; (800e920 <pvPortMalloc+0x170>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e858:	429a      	cmp	r2, r3
 800e85a:	d04a      	beq.n	800e8f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e85c:	6a3b      	ldr	r3, [r7, #32]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2208      	movs	r2, #8
 800e862:	4413      	add	r3, r2
 800e864:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e868:	681a      	ldr	r2, [r3, #0]
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	1ad2      	subs	r2, r2, r3
 800e876:	2308      	movs	r3, #8
 800e878:	005b      	lsls	r3, r3, #1
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d91e      	bls.n	800e8bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e87e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	4413      	add	r3, r2
 800e884:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e886:	69bb      	ldr	r3, [r7, #24]
 800e888:	f003 0307 	and.w	r3, r3, #7
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d009      	beq.n	800e8a4 <pvPortMalloc+0xf4>
 800e890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e894:	f383 8811 	msr	BASEPRI, r3
 800e898:	f3bf 8f6f 	isb	sy
 800e89c:	f3bf 8f4f 	dsb	sy
 800e8a0:	613b      	str	r3, [r7, #16]
 800e8a2:	e7fe      	b.n	800e8a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a6:	685a      	ldr	r2, [r3, #4]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	1ad2      	subs	r2, r2, r3
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	687a      	ldr	r2, [r7, #4]
 800e8b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8b6:	69b8      	ldr	r0, [r7, #24]
 800e8b8:	f000 f8f6 	bl	800eaa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8bc:	4b1a      	ldr	r3, [pc, #104]	; (800e928 <pvPortMalloc+0x178>)
 800e8be:	681a      	ldr	r2, [r3, #0]
 800e8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c2:	685b      	ldr	r3, [r3, #4]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	4a18      	ldr	r2, [pc, #96]	; (800e928 <pvPortMalloc+0x178>)
 800e8c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8ca:	4b17      	ldr	r3, [pc, #92]	; (800e928 <pvPortMalloc+0x178>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	4b18      	ldr	r3, [pc, #96]	; (800e930 <pvPortMalloc+0x180>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d203      	bcs.n	800e8de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8d6:	4b14      	ldr	r3, [pc, #80]	; (800e928 <pvPortMalloc+0x178>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a15      	ldr	r2, [pc, #84]	; (800e930 <pvPortMalloc+0x180>)
 800e8dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	4b10      	ldr	r3, [pc, #64]	; (800e924 <pvPortMalloc+0x174>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	431a      	orrs	r2, r3
 800e8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ee:	2200      	movs	r2, #0
 800e8f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8f2:	f7fe ff15 	bl	800d720 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	f003 0307 	and.w	r3, r3, #7
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d009      	beq.n	800e914 <pvPortMalloc+0x164>
 800e900:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e904:	f383 8811 	msr	BASEPRI, r3
 800e908:	f3bf 8f6f 	isb	sy
 800e90c:	f3bf 8f4f 	dsb	sy
 800e910:	60fb      	str	r3, [r7, #12]
 800e912:	e7fe      	b.n	800e912 <pvPortMalloc+0x162>
	return pvReturn;
 800e914:	69fb      	ldr	r3, [r7, #28]
}
 800e916:	4618      	mov	r0, r3
 800e918:	3728      	adds	r7, #40	; 0x28
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
 800e91e:	bf00      	nop
 800e920:	200086b4 	.word	0x200086b4
 800e924:	200086c0 	.word	0x200086c0
 800e928:	200086b8 	.word	0x200086b8
 800e92c:	200086ac 	.word	0x200086ac
 800e930:	200086bc 	.word	0x200086bc

0800e934 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b086      	sub	sp, #24
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d046      	beq.n	800e9d4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e946:	2308      	movs	r3, #8
 800e948:	425b      	negs	r3, r3
 800e94a:	697a      	ldr	r2, [r7, #20]
 800e94c:	4413      	add	r3, r2
 800e94e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e950:	697b      	ldr	r3, [r7, #20]
 800e952:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e954:	693b      	ldr	r3, [r7, #16]
 800e956:	685a      	ldr	r2, [r3, #4]
 800e958:	4b20      	ldr	r3, [pc, #128]	; (800e9dc <vPortFree+0xa8>)
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	4013      	ands	r3, r2
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d109      	bne.n	800e976 <vPortFree+0x42>
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	60fb      	str	r3, [r7, #12]
 800e974:	e7fe      	b.n	800e974 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e976:	693b      	ldr	r3, [r7, #16]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d009      	beq.n	800e992 <vPortFree+0x5e>
 800e97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e982:	f383 8811 	msr	BASEPRI, r3
 800e986:	f3bf 8f6f 	isb	sy
 800e98a:	f3bf 8f4f 	dsb	sy
 800e98e:	60bb      	str	r3, [r7, #8]
 800e990:	e7fe      	b.n	800e990 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	685a      	ldr	r2, [r3, #4]
 800e996:	4b11      	ldr	r3, [pc, #68]	; (800e9dc <vPortFree+0xa8>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	4013      	ands	r3, r2
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d019      	beq.n	800e9d4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d115      	bne.n	800e9d4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	4b0b      	ldr	r3, [pc, #44]	; (800e9dc <vPortFree+0xa8>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	43db      	mvns	r3, r3
 800e9b2:	401a      	ands	r2, r3
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9b8:	f7fe fea4 	bl	800d704 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	685a      	ldr	r2, [r3, #4]
 800e9c0:	4b07      	ldr	r3, [pc, #28]	; (800e9e0 <vPortFree+0xac>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4413      	add	r3, r2
 800e9c6:	4a06      	ldr	r2, [pc, #24]	; (800e9e0 <vPortFree+0xac>)
 800e9c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9ca:	6938      	ldr	r0, [r7, #16]
 800e9cc:	f000 f86c 	bl	800eaa8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e9d0:	f7fe fea6 	bl	800d720 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9d4:	bf00      	nop
 800e9d6:	3718      	adds	r7, #24
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	200086c0 	.word	0x200086c0
 800e9e0:	200086b8 	.word	0x200086b8

0800e9e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	b085      	sub	sp, #20
 800e9e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e9ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e9f0:	4b27      	ldr	r3, [pc, #156]	; (800ea90 <prvHeapInit+0xac>)
 800e9f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f003 0307 	and.w	r3, r3, #7
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d00c      	beq.n	800ea18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3307      	adds	r3, #7
 800ea02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f023 0307 	bic.w	r3, r3, #7
 800ea0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	4a1f      	ldr	r2, [pc, #124]	; (800ea90 <prvHeapInit+0xac>)
 800ea14:	4413      	add	r3, r2
 800ea16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea1c:	4a1d      	ldr	r2, [pc, #116]	; (800ea94 <prvHeapInit+0xb0>)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea22:	4b1c      	ldr	r3, [pc, #112]	; (800ea94 <prvHeapInit+0xb0>)
 800ea24:	2200      	movs	r2, #0
 800ea26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	68ba      	ldr	r2, [r7, #8]
 800ea2c:	4413      	add	r3, r2
 800ea2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea30:	2208      	movs	r2, #8
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	1a9b      	subs	r3, r3, r2
 800ea36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f023 0307 	bic.w	r3, r3, #7
 800ea3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	4a15      	ldr	r2, [pc, #84]	; (800ea98 <prvHeapInit+0xb4>)
 800ea44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea46:	4b14      	ldr	r3, [pc, #80]	; (800ea98 <prvHeapInit+0xb4>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea4e:	4b12      	ldr	r3, [pc, #72]	; (800ea98 <prvHeapInit+0xb4>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	68fa      	ldr	r2, [r7, #12]
 800ea5e:	1ad2      	subs	r2, r2, r3
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea64:	4b0c      	ldr	r3, [pc, #48]	; (800ea98 <prvHeapInit+0xb4>)
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	4a0a      	ldr	r2, [pc, #40]	; (800ea9c <prvHeapInit+0xb8>)
 800ea72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	4a09      	ldr	r2, [pc, #36]	; (800eaa0 <prvHeapInit+0xbc>)
 800ea7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ea7c:	4b09      	ldr	r3, [pc, #36]	; (800eaa4 <prvHeapInit+0xc0>)
 800ea7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ea82:	601a      	str	r2, [r3, #0]
}
 800ea84:	bf00      	nop
 800ea86:	3714      	adds	r7, #20
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr
 800ea90:	200006ac 	.word	0x200006ac
 800ea94:	200086ac 	.word	0x200086ac
 800ea98:	200086b4 	.word	0x200086b4
 800ea9c:	200086bc 	.word	0x200086bc
 800eaa0:	200086b8 	.word	0x200086b8
 800eaa4:	200086c0 	.word	0x200086c0

0800eaa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eaa8:	b480      	push	{r7}
 800eaaa:	b085      	sub	sp, #20
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800eab0:	4b28      	ldr	r3, [pc, #160]	; (800eb54 <prvInsertBlockIntoFreeList+0xac>)
 800eab2:	60fb      	str	r3, [r7, #12]
 800eab4:	e002      	b.n	800eabc <prvInsertBlockIntoFreeList+0x14>
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	687a      	ldr	r2, [r7, #4]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d8f7      	bhi.n	800eab6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	685b      	ldr	r3, [r3, #4]
 800eace:	68ba      	ldr	r2, [r7, #8]
 800ead0:	4413      	add	r3, r2
 800ead2:	687a      	ldr	r2, [r7, #4]
 800ead4:	429a      	cmp	r2, r3
 800ead6:	d108      	bne.n	800eaea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	685a      	ldr	r2, [r3, #4]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	441a      	add	r2, r3
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	441a      	add	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	429a      	cmp	r2, r3
 800eafc:	d118      	bne.n	800eb30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	4b15      	ldr	r3, [pc, #84]	; (800eb58 <prvInsertBlockIntoFreeList+0xb0>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d00d      	beq.n	800eb26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	685a      	ldr	r2, [r3, #4]
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	685b      	ldr	r3, [r3, #4]
 800eb14:	441a      	add	r2, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	681a      	ldr	r2, [r3, #0]
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	e008      	b.n	800eb38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb26:	4b0c      	ldr	r3, [pc, #48]	; (800eb58 <prvInsertBlockIntoFreeList+0xb0>)
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	e003      	b.n	800eb38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681a      	ldr	r2, [r3, #0]
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d002      	beq.n	800eb46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb46:	bf00      	nop
 800eb48:	3714      	adds	r7, #20
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb50:	4770      	bx	lr
 800eb52:	bf00      	nop
 800eb54:	200086ac 	.word	0x200086ac
 800eb58:	200086b4 	.word	0x200086b4

0800eb5c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	330c      	adds	r3, #12
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f002 fc1f 	bl	80113b4 <tcpip_send_msg_wait_sem>
 800eb76:	4603      	mov	r3, r0
 800eb78:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800eb7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d103      	bne.n	800eb8a <netconn_apimsg+0x2e>
    return apimsg->err;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800eb88:	e001      	b.n	800eb8e <netconn_apimsg+0x32>
  }
  return err;
 800eb8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb8e:	4618      	mov	r0, r3
 800eb90:	3710      	adds	r7, #16
 800eb92:	46bd      	mov	sp, r7
 800eb94:	bd80      	pop	{r7, pc}
	...

0800eb98 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b08c      	sub	sp, #48	; 0x30
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	4603      	mov	r3, r0
 800eba0:	603a      	str	r2, [r7, #0]
 800eba2:	71fb      	strb	r3, [r7, #7]
 800eba4:	460b      	mov	r3, r1
 800eba6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800eba8:	79fb      	ldrb	r3, [r7, #7]
 800ebaa:	6839      	ldr	r1, [r7, #0]
 800ebac:	4618      	mov	r0, r3
 800ebae:	f001 f957 	bl	800fe60 <netconn_alloc>
 800ebb2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800ebb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d054      	beq.n	800ec64 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800ebba:	79bb      	ldrb	r3, [r7, #6]
 800ebbc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800ebbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800ebc2:	f107 0308 	add.w	r3, r7, #8
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4829      	ldr	r0, [pc, #164]	; (800ec70 <netconn_new_with_proto_and_callback+0xd8>)
 800ebca:	f7ff ffc7 	bl	800eb5c <netconn_apimsg>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800ebd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d043      	beq.n	800ec64 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800ebdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d005      	beq.n	800ebf0 <netconn_new_with_proto_and_callback+0x58>
 800ebe4:	4b23      	ldr	r3, [pc, #140]	; (800ec74 <netconn_new_with_proto_and_callback+0xdc>)
 800ebe6:	22a3      	movs	r2, #163	; 0xa3
 800ebe8:	4923      	ldr	r1, [pc, #140]	; (800ec78 <netconn_new_with_proto_and_callback+0xe0>)
 800ebea:	4824      	ldr	r0, [pc, #144]	; (800ec7c <netconn_new_with_proto_and_callback+0xe4>)
 800ebec:	f00d ffec 	bl	801cbc8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	3310      	adds	r3, #16
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f00d fe68 	bl	801c8ca <sys_mbox_valid>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d105      	bne.n	800ec0c <netconn_new_with_proto_and_callback+0x74>
 800ec00:	4b1c      	ldr	r3, [pc, #112]	; (800ec74 <netconn_new_with_proto_and_callback+0xdc>)
 800ec02:	22a4      	movs	r2, #164	; 0xa4
 800ec04:	491e      	ldr	r1, [pc, #120]	; (800ec80 <netconn_new_with_proto_and_callback+0xe8>)
 800ec06:	481d      	ldr	r0, [pc, #116]	; (800ec7c <netconn_new_with_proto_and_callback+0xe4>)
 800ec08:	f00d ffde 	bl	801cbc8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	3314      	adds	r3, #20
 800ec10:	4618      	mov	r0, r3
 800ec12:	f00d fe5a 	bl	801c8ca <sys_mbox_valid>
 800ec16:	4603      	mov	r3, r0
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d005      	beq.n	800ec28 <netconn_new_with_proto_and_callback+0x90>
 800ec1c:	4b15      	ldr	r3, [pc, #84]	; (800ec74 <netconn_new_with_proto_and_callback+0xdc>)
 800ec1e:	22a6      	movs	r2, #166	; 0xa6
 800ec20:	4918      	ldr	r1, [pc, #96]	; (800ec84 <netconn_new_with_proto_and_callback+0xec>)
 800ec22:	4816      	ldr	r0, [pc, #88]	; (800ec7c <netconn_new_with_proto_and_callback+0xe4>)
 800ec24:	f00d ffd0 	bl	801cbc8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ec28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec2a:	330c      	adds	r3, #12
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f00d fedd 	bl	801c9ec <sys_sem_valid>
 800ec32:	4603      	mov	r3, r0
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d105      	bne.n	800ec44 <netconn_new_with_proto_and_callback+0xac>
 800ec38:	4b0e      	ldr	r3, [pc, #56]	; (800ec74 <netconn_new_with_proto_and_callback+0xdc>)
 800ec3a:	22a9      	movs	r2, #169	; 0xa9
 800ec3c:	4912      	ldr	r1, [pc, #72]	; (800ec88 <netconn_new_with_proto_and_callback+0xf0>)
 800ec3e:	480f      	ldr	r0, [pc, #60]	; (800ec7c <netconn_new_with_proto_and_callback+0xe4>)
 800ec40:	f00d ffc2 	bl	801cbc8 <iprintf>
      sys_sem_free(&conn->op_completed);
 800ec44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec46:	330c      	adds	r3, #12
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f00d fec2 	bl	801c9d2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ec4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec50:	3310      	adds	r3, #16
 800ec52:	4618      	mov	r0, r3
 800ec54:	f00d fdb2 	bl	801c7bc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ec58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec5a:	2007      	movs	r0, #7
 800ec5c:	f003 facc 	bl	80121f8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ec60:	2300      	movs	r3, #0
 800ec62:	e000      	b.n	800ec66 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ec64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3730      	adds	r7, #48	; 0x30
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	0800fe35 	.word	0x0800fe35
 800ec74:	0801db6c 	.word	0x0801db6c
 800ec78:	0801dba0 	.word	0x0801dba0
 800ec7c:	0801dbc4 	.word	0x0801dbc4
 800ec80:	0801dbec 	.word	0x0801dbec
 800ec84:	0801dc04 	.word	0x0801dc04
 800ec88:	0801dc28 	.word	0x0801dc28

0800ec8c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b08c      	sub	sp, #48	; 0x30
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e014      	b.n	800ecc8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800eca2:	2329      	movs	r3, #41	; 0x29
 800eca4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800eca6:	f107 030c 	add.w	r3, r7, #12
 800ecaa:	4619      	mov	r1, r3
 800ecac:	4808      	ldr	r0, [pc, #32]	; (800ecd0 <netconn_prepare_delete+0x44>)
 800ecae:	f7ff ff55 	bl	800eb5c <netconn_apimsg>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ecb8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d002      	beq.n	800ecc6 <netconn_prepare_delete+0x3a>
    return err;
 800ecc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ecc4:	e000      	b.n	800ecc8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3730      	adds	r7, #48	; 0x30
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}
 800ecd0:	08010399 	.word	0x08010399

0800ecd4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b084      	sub	sp, #16
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d101      	bne.n	800ece6 <netconn_delete+0x12>
    return ERR_OK;
 800ece2:	2300      	movs	r3, #0
 800ece4:	e00d      	b.n	800ed02 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	f7ff ffd0 	bl	800ec8c <netconn_prepare_delete>
 800ecec:	4603      	mov	r3, r0
 800ecee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ecf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d102      	bne.n	800ecfe <netconn_delete+0x2a>
    netconn_free(conn);
 800ecf8:	6878      	ldr	r0, [r7, #4]
 800ecfa:	f001 f91f 	bl	800ff3c <netconn_free>
  }
  return err;
 800ecfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3710      	adds	r7, #16
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
	...

0800ed0c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b08e      	sub	sp, #56	; 0x38
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	60f8      	str	r0, [r7, #12]
 800ed14:	60b9      	str	r1, [r7, #8]
 800ed16:	4613      	mov	r3, r2
 800ed18:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d109      	bne.n	800ed34 <netconn_bind+0x28>
 800ed20:	4b11      	ldr	r3, [pc, #68]	; (800ed68 <netconn_bind+0x5c>)
 800ed22:	f44f 729c 	mov.w	r2, #312	; 0x138
 800ed26:	4911      	ldr	r1, [pc, #68]	; (800ed6c <netconn_bind+0x60>)
 800ed28:	4811      	ldr	r0, [pc, #68]	; (800ed70 <netconn_bind+0x64>)
 800ed2a:	f00d ff4d 	bl	801cbc8 <iprintf>
 800ed2e:	f06f 030f 	mvn.w	r3, #15
 800ed32:	e015      	b.n	800ed60 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d101      	bne.n	800ed3e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800ed3a:	4b0e      	ldr	r3, [pc, #56]	; (800ed74 <netconn_bind+0x68>)
 800ed3c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800ed46:	88fb      	ldrh	r3, [r7, #6]
 800ed48:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800ed4a:	f107 0314 	add.w	r3, r7, #20
 800ed4e:	4619      	mov	r1, r3
 800ed50:	4809      	ldr	r0, [pc, #36]	; (800ed78 <netconn_bind+0x6c>)
 800ed52:	f7ff ff03 	bl	800eb5c <netconn_apimsg>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800ed5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3738      	adds	r7, #56	; 0x38
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	0801db6c 	.word	0x0801db6c
 800ed6c:	0801dca4 	.word	0x0801dca4
 800ed70:	0801dbc4 	.word	0x0801dbc4
 800ed74:	0802118c 	.word	0x0802118c
 800ed78:	08010561 	.word	0x08010561

0800ed7c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b08e      	sub	sp, #56	; 0x38
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	4613      	mov	r3, r2
 800ed88:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d109      	bne.n	800eda4 <netconn_connect+0x28>
 800ed90:	4b11      	ldr	r3, [pc, #68]	; (800edd8 <netconn_connect+0x5c>)
 800ed92:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 800ed96:	4911      	ldr	r1, [pc, #68]	; (800eddc <netconn_connect+0x60>)
 800ed98:	4811      	ldr	r0, [pc, #68]	; (800ede0 <netconn_connect+0x64>)
 800ed9a:	f00d ff15 	bl	801cbc8 <iprintf>
 800ed9e:	f06f 030f 	mvn.w	r3, #15
 800eda2:	e015      	b.n	800edd0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d101      	bne.n	800edae <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800edaa:	4b0e      	ldr	r3, [pc, #56]	; (800ede4 <netconn_connect+0x68>)
 800edac:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800edb6:	88fb      	ldrh	r3, [r7, #6]
 800edb8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800edba:	f107 0314 	add.w	r3, r7, #20
 800edbe:	4619      	mov	r1, r3
 800edc0:	4809      	ldr	r0, [pc, #36]	; (800ede8 <netconn_connect+0x6c>)
 800edc2:	f7ff fecb 	bl	800eb5c <netconn_apimsg>
 800edc6:	4603      	mov	r3, r0
 800edc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800edcc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3738      	adds	r7, #56	; 0x38
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	0801db6c 	.word	0x0801db6c
 800eddc:	0801dce0 	.word	0x0801dce0
 800ede0:	0801dbc4 	.word	0x0801dbc4
 800ede4:	0802118c 	.word	0x0802118c
 800ede8:	080106f9 	.word	0x080106f9

0800edec <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b08c      	sub	sp, #48	; 0x30
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d109      	bne.n	800ee12 <netconn_listen_with_backlog+0x26>
 800edfe:	4b0d      	ldr	r3, [pc, #52]	; (800ee34 <netconn_listen_with_backlog+0x48>)
 800ee00:	f240 12bb 	movw	r2, #443	; 0x1bb
 800ee04:	490c      	ldr	r1, [pc, #48]	; (800ee38 <netconn_listen_with_backlog+0x4c>)
 800ee06:	480d      	ldr	r0, [pc, #52]	; (800ee3c <netconn_listen_with_backlog+0x50>)
 800ee08:	f00d fede 	bl	801cbc8 <iprintf>
 800ee0c:	f06f 030f 	mvn.w	r3, #15
 800ee10:	e00c      	b.n	800ee2c <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800ee16:	f107 030c 	add.w	r3, r7, #12
 800ee1a:	4619      	mov	r1, r3
 800ee1c:	4808      	ldr	r0, [pc, #32]	; (800ee40 <netconn_listen_with_backlog+0x54>)
 800ee1e:	f7ff fe9d 	bl	800eb5c <netconn_apimsg>
 800ee22:	4603      	mov	r3, r0
 800ee24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ee28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3730      	adds	r7, #48	; 0x30
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	0801db6c 	.word	0x0801db6c
 800ee38:	0801dd24 	.word	0x0801dd24
 800ee3c:	0801dbc4 	.word	0x0801dbc4
 800ee40:	08010875 	.word	0x08010875

0800ee44 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d109      	bne.n	800ee68 <netconn_accept+0x24>
 800ee54:	4b3d      	ldr	r3, [pc, #244]	; (800ef4c <netconn_accept+0x108>)
 800ee56:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ee5a:	493d      	ldr	r1, [pc, #244]	; (800ef50 <netconn_accept+0x10c>)
 800ee5c:	483d      	ldr	r0, [pc, #244]	; (800ef54 <netconn_accept+0x110>)
 800ee5e:	f00d feb3 	bl	801cbc8 <iprintf>
 800ee62:	f06f 030f 	mvn.w	r3, #15
 800ee66:	e06c      	b.n	800ef42 <netconn_accept+0xfe>
  *new_conn = NULL;
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d109      	bne.n	800ee88 <netconn_accept+0x44>
 800ee74:	4b35      	ldr	r3, [pc, #212]	; (800ef4c <netconn_accept+0x108>)
 800ee76:	f240 12e3 	movw	r2, #483	; 0x1e3
 800ee7a:	4937      	ldr	r1, [pc, #220]	; (800ef58 <netconn_accept+0x114>)
 800ee7c:	4835      	ldr	r0, [pc, #212]	; (800ef54 <netconn_accept+0x110>)
 800ee7e:	f00d fea3 	bl	801cbc8 <iprintf>
 800ee82:	f06f 030f 	mvn.w	r3, #15
 800ee86:	e05c      	b.n	800ef42 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f000 fb6c 	bl	800f566 <netconn_err>
 800ee8e:	4603      	mov	r3, r0
 800ee90:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 800ee92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800ee9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ee9e:	e050      	b.n	800ef42 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	3314      	adds	r3, #20
 800eea4:	4618      	mov	r0, r3
 800eea6:	f00d fd10 	bl	801c8ca <sys_mbox_valid>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d005      	beq.n	800eebc <netconn_accept+0x78>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	7f1b      	ldrb	r3, [r3, #28]
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d002      	beq.n	800eec2 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800eebc:	f06f 030e 	mvn.w	r3, #14
 800eec0:	e03f      	b.n	800ef42 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	7f1b      	ldrb	r3, [r3, #28]
 800eec6:	f003 0302 	and.w	r3, r3, #2
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00e      	beq.n	800eeec <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	3314      	adds	r3, #20
 800eed2:	f107 020c 	add.w	r2, r7, #12
 800eed6:	4611      	mov	r1, r2
 800eed8:	4618      	mov	r0, r3
 800eeda:	f00d fcda 	bl	801c892 <sys_arch_mbox_tryfetch>
 800eede:	4603      	mov	r3, r0
 800eee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eee4:	d10a      	bne.n	800eefc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800eee6:	f06f 0306 	mvn.w	r3, #6
 800eeea:	e02a      	b.n	800ef42 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	3314      	adds	r3, #20
 800eef0:	f107 010c 	add.w	r1, r7, #12
 800eef4:	2200      	movs	r2, #0
 800eef6:	4618      	mov	r0, r3
 800eef8:	f00d fc8c 	bl	801c814 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d005      	beq.n	800ef10 <netconn_accept+0xcc>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef08:	2200      	movs	r2, #0
 800ef0a:	2101      	movs	r1, #1
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	f107 0213 	add.w	r2, r7, #19
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f000 fb71 	bl	800f600 <lwip_netconn_is_err_msg>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 800ef24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ef28:	e00b      	b.n	800ef42 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d102      	bne.n	800ef36 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 800ef30:	f06f 030e 	mvn.w	r3, #14
 800ef34:	e005      	b.n	800ef42 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	697a      	ldr	r2, [r7, #20]
 800ef3e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800ef40:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3718      	adds	r7, #24
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	0801db6c 	.word	0x0801db6c
 800ef50:	0801dd44 	.word	0x0801dd44
 800ef54:	0801dbc4 	.word	0x0801dbc4
 800ef58:	0801dd64 	.word	0x0801dd64

0800ef5c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b088      	sub	sp, #32
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	4613      	mov	r3, r2
 800ef68:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d109      	bne.n	800ef88 <netconn_recv_data+0x2c>
 800ef74:	4b58      	ldr	r3, [pc, #352]	; (800f0d8 <netconn_recv_data+0x17c>)
 800ef76:	f44f 7212 	mov.w	r2, #584	; 0x248
 800ef7a:	4958      	ldr	r1, [pc, #352]	; (800f0dc <netconn_recv_data+0x180>)
 800ef7c:	4858      	ldr	r0, [pc, #352]	; (800f0e0 <netconn_recv_data+0x184>)
 800ef7e:	f00d fe23 	bl	801cbc8 <iprintf>
 800ef82:	f06f 030f 	mvn.w	r3, #15
 800ef86:	e0a2      	b.n	800f0ce <netconn_recv_data+0x172>
  *new_buf = NULL;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d109      	bne.n	800efa8 <netconn_recv_data+0x4c>
 800ef94:	4b50      	ldr	r3, [pc, #320]	; (800f0d8 <netconn_recv_data+0x17c>)
 800ef96:	f240 224a 	movw	r2, #586	; 0x24a
 800ef9a:	4952      	ldr	r1, [pc, #328]	; (800f0e4 <netconn_recv_data+0x188>)
 800ef9c:	4850      	ldr	r0, [pc, #320]	; (800f0e0 <netconn_recv_data+0x184>)
 800ef9e:	f00d fe13 	bl	801cbc8 <iprintf>
 800efa2:	f06f 030f 	mvn.w	r3, #15
 800efa6:	e092      	b.n	800f0ce <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	3310      	adds	r3, #16
 800efac:	4618      	mov	r0, r3
 800efae:	f00d fc8c 	bl	801c8ca <sys_mbox_valid>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d10e      	bne.n	800efd6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800efb8:	68f8      	ldr	r0, [r7, #12]
 800efba:	f000 fad4 	bl	800f566 <netconn_err>
 800efbe:	4603      	mov	r3, r0
 800efc0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800efc2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d002      	beq.n	800efd0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800efca:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800efce:	e07e      	b.n	800f0ce <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800efd0:	f06f 030a 	mvn.w	r3, #10
 800efd4:	e07b      	b.n	800f0ce <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	7f1b      	ldrb	r3, [r3, #28]
 800efda:	f003 0302 	and.w	r3, r3, #2
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d10f      	bne.n	800f002 <netconn_recv_data+0xa6>
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	f003 0304 	and.w	r3, r3, #4
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d10a      	bne.n	800f002 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	7f1b      	ldrb	r3, [r3, #28]
 800eff0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d104      	bne.n	800f002 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d023      	beq.n	800f04a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	3310      	adds	r3, #16
 800f006:	f107 0218 	add.w	r2, r7, #24
 800f00a:	4611      	mov	r1, r2
 800f00c:	4618      	mov	r0, r3
 800f00e:	f00d fc40 	bl	801c892 <sys_arch_mbox_tryfetch>
 800f012:	4603      	mov	r3, r0
 800f014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f018:	d11f      	bne.n	800f05a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800f01a:	68f8      	ldr	r0, [r7, #12]
 800f01c:	f000 faa3 	bl	800f566 <netconn_err>
 800f020:	4603      	mov	r3, r0
 800f022:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800f024:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d002      	beq.n	800f032 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800f02c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800f030:	e04d      	b.n	800f0ce <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	7f1b      	ldrb	r3, [r3, #28]
 800f036:	f003 0301 	and.w	r3, r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d002      	beq.n	800f044 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800f03e:	f06f 030a 	mvn.w	r3, #10
 800f042:	e044      	b.n	800f0ce <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800f044:	f06f 0306 	mvn.w	r3, #6
 800f048:	e041      	b.n	800f0ce <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	3310      	adds	r3, #16
 800f04e:	f107 0118 	add.w	r1, r7, #24
 800f052:	2200      	movs	r2, #0
 800f054:	4618      	mov	r0, r3
 800f056:	f00d fbdd 	bl	801c814 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f062:	2b10      	cmp	r3, #16
 800f064:	d117      	bne.n	800f096 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	f107 0217 	add.w	r2, r7, #23
 800f06c:	4611      	mov	r1, r2
 800f06e:	4618      	mov	r0, r3
 800f070:	f000 fac6 	bl	800f600 <lwip_netconn_is_err_msg>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	d009      	beq.n	800f08e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800f07a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f07e:	f113 0f0f 	cmn.w	r3, #15
 800f082:	d101      	bne.n	800f088 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800f084:	2300      	movs	r3, #0
 800f086:	e022      	b.n	800f0ce <netconn_recv_data+0x172>
      }
      return err;
 800f088:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f08c:	e01f      	b.n	800f0ce <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800f08e:	69bb      	ldr	r3, [r7, #24]
 800f090:	891b      	ldrh	r3, [r3, #8]
 800f092:	83fb      	strh	r3, [r7, #30]
 800f094:	e00d      	b.n	800f0b2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d106      	bne.n	800f0aa <netconn_recv_data+0x14e>
 800f09c:	4b0e      	ldr	r3, [pc, #56]	; (800f0d8 <netconn_recv_data+0x17c>)
 800f09e:	f240 2291 	movw	r2, #657	; 0x291
 800f0a2:	4911      	ldr	r1, [pc, #68]	; (800f0e8 <netconn_recv_data+0x18c>)
 800f0a4:	480e      	ldr	r0, [pc, #56]	; (800f0e0 <netconn_recv_data+0x184>)
 800f0a6:	f00d fd8f 	bl	801cbc8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800f0aa:	69bb      	ldr	r3, [r7, #24]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	891b      	ldrh	r3, [r3, #8]
 800f0b0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d005      	beq.n	800f0c6 <netconn_recv_data+0x16a>
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0be:	8bfa      	ldrh	r2, [r7, #30]
 800f0c0:	2101      	movs	r1, #1
 800f0c2:	68f8      	ldr	r0, [r7, #12]
 800f0c4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800f0c6:	69ba      	ldr	r2, [r7, #24]
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3720      	adds	r7, #32
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}
 800f0d6:	bf00      	nop
 800f0d8:	0801db6c 	.word	0x0801db6c
 800f0dc:	0801dd84 	.word	0x0801dd84
 800f0e0:	0801dbc4 	.word	0x0801dbc4
 800f0e4:	0801dda4 	.word	0x0801dda4
 800f0e8:	0801ddc0 	.word	0x0801ddc0

0800f0ec <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	60f8      	str	r0, [r7, #12]
 800f0f4:	60b9      	str	r1, [r7, #8]
 800f0f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d005      	beq.n	800f10a <netconn_tcp_recvd_msg+0x1e>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f106:	2b10      	cmp	r3, #16
 800f108:	d009      	beq.n	800f11e <netconn_tcp_recvd_msg+0x32>
 800f10a:	4b0c      	ldr	r3, [pc, #48]	; (800f13c <netconn_tcp_recvd_msg+0x50>)
 800f10c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f110:	490b      	ldr	r1, [pc, #44]	; (800f140 <netconn_tcp_recvd_msg+0x54>)
 800f112:	480c      	ldr	r0, [pc, #48]	; (800f144 <netconn_tcp_recvd_msg+0x58>)
 800f114:	f00d fd58 	bl	801cbc8 <iprintf>
 800f118:	f06f 030f 	mvn.w	r3, #15
 800f11c:	e00a      	b.n	800f134 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800f12a:	6879      	ldr	r1, [r7, #4]
 800f12c:	4806      	ldr	r0, [pc, #24]	; (800f148 <netconn_tcp_recvd_msg+0x5c>)
 800f12e:	f7ff fd15 	bl	800eb5c <netconn_apimsg>
 800f132:	4603      	mov	r3, r0
}
 800f134:	4618      	mov	r0, r3
 800f136:	3710      	adds	r7, #16
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	0801db6c 	.word	0x0801db6c
 800f140:	0801ddcc 	.word	0x0801ddcc
 800f144:	0801dbc4 	.word	0x0801dbc4
 800f148:	080109a5 	.word	0x080109a5

0800f14c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b090      	sub	sp, #64	; 0x40
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	4613      	mov	r3, r2
 800f158:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	3310      	adds	r3, #16
 800f15e:	4618      	mov	r0, r3
 800f160:	f00d fbb3 	bl	801c8ca <sys_mbox_valid>
 800f164:	4603      	mov	r3, r0
 800f166:	2b00      	cmp	r3, #0
 800f168:	d102      	bne.n	800f170 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800f16a:	f06f 030a 	mvn.w	r3, #10
 800f16e:	e06d      	b.n	800f24c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	7f1b      	ldrb	r3, [r3, #28]
 800f174:	b25b      	sxtb	r3, r3
 800f176:	2b00      	cmp	r3, #0
 800f178:	da07      	bge.n	800f18a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	7f1b      	ldrb	r3, [r3, #28]
 800f17e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f182:	b2da      	uxtb	r2, r3
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800f188:	e039      	b.n	800f1fe <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800f18a:	79fb      	ldrb	r3, [r7, #7]
 800f18c:	461a      	mov	r2, r3
 800f18e:	68b9      	ldr	r1, [r7, #8]
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f7ff fee3 	bl	800ef5c <netconn_recv_data>
 800f196:	4603      	mov	r3, r0
 800f198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800f19c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d002      	beq.n	800f1aa <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800f1a4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f1a8:	e050      	b.n	800f24c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800f1b0:	79fb      	ldrb	r3, [r7, #7]
 800f1b2:	f003 0308 	and.w	r3, r3, #8
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d10e      	bne.n	800f1d8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d002      	beq.n	800f1c6 <netconn_recv_data_tcp+0x7a>
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c2:	891b      	ldrh	r3, [r3, #8]
 800f1c4:	e000      	b.n	800f1c8 <netconn_recv_data_tcp+0x7c>
 800f1c6:	2301      	movs	r3, #1
 800f1c8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800f1ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f1cc:	f107 0214 	add.w	r2, r7, #20
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	68f8      	ldr	r0, [r7, #12]
 800f1d4:	f7ff ff8a 	bl	800f0ec <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d134      	bne.n	800f248 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	f003 0310 	and.w	r3, r3, #16
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d009      	beq.n	800f1fc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	7f1b      	ldrb	r3, [r3, #28]
 800f1ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800f1f6:	f06f 0306 	mvn.w	r3, #6
 800f1fa:	e027      	b.n	800f24c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800f1fc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f202:	2b00      	cmp	r3, #0
 800f204:	d005      	beq.n	800f212 <netconn_recv_data_tcp+0xc6>
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f20a:	2200      	movs	r2, #0
 800f20c:	2101      	movs	r1, #1
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	685b      	ldr	r3, [r3, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d10f      	bne.n	800f23a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f000 f9a3 	bl	800f566 <netconn_err>
 800f220:	4603      	mov	r3, r0
 800f222:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800f226:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d002      	beq.n	800f234 <netconn_recv_data_tcp+0xe8>
          return err;
 800f22e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f232:	e00b      	b.n	800f24c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800f234:	f06f 030d 	mvn.w	r3, #13
 800f238:	e008      	b.n	800f24c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800f23a:	2101      	movs	r1, #1
 800f23c:	68f8      	ldr	r0, [r7, #12]
 800f23e:	f000 f955 	bl	800f4ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800f242:	f06f 030e 	mvn.w	r3, #14
 800f246:	e001      	b.n	800f24c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800f248:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3740      	adds	r7, #64	; 0x40
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}

0800f254 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800f25e:	2300      	movs	r3, #0
 800f260:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d109      	bne.n	800f27c <netconn_recv+0x28>
 800f268:	4b32      	ldr	r3, [pc, #200]	; (800f334 <netconn_recv+0xe0>)
 800f26a:	f240 3263 	movw	r2, #867	; 0x363
 800f26e:	4932      	ldr	r1, [pc, #200]	; (800f338 <netconn_recv+0xe4>)
 800f270:	4832      	ldr	r0, [pc, #200]	; (800f33c <netconn_recv+0xe8>)
 800f272:	f00d fca9 	bl	801cbc8 <iprintf>
 800f276:	f06f 030f 	mvn.w	r3, #15
 800f27a:	e056      	b.n	800f32a <netconn_recv+0xd6>
  *new_buf = NULL;
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2200      	movs	r2, #0
 800f280:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d109      	bne.n	800f29c <netconn_recv+0x48>
 800f288:	4b2a      	ldr	r3, [pc, #168]	; (800f334 <netconn_recv+0xe0>)
 800f28a:	f240 3265 	movw	r2, #869	; 0x365
 800f28e:	492c      	ldr	r1, [pc, #176]	; (800f340 <netconn_recv+0xec>)
 800f290:	482a      	ldr	r0, [pc, #168]	; (800f33c <netconn_recv+0xe8>)
 800f292:	f00d fc99 	bl	801cbc8 <iprintf>
 800f296:	f06f 030f 	mvn.w	r3, #15
 800f29a:	e046      	b.n	800f32a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f2a4:	2b10      	cmp	r3, #16
 800f2a6:	d13a      	bne.n	800f31e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f2ac:	2006      	movs	r0, #6
 800f2ae:	f002 ff2d 	bl	801210c <memp_malloc>
 800f2b2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800f2b4:	697b      	ldr	r3, [r7, #20]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d102      	bne.n	800f2c0 <netconn_recv+0x6c>
      return ERR_MEM;
 800f2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800f2be:	e034      	b.n	800f32a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800f2c0:	f107 030c 	add.w	r3, r7, #12
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff ff3f 	bl	800f14c <netconn_recv_data_tcp>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f2d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d006      	beq.n	800f2e8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800f2da:	6979      	ldr	r1, [r7, #20]
 800f2dc:	2006      	movs	r0, #6
 800f2de:	f002 ff8b 	bl	80121f8 <memp_free>
      return err;
 800f2e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f2e6:	e020      	b.n	800f32a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d106      	bne.n	800f2fc <netconn_recv+0xa8>
 800f2ee:	4b11      	ldr	r3, [pc, #68]	; (800f334 <netconn_recv+0xe0>)
 800f2f0:	f240 3279 	movw	r2, #889	; 0x379
 800f2f4:	4913      	ldr	r1, [pc, #76]	; (800f344 <netconn_recv+0xf0>)
 800f2f6:	4811      	ldr	r0, [pc, #68]	; (800f33c <netconn_recv+0xe8>)
 800f2f8:	f00d fc66 	bl	801cbc8 <iprintf>

    buf->p = p;
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	2200      	movs	r2, #0
 800f30c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	2200      	movs	r2, #0
 800f312:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	697a      	ldr	r2, [r7, #20]
 800f318:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800f31a:	2300      	movs	r3, #0
 800f31c:	e005      	b.n	800f32a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800f31e:	2200      	movs	r2, #0
 800f320:	6839      	ldr	r1, [r7, #0]
 800f322:	6878      	ldr	r0, [r7, #4]
 800f324:	f7ff fe1a 	bl	800ef5c <netconn_recv_data>
 800f328:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3718      	adds	r7, #24
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	0801db6c 	.word	0x0801db6c
 800f338:	0801dd84 	.word	0x0801dd84
 800f33c:	0801dbc4 	.word	0x0801dbc4
 800f340:	0801dda4 	.word	0x0801dda4
 800f344:	0801de1c 	.word	0x0801de1c

0800f348 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b088      	sub	sp, #32
 800f34c:	af02      	add	r7, sp, #8
 800f34e:	60f8      	str	r0, [r7, #12]
 800f350:	60b9      	str	r1, [r7, #8]
 800f352:	607a      	str	r2, [r7, #4]
 800f354:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800f35e:	78fa      	ldrb	r2, [r7, #3]
 800f360:	f107 0110 	add.w	r1, r7, #16
 800f364:	6a3b      	ldr	r3, [r7, #32]
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	4613      	mov	r3, r2
 800f36a:	2201      	movs	r2, #1
 800f36c:	68f8      	ldr	r0, [r7, #12]
 800f36e:	f000 f805 	bl	800f37c <netconn_write_vectors_partly>
 800f372:	4603      	mov	r3, r0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3718      	adds	r7, #24
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b092      	sub	sp, #72	; 0x48
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	4611      	mov	r1, r2
 800f388:	461a      	mov	r2, r3
 800f38a:	460b      	mov	r3, r1
 800f38c:	80fb      	strh	r3, [r7, #6]
 800f38e:	4613      	mov	r3, r2
 800f390:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d109      	bne.n	800f3ac <netconn_write_vectors_partly+0x30>
 800f398:	4b4e      	ldr	r3, [pc, #312]	; (800f4d4 <netconn_write_vectors_partly+0x158>)
 800f39a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f39e:	494e      	ldr	r1, [pc, #312]	; (800f4d8 <netconn_write_vectors_partly+0x15c>)
 800f3a0:	484e      	ldr	r0, [pc, #312]	; (800f4dc <netconn_write_vectors_partly+0x160>)
 800f3a2:	f00d fc11 	bl	801cbc8 <iprintf>
 800f3a6:	f06f 030f 	mvn.w	r3, #15
 800f3aa:	e08e      	b.n	800f4ca <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f3b4:	2b10      	cmp	r3, #16
 800f3b6:	d009      	beq.n	800f3cc <netconn_write_vectors_partly+0x50>
 800f3b8:	4b46      	ldr	r3, [pc, #280]	; (800f4d4 <netconn_write_vectors_partly+0x158>)
 800f3ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f3be:	4948      	ldr	r1, [pc, #288]	; (800f4e0 <netconn_write_vectors_partly+0x164>)
 800f3c0:	4846      	ldr	r0, [pc, #280]	; (800f4dc <netconn_write_vectors_partly+0x160>)
 800f3c2:	f00d fc01 	bl	801cbc8 <iprintf>
 800f3c6:	f06f 0305 	mvn.w	r3, #5
 800f3ca:	e07e      	b.n	800f4ca <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	7f1b      	ldrb	r3, [r3, #28]
 800f3d0:	f003 0302 	and.w	r3, r3, #2
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d104      	bne.n	800f3e2 <netconn_write_vectors_partly+0x66>
 800f3d8:	797b      	ldrb	r3, [r7, #5]
 800f3da:	f003 0304 	and.w	r3, r3, #4
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d001      	beq.n	800f3e6 <netconn_write_vectors_partly+0x6a>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e000      	b.n	800f3e8 <netconn_write_vectors_partly+0x6c>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800f3ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d005      	beq.n	800f400 <netconn_write_vectors_partly+0x84>
 800f3f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d102      	bne.n	800f400 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800f3fa:	f06f 0305 	mvn.w	r3, #5
 800f3fe:	e064      	b.n	800f4ca <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800f400:	2300      	movs	r3, #0
 800f402:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800f404:	2300      	movs	r3, #0
 800f406:	643b      	str	r3, [r7, #64]	; 0x40
 800f408:	e015      	b.n	800f436 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800f40a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	68ba      	ldr	r2, [r7, #8]
 800f410:	4413      	add	r3, r2
 800f412:	685b      	ldr	r3, [r3, #4]
 800f414:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f416:	4413      	add	r3, r2
 800f418:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800f41a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f41c:	00db      	lsls	r3, r3, #3
 800f41e:	68ba      	ldr	r2, [r7, #8]
 800f420:	4413      	add	r3, r2
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f426:	429a      	cmp	r2, r3
 800f428:	d202      	bcs.n	800f430 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800f42a:	f06f 0305 	mvn.w	r3, #5
 800f42e:	e04c      	b.n	800f4ca <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800f430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f432:	3301      	adds	r3, #1
 800f434:	643b      	str	r3, [r7, #64]	; 0x40
 800f436:	88fb      	ldrh	r3, [r7, #6]
 800f438:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f43a:	429a      	cmp	r2, r3
 800f43c:	dbe5      	blt.n	800f40a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800f43e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800f444:	2300      	movs	r3, #0
 800f446:	e040      	b.n	800f4ca <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800f448:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	da0a      	bge.n	800f464 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800f44e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f450:	2b00      	cmp	r3, #0
 800f452:	d102      	bne.n	800f45a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800f454:	f06f 0305 	mvn.w	r3, #5
 800f458:	e037      	b.n	800f4ca <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800f45a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f45e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800f460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f462:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800f468:	68bb      	ldr	r3, [r7, #8]
 800f46a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800f46c:	88fb      	ldrh	r3, [r7, #6]
 800f46e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800f470:	2300      	movs	r3, #0
 800f472:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800f474:	797b      	ldrb	r3, [r7, #5]
 800f476:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800f47a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f47c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800f47e:	2300      	movs	r3, #0
 800f480:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800f482:	f107 0314 	add.w	r3, r7, #20
 800f486:	4619      	mov	r1, r3
 800f488:	4816      	ldr	r0, [pc, #88]	; (800f4e4 <netconn_write_vectors_partly+0x168>)
 800f48a:	f7ff fb67 	bl	800eb5c <netconn_apimsg>
 800f48e:	4603      	mov	r3, r0
 800f490:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800f494:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d114      	bne.n	800f4c6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800f49c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d002      	beq.n	800f4a8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800f4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4a6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800f4a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d10a      	bne.n	800f4c6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d006      	beq.n	800f4c6 <netconn_write_vectors_partly+0x14a>
 800f4b8:	4b06      	ldr	r3, [pc, #24]	; (800f4d4 <netconn_write_vectors_partly+0x158>)
 800f4ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f4be:	490a      	ldr	r1, [pc, #40]	; (800f4e8 <netconn_write_vectors_partly+0x16c>)
 800f4c0:	4806      	ldr	r0, [pc, #24]	; (800f4dc <netconn_write_vectors_partly+0x160>)
 800f4c2:	f00d fb81 	bl	801cbc8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800f4c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	3748      	adds	r7, #72	; 0x48
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	0801db6c 	.word	0x0801db6c
 800f4d8:	0801de44 	.word	0x0801de44
 800f4dc:	0801dbc4 	.word	0x0801dbc4
 800f4e0:	0801de60 	.word	0x0801de60
 800f4e4:	08010da9 	.word	0x08010da9
 800f4e8:	0801de84 	.word	0x0801de84

0800f4ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b08c      	sub	sp, #48	; 0x30
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d109      	bne.n	800f512 <netconn_close_shutdown+0x26>
 800f4fe:	4b0f      	ldr	r3, [pc, #60]	; (800f53c <netconn_close_shutdown+0x50>)
 800f500:	f240 4247 	movw	r2, #1095	; 0x447
 800f504:	490e      	ldr	r1, [pc, #56]	; (800f540 <netconn_close_shutdown+0x54>)
 800f506:	480f      	ldr	r0, [pc, #60]	; (800f544 <netconn_close_shutdown+0x58>)
 800f508:	f00d fb5e 	bl	801cbc8 <iprintf>
 800f50c:	f06f 030f 	mvn.w	r3, #15
 800f510:	e010      	b.n	800f534 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800f516:	78fb      	ldrb	r3, [r7, #3]
 800f518:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800f51a:	2329      	movs	r3, #41	; 0x29
 800f51c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800f51e:	f107 030c 	add.w	r3, r7, #12
 800f522:	4619      	mov	r1, r3
 800f524:	4808      	ldr	r0, [pc, #32]	; (800f548 <netconn_close_shutdown+0x5c>)
 800f526:	f7ff fb19 	bl	800eb5c <netconn_apimsg>
 800f52a:	4603      	mov	r3, r0
 800f52c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800f530:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800f534:	4618      	mov	r0, r3
 800f536:	3730      	adds	r7, #48	; 0x30
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}
 800f53c:	0801db6c 	.word	0x0801db6c
 800f540:	0801dea8 	.word	0x0801dea8
 800f544:	0801dbc4 	.word	0x0801dbc4
 800f548:	08010ec1 	.word	0x08010ec1

0800f54c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800f554:	2103      	movs	r1, #3
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f7ff ffc8 	bl	800f4ec <netconn_close_shutdown>
 800f55c:	4603      	mov	r3, r0
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b084      	sub	sp, #16
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <netconn_err+0x12>
    return ERR_OK;
 800f574:	2300      	movs	r3, #0
 800f576:	e00d      	b.n	800f594 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800f578:	f00d fac2 	bl	801cb00 <sys_arch_protect>
 800f57c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	7a1b      	ldrb	r3, [r3, #8]
 800f582:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2200      	movs	r2, #0
 800f588:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f00d fac6 	bl	801cb1c <sys_arch_unprotect>
  return err;
 800f590:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f594:	4618      	mov	r0, r3
 800f596:	3710      	adds	r7, #16
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	4603      	mov	r3, r0
 800f5a4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800f5a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5aa:	f113 0f0e 	cmn.w	r3, #14
 800f5ae:	d008      	beq.n	800f5c2 <lwip_netconn_err_to_msg+0x26>
 800f5b0:	f113 0f0d 	cmn.w	r3, #13
 800f5b4:	d003      	beq.n	800f5be <lwip_netconn_err_to_msg+0x22>
 800f5b6:	f113 0f0f 	cmn.w	r3, #15
 800f5ba:	d004      	beq.n	800f5c6 <lwip_netconn_err_to_msg+0x2a>
 800f5bc:	e005      	b.n	800f5ca <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800f5be:	4b0a      	ldr	r3, [pc, #40]	; (800f5e8 <lwip_netconn_err_to_msg+0x4c>)
 800f5c0:	e00e      	b.n	800f5e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	; (800f5ec <lwip_netconn_err_to_msg+0x50>)
 800f5c4:	e00c      	b.n	800f5e0 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800f5c6:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <lwip_netconn_err_to_msg+0x54>)
 800f5c8:	e00a      	b.n	800f5e0 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800f5ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d005      	beq.n	800f5de <lwip_netconn_err_to_msg+0x42>
 800f5d2:	4b08      	ldr	r3, [pc, #32]	; (800f5f4 <lwip_netconn_err_to_msg+0x58>)
 800f5d4:	227d      	movs	r2, #125	; 0x7d
 800f5d6:	4908      	ldr	r1, [pc, #32]	; (800f5f8 <lwip_netconn_err_to_msg+0x5c>)
 800f5d8:	4808      	ldr	r0, [pc, #32]	; (800f5fc <lwip_netconn_err_to_msg+0x60>)
 800f5da:	f00d faf5 	bl	801cbc8 <iprintf>
      return NULL;
 800f5de:	2300      	movs	r3, #0
  }
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	08021078 	.word	0x08021078
 800f5ec:	08021079 	.word	0x08021079
 800f5f0:	0802107a 	.word	0x0802107a
 800f5f4:	0801dec4 	.word	0x0801dec4
 800f5f8:	0801def8 	.word	0x0801def8
 800f5fc:	0801df08 	.word	0x0801df08

0800f600 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d105      	bne.n	800f61c <lwip_netconn_is_err_msg+0x1c>
 800f610:	4b12      	ldr	r3, [pc, #72]	; (800f65c <lwip_netconn_is_err_msg+0x5c>)
 800f612:	2285      	movs	r2, #133	; 0x85
 800f614:	4912      	ldr	r1, [pc, #72]	; (800f660 <lwip_netconn_is_err_msg+0x60>)
 800f616:	4813      	ldr	r0, [pc, #76]	; (800f664 <lwip_netconn_is_err_msg+0x64>)
 800f618:	f00d fad6 	bl	801cbc8 <iprintf>

  if (msg == &netconn_aborted) {
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	4a12      	ldr	r2, [pc, #72]	; (800f668 <lwip_netconn_is_err_msg+0x68>)
 800f620:	4293      	cmp	r3, r2
 800f622:	d104      	bne.n	800f62e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	22f3      	movs	r2, #243	; 0xf3
 800f628:	701a      	strb	r2, [r3, #0]
    return 1;
 800f62a:	2301      	movs	r3, #1
 800f62c:	e012      	b.n	800f654 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a0e      	ldr	r2, [pc, #56]	; (800f66c <lwip_netconn_is_err_msg+0x6c>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d104      	bne.n	800f640 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800f636:	683b      	ldr	r3, [r7, #0]
 800f638:	22f2      	movs	r2, #242	; 0xf2
 800f63a:	701a      	strb	r2, [r3, #0]
    return 1;
 800f63c:	2301      	movs	r3, #1
 800f63e:	e009      	b.n	800f654 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a0b      	ldr	r2, [pc, #44]	; (800f670 <lwip_netconn_is_err_msg+0x70>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d104      	bne.n	800f652 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	22f1      	movs	r2, #241	; 0xf1
 800f64c:	701a      	strb	r2, [r3, #0]
    return 1;
 800f64e:	2301      	movs	r3, #1
 800f650:	e000      	b.n	800f654 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800f652:	2300      	movs	r3, #0
}
 800f654:	4618      	mov	r0, r3
 800f656:	3708      	adds	r7, #8
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	0801dec4 	.word	0x0801dec4
 800f660:	0801df30 	.word	0x0801df30
 800f664:	0801df08 	.word	0x0801df08
 800f668:	08021078 	.word	0x08021078
 800f66c:	08021079 	.word	0x08021079
 800f670:	0802107a 	.word	0x0802107a

0800f674 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b088      	sub	sp, #32
 800f678:	af00      	add	r7, sp, #0
 800f67a:	60f8      	str	r0, [r7, #12]
 800f67c:	60b9      	str	r1, [r7, #8]
 800f67e:	607a      	str	r2, [r7, #4]
 800f680:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d105      	bne.n	800f694 <recv_udp+0x20>
 800f688:	4b34      	ldr	r3, [pc, #208]	; (800f75c <recv_udp+0xe8>)
 800f68a:	22e5      	movs	r2, #229	; 0xe5
 800f68c:	4934      	ldr	r1, [pc, #208]	; (800f760 <recv_udp+0xec>)
 800f68e:	4835      	ldr	r0, [pc, #212]	; (800f764 <recv_udp+0xf0>)
 800f690:	f00d fa9a 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d105      	bne.n	800f6a6 <recv_udp+0x32>
 800f69a:	4b30      	ldr	r3, [pc, #192]	; (800f75c <recv_udp+0xe8>)
 800f69c:	22e6      	movs	r2, #230	; 0xe6
 800f69e:	4932      	ldr	r1, [pc, #200]	; (800f768 <recv_udp+0xf4>)
 800f6a0:	4830      	ldr	r0, [pc, #192]	; (800f764 <recv_udp+0xf0>)
 800f6a2:	f00d fa91 	bl	801cbc8 <iprintf>
  conn = (struct netconn *)arg;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d103      	bne.n	800f6b8 <recv_udp+0x44>
    pbuf_free(p);
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f003 fc41 	bl	8012f38 <pbuf_free>
    return;
 800f6b6:	e04d      	b.n	800f754 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800f6b8:	69fb      	ldr	r3, [r7, #28]
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	68ba      	ldr	r2, [r7, #8]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	d005      	beq.n	800f6ce <recv_udp+0x5a>
 800f6c2:	4b26      	ldr	r3, [pc, #152]	; (800f75c <recv_udp+0xe8>)
 800f6c4:	22ee      	movs	r2, #238	; 0xee
 800f6c6:	4929      	ldr	r1, [pc, #164]	; (800f76c <recv_udp+0xf8>)
 800f6c8:	4826      	ldr	r0, [pc, #152]	; (800f764 <recv_udp+0xf0>)
 800f6ca:	f00d fa7d 	bl	801cbc8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f6ce:	69fb      	ldr	r3, [r7, #28]
 800f6d0:	3310      	adds	r3, #16
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f00d f8f9 	bl	801c8ca <sys_mbox_valid>
 800f6d8:	4603      	mov	r3, r0
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d103      	bne.n	800f6e6 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f003 fc2a 	bl	8012f38 <pbuf_free>
    return;
 800f6e4:	e036      	b.n	800f754 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800f6e6:	2006      	movs	r0, #6
 800f6e8:	f002 fd10 	bl	801210c <memp_malloc>
 800f6ec:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800f6ee:	69bb      	ldr	r3, [r7, #24]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d103      	bne.n	800f6fc <recv_udp+0x88>
    pbuf_free(p);
 800f6f4:	6878      	ldr	r0, [r7, #4]
 800f6f6:	f003 fc1f 	bl	8012f38 <pbuf_free>
    return;
 800f6fa:	e02b      	b.n	800f754 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800f702:	69bb      	ldr	r3, [r7, #24]
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d002      	beq.n	800f714 <recv_udp+0xa0>
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	e000      	b.n	800f716 <recv_udp+0xa2>
 800f714:	2300      	movs	r3, #0
 800f716:	69ba      	ldr	r2, [r7, #24]
 800f718:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f71e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	891b      	ldrh	r3, [r3, #8]
 800f724:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	3310      	adds	r3, #16
 800f72a:	69b9      	ldr	r1, [r7, #24]
 800f72c:	4618      	mov	r0, r3
 800f72e:	f00d f857 	bl	801c7e0 <sys_mbox_trypost>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d003      	beq.n	800f740 <recv_udp+0xcc>
    netbuf_delete(buf);
 800f738:	69b8      	ldr	r0, [r7, #24]
 800f73a:	f001 fc4d 	bl	8010fd8 <netbuf_delete>
    return;
 800f73e:	e009      	b.n	800f754 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f740:	69fb      	ldr	r3, [r7, #28]
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	2b00      	cmp	r3, #0
 800f746:	d005      	beq.n	800f754 <recv_udp+0xe0>
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74c:	8afa      	ldrh	r2, [r7, #22]
 800f74e:	2100      	movs	r1, #0
 800f750:	69f8      	ldr	r0, [r7, #28]
 800f752:	4798      	blx	r3
  }
}
 800f754:	3720      	adds	r7, #32
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	0801dec4 	.word	0x0801dec4
 800f760:	0801df3c 	.word	0x0801df3c
 800f764:	0801df08 	.word	0x0801df08
 800f768:	0801df60 	.word	0x0801df60
 800f76c:	0801df80 	.word	0x0801df80

0800f770 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
 800f77c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d106      	bne.n	800f792 <recv_tcp+0x22>
 800f784:	4b36      	ldr	r3, [pc, #216]	; (800f860 <recv_tcp+0xf0>)
 800f786:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f78a:	4936      	ldr	r1, [pc, #216]	; (800f864 <recv_tcp+0xf4>)
 800f78c:	4836      	ldr	r0, [pc, #216]	; (800f868 <recv_tcp+0xf8>)
 800f78e:	f00d fa1b 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d106      	bne.n	800f7a6 <recv_tcp+0x36>
 800f798:	4b31      	ldr	r3, [pc, #196]	; (800f860 <recv_tcp+0xf0>)
 800f79a:	f240 122d 	movw	r2, #301	; 0x12d
 800f79e:	4933      	ldr	r1, [pc, #204]	; (800f86c <recv_tcp+0xfc>)
 800f7a0:	4831      	ldr	r0, [pc, #196]	; (800f868 <recv_tcp+0xf8>)
 800f7a2:	f00d fa11 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800f7a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d006      	beq.n	800f7bc <recv_tcp+0x4c>
 800f7ae:	4b2c      	ldr	r3, [pc, #176]	; (800f860 <recv_tcp+0xf0>)
 800f7b0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800f7b4:	492e      	ldr	r1, [pc, #184]	; (800f870 <recv_tcp+0x100>)
 800f7b6:	482c      	ldr	r0, [pc, #176]	; (800f868 <recv_tcp+0xf8>)
 800f7b8:	f00d fa06 	bl	801cbc8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d102      	bne.n	800f7cc <recv_tcp+0x5c>
    return ERR_VAL;
 800f7c6:	f06f 0305 	mvn.w	r3, #5
 800f7ca:	e045      	b.n	800f858 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800f7cc:	697b      	ldr	r3, [r7, #20]
 800f7ce:	685b      	ldr	r3, [r3, #4]
 800f7d0:	68ba      	ldr	r2, [r7, #8]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d006      	beq.n	800f7e4 <recv_tcp+0x74>
 800f7d6:	4b22      	ldr	r3, [pc, #136]	; (800f860 <recv_tcp+0xf0>)
 800f7d8:	f240 1235 	movw	r2, #309	; 0x135
 800f7dc:	4925      	ldr	r1, [pc, #148]	; (800f874 <recv_tcp+0x104>)
 800f7de:	4822      	ldr	r0, [pc, #136]	; (800f868 <recv_tcp+0xf8>)
 800f7e0:	f00d f9f2 	bl	801cbc8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	3310      	adds	r3, #16
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f00d f86e 	bl	801c8ca <sys_mbox_valid>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10d      	bne.n	800f810 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d008      	beq.n	800f80c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	891b      	ldrh	r3, [r3, #8]
 800f7fe:	4619      	mov	r1, r3
 800f800:	68b8      	ldr	r0, [r7, #8]
 800f802:	f004 fb47 	bl	8013e94 <tcp_recved>
      pbuf_free(p);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f003 fb96 	bl	8012f38 <pbuf_free>
    }
    return ERR_OK;
 800f80c:	2300      	movs	r3, #0
 800f80e:	e023      	b.n	800f858 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d005      	beq.n	800f822 <recv_tcp+0xb2>
    msg = p;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	891b      	ldrh	r3, [r3, #8]
 800f81e:	83fb      	strh	r3, [r7, #30]
 800f820:	e003      	b.n	800f82a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800f822:	4b15      	ldr	r3, [pc, #84]	; (800f878 <recv_tcp+0x108>)
 800f824:	61bb      	str	r3, [r7, #24]
    len = 0;
 800f826:	2300      	movs	r3, #0
 800f828:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	3310      	adds	r3, #16
 800f82e:	69b9      	ldr	r1, [r7, #24]
 800f830:	4618      	mov	r0, r3
 800f832:	f00c ffd5 	bl	801c7e0 <sys_mbox_trypost>
 800f836:	4603      	mov	r3, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d002      	beq.n	800f842 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800f83c:	f04f 33ff 	mov.w	r3, #4294967295
 800f840:	e00a      	b.n	800f858 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f846:	2b00      	cmp	r3, #0
 800f848:	d005      	beq.n	800f856 <recv_tcp+0xe6>
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f84e:	8bfa      	ldrh	r2, [r7, #30]
 800f850:	2100      	movs	r1, #0
 800f852:	6978      	ldr	r0, [r7, #20]
 800f854:	4798      	blx	r3
  }

  return ERR_OK;
 800f856:	2300      	movs	r3, #0
}
 800f858:	4618      	mov	r0, r3
 800f85a:	3720      	adds	r7, #32
 800f85c:	46bd      	mov	sp, r7
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	0801dec4 	.word	0x0801dec4
 800f864:	0801dfa0 	.word	0x0801dfa0
 800f868:	0801df08 	.word	0x0801df08
 800f86c:	0801dfc4 	.word	0x0801dfc4
 800f870:	0801dfe4 	.word	0x0801dfe4
 800f874:	0801dffc 	.word	0x0801dffc
 800f878:	0802107a 	.word	0x0802107a

0800f87c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d106      	bne.n	800f89e <poll_tcp+0x22>
 800f890:	4b29      	ldr	r3, [pc, #164]	; (800f938 <poll_tcp+0xbc>)
 800f892:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f896:	4929      	ldr	r1, [pc, #164]	; (800f93c <poll_tcp+0xc0>)
 800f898:	4829      	ldr	r0, [pc, #164]	; (800f940 <poll_tcp+0xc4>)
 800f89a:	f00d f995 	bl	801cbc8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	785b      	ldrb	r3, [r3, #1]
 800f8a2:	2b01      	cmp	r3, #1
 800f8a4:	d104      	bne.n	800f8b0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f8a6:	2101      	movs	r1, #1
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f001 f8b1 	bl	8010a10 <lwip_netconn_do_writemore>
 800f8ae:	e016      	b.n	800f8de <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	785b      	ldrb	r3, [r3, #1]
 800f8b4:	2b04      	cmp	r3, #4
 800f8b6:	d112      	bne.n	800f8de <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	6a1b      	ldr	r3, [r3, #32]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d00a      	beq.n	800f8d6 <poll_tcp+0x5a>
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	6a1b      	ldr	r3, [r3, #32]
 800f8c4:	7a5b      	ldrb	r3, [r3, #9]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d005      	beq.n	800f8d6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	6a1b      	ldr	r3, [r3, #32]
 800f8ce:	7a5a      	ldrb	r2, [r3, #9]
 800f8d0:	3a01      	subs	r2, #1
 800f8d2:	b2d2      	uxtb	r2, r2
 800f8d4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f8d6:	2101      	movs	r1, #1
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f000 fbf7 	bl	80100cc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	7f1b      	ldrb	r3, [r3, #28]
 800f8e2:	f003 0310 	and.w	r3, r3, #16
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d021      	beq.n	800f92e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	685b      	ldr	r3, [r3, #4]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d01d      	beq.n	800f92e <poll_tcp+0xb2>
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f8fa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f8fe:	d316      	bcc.n	800f92e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f908:	2b04      	cmp	r3, #4
 800f90a:	d810      	bhi.n	800f92e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	7f1b      	ldrb	r3, [r3, #28]
 800f910:	f023 0310 	bic.w	r3, r3, #16
 800f914:	b2da      	uxtb	r2, r3
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d005      	beq.n	800f92e <poll_tcp+0xb2>
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f926:	2200      	movs	r2, #0
 800f928:	2102      	movs	r1, #2
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}
 800f938:	0801dec4 	.word	0x0801dec4
 800f93c:	0801e01c 	.word	0x0801e01c
 800f940:	0801df08 	.word	0x0801df08

0800f944 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b086      	sub	sp, #24
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	4613      	mov	r3, r2
 800f950:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d106      	bne.n	800f96a <sent_tcp+0x26>
 800f95c:	4b20      	ldr	r3, [pc, #128]	; (800f9e0 <sent_tcp+0x9c>)
 800f95e:	f240 1293 	movw	r2, #403	; 0x193
 800f962:	4920      	ldr	r1, [pc, #128]	; (800f9e4 <sent_tcp+0xa0>)
 800f964:	4820      	ldr	r0, [pc, #128]	; (800f9e8 <sent_tcp+0xa4>)
 800f966:	f00d f92f 	bl	801cbc8 <iprintf>

  if (conn) {
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d032      	beq.n	800f9d6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	785b      	ldrb	r3, [r3, #1]
 800f974:	2b01      	cmp	r3, #1
 800f976:	d104      	bne.n	800f982 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800f978:	2101      	movs	r1, #1
 800f97a:	6978      	ldr	r0, [r7, #20]
 800f97c:	f001 f848 	bl	8010a10 <lwip_netconn_do_writemore>
 800f980:	e007      	b.n	800f992 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	785b      	ldrb	r3, [r3, #1]
 800f986:	2b04      	cmp	r3, #4
 800f988:	d103      	bne.n	800f992 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800f98a:	2101      	movs	r1, #1
 800f98c:	6978      	ldr	r0, [r7, #20]
 800f98e:	f000 fb9d 	bl	80100cc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d01d      	beq.n	800f9d6 <sent_tcp+0x92>
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	685b      	ldr	r3, [r3, #4]
 800f99e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f9a2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800f9a6:	d316      	bcc.n	800f9d6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800f9b0:	2b04      	cmp	r3, #4
 800f9b2:	d810      	bhi.n	800f9d6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	7f1b      	ldrb	r3, [r3, #28]
 800f9b8:	f023 0310 	bic.w	r3, r3, #16
 800f9bc:	b2da      	uxtb	r2, r3
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d005      	beq.n	800f9d6 <sent_tcp+0x92>
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9ce:	88fa      	ldrh	r2, [r7, #6]
 800f9d0:	2102      	movs	r1, #2
 800f9d2:	6978      	ldr	r0, [r7, #20]
 800f9d4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800f9d6:	2300      	movs	r3, #0
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3718      	adds	r7, #24
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	0801dec4 	.word	0x0801dec4
 800f9e4:	0801e01c 	.word	0x0801e01c
 800f9e8:	0801df08 	.word	0x0801df08

0800f9ec <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b088      	sub	sp, #32
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	460b      	mov	r3, r1
 800f9f6:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800f9fc:	69fb      	ldr	r3, [r7, #28]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d106      	bne.n	800fa10 <err_tcp+0x24>
 800fa02:	4b5f      	ldr	r3, [pc, #380]	; (800fb80 <err_tcp+0x194>)
 800fa04:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800fa08:	495e      	ldr	r1, [pc, #376]	; (800fb84 <err_tcp+0x198>)
 800fa0a:	485f      	ldr	r0, [pc, #380]	; (800fb88 <err_tcp+0x19c>)
 800fa0c:	f00d f8dc 	bl	801cbc8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800fa10:	f00d f876 	bl	801cb00 <sys_arch_protect>
 800fa14:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800fa16:	69fb      	ldr	r3, [r7, #28]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800fa1c:	69fb      	ldr	r3, [r7, #28]
 800fa1e:	78fa      	ldrb	r2, [r7, #3]
 800fa20:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800fa22:	69fb      	ldr	r3, [r7, #28]
 800fa24:	7f1b      	ldrb	r3, [r3, #28]
 800fa26:	f043 0301 	orr.w	r3, r3, #1
 800fa2a:	b2da      	uxtb	r2, r3
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	785b      	ldrb	r3, [r3, #1]
 800fa34:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800fa3c:	69b8      	ldr	r0, [r7, #24]
 800fa3e:	f00d f86d 	bl	801cb1c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d005      	beq.n	800fa56 <err_tcp+0x6a>
 800fa4a:	69fb      	ldr	r3, [r7, #28]
 800fa4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa4e:	2200      	movs	r2, #0
 800fa50:	2104      	movs	r1, #4
 800fa52:	69f8      	ldr	r0, [r7, #28]
 800fa54:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fa56:	69fb      	ldr	r3, [r7, #28]
 800fa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d005      	beq.n	800fa6a <err_tcp+0x7e>
 800fa5e:	69fb      	ldr	r3, [r7, #28]
 800fa60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa62:	2200      	movs	r2, #0
 800fa64:	2100      	movs	r1, #0
 800fa66:	69f8      	ldr	r0, [r7, #28]
 800fa68:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800fa6a:	69fb      	ldr	r3, [r7, #28]
 800fa6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d005      	beq.n	800fa7e <err_tcp+0x92>
 800fa72:	69fb      	ldr	r3, [r7, #28]
 800fa74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa76:	2200      	movs	r2, #0
 800fa78:	2102      	movs	r1, #2
 800fa7a:	69f8      	ldr	r0, [r7, #28]
 800fa7c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800fa7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7ff fd8a 	bl	800f59c <lwip_netconn_err_to_msg>
 800fa88:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	3310      	adds	r3, #16
 800fa8e:	4618      	mov	r0, r3
 800fa90:	f00c ff1b 	bl	801c8ca <sys_mbox_valid>
 800fa94:	4603      	mov	r3, r0
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d005      	beq.n	800faa6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800fa9a:	69fb      	ldr	r3, [r7, #28]
 800fa9c:	3310      	adds	r3, #16
 800fa9e:	6939      	ldr	r1, [r7, #16]
 800faa0:	4618      	mov	r0, r3
 800faa2:	f00c fe9d 	bl	801c7e0 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	3314      	adds	r3, #20
 800faaa:	4618      	mov	r0, r3
 800faac:	f00c ff0d 	bl	801c8ca <sys_mbox_valid>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d005      	beq.n	800fac2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	3314      	adds	r3, #20
 800faba:	6939      	ldr	r1, [r7, #16]
 800fabc:	4618      	mov	r0, r3
 800fabe:	f00c fe8f 	bl	801c7e0 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800fac2:	7dfb      	ldrb	r3, [r7, #23]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d005      	beq.n	800fad4 <err_tcp+0xe8>
 800fac8:	7dfb      	ldrb	r3, [r7, #23]
 800faca:	2b04      	cmp	r3, #4
 800facc:	d002      	beq.n	800fad4 <err_tcp+0xe8>
 800face:	7dfb      	ldrb	r3, [r7, #23]
 800fad0:	2b03      	cmp	r3, #3
 800fad2:	d143      	bne.n	800fb5c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	7f1b      	ldrb	r3, [r3, #28]
 800fad8:	f003 0304 	and.w	r3, r3, #4
 800fadc:	2b00      	cmp	r3, #0
 800fade:	bf14      	ite	ne
 800fae0:	2301      	movne	r3, #1
 800fae2:	2300      	moveq	r3, #0
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800fae8:	69fb      	ldr	r3, [r7, #28]
 800faea:	7f1b      	ldrb	r3, [r3, #28]
 800faec:	f023 0304 	bic.w	r3, r3, #4
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d13b      	bne.n	800fb74 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	6a1b      	ldr	r3, [r3, #32]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d106      	bne.n	800fb12 <err_tcp+0x126>
 800fb04:	4b1e      	ldr	r3, [pc, #120]	; (800fb80 <err_tcp+0x194>)
 800fb06:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb0a:	4920      	ldr	r1, [pc, #128]	; (800fb8c <err_tcp+0x1a0>)
 800fb0c:	481e      	ldr	r0, [pc, #120]	; (800fb88 <err_tcp+0x19c>)
 800fb0e:	f00d f85b 	bl	801cbc8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
 800fb14:	2b04      	cmp	r3, #4
 800fb16:	d104      	bne.n	800fb22 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800fb18:	69fb      	ldr	r3, [r7, #28]
 800fb1a:	6a1b      	ldr	r3, [r3, #32]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	711a      	strb	r2, [r3, #4]
 800fb20:	e003      	b.n	800fb2a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800fb22:	69fb      	ldr	r3, [r7, #28]
 800fb24:	6a1b      	ldr	r3, [r3, #32]
 800fb26:	78fa      	ldrb	r2, [r7, #3]
 800fb28:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	6a1b      	ldr	r3, [r3, #32]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	330c      	adds	r3, #12
 800fb32:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800fb34:	68b8      	ldr	r0, [r7, #8]
 800fb36:	f00c ff59 	bl	801c9ec <sys_sem_valid>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d106      	bne.n	800fb4e <err_tcp+0x162>
 800fb40:	4b0f      	ldr	r3, [pc, #60]	; (800fb80 <err_tcp+0x194>)
 800fb42:	f240 12ef 	movw	r2, #495	; 0x1ef
 800fb46:	4912      	ldr	r1, [pc, #72]	; (800fb90 <err_tcp+0x1a4>)
 800fb48:	480f      	ldr	r0, [pc, #60]	; (800fb88 <err_tcp+0x19c>)
 800fb4a:	f00d f83d 	bl	801cbc8 <iprintf>
      conn->current_msg = NULL;
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	2200      	movs	r2, #0
 800fb52:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800fb54:	68b8      	ldr	r0, [r7, #8]
 800fb56:	f00c ff2f 	bl	801c9b8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800fb5a:	e00b      	b.n	800fb74 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	6a1b      	ldr	r3, [r3, #32]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d008      	beq.n	800fb76 <err_tcp+0x18a>
 800fb64:	4b06      	ldr	r3, [pc, #24]	; (800fb80 <err_tcp+0x194>)
 800fb66:	f240 12f7 	movw	r2, #503	; 0x1f7
 800fb6a:	490a      	ldr	r1, [pc, #40]	; (800fb94 <err_tcp+0x1a8>)
 800fb6c:	4806      	ldr	r0, [pc, #24]	; (800fb88 <err_tcp+0x19c>)
 800fb6e:	f00d f82b 	bl	801cbc8 <iprintf>
  }
}
 800fb72:	e000      	b.n	800fb76 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800fb74:	bf00      	nop
}
 800fb76:	bf00      	nop
 800fb78:	3720      	adds	r7, #32
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	0801dec4 	.word	0x0801dec4
 800fb84:	0801e01c 	.word	0x0801e01c
 800fb88:	0801df08 	.word	0x0801df08
 800fb8c:	0801e02c 	.word	0x0801e02c
 800fb90:	0801e048 	.word	0x0801e048
 800fb94:	0801e064 	.word	0x0801e064

0800fb98 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800fba6:	6879      	ldr	r1, [r7, #4]
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f005 f94d 	bl	8014e48 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800fbae:	490a      	ldr	r1, [pc, #40]	; (800fbd8 <setup_tcp+0x40>)
 800fbb0:	68f8      	ldr	r0, [r7, #12]
 800fbb2:	f005 f95b 	bl	8014e6c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800fbb6:	4909      	ldr	r1, [pc, #36]	; (800fbdc <setup_tcp+0x44>)
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f005 f979 	bl	8014eb0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	4907      	ldr	r1, [pc, #28]	; (800fbe0 <setup_tcp+0x48>)
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f005 f9d0 	bl	8014f68 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800fbc8:	4906      	ldr	r1, [pc, #24]	; (800fbe4 <setup_tcp+0x4c>)
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f005 f992 	bl	8014ef4 <tcp_err>
}
 800fbd0:	bf00      	nop
 800fbd2:	3710      	adds	r7, #16
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	0800f771 	.word	0x0800f771
 800fbdc:	0800f945 	.word	0x0800f945
 800fbe0:	0800f87d 	.word	0x0800f87d
 800fbe4:	0800f9ed 	.word	0x0800f9ed

0800fbe8 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800fbe8:	b590      	push	{r4, r7, lr}
 800fbea:	b089      	sub	sp, #36	; 0x24
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	4613      	mov	r3, r2
 800fbf4:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d102      	bne.n	800fc06 <accept_function+0x1e>
    return ERR_VAL;
 800fc00:	f06f 0305 	mvn.w	r3, #5
 800fc04:	e0a1      	b.n	800fd4a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	3314      	adds	r3, #20
 800fc0a:	4618      	mov	r0, r3
 800fc0c:	f00c fe5d 	bl	801c8ca <sys_mbox_valid>
 800fc10:	4603      	mov	r3, r0
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d102      	bne.n	800fc1c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800fc16:	f06f 0305 	mvn.w	r3, #5
 800fc1a:	e096      	b.n	800fd4a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800fc1c:	68bb      	ldr	r3, [r7, #8]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d11b      	bne.n	800fc5a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	f103 0414 	add.w	r4, r3, #20
 800fc28:	f06f 000c 	mvn.w	r0, #12
 800fc2c:	f7ff fcb6 	bl	800f59c <lwip_netconn_err_to_msg>
 800fc30:	4603      	mov	r3, r0
 800fc32:	4619      	mov	r1, r3
 800fc34:	4620      	mov	r0, r4
 800fc36:	f00c fdd3 	bl	801c7e0 <sys_mbox_trypost>
 800fc3a:	4603      	mov	r3, r0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d109      	bne.n	800fc54 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d005      	beq.n	800fc54 <accept_function+0x6c>
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	2100      	movs	r1, #0
 800fc50:	69f8      	ldr	r0, [r7, #28]
 800fc52:	4798      	blx	r3
    }
    return ERR_VAL;
 800fc54:	f06f 0305 	mvn.w	r3, #5
 800fc58:	e077      	b.n	800fd4a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800fc5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d006      	beq.n	800fc70 <accept_function+0x88>
 800fc62:	4b3c      	ldr	r3, [pc, #240]	; (800fd54 <accept_function+0x16c>)
 800fc64:	f240 222a 	movw	r2, #554	; 0x22a
 800fc68:	493b      	ldr	r1, [pc, #236]	; (800fd58 <accept_function+0x170>)
 800fc6a:	483c      	ldr	r0, [pc, #240]	; (800fd5c <accept_function+0x174>)
 800fc6c:	f00c ffac 	bl	801cbc8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	781a      	ldrb	r2, [r3, #0]
 800fc74:	69fb      	ldr	r3, [r7, #28]
 800fc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc78:	4619      	mov	r1, r3
 800fc7a:	4610      	mov	r0, r2
 800fc7c:	f000 f8f0 	bl	800fe60 <netconn_alloc>
 800fc80:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800fc82:	69bb      	ldr	r3, [r7, #24]
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d11b      	bne.n	800fcc0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	f103 0414 	add.w	r4, r3, #20
 800fc8e:	f06f 000c 	mvn.w	r0, #12
 800fc92:	f7ff fc83 	bl	800f59c <lwip_netconn_err_to_msg>
 800fc96:	4603      	mov	r3, r0
 800fc98:	4619      	mov	r1, r3
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	f00c fda0 	bl	801c7e0 <sys_mbox_trypost>
 800fca0:	4603      	mov	r3, r0
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d109      	bne.n	800fcba <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fca6:	69fb      	ldr	r3, [r7, #28]
 800fca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d005      	beq.n	800fcba <accept_function+0xd2>
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	2100      	movs	r1, #0
 800fcb6:	69f8      	ldr	r0, [r7, #28]
 800fcb8:	4798      	blx	r3
    }
    return ERR_MEM;
 800fcba:	f04f 33ff 	mov.w	r3, #4294967295
 800fcbe:	e044      	b.n	800fd4a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800fcc0:	69bb      	ldr	r3, [r7, #24]
 800fcc2:	68ba      	ldr	r2, [r7, #8]
 800fcc4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800fcc6:	69b8      	ldr	r0, [r7, #24]
 800fcc8:	f7ff ff66 	bl	800fb98 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800fccc:	69fb      	ldr	r3, [r7, #28]
 800fcce:	3314      	adds	r3, #20
 800fcd0:	69b9      	ldr	r1, [r7, #24]
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f00c fd84 	bl	801c7e0 <sys_mbox_trypost>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d02a      	beq.n	800fd34 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800fcde:	69bb      	ldr	r3, [r7, #24]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800fce4:	2100      	movs	r1, #0
 800fce6:	6978      	ldr	r0, [r7, #20]
 800fce8:	f005 f8ae 	bl	8014e48 <tcp_arg>
    tcp_recv(pcb, NULL);
 800fcec:	2100      	movs	r1, #0
 800fcee:	6978      	ldr	r0, [r7, #20]
 800fcf0:	f005 f8bc 	bl	8014e6c <tcp_recv>
    tcp_sent(pcb, NULL);
 800fcf4:	2100      	movs	r1, #0
 800fcf6:	6978      	ldr	r0, [r7, #20]
 800fcf8:	f005 f8da 	bl	8014eb0 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	2100      	movs	r1, #0
 800fd00:	6978      	ldr	r0, [r7, #20]
 800fd02:	f005 f931 	bl	8014f68 <tcp_poll>
    tcp_err(pcb, NULL);
 800fd06:	2100      	movs	r1, #0
 800fd08:	6978      	ldr	r0, [r7, #20]
 800fd0a:	f005 f8f3 	bl	8014ef4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	2200      	movs	r2, #0
 800fd12:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	3310      	adds	r3, #16
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f00c fd4f 	bl	801c7bc <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	3310      	adds	r3, #16
 800fd22:	4618      	mov	r0, r3
 800fd24:	f00c fde2 	bl	801c8ec <sys_mbox_set_invalid>
    netconn_free(newconn);
 800fd28:	69b8      	ldr	r0, [r7, #24]
 800fd2a:	f000 f907 	bl	800ff3c <netconn_free>
    return ERR_MEM;
 800fd2e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd32:	e00a      	b.n	800fd4a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800fd34:	69fb      	ldr	r3, [r7, #28]
 800fd36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d005      	beq.n	800fd48 <accept_function+0x160>
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd40:	2200      	movs	r2, #0
 800fd42:	2100      	movs	r1, #0
 800fd44:	69f8      	ldr	r0, [r7, #28]
 800fd46:	4798      	blx	r3
  }

  return ERR_OK;
 800fd48:	2300      	movs	r3, #0
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3724      	adds	r7, #36	; 0x24
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd90      	pop	{r4, r7, pc}
 800fd52:	bf00      	nop
 800fd54:	0801dec4 	.word	0x0801dec4
 800fd58:	0801e080 	.word	0x0801e080
 800fd5c:	0801df08 	.word	0x0801df08

0800fd60 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800fd60:	b590      	push	{r4, r7, lr}
 800fd62:	b085      	sub	sp, #20
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d006      	beq.n	800fd84 <pcb_new+0x24>
 800fd76:	4b2b      	ldr	r3, [pc, #172]	; (800fe24 <pcb_new+0xc4>)
 800fd78:	f240 2265 	movw	r2, #613	; 0x265
 800fd7c:	492a      	ldr	r1, [pc, #168]	; (800fe28 <pcb_new+0xc8>)
 800fd7e:	482b      	ldr	r0, [pc, #172]	; (800fe2c <pcb_new+0xcc>)
 800fd80:	f00c ff22 	bl	801cbc8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd8e:	2b10      	cmp	r3, #16
 800fd90:	d022      	beq.n	800fdd8 <pcb_new+0x78>
 800fd92:	2b20      	cmp	r3, #32
 800fd94:	d133      	bne.n	800fdfe <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	681c      	ldr	r4, [r3, #0]
 800fd9a:	7bfb      	ldrb	r3, [r7, #15]
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f00a f9ce 	bl	801a13e <udp_new_ip_type>
 800fda2:	4603      	mov	r3, r0
 800fda4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	685b      	ldr	r3, [r3, #4]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d02a      	beq.n	800fe06 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	781b      	ldrb	r3, [r3, #0]
 800fdb6:	2b22      	cmp	r3, #34	; 0x22
 800fdb8:	d104      	bne.n	800fdc4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	2201      	movs	r2, #1
 800fdc2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	6858      	ldr	r0, [r3, #4]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	461a      	mov	r2, r3
 800fdd0:	4917      	ldr	r1, [pc, #92]	; (800fe30 <pcb_new+0xd0>)
 800fdd2:	f00a f93b 	bl	801a04c <udp_recv>
      }
      break;
 800fdd6:	e016      	b.n	800fe06 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681c      	ldr	r4, [r3, #0]
 800fddc:	7bfb      	ldrb	r3, [r7, #15]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f005 f824 	bl	8014e2c <tcp_new_ip_type>
 800fde4:	4603      	mov	r3, r0
 800fde6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00b      	beq.n	800fe0a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4618      	mov	r0, r3
 800fdf8:	f7ff fece 	bl	800fb98 <setup_tcp>
      }
      break;
 800fdfc:	e005      	b.n	800fe0a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	22fa      	movs	r2, #250	; 0xfa
 800fe02:	711a      	strb	r2, [r3, #4]
      return;
 800fe04:	e00a      	b.n	800fe1c <pcb_new+0xbc>
      break;
 800fe06:	bf00      	nop
 800fe08:	e000      	b.n	800fe0c <pcb_new+0xac>
      break;
 800fe0a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d102      	bne.n	800fe1c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	22ff      	movs	r2, #255	; 0xff
 800fe1a:	711a      	strb	r2, [r3, #4]
  }
}
 800fe1c:	3714      	adds	r7, #20
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd90      	pop	{r4, r7, pc}
 800fe22:	bf00      	nop
 800fe24:	0801dec4 	.word	0x0801dec4
 800fe28:	0801e0a8 	.word	0x0801e0a8
 800fe2c:	0801df08 	.word	0x0801df08
 800fe30:	0800f675 	.word	0x0800f675

0800fe34 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d102      	bne.n	800fe56 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f7ff ff85 	bl	800fd60 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800fe56:	bf00      	nop
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
	...

0800fe60 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b086      	sub	sp, #24
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	4603      	mov	r3, r0
 800fe68:	6039      	str	r1, [r7, #0]
 800fe6a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800fe70:	2007      	movs	r0, #7
 800fe72:	f002 f94b 	bl	801210c <memp_malloc>
 800fe76:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <netconn_alloc+0x22>
    return NULL;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	e052      	b.n	800ff28 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2200      	movs	r2, #0
 800fe86:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	79fa      	ldrb	r2, [r7, #7]
 800fe8c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2200      	movs	r2, #0
 800fe92:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800fe94:	79fb      	ldrb	r3, [r7, #7]
 800fe96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe9a:	2b10      	cmp	r3, #16
 800fe9c:	d004      	beq.n	800fea8 <netconn_alloc+0x48>
 800fe9e:	2b20      	cmp	r3, #32
 800fea0:	d105      	bne.n	800feae <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800fea2:	2306      	movs	r3, #6
 800fea4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800fea6:	e00a      	b.n	800febe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800fea8:	2306      	movs	r3, #6
 800feaa:	617b      	str	r3, [r7, #20]
      break;
 800feac:	e007      	b.n	800febe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800feae:	4b20      	ldr	r3, [pc, #128]	; (800ff30 <netconn_alloc+0xd0>)
 800feb0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800feb4:	491f      	ldr	r1, [pc, #124]	; (800ff34 <netconn_alloc+0xd4>)
 800feb6:	4820      	ldr	r0, [pc, #128]	; (800ff38 <netconn_alloc+0xd8>)
 800feb8:	f00c fe86 	bl	801cbc8 <iprintf>
      goto free_and_return;
 800febc:	e02f      	b.n	800ff1e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	3310      	adds	r3, #16
 800fec2:	6979      	ldr	r1, [r7, #20]
 800fec4:	4618      	mov	r0, r3
 800fec6:	f00c fc57 	bl	801c778 <sys_mbox_new>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d125      	bne.n	800ff1c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	330c      	adds	r3, #12
 800fed4:	2100      	movs	r1, #0
 800fed6:	4618      	mov	r0, r3
 800fed8:	f00c fd15 	bl	801c906 <sys_sem_new>
 800fedc:	4603      	mov	r3, r0
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d005      	beq.n	800feee <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	3310      	adds	r3, #16
 800fee6:	4618      	mov	r0, r3
 800fee8:	f00c fc68 	bl	801c7bc <sys_mbox_free>
    goto free_and_return;
 800feec:	e017      	b.n	800ff1e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	3314      	adds	r3, #20
 800fef2:	4618      	mov	r0, r3
 800fef4:	f00c fcfa 	bl	801c8ec <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2200      	movs	r2, #0
 800fefc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	f04f 32ff 	mov.w	r2, #4294967295
 800ff04:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	683a      	ldr	r2, [r7, #0]
 800ff0a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	7cfa      	ldrb	r2, [r7, #19]
 800ff16:	771a      	strb	r2, [r3, #28]
  return conn;
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	e005      	b.n	800ff28 <netconn_alloc+0xc8>
    goto free_and_return;
 800ff1c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800ff1e:	68f9      	ldr	r1, [r7, #12]
 800ff20:	2007      	movs	r0, #7
 800ff22:	f002 f969 	bl	80121f8 <memp_free>
  return NULL;
 800ff26:	2300      	movs	r3, #0
}
 800ff28:	4618      	mov	r0, r3
 800ff2a:	3718      	adds	r7, #24
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	0801dec4 	.word	0x0801dec4
 800ff34:	0801e0c8 	.word	0x0801e0c8
 800ff38:	0801df08 	.word	0x0801df08

0800ff3c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	685b      	ldr	r3, [r3, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d006      	beq.n	800ff5a <netconn_free+0x1e>
 800ff4c:	4b1b      	ldr	r3, [pc, #108]	; (800ffbc <netconn_free+0x80>)
 800ff4e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ff52:	491b      	ldr	r1, [pc, #108]	; (800ffc0 <netconn_free+0x84>)
 800ff54:	481b      	ldr	r0, [pc, #108]	; (800ffc4 <netconn_free+0x88>)
 800ff56:	f00c fe37 	bl	801cbc8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	3310      	adds	r3, #16
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f00c fcb3 	bl	801c8ca <sys_mbox_valid>
 800ff64:	4603      	mov	r3, r0
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d006      	beq.n	800ff78 <netconn_free+0x3c>
 800ff6a:	4b14      	ldr	r3, [pc, #80]	; (800ffbc <netconn_free+0x80>)
 800ff6c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ff70:	4915      	ldr	r1, [pc, #84]	; (800ffc8 <netconn_free+0x8c>)
 800ff72:	4814      	ldr	r0, [pc, #80]	; (800ffc4 <netconn_free+0x88>)
 800ff74:	f00c fe28 	bl	801cbc8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	3314      	adds	r3, #20
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f00c fca4 	bl	801c8ca <sys_mbox_valid>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d006      	beq.n	800ff96 <netconn_free+0x5a>
 800ff88:	4b0c      	ldr	r3, [pc, #48]	; (800ffbc <netconn_free+0x80>)
 800ff8a:	f240 3227 	movw	r2, #807	; 0x327
 800ff8e:	490f      	ldr	r1, [pc, #60]	; (800ffcc <netconn_free+0x90>)
 800ff90:	480c      	ldr	r0, [pc, #48]	; (800ffc4 <netconn_free+0x88>)
 800ff92:	f00c fe19 	bl	801cbc8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	330c      	adds	r3, #12
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f00c fd19 	bl	801c9d2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	330c      	adds	r3, #12
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f00c fd32 	bl	801ca0e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800ffaa:	6879      	ldr	r1, [r7, #4]
 800ffac:	2007      	movs	r0, #7
 800ffae:	f002 f923 	bl	80121f8 <memp_free>
}
 800ffb2:	bf00      	nop
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop
 800ffbc:	0801dec4 	.word	0x0801dec4
 800ffc0:	0801e0f0 	.word	0x0801e0f0
 800ffc4:	0801df08 	.word	0x0801df08
 800ffc8:	0801e120 	.word	0x0801e120
 800ffcc:	0801e15c 	.word	0x0801e15c

0800ffd0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	3310      	adds	r3, #16
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f00c fc74 	bl	801c8ca <sys_mbox_valid>
 800ffe2:	4603      	mov	r3, r0
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d02f      	beq.n	8010048 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800ffe8:	e018      	b.n	801001c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fff2:	2b10      	cmp	r3, #16
 800fff4:	d10e      	bne.n	8010014 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	f107 020f 	add.w	r2, r7, #15
 800fffc:	4611      	mov	r1, r2
 800fffe:	4618      	mov	r0, r3
 8010000:	f7ff fafe 	bl	800f600 <lwip_netconn_is_err_msg>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d108      	bne.n	801001c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	4618      	mov	r0, r3
 801000e:	f002 ff93 	bl	8012f38 <pbuf_free>
 8010012:	e003      	b.n	801001c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	4618      	mov	r0, r3
 8010018:	f000 ffde 	bl	8010fd8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	3310      	adds	r3, #16
 8010020:	f107 0210 	add.w	r2, r7, #16
 8010024:	4611      	mov	r1, r2
 8010026:	4618      	mov	r0, r3
 8010028:	f00c fc33 	bl	801c892 <sys_arch_mbox_tryfetch>
 801002c:	4603      	mov	r3, r0
 801002e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010032:	d1da      	bne.n	800ffea <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	3310      	adds	r3, #16
 8010038:	4618      	mov	r0, r3
 801003a:	f00c fbbf 	bl	801c7bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	3310      	adds	r3, #16
 8010042:	4618      	mov	r0, r3
 8010044:	f00c fc52 	bl	801c8ec <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	3314      	adds	r3, #20
 801004c:	4618      	mov	r0, r3
 801004e:	f00c fc3c 	bl	801c8ca <sys_mbox_valid>
 8010052:	4603      	mov	r3, r0
 8010054:	2b00      	cmp	r3, #0
 8010056:	d034      	beq.n	80100c2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010058:	e01d      	b.n	8010096 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	f107 020e 	add.w	r2, r7, #14
 8010060:	4611      	mov	r1, r2
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff facc 	bl	800f600 <lwip_netconn_is_err_msg>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d113      	bne.n	8010096 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8010072:	6978      	ldr	r0, [r7, #20]
 8010074:	f7ff ffac 	bl	800ffd0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	685b      	ldr	r3, [r3, #4]
 801007c:	2b00      	cmp	r3, #0
 801007e:	d007      	beq.n	8010090 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	4618      	mov	r0, r3
 8010086:	f003 fd3d 	bl	8013b04 <tcp_abort>
            newconn->pcb.tcp = NULL;
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	2200      	movs	r2, #0
 801008e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010090:	6978      	ldr	r0, [r7, #20]
 8010092:	f7ff ff53 	bl	800ff3c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	3314      	adds	r3, #20
 801009a:	f107 0210 	add.w	r2, r7, #16
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f00c fbf6 	bl	801c892 <sys_arch_mbox_tryfetch>
 80100a6:	4603      	mov	r3, r0
 80100a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ac:	d1d5      	bne.n	801005a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	3314      	adds	r3, #20
 80100b2:	4618      	mov	r0, r3
 80100b4:	f00c fb82 	bl	801c7bc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	3314      	adds	r3, #20
 80100bc:	4618      	mov	r0, r3
 80100be:	f00c fc15 	bl	801c8ec <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80100c2:	bf00      	nop
 80100c4:	3718      	adds	r7, #24
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
	...

080100cc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b086      	sub	sp, #24
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	460b      	mov	r3, r1
 80100d6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80100d8:	2300      	movs	r3, #0
 80100da:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d106      	bne.n	80100f0 <lwip_netconn_do_close_internal+0x24>
 80100e2:	4ba1      	ldr	r3, [pc, #644]	; (8010368 <lwip_netconn_do_close_internal+0x29c>)
 80100e4:	f240 32a2 	movw	r2, #930	; 0x3a2
 80100e8:	49a0      	ldr	r1, [pc, #640]	; (801036c <lwip_netconn_do_close_internal+0x2a0>)
 80100ea:	48a1      	ldr	r0, [pc, #644]	; (8010370 <lwip_netconn_do_close_internal+0x2a4>)
 80100ec:	f00c fd6c 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80100f8:	2b10      	cmp	r3, #16
 80100fa:	d006      	beq.n	801010a <lwip_netconn_do_close_internal+0x3e>
 80100fc:	4b9a      	ldr	r3, [pc, #616]	; (8010368 <lwip_netconn_do_close_internal+0x29c>)
 80100fe:	f240 32a3 	movw	r2, #931	; 0x3a3
 8010102:	499c      	ldr	r1, [pc, #624]	; (8010374 <lwip_netconn_do_close_internal+0x2a8>)
 8010104:	489a      	ldr	r0, [pc, #616]	; (8010370 <lwip_netconn_do_close_internal+0x2a4>)
 8010106:	f00c fd5f 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	785b      	ldrb	r3, [r3, #1]
 801010e:	2b04      	cmp	r3, #4
 8010110:	d006      	beq.n	8010120 <lwip_netconn_do_close_internal+0x54>
 8010112:	4b95      	ldr	r3, [pc, #596]	; (8010368 <lwip_netconn_do_close_internal+0x29c>)
 8010114:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010118:	4997      	ldr	r1, [pc, #604]	; (8010378 <lwip_netconn_do_close_internal+0x2ac>)
 801011a:	4895      	ldr	r0, [pc, #596]	; (8010370 <lwip_netconn_do_close_internal+0x2a4>)
 801011c:	f00c fd54 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	685b      	ldr	r3, [r3, #4]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d106      	bne.n	8010136 <lwip_netconn_do_close_internal+0x6a>
 8010128:	4b8f      	ldr	r3, [pc, #572]	; (8010368 <lwip_netconn_do_close_internal+0x29c>)
 801012a:	f240 32a5 	movw	r2, #933	; 0x3a5
 801012e:	4993      	ldr	r1, [pc, #588]	; (801037c <lwip_netconn_do_close_internal+0x2b0>)
 8010130:	488f      	ldr	r0, [pc, #572]	; (8010370 <lwip_netconn_do_close_internal+0x2a4>)
 8010132:	f00c fd49 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6a1b      	ldr	r3, [r3, #32]
 801013a:	2b00      	cmp	r3, #0
 801013c:	d106      	bne.n	801014c <lwip_netconn_do_close_internal+0x80>
 801013e:	4b8a      	ldr	r3, [pc, #552]	; (8010368 <lwip_netconn_do_close_internal+0x29c>)
 8010140:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010144:	498e      	ldr	r1, [pc, #568]	; (8010380 <lwip_netconn_do_close_internal+0x2b4>)
 8010146:	488a      	ldr	r0, [pc, #552]	; (8010370 <lwip_netconn_do_close_internal+0x2a4>)
 8010148:	f00c fd3e 	bl	801cbc8 <iprintf>

  tpcb = conn->pcb.tcp;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6a1b      	ldr	r3, [r3, #32]
 8010156:	7a1b      	ldrb	r3, [r3, #8]
 8010158:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	f003 0301 	and.w	r3, r3, #1
 8010160:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8010162:	7bfb      	ldrb	r3, [r7, #15]
 8010164:	f003 0302 	and.w	r3, r3, #2
 8010168:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 801016a:	7bfb      	ldrb	r3, [r7, #15]
 801016c:	2b03      	cmp	r3, #3
 801016e:	d102      	bne.n	8010176 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8010170:	2301      	movs	r3, #1
 8010172:	75bb      	strb	r3, [r7, #22]
 8010174:	e01f      	b.n	80101b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8010176:	7bbb      	ldrb	r3, [r7, #14]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00e      	beq.n	801019a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 801017c:	693b      	ldr	r3, [r7, #16]
 801017e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8010180:	2b05      	cmp	r3, #5
 8010182:	d007      	beq.n	8010194 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8010184:	693b      	ldr	r3, [r7, #16]
 8010186:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8010188:	2b06      	cmp	r3, #6
 801018a:	d003      	beq.n	8010194 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8010190:	2b08      	cmp	r3, #8
 8010192:	d102      	bne.n	801019a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8010194:	2301      	movs	r3, #1
 8010196:	75bb      	strb	r3, [r7, #22]
 8010198:	e00d      	b.n	80101b6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801019a:	7b7b      	ldrb	r3, [r7, #13]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d008      	beq.n	80101b2 <lwip_netconn_do_close_internal+0xe6>
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	8b5b      	ldrh	r3, [r3, #26]
 80101a4:	f003 0310 	and.w	r3, r3, #16
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d002      	beq.n	80101b2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80101ac:	2301      	movs	r3, #1
 80101ae:	75bb      	strb	r3, [r7, #22]
 80101b0:	e001      	b.n	80101b6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80101b2:	2300      	movs	r3, #0
 80101b4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80101b6:	7dbb      	ldrb	r3, [r7, #22]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d003      	beq.n	80101c4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80101bc:	2100      	movs	r1, #0
 80101be:	6938      	ldr	r0, [r7, #16]
 80101c0:	f004 fe42 	bl	8014e48 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	7d1b      	ldrb	r3, [r3, #20]
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d104      	bne.n	80101d6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80101cc:	2100      	movs	r1, #0
 80101ce:	6938      	ldr	r0, [r7, #16]
 80101d0:	f004 feb2 	bl	8014f38 <tcp_accept>
 80101d4:	e01d      	b.n	8010212 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80101d6:	7bbb      	ldrb	r3, [r7, #14]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d007      	beq.n	80101ec <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80101dc:	2100      	movs	r1, #0
 80101de:	6938      	ldr	r0, [r7, #16]
 80101e0:	f004 fe44 	bl	8014e6c <tcp_recv>
      tcp_accept(tpcb, NULL);
 80101e4:	2100      	movs	r1, #0
 80101e6:	6938      	ldr	r0, [r7, #16]
 80101e8:	f004 fea6 	bl	8014f38 <tcp_accept>
    }
    if (shut_tx) {
 80101ec:	7b7b      	ldrb	r3, [r7, #13]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d003      	beq.n	80101fa <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80101f2:	2100      	movs	r1, #0
 80101f4:	6938      	ldr	r0, [r7, #16]
 80101f6:	f004 fe5b 	bl	8014eb0 <tcp_sent>
    }
    if (shut_close) {
 80101fa:	7dbb      	ldrb	r3, [r7, #22]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d008      	beq.n	8010212 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010200:	2200      	movs	r2, #0
 8010202:	2100      	movs	r1, #0
 8010204:	6938      	ldr	r0, [r7, #16]
 8010206:	f004 feaf 	bl	8014f68 <tcp_poll>
      tcp_err(tpcb, NULL);
 801020a:	2100      	movs	r1, #0
 801020c:	6938      	ldr	r0, [r7, #16]
 801020e:	f004 fe71 	bl	8014ef4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8010212:	7dbb      	ldrb	r3, [r7, #22]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d005      	beq.n	8010224 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010218:	6938      	ldr	r0, [r7, #16]
 801021a:	f003 fb2f 	bl	801387c <tcp_close>
 801021e:	4603      	mov	r3, r0
 8010220:	75fb      	strb	r3, [r7, #23]
 8010222:	e007      	b.n	8010234 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8010224:	7bbb      	ldrb	r3, [r7, #14]
 8010226:	7b7a      	ldrb	r2, [r7, #13]
 8010228:	4619      	mov	r1, r3
 801022a:	6938      	ldr	r0, [r7, #16]
 801022c:	f003 fb52 	bl	80138d4 <tcp_shutdown>
 8010230:	4603      	mov	r3, r0
 8010232:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8010234:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d102      	bne.n	8010242 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801023c:	2301      	movs	r3, #1
 801023e:	757b      	strb	r3, [r7, #21]
 8010240:	e016      	b.n	8010270 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8010242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010246:	f1b3 3fff 	cmp.w	r3, #4294967295
 801024a:	d10f      	bne.n	801026c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6a1b      	ldr	r3, [r3, #32]
 8010250:	7a5b      	ldrb	r3, [r3, #9]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d10c      	bne.n	8010270 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8010256:	2301      	movs	r3, #1
 8010258:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 801025a:	7dbb      	ldrb	r3, [r7, #22]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d007      	beq.n	8010270 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8010260:	6938      	ldr	r0, [r7, #16]
 8010262:	f003 fc4f 	bl	8013b04 <tcp_abort>
          err = ERR_OK;
 8010266:	2300      	movs	r3, #0
 8010268:	75fb      	strb	r3, [r7, #23]
 801026a:	e001      	b.n	8010270 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 801026c:	2301      	movs	r3, #1
 801026e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8010270:	7d7b      	ldrb	r3, [r7, #21]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d044      	beq.n	8010300 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	6a1b      	ldr	r3, [r3, #32]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	330c      	adds	r3, #12
 801027e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	6a1b      	ldr	r3, [r3, #32]
 8010284:	7dfa      	ldrb	r2, [r7, #23]
 8010286:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	2200      	movs	r2, #0
 801028c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	2200      	movs	r2, #0
 8010292:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8010294:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d129      	bne.n	80102f0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 801029c:	7dbb      	ldrb	r3, [r7, #22]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d00c      	beq.n	80102bc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2200      	movs	r2, #0
 80102a6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <lwip_netconn_do_close_internal+0x1f0>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102b4:	2200      	movs	r2, #0
 80102b6:	2104      	movs	r1, #4
 80102b8:	6878      	ldr	r0, [r7, #4]
 80102ba:	4798      	blx	r3
      }
      if (shut_rx) {
 80102bc:	7bbb      	ldrb	r3, [r7, #14]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d009      	beq.n	80102d6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d005      	beq.n	80102d6 <lwip_netconn_do_close_internal+0x20a>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ce:	2200      	movs	r2, #0
 80102d0:	2100      	movs	r1, #0
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	4798      	blx	r3
      }
      if (shut_tx) {
 80102d6:	7b7b      	ldrb	r3, [r7, #13]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d009      	beq.n	80102f0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d005      	beq.n	80102f0 <lwip_netconn_do_close_internal+0x224>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e8:	2200      	movs	r2, #0
 80102ea:	2102      	movs	r1, #2
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80102f0:	78fb      	ldrb	r3, [r7, #3]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80102f6:	68b8      	ldr	r0, [r7, #8]
 80102f8:	f00c fb5e 	bl	801c9b8 <sys_sem_signal>
    }
    return ERR_OK;
 80102fc:	2300      	movs	r3, #0
 80102fe:	e02e      	b.n	801035e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8010300:	7d7b      	ldrb	r3, [r7, #21]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d11e      	bne.n	8010344 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	7d1b      	ldrb	r3, [r3, #20]
 801030a:	2b01      	cmp	r3, #1
 801030c:	d106      	bne.n	801031c <lwip_netconn_do_close_internal+0x250>
 801030e:	4b16      	ldr	r3, [pc, #88]	; (8010368 <lwip_netconn_do_close_internal+0x29c>)
 8010310:	f240 4241 	movw	r2, #1089	; 0x441
 8010314:	491b      	ldr	r1, [pc, #108]	; (8010384 <lwip_netconn_do_close_internal+0x2b8>)
 8010316:	4816      	ldr	r0, [pc, #88]	; (8010370 <lwip_netconn_do_close_internal+0x2a4>)
 8010318:	f00c fc56 	bl	801cbc8 <iprintf>
    if (shut_tx) {
 801031c:	7b7b      	ldrb	r3, [r7, #13]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d003      	beq.n	801032a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8010322:	4919      	ldr	r1, [pc, #100]	; (8010388 <lwip_netconn_do_close_internal+0x2bc>)
 8010324:	6938      	ldr	r0, [r7, #16]
 8010326:	f004 fdc3 	bl	8014eb0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 801032a:	2201      	movs	r2, #1
 801032c:	4917      	ldr	r1, [pc, #92]	; (801038c <lwip_netconn_do_close_internal+0x2c0>)
 801032e:	6938      	ldr	r0, [r7, #16]
 8010330:	f004 fe1a 	bl	8014f68 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010334:	4916      	ldr	r1, [pc, #88]	; (8010390 <lwip_netconn_do_close_internal+0x2c4>)
 8010336:	6938      	ldr	r0, [r7, #16]
 8010338:	f004 fddc 	bl	8014ef4 <tcp_err>
    tcp_arg(tpcb, conn);
 801033c:	6879      	ldr	r1, [r7, #4]
 801033e:	6938      	ldr	r0, [r7, #16]
 8010340:	f004 fd82 	bl	8014e48 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8010344:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d106      	bne.n	801035a <lwip_netconn_do_close_internal+0x28e>
 801034c:	4b06      	ldr	r3, [pc, #24]	; (8010368 <lwip_netconn_do_close_internal+0x29c>)
 801034e:	f240 424d 	movw	r2, #1101	; 0x44d
 8010352:	4910      	ldr	r1, [pc, #64]	; (8010394 <lwip_netconn_do_close_internal+0x2c8>)
 8010354:	4806      	ldr	r0, [pc, #24]	; (8010370 <lwip_netconn_do_close_internal+0x2a4>)
 8010356:	f00c fc37 	bl	801cbc8 <iprintf>
  return err;
 801035a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801035e:	4618      	mov	r0, r3
 8010360:	3718      	adds	r7, #24
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	0801dec4 	.word	0x0801dec4
 801036c:	0801e198 	.word	0x0801e198
 8010370:	0801df08 	.word	0x0801df08
 8010374:	0801e1a8 	.word	0x0801e1a8
 8010378:	0801e1c8 	.word	0x0801e1c8
 801037c:	0801e1ec 	.word	0x0801e1ec
 8010380:	0801e02c 	.word	0x0801e02c
 8010384:	0801e200 	.word	0x0801e200
 8010388:	0800f945 	.word	0x0800f945
 801038c:	0800f87d 	.word	0x0800f87d
 8010390:	0800f9ed 	.word	0x0800f9ed
 8010394:	0801e224 	.word	0x0801e224

08010398 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b084      	sub	sp, #16
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	785b      	ldrb	r3, [r3, #1]
 80103aa:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80103ac:	7afb      	ldrb	r3, [r7, #11]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d00d      	beq.n	80103ce <lwip_netconn_do_delconn+0x36>
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103bc:	2b10      	cmp	r3, #16
 80103be:	d006      	beq.n	80103ce <lwip_netconn_do_delconn+0x36>
 80103c0:	4b60      	ldr	r3, [pc, #384]	; (8010544 <lwip_netconn_do_delconn+0x1ac>)
 80103c2:	f240 425f 	movw	r2, #1119	; 0x45f
 80103c6:	4960      	ldr	r1, [pc, #384]	; (8010548 <lwip_netconn_do_delconn+0x1b0>)
 80103c8:	4860      	ldr	r0, [pc, #384]	; (801054c <lwip_netconn_do_delconn+0x1b4>)
 80103ca:	f00c fbfd 	bl	801cbc8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80103ce:	7afb      	ldrb	r3, [r7, #11]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d005      	beq.n	80103e0 <lwip_netconn_do_delconn+0x48>
 80103d4:	7afb      	ldrb	r3, [r7, #11]
 80103d6:	2b02      	cmp	r3, #2
 80103d8:	d002      	beq.n	80103e0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80103da:	7afb      	ldrb	r3, [r7, #11]
 80103dc:	2b03      	cmp	r3, #3
 80103de:	d109      	bne.n	80103f4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80103e0:	7afb      	ldrb	r3, [r7, #11]
 80103e2:	2b03      	cmp	r3, #3
 80103e4:	d10a      	bne.n	80103fc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	7f1b      	ldrb	r3, [r3, #28]
 80103ec:	f003 0304 	and.w	r3, r3, #4
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d103      	bne.n	80103fc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	22fb      	movs	r2, #251	; 0xfb
 80103f8:	711a      	strb	r2, [r3, #4]
 80103fa:	e097      	b.n	801052c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80103fc:	7afb      	ldrb	r3, [r7, #11]
 80103fe:	2b03      	cmp	r3, #3
 8010400:	d10d      	bne.n	801041e <lwip_netconn_do_delconn+0x86>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	7f1b      	ldrb	r3, [r3, #28]
 8010408:	f003 0304 	and.w	r3, r3, #4
 801040c:	2b00      	cmp	r3, #0
 801040e:	d106      	bne.n	801041e <lwip_netconn_do_delconn+0x86>
 8010410:	4b4c      	ldr	r3, [pc, #304]	; (8010544 <lwip_netconn_do_delconn+0x1ac>)
 8010412:	f240 427b 	movw	r2, #1147	; 0x47b
 8010416:	494e      	ldr	r1, [pc, #312]	; (8010550 <lwip_netconn_do_delconn+0x1b8>)
 8010418:	484c      	ldr	r0, [pc, #304]	; (801054c <lwip_netconn_do_delconn+0x1b4>)
 801041a:	f00c fbd5 	bl	801cbc8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	2200      	movs	r2, #0
 8010422:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4618      	mov	r0, r3
 801042a:	f7ff fdd1 	bl	800ffd0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	685b      	ldr	r3, [r3, #4]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d05f      	beq.n	80104f8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	781b      	ldrb	r3, [r3, #0]
 801043e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010442:	2b10      	cmp	r3, #16
 8010444:	d00e      	beq.n	8010464 <lwip_netconn_do_delconn+0xcc>
 8010446:	2b20      	cmp	r3, #32
 8010448:	d000      	beq.n	801044c <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 801044a:	e051      	b.n	80104f0 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	2200      	movs	r2, #0
 8010454:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	4618      	mov	r0, r3
 801045e:	f009 fe15 	bl	801a08c <udp_remove>
          break;
 8010462:	e045      	b.n	80104f0 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	6a1b      	ldr	r3, [r3, #32]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d006      	beq.n	801047c <lwip_netconn_do_delconn+0xe4>
 801046e:	4b35      	ldr	r3, [pc, #212]	; (8010544 <lwip_netconn_do_delconn+0x1ac>)
 8010470:	f240 4294 	movw	r2, #1172	; 0x494
 8010474:	4937      	ldr	r1, [pc, #220]	; (8010554 <lwip_netconn_do_delconn+0x1bc>)
 8010476:	4835      	ldr	r0, [pc, #212]	; (801054c <lwip_netconn_do_delconn+0x1b4>)
 8010478:	f00c fba6 	bl	801cbc8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	2204      	movs	r2, #4
 8010482:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	2203      	movs	r2, #3
 8010488:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	2100      	movs	r1, #0
 8010498:	4618      	mov	r0, r3
 801049a:	f7ff fe17 	bl	80100cc <lwip_netconn_do_close_internal>
 801049e:	4603      	mov	r3, r0
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d04a      	beq.n	801053a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	785b      	ldrb	r3, [r3, #1]
 80104aa:	2b04      	cmp	r3, #4
 80104ac:	d006      	beq.n	80104bc <lwip_netconn_do_delconn+0x124>
 80104ae:	4b25      	ldr	r3, [pc, #148]	; (8010544 <lwip_netconn_do_delconn+0x1ac>)
 80104b0:	f240 429a 	movw	r2, #1178	; 0x49a
 80104b4:	4928      	ldr	r1, [pc, #160]	; (8010558 <lwip_netconn_do_delconn+0x1c0>)
 80104b6:	4825      	ldr	r0, [pc, #148]	; (801054c <lwip_netconn_do_delconn+0x1b4>)
 80104b8:	f00c fb86 	bl	801cbc8 <iprintf>
            UNLOCK_TCPIP_CORE();
 80104bc:	4827      	ldr	r0, [pc, #156]	; (801055c <lwip_netconn_do_delconn+0x1c4>)
 80104be:	f00c faec 	bl	801ca9a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	330c      	adds	r3, #12
 80104c8:	2100      	movs	r1, #0
 80104ca:	4618      	mov	r0, r3
 80104cc:	f00c fa43 	bl	801c956 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80104d0:	4822      	ldr	r0, [pc, #136]	; (801055c <lwip_netconn_do_delconn+0x1c4>)
 80104d2:	f00c fad3 	bl	801ca7c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	785b      	ldrb	r3, [r3, #1]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d02c      	beq.n	801053a <lwip_netconn_do_delconn+0x1a2>
 80104e0:	4b18      	ldr	r3, [pc, #96]	; (8010544 <lwip_netconn_do_delconn+0x1ac>)
 80104e2:	f240 429e 	movw	r2, #1182	; 0x49e
 80104e6:	491c      	ldr	r1, [pc, #112]	; (8010558 <lwip_netconn_do_delconn+0x1c0>)
 80104e8:	4818      	ldr	r0, [pc, #96]	; (801054c <lwip_netconn_do_delconn+0x1b4>)
 80104ea:	f00c fb6d 	bl	801cbc8 <iprintf>
          return;
 80104ee:	e024      	b.n	801053a <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	2200      	movs	r2, #0
 80104f6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d007      	beq.n	8010512 <lwip_netconn_do_delconn+0x17a>
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010508:	68fa      	ldr	r2, [r7, #12]
 801050a:	6810      	ldr	r0, [r2, #0]
 801050c:	2200      	movs	r2, #0
 801050e:	2100      	movs	r1, #0
 8010510:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010518:	2b00      	cmp	r3, #0
 801051a:	d007      	beq.n	801052c <lwip_netconn_do_delconn+0x194>
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010522:	68fa      	ldr	r2, [r7, #12]
 8010524:	6810      	ldr	r0, [r2, #0]
 8010526:	2200      	movs	r2, #0
 8010528:	2102      	movs	r1, #2
 801052a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	330c      	adds	r3, #12
 8010532:	4618      	mov	r0, r3
 8010534:	f00c fa5a 	bl	801c9ec <sys_sem_valid>
 8010538:	e000      	b.n	801053c <lwip_netconn_do_delconn+0x1a4>
          return;
 801053a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 801053c:	3710      	adds	r7, #16
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	0801dec4 	.word	0x0801dec4
 8010548:	0801e234 	.word	0x0801e234
 801054c:	0801df08 	.word	0x0801df08
 8010550:	0801e248 	.word	0x0801e248
 8010554:	0801e268 	.word	0x0801e268
 8010558:	0801e284 	.word	0x0801e284
 801055c:	20008cf0 	.word	0x20008cf0

08010560 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010560:	b580      	push	{r7, lr}
 8010562:	b084      	sub	sp, #16
 8010564:	af00      	add	r7, sp, #0
 8010566:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 801056c:	68bb      	ldr	r3, [r7, #8]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	685b      	ldr	r3, [r3, #4]
 8010572:	2b00      	cmp	r3, #0
 8010574:	d026      	beq.n	80105c4 <lwip_netconn_do_bind+0x64>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010576:	68bb      	ldr	r3, [r7, #8]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010580:	2b10      	cmp	r3, #16
 8010582:	d00e      	beq.n	80105a2 <lwip_netconn_do_bind+0x42>
 8010584:	2b20      	cmp	r3, #32
 8010586:	d119      	bne.n	80105bc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	6858      	ldr	r0, [r3, #4]
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	6899      	ldr	r1, [r3, #8]
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	899b      	ldrh	r3, [r3, #12]
 8010596:	461a      	mov	r2, r3
 8010598:	f009 fc62 	bl	8019e60 <udp_bind>
 801059c:	4603      	mov	r3, r0
 801059e:	73fb      	strb	r3, [r7, #15]
        break;
 80105a0:	e012      	b.n	80105c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80105a2:	68bb      	ldr	r3, [r7, #8]
 80105a4:	681b      	ldr	r3, [r3, #0]
 80105a6:	6858      	ldr	r0, [r3, #4]
 80105a8:	68bb      	ldr	r3, [r7, #8]
 80105aa:	6899      	ldr	r1, [r3, #8]
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	899b      	ldrh	r3, [r3, #12]
 80105b0:	461a      	mov	r2, r3
 80105b2:	f003 fab3 	bl	8013b1c <tcp_bind>
 80105b6:	4603      	mov	r3, r0
 80105b8:	73fb      	strb	r3, [r7, #15]
        break;
 80105ba:	e005      	b.n	80105c8 <lwip_netconn_do_bind+0x68>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80105bc:	23fa      	movs	r3, #250	; 0xfa
 80105be:	73fb      	strb	r3, [r7, #15]
        break;
 80105c0:	bf00      	nop
 80105c2:	e001      	b.n	80105c8 <lwip_netconn_do_bind+0x68>
    }
  } else {
    err = ERR_VAL;
 80105c4:	23fa      	movs	r3, #250	; 0xfa
 80105c6:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	7bfa      	ldrb	r2, [r7, #15]
 80105cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80105ce:	bf00      	nop
 80105d0:	3710      	adds	r7, #16
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}
	...

080105d8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80105d8:	b580      	push	{r7, lr}
 80105da:	b088      	sub	sp, #32
 80105dc:	af00      	add	r7, sp, #0
 80105de:	60f8      	str	r0, [r7, #12]
 80105e0:	60b9      	str	r1, [r7, #8]
 80105e2:	4613      	mov	r3, r2
 80105e4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80105e6:	2300      	movs	r3, #0
 80105e8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80105ee:	69bb      	ldr	r3, [r7, #24]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d102      	bne.n	80105fa <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80105f4:	f06f 0305 	mvn.w	r3, #5
 80105f8:	e070      	b.n	80106dc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80105fa:	69bb      	ldr	r3, [r7, #24]
 80105fc:	785b      	ldrb	r3, [r3, #1]
 80105fe:	2b03      	cmp	r3, #3
 8010600:	d006      	beq.n	8010610 <lwip_netconn_do_connected+0x38>
 8010602:	4b38      	ldr	r3, [pc, #224]	; (80106e4 <lwip_netconn_do_connected+0x10c>)
 8010604:	f240 5223 	movw	r2, #1315	; 0x523
 8010608:	4937      	ldr	r1, [pc, #220]	; (80106e8 <lwip_netconn_do_connected+0x110>)
 801060a:	4838      	ldr	r0, [pc, #224]	; (80106ec <lwip_netconn_do_connected+0x114>)
 801060c:	f00c fadc 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	6a1b      	ldr	r3, [r3, #32]
 8010614:	2b00      	cmp	r3, #0
 8010616:	d10c      	bne.n	8010632 <lwip_netconn_do_connected+0x5a>
 8010618:	69bb      	ldr	r3, [r7, #24]
 801061a:	7f1b      	ldrb	r3, [r3, #28]
 801061c:	f003 0304 	and.w	r3, r3, #4
 8010620:	2b00      	cmp	r3, #0
 8010622:	d106      	bne.n	8010632 <lwip_netconn_do_connected+0x5a>
 8010624:	4b2f      	ldr	r3, [pc, #188]	; (80106e4 <lwip_netconn_do_connected+0x10c>)
 8010626:	f240 5225 	movw	r2, #1317	; 0x525
 801062a:	4931      	ldr	r1, [pc, #196]	; (80106f0 <lwip_netconn_do_connected+0x118>)
 801062c:	482f      	ldr	r0, [pc, #188]	; (80106ec <lwip_netconn_do_connected+0x114>)
 801062e:	f00c facb 	bl	801cbc8 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8010632:	69bb      	ldr	r3, [r7, #24]
 8010634:	6a1b      	ldr	r3, [r3, #32]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d008      	beq.n	801064c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	6a1b      	ldr	r3, [r3, #32]
 801063e:	79fa      	ldrb	r2, [r7, #7]
 8010640:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010642:	69bb      	ldr	r3, [r7, #24]
 8010644:	6a1b      	ldr	r3, [r3, #32]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	330c      	adds	r3, #12
 801064a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 801064c:	69bb      	ldr	r3, [r7, #24]
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010654:	2b10      	cmp	r3, #16
 8010656:	d106      	bne.n	8010666 <lwip_netconn_do_connected+0x8e>
 8010658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d102      	bne.n	8010666 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8010660:	69b8      	ldr	r0, [r7, #24]
 8010662:	f7ff fa99 	bl	800fb98 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	7f1b      	ldrb	r3, [r3, #28]
 801066a:	f003 0304 	and.w	r3, r3, #4
 801066e:	2b00      	cmp	r3, #0
 8010670:	bf0c      	ite	eq
 8010672:	2301      	moveq	r3, #1
 8010674:	2300      	movne	r3, #0
 8010676:	b2db      	uxtb	r3, r3
 8010678:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	7f1b      	ldrb	r3, [r3, #28]
 801067e:	f023 0304 	bic.w	r3, r3, #4
 8010682:	b2da      	uxtb	r2, r3
 8010684:	69bb      	ldr	r3, [r7, #24]
 8010686:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d002      	beq.n	8010694 <lwip_netconn_do_connected+0xbc>
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d10c      	bne.n	80106ae <lwip_netconn_do_connected+0xd6>
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d102      	bne.n	80106a0 <lwip_netconn_do_connected+0xc8>
 801069a:	69fb      	ldr	r3, [r7, #28]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d006      	beq.n	80106ae <lwip_netconn_do_connected+0xd6>
 80106a0:	4b10      	ldr	r3, [pc, #64]	; (80106e4 <lwip_netconn_do_connected+0x10c>)
 80106a2:	f240 5232 	movw	r2, #1330	; 0x532
 80106a6:	4913      	ldr	r1, [pc, #76]	; (80106f4 <lwip_netconn_do_connected+0x11c>)
 80106a8:	4810      	ldr	r0, [pc, #64]	; (80106ec <lwip_netconn_do_connected+0x114>)
 80106aa:	f00c fa8d 	bl	801cbc8 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	2200      	movs	r2, #0
 80106b2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	2200      	movs	r2, #0
 80106b8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80106ba:	69bb      	ldr	r3, [r7, #24]
 80106bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d005      	beq.n	80106ce <lwip_netconn_do_connected+0xf6>
 80106c2:	69bb      	ldr	r3, [r7, #24]
 80106c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106c6:	2200      	movs	r2, #0
 80106c8:	2102      	movs	r1, #2
 80106ca:	69b8      	ldr	r0, [r7, #24]
 80106cc:	4798      	blx	r3

  if (was_blocking) {
 80106ce:	697b      	ldr	r3, [r7, #20]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d002      	beq.n	80106da <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80106d4:	69f8      	ldr	r0, [r7, #28]
 80106d6:	f00c f96f 	bl	801c9b8 <sys_sem_signal>
  }
  return ERR_OK;
 80106da:	2300      	movs	r3, #0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3720      	adds	r7, #32
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}
 80106e4:	0801dec4 	.word	0x0801dec4
 80106e8:	0801e28c 	.word	0x0801e28c
 80106ec:	0801df08 	.word	0x0801df08
 80106f0:	0801e2ac 	.word	0x0801e2ac
 80106f4:	0801e2ec 	.word	0x0801e2ec

080106f8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b086      	sub	sp, #24
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8010704:	693b      	ldr	r3, [r7, #16]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d102      	bne.n	8010714 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 801070e:	23f1      	movs	r3, #241	; 0xf1
 8010710:	75fb      	strb	r3, [r7, #23]
 8010712:	e09b      	b.n	801084c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	781b      	ldrb	r3, [r3, #0]
 801071a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801071e:	2b10      	cmp	r3, #16
 8010720:	d00f      	beq.n	8010742 <lwip_netconn_do_connect+0x4a>
 8010722:	2b20      	cmp	r3, #32
 8010724:	f040 8087 	bne.w	8010836 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010728:	693b      	ldr	r3, [r7, #16]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	6858      	ldr	r0, [r3, #4]
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	6899      	ldr	r1, [r3, #8]
 8010732:	693b      	ldr	r3, [r7, #16]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	461a      	mov	r2, r3
 8010738:	f009 fc1a 	bl	8019f70 <udp_connect>
 801073c:	4603      	mov	r3, r0
 801073e:	75fb      	strb	r3, [r7, #23]
        break;
 8010740:	e084      	b.n	801084c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	785b      	ldrb	r3, [r3, #1]
 8010748:	2b03      	cmp	r3, #3
 801074a:	d102      	bne.n	8010752 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 801074c:	23f7      	movs	r3, #247	; 0xf7
 801074e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8010750:	e07b      	b.n	801084a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	785b      	ldrb	r3, [r3, #1]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 801075c:	23f6      	movs	r3, #246	; 0xf6
 801075e:	75fb      	strb	r3, [r7, #23]
        break;
 8010760:	e073      	b.n	801084a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4618      	mov	r0, r3
 8010768:	f7ff fa16 	bl	800fb98 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	6858      	ldr	r0, [r3, #4]
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	6899      	ldr	r1, [r3, #8]
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	899a      	ldrh	r2, [r3, #12]
 801077a:	4b38      	ldr	r3, [pc, #224]	; (801085c <lwip_netconn_do_connect+0x164>)
 801077c:	f003 fc20 	bl	8013fc0 <tcp_connect>
 8010780:	4603      	mov	r3, r0
 8010782:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8010784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d15e      	bne.n	801084a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	7f1b      	ldrb	r3, [r3, #28]
 8010792:	f003 0302 	and.w	r3, r3, #2
 8010796:	2b00      	cmp	r3, #0
 8010798:	bf14      	ite	ne
 801079a:	2301      	movne	r3, #1
 801079c:	2300      	moveq	r3, #0
 801079e:	b2db      	uxtb	r3, r3
 80107a0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	2203      	movs	r2, #3
 80107a8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80107aa:	7bfb      	ldrb	r3, [r7, #15]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d009      	beq.n	80107c4 <lwip_netconn_do_connect+0xcc>
 80107b0:	693b      	ldr	r3, [r7, #16]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	7f1a      	ldrb	r2, [r3, #28]
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f042 0204 	orr.w	r2, r2, #4
 80107be:	b2d2      	uxtb	r2, r2
 80107c0:	771a      	strb	r2, [r3, #28]
 80107c2:	e008      	b.n	80107d6 <lwip_netconn_do_connect+0xde>
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	7f1a      	ldrb	r2, [r3, #28]
 80107ca:	693b      	ldr	r3, [r7, #16]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	f022 0204 	bic.w	r2, r2, #4
 80107d2:	b2d2      	uxtb	r2, r2
 80107d4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80107d6:	7bfb      	ldrb	r3, [r7, #15]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d002      	beq.n	80107e2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80107dc:	23fb      	movs	r3, #251	; 0xfb
 80107de:	75fb      	strb	r3, [r7, #23]
        break;
 80107e0:	e033      	b.n	801084a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	693a      	ldr	r2, [r7, #16]
 80107e8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	681b      	ldr	r3, [r3, #0]
 80107ee:	785b      	ldrb	r3, [r3, #1]
 80107f0:	2b03      	cmp	r3, #3
 80107f2:	d006      	beq.n	8010802 <lwip_netconn_do_connect+0x10a>
 80107f4:	4b1a      	ldr	r3, [pc, #104]	; (8010860 <lwip_netconn_do_connect+0x168>)
 80107f6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80107fa:	491a      	ldr	r1, [pc, #104]	; (8010864 <lwip_netconn_do_connect+0x16c>)
 80107fc:	481a      	ldr	r0, [pc, #104]	; (8010868 <lwip_netconn_do_connect+0x170>)
 80107fe:	f00c f9e3 	bl	801cbc8 <iprintf>
              UNLOCK_TCPIP_CORE();
 8010802:	481a      	ldr	r0, [pc, #104]	; (801086c <lwip_netconn_do_connect+0x174>)
 8010804:	f00c f949 	bl	801ca9a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	330c      	adds	r3, #12
 801080e:	2100      	movs	r1, #0
 8010810:	4618      	mov	r0, r3
 8010812:	f00c f8a0 	bl	801c956 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8010816:	4815      	ldr	r0, [pc, #84]	; (801086c <lwip_netconn_do_connect+0x174>)
 8010818:	f00c f930 	bl	801ca7c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801081c:	693b      	ldr	r3, [r7, #16]
 801081e:	681b      	ldr	r3, [r3, #0]
 8010820:	785b      	ldrb	r3, [r3, #1]
 8010822:	2b03      	cmp	r3, #3
 8010824:	d116      	bne.n	8010854 <lwip_netconn_do_connect+0x15c>
 8010826:	4b0e      	ldr	r3, [pc, #56]	; (8010860 <lwip_netconn_do_connect+0x168>)
 8010828:	f240 5274 	movw	r2, #1396	; 0x574
 801082c:	490d      	ldr	r1, [pc, #52]	; (8010864 <lwip_netconn_do_connect+0x16c>)
 801082e:	480e      	ldr	r0, [pc, #56]	; (8010868 <lwip_netconn_do_connect+0x170>)
 8010830:	f00c f9ca 	bl	801cbc8 <iprintf>
              return;
 8010834:	e00e      	b.n	8010854 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8010836:	4b0a      	ldr	r3, [pc, #40]	; (8010860 <lwip_netconn_do_connect+0x168>)
 8010838:	f240 527f 	movw	r2, #1407	; 0x57f
 801083c:	490c      	ldr	r1, [pc, #48]	; (8010870 <lwip_netconn_do_connect+0x178>)
 801083e:	480a      	ldr	r0, [pc, #40]	; (8010868 <lwip_netconn_do_connect+0x170>)
 8010840:	f00c f9c2 	bl	801cbc8 <iprintf>
 8010844:	23fa      	movs	r3, #250	; 0xfa
 8010846:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8010848:	e000      	b.n	801084c <lwip_netconn_do_connect+0x154>
        break;
 801084a:	bf00      	nop
    }
  }
  msg->err = err;
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	7dfa      	ldrb	r2, [r7, #23]
 8010850:	711a      	strb	r2, [r3, #4]
 8010852:	e000      	b.n	8010856 <lwip_netconn_do_connect+0x15e>
              return;
 8010854:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8010856:	3718      	adds	r7, #24
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}
 801085c:	080105d9 	.word	0x080105d9
 8010860:	0801dec4 	.word	0x0801dec4
 8010864:	0801e284 	.word	0x0801e284
 8010868:	0801df08 	.word	0x0801df08
 801086c:	20008cf0 	.word	0x20008cf0
 8010870:	0801e30c 	.word	0x0801e30c

08010874 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b086      	sub	sp, #24
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d07f      	beq.n	801098a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010894:	2b10      	cmp	r3, #16
 8010896:	d175      	bne.n	8010984 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	785b      	ldrb	r3, [r3, #1]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d165      	bne.n	801096e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	7d1b      	ldrb	r3, [r3, #20]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d002      	beq.n	80108b4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80108ae:	23fa      	movs	r3, #250	; 0xfa
 80108b0:	72fb      	strb	r3, [r7, #11]
 80108b2:	e06c      	b.n	801098e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80108b4:	23ff      	movs	r3, #255	; 0xff
 80108b6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	685b      	ldr	r3, [r3, #4]
 80108be:	f107 020b 	add.w	r2, r7, #11
 80108c2:	7cf9      	ldrb	r1, [r7, #19]
 80108c4:	4618      	mov	r0, r3
 80108c6:	f003 f9e1 	bl	8013c8c <tcp_listen_with_backlog_and_err>
 80108ca:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d05d      	beq.n	801098e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	3310      	adds	r3, #16
 80108d8:	4618      	mov	r0, r3
 80108da:	f00b fff6 	bl	801c8ca <sys_mbox_valid>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d00b      	beq.n	80108fc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80108e4:	697b      	ldr	r3, [r7, #20]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	3310      	adds	r3, #16
 80108ea:	4618      	mov	r0, r3
 80108ec:	f00b ff66 	bl	801c7bc <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80108f0:	697b      	ldr	r3, [r7, #20]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	3310      	adds	r3, #16
 80108f6:	4618      	mov	r0, r3
 80108f8:	f00b fff8 	bl	801c8ec <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80108fc:	2300      	movs	r3, #0
 80108fe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8010900:	697b      	ldr	r3, [r7, #20]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	3314      	adds	r3, #20
 8010906:	4618      	mov	r0, r3
 8010908:	f00b ffdf 	bl	801c8ca <sys_mbox_valid>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d108      	bne.n	8010924 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8010912:	697b      	ldr	r3, [r7, #20]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	3314      	adds	r3, #20
 8010918:	2106      	movs	r1, #6
 801091a:	4618      	mov	r0, r3
 801091c:	f00b ff2c 	bl	801c778 <sys_mbox_new>
 8010920:	4603      	mov	r3, r0
 8010922:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8010924:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d118      	bne.n	801095e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 801092c:	697b      	ldr	r3, [r7, #20]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2202      	movs	r2, #2
 8010932:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	68fa      	ldr	r2, [r7, #12]
 801093a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	685a      	ldr	r2, [r3, #4]
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	4619      	mov	r1, r3
 8010948:	4610      	mov	r0, r2
 801094a:	f004 fa7d 	bl	8014e48 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	4912      	ldr	r1, [pc, #72]	; (80109a0 <lwip_netconn_do_listen+0x12c>)
 8010956:	4618      	mov	r0, r3
 8010958:	f004 faee 	bl	8014f38 <tcp_accept>
 801095c:	e017      	b.n	801098e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	f002 ff8c 	bl	801387c <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2200      	movs	r2, #0
 801096a:	605a      	str	r2, [r3, #4]
 801096c:	e00f      	b.n	801098e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	785b      	ldrb	r3, [r3, #1]
 8010974:	2b02      	cmp	r3, #2
 8010976:	d102      	bne.n	801097e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8010978:	2300      	movs	r3, #0
 801097a:	72fb      	strb	r3, [r7, #11]
 801097c:	e007      	b.n	801098e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 801097e:	23f5      	movs	r3, #245	; 0xf5
 8010980:	72fb      	strb	r3, [r7, #11]
 8010982:	e004      	b.n	801098e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8010984:	23f0      	movs	r3, #240	; 0xf0
 8010986:	72fb      	strb	r3, [r7, #11]
 8010988:	e001      	b.n	801098e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 801098a:	23f5      	movs	r3, #245	; 0xf5
 801098c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 801098e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8010992:	697b      	ldr	r3, [r7, #20]
 8010994:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8010996:	bf00      	nop
 8010998:	3718      	adds	r7, #24
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	0800fbe9 	.word	0x0800fbe9

080109a4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b086      	sub	sp, #24
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	2200      	movs	r2, #0
 80109b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80109b6:	693b      	ldr	r3, [r7, #16]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	685b      	ldr	r3, [r3, #4]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d022      	beq.n	8010a06 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80109c0:	693b      	ldr	r3, [r7, #16]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80109ca:	2b10      	cmp	r3, #16
 80109cc:	d11b      	bne.n	8010a06 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109da:	d202      	bcs.n	80109e2 <lwip_netconn_do_recv+0x3e>
 80109dc:	697b      	ldr	r3, [r7, #20]
 80109de:	b29b      	uxth	r3, r3
 80109e0:	e001      	b.n	80109e6 <lwip_netconn_do_recv+0x42>
 80109e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80109e6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	89fa      	ldrh	r2, [r7, #14]
 80109f0:	4611      	mov	r1, r2
 80109f2:	4618      	mov	r0, r3
 80109f4:	f003 fa4e 	bl	8013e94 <tcp_recved>
        remaining -= recved;
 80109f8:	89fb      	ldrh	r3, [r7, #14]
 80109fa:	697a      	ldr	r2, [r7, #20]
 80109fc:	1ad3      	subs	r3, r2, r3
 80109fe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8010a00:	697b      	ldr	r3, [r7, #20]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d1e6      	bne.n	80109d4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010a06:	bf00      	nop
 8010a08:	3718      	adds	r7, #24
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
	...

08010a10 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b088      	sub	sp, #32
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	460b      	mov	r3, r1
 8010a1a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8010a1c:	2300      	movs	r3, #0
 8010a1e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d106      	bne.n	8010a34 <lwip_netconn_do_writemore+0x24>
 8010a26:	4b96      	ldr	r3, [pc, #600]	; (8010c80 <lwip_netconn_do_writemore+0x270>)
 8010a28:	f240 6273 	movw	r2, #1651	; 0x673
 8010a2c:	4995      	ldr	r1, [pc, #596]	; (8010c84 <lwip_netconn_do_writemore+0x274>)
 8010a2e:	4896      	ldr	r0, [pc, #600]	; (8010c88 <lwip_netconn_do_writemore+0x278>)
 8010a30:	f00c f8ca 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	785b      	ldrb	r3, [r3, #1]
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	d006      	beq.n	8010a4a <lwip_netconn_do_writemore+0x3a>
 8010a3c:	4b90      	ldr	r3, [pc, #576]	; (8010c80 <lwip_netconn_do_writemore+0x270>)
 8010a3e:	f240 6274 	movw	r2, #1652	; 0x674
 8010a42:	4992      	ldr	r1, [pc, #584]	; (8010c8c <lwip_netconn_do_writemore+0x27c>)
 8010a44:	4890      	ldr	r0, [pc, #576]	; (8010c88 <lwip_netconn_do_writemore+0x278>)
 8010a46:	f00c f8bf 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a1b      	ldr	r3, [r3, #32]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <lwip_netconn_do_writemore+0x50>
 8010a52:	4b8b      	ldr	r3, [pc, #556]	; (8010c80 <lwip_netconn_do_writemore+0x270>)
 8010a54:	f240 6275 	movw	r2, #1653	; 0x675
 8010a58:	498d      	ldr	r1, [pc, #564]	; (8010c90 <lwip_netconn_do_writemore+0x280>)
 8010a5a:	488b      	ldr	r0, [pc, #556]	; (8010c88 <lwip_netconn_do_writemore+0x278>)
 8010a5c:	f00c f8b4 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d106      	bne.n	8010a76 <lwip_netconn_do_writemore+0x66>
 8010a68:	4b85      	ldr	r3, [pc, #532]	; (8010c80 <lwip_netconn_do_writemore+0x270>)
 8010a6a:	f240 6276 	movw	r2, #1654	; 0x676
 8010a6e:	4989      	ldr	r1, [pc, #548]	; (8010c94 <lwip_netconn_do_writemore+0x284>)
 8010a70:	4885      	ldr	r0, [pc, #532]	; (8010c88 <lwip_netconn_do_writemore+0x278>)
 8010a72:	f00c f8a9 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6a1b      	ldr	r3, [r3, #32]
 8010a7a:	699a      	ldr	r2, [r3, #24]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6a1b      	ldr	r3, [r3, #32]
 8010a80:	695b      	ldr	r3, [r3, #20]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d306      	bcc.n	8010a94 <lwip_netconn_do_writemore+0x84>
 8010a86:	4b7e      	ldr	r3, [pc, #504]	; (8010c80 <lwip_netconn_do_writemore+0x270>)
 8010a88:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8010a8c:	4982      	ldr	r1, [pc, #520]	; (8010c98 <lwip_netconn_do_writemore+0x288>)
 8010a8e:	487e      	ldr	r0, [pc, #504]	; (8010c88 <lwip_netconn_do_writemore+0x278>)
 8010a90:	f00c f89a 	bl	801cbc8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6a1b      	ldr	r3, [r3, #32]
 8010a98:	899b      	ldrh	r3, [r3, #12]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <lwip_netconn_do_writemore+0x9c>
 8010a9e:	4b78      	ldr	r3, [pc, #480]	; (8010c80 <lwip_netconn_do_writemore+0x270>)
 8010aa0:	f240 6279 	movw	r2, #1657	; 0x679
 8010aa4:	497d      	ldr	r1, [pc, #500]	; (8010c9c <lwip_netconn_do_writemore+0x28c>)
 8010aa6:	4878      	ldr	r0, [pc, #480]	; (8010c88 <lwip_netconn_do_writemore+0x278>)
 8010aa8:	f00c f88e 	bl	801cbc8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6a1b      	ldr	r3, [r3, #32]
 8010ab0:	7f1b      	ldrb	r3, [r3, #28]
 8010ab2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	7f1b      	ldrb	r3, [r3, #28]
 8010ab8:	f003 0302 	and.w	r3, r3, #2
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d104      	bne.n	8010aca <lwip_netconn_do_writemore+0xba>
 8010ac0:	7ebb      	ldrb	r3, [r7, #26]
 8010ac2:	f003 0304 	and.w	r3, r3, #4
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d001      	beq.n	8010ace <lwip_netconn_do_writemore+0xbe>
 8010aca:	2301      	movs	r3, #1
 8010acc:	e000      	b.n	8010ad0 <lwip_netconn_do_writemore+0xc0>
 8010ace:	2300      	movs	r3, #0
 8010ad0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6a1b      	ldr	r3, [r3, #32]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	681a      	ldr	r2, [r3, #0]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6a1b      	ldr	r3, [r3, #32]
 8010ade:	691b      	ldr	r3, [r3, #16]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6a1b      	ldr	r3, [r3, #32]
 8010ae8:	689b      	ldr	r3, [r3, #8]
 8010aea:	685a      	ldr	r2, [r3, #4]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6a1b      	ldr	r3, [r3, #32]
 8010af0:	691b      	ldr	r3, [r3, #16]
 8010af2:	1ad3      	subs	r3, r2, r3
 8010af4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010afc:	d307      	bcc.n	8010b0e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8010afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010b02:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010b04:	7ebb      	ldrb	r3, [r7, #26]
 8010b06:	f043 0302 	orr.w	r3, r3, #2
 8010b0a:	76bb      	strb	r3, [r7, #26]
 8010b0c:	e001      	b.n	8010b12 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010b1a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8010b1c:	89fa      	ldrh	r2, [r7, #14]
 8010b1e:	8bbb      	ldrh	r3, [r7, #28]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d216      	bcs.n	8010b52 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8010b24:	89fb      	ldrh	r3, [r7, #14]
 8010b26:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8010b28:	7e3b      	ldrb	r3, [r7, #24]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d00d      	beq.n	8010b4a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8010b2e:	8bbb      	ldrh	r3, [r7, #28]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d10e      	bne.n	8010b52 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6a1b      	ldr	r3, [r3, #32]
 8010b38:	699b      	ldr	r3, [r3, #24]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d102      	bne.n	8010b44 <lwip_netconn_do_writemore+0x134>
 8010b3e:	f06f 0306 	mvn.w	r3, #6
 8010b42:	e000      	b.n	8010b46 <lwip_netconn_do_writemore+0x136>
 8010b44:	2300      	movs	r3, #0
 8010b46:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8010b48:	e07d      	b.n	8010c46 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8010b4a:	7ebb      	ldrb	r3, [r7, #26]
 8010b4c:	f043 0302 	orr.w	r3, r3, #2
 8010b50:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	6a1b      	ldr	r3, [r3, #32]
 8010b56:	691a      	ldr	r2, [r3, #16]
 8010b58:	8bbb      	ldrh	r3, [r7, #28]
 8010b5a:	441a      	add	r2, r3
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6a1b      	ldr	r3, [r3, #32]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d906      	bls.n	8010b76 <lwip_netconn_do_writemore+0x166>
 8010b68:	4b45      	ldr	r3, [pc, #276]	; (8010c80 <lwip_netconn_do_writemore+0x270>)
 8010b6a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8010b6e:	494c      	ldr	r1, [pc, #304]	; (8010ca0 <lwip_netconn_do_writemore+0x290>)
 8010b70:	4845      	ldr	r0, [pc, #276]	; (8010c88 <lwip_netconn_do_writemore+0x278>)
 8010b72:	f00c f829 	bl	801cbc8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010b76:	8bbb      	ldrh	r3, [r7, #28]
 8010b78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b7c:	4293      	cmp	r3, r2
 8010b7e:	d103      	bne.n	8010b88 <lwip_netconn_do_writemore+0x178>
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b86:	d209      	bcs.n	8010b9c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010b88:	693b      	ldr	r3, [r7, #16]
 8010b8a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8010b8c:	8bba      	ldrh	r2, [r7, #28]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d10b      	bne.n	8010baa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	6a1b      	ldr	r3, [r3, #32]
 8010b96:	899b      	ldrh	r3, [r3, #12]
 8010b98:	2b01      	cmp	r3, #1
 8010b9a:	d906      	bls.n	8010baa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8010ba0:	7ebb      	ldrb	r3, [r7, #26]
 8010ba2:	f043 0302 	orr.w	r3, r3, #2
 8010ba6:	76bb      	strb	r3, [r7, #26]
 8010ba8:	e001      	b.n	8010bae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8010baa:	2300      	movs	r3, #0
 8010bac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6858      	ldr	r0, [r3, #4]
 8010bb2:	7ebb      	ldrb	r3, [r7, #26]
 8010bb4:	8bba      	ldrh	r2, [r7, #28]
 8010bb6:	6979      	ldr	r1, [r7, #20]
 8010bb8:	f007 f882 	bl	8017cc0 <tcp_write>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8010bc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d12c      	bne.n	8010c22 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6a1b      	ldr	r3, [r3, #32]
 8010bcc:	6999      	ldr	r1, [r3, #24]
 8010bce:	8bba      	ldrh	r2, [r7, #28]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6a1b      	ldr	r3, [r3, #32]
 8010bd4:	440a      	add	r2, r1
 8010bd6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	6a1b      	ldr	r3, [r3, #32]
 8010bdc:	6919      	ldr	r1, [r3, #16]
 8010bde:	8bba      	ldrh	r2, [r7, #28]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	6a1b      	ldr	r3, [r3, #32]
 8010be4:	440a      	add	r2, r1
 8010be6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6a1b      	ldr	r3, [r3, #32]
 8010bec:	691a      	ldr	r2, [r3, #16]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	6a1b      	ldr	r3, [r3, #32]
 8010bf2:	689b      	ldr	r3, [r3, #8]
 8010bf4:	685b      	ldr	r3, [r3, #4]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d113      	bne.n	8010c22 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a1b      	ldr	r3, [r3, #32]
 8010bfe:	899a      	ldrh	r2, [r3, #12]
 8010c00:	3a01      	subs	r2, #1
 8010c02:	b292      	uxth	r2, r2
 8010c04:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	6a1b      	ldr	r3, [r3, #32]
 8010c0a:	899b      	ldrh	r3, [r3, #12]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d008      	beq.n	8010c22 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6a1b      	ldr	r3, [r3, #32]
 8010c14:	689a      	ldr	r2, [r3, #8]
 8010c16:	3208      	adds	r2, #8
 8010c18:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	6a1b      	ldr	r3, [r3, #32]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8010c22:	7e7b      	ldrb	r3, [r7, #25]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d004      	beq.n	8010c32 <lwip_netconn_do_writemore+0x222>
 8010c28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f43f af50 	beq.w	8010ad2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8010c32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d004      	beq.n	8010c44 <lwip_netconn_do_writemore+0x234>
 8010c3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c42:	d146      	bne.n	8010cd2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8010c44:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8010c46:	7e3b      	ldrb	r3, [r7, #24]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d02b      	beq.n	8010ca4 <lwip_netconn_do_writemore+0x294>
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6a1b      	ldr	r3, [r3, #32]
 8010c50:	699a      	ldr	r2, [r3, #24]
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a1b      	ldr	r3, [r3, #32]
 8010c56:	695b      	ldr	r3, [r3, #20]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	d223      	bcs.n	8010ca4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d005      	beq.n	8010c70 <lwip_netconn_do_writemore+0x260>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c68:	2200      	movs	r2, #0
 8010c6a:	2103      	movs	r1, #3
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	7f1b      	ldrb	r3, [r3, #28]
 8010c74:	f043 0310 	orr.w	r3, r3, #16
 8010c78:	b2da      	uxtb	r2, r3
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	771a      	strb	r2, [r3, #28]
 8010c7e:	e028      	b.n	8010cd2 <lwip_netconn_do_writemore+0x2c2>
 8010c80:	0801dec4 	.word	0x0801dec4
 8010c84:	0801e01c 	.word	0x0801e01c
 8010c88:	0801df08 	.word	0x0801df08
 8010c8c:	0801e324 	.word	0x0801e324
 8010c90:	0801e02c 	.word	0x0801e02c
 8010c94:	0801e344 	.word	0x0801e344
 8010c98:	0801e35c 	.word	0x0801e35c
 8010c9c:	0801e39c 	.word	0x0801e39c
 8010ca0:	0801e3c4 	.word	0x0801e3c4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	685b      	ldr	r3, [r3, #4]
 8010ca8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010cac:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8010cb0:	d305      	bcc.n	8010cbe <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	685b      	ldr	r3, [r3, #4]
 8010cb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8010cba:	2b04      	cmp	r3, #4
 8010cbc:	d909      	bls.n	8010cd2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d005      	beq.n	8010cd2 <lwip_netconn_do_writemore+0x2c2>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cca:	2200      	movs	r2, #0
 8010ccc:	2103      	movs	r1, #3
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8010cd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d11d      	bne.n	8010d16 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6a1b      	ldr	r3, [r3, #32]
 8010cde:	699a      	ldr	r2, [r3, #24]
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a1b      	ldr	r3, [r3, #32]
 8010ce4:	695b      	ldr	r3, [r3, #20]
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d002      	beq.n	8010cf0 <lwip_netconn_do_writemore+0x2e0>
 8010cea:	7e3b      	ldrb	r3, [r7, #24]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	685b      	ldr	r3, [r3, #4]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f007 fdcd 	bl	8018898 <tcp_output>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8010d02:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8010d06:	f113 0f04 	cmn.w	r3, #4
 8010d0a:	d12c      	bne.n	8010d66 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010d0c:	7b3b      	ldrb	r3, [r7, #12]
 8010d0e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d10:	2301      	movs	r3, #1
 8010d12:	76fb      	strb	r3, [r7, #27]
 8010d14:	e027      	b.n	8010d66 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8010d16:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d1e:	d120      	bne.n	8010d62 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	4618      	mov	r0, r3
 8010d26:	f007 fdb7 	bl	8018898 <tcp_output>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8010d2e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8010d32:	f113 0f04 	cmn.w	r3, #4
 8010d36:	d104      	bne.n	8010d42 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8010d38:	7b7b      	ldrb	r3, [r7, #13]
 8010d3a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	76fb      	strb	r3, [r7, #27]
 8010d40:	e011      	b.n	8010d66 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8010d42:	7e3b      	ldrb	r3, [r7, #24]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d00e      	beq.n	8010d66 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6a1b      	ldr	r3, [r3, #32]
 8010d4c:	699b      	ldr	r3, [r3, #24]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d102      	bne.n	8010d58 <lwip_netconn_do_writemore+0x348>
 8010d52:	f06f 0306 	mvn.w	r3, #6
 8010d56:	e000      	b.n	8010d5a <lwip_netconn_do_writemore+0x34a>
 8010d58:	2300      	movs	r3, #0
 8010d5a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	76fb      	strb	r3, [r7, #27]
 8010d60:	e001      	b.n	8010d66 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8010d62:	2301      	movs	r3, #1
 8010d64:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8010d66:	7efb      	ldrb	r3, [r7, #27]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d015      	beq.n	8010d98 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	6a1b      	ldr	r3, [r3, #32]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	330c      	adds	r3, #12
 8010d74:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6a1b      	ldr	r3, [r3, #32]
 8010d7a:	7ffa      	ldrb	r2, [r7, #31]
 8010d7c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	2200      	movs	r2, #0
 8010d82:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010d8a:	78fb      	ldrb	r3, [r7, #3]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d006      	beq.n	8010d9e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8010d90:	68b8      	ldr	r0, [r7, #8]
 8010d92:	f00b fe11 	bl	801c9b8 <sys_sem_signal>
 8010d96:	e002      	b.n	8010d9e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8010d98:	f04f 33ff 	mov.w	r3, #4294967295
 8010d9c:	e000      	b.n	8010da0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8010d9e:	2300      	movs	r3, #0
}
 8010da0:	4618      	mov	r0, r3
 8010da2:	3720      	adds	r7, #32
 8010da4:	46bd      	mov	sp, r7
 8010da6:	bd80      	pop	{r7, pc}

08010da8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b084      	sub	sp, #16
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4618      	mov	r0, r3
 8010dba:	f7fe fbd4 	bl	800f566 <netconn_err>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d166      	bne.n	8010e98 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010dd4:	2b10      	cmp	r3, #16
 8010dd6:	d15d      	bne.n	8010e94 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	785b      	ldrb	r3, [r3, #1]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d002      	beq.n	8010de8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8010de2:	23fb      	movs	r3, #251	; 0xfb
 8010de4:	73fb      	strb	r3, [r7, #15]
 8010de6:	e057      	b.n	8010e98 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	685b      	ldr	r3, [r3, #4]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d04d      	beq.n	8010e8e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	2201      	movs	r2, #1
 8010df8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010dfa:	68bb      	ldr	r3, [r7, #8]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	6a1b      	ldr	r3, [r3, #32]
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d006      	beq.n	8010e12 <lwip_netconn_do_write+0x6a>
 8010e04:	4b28      	ldr	r3, [pc, #160]	; (8010ea8 <lwip_netconn_do_write+0x100>)
 8010e06:	f240 7223 	movw	r2, #1827	; 0x723
 8010e0a:	4928      	ldr	r1, [pc, #160]	; (8010eac <lwip_netconn_do_write+0x104>)
 8010e0c:	4828      	ldr	r0, [pc, #160]	; (8010eb0 <lwip_netconn_do_write+0x108>)
 8010e0e:	f00b fedb 	bl	801cbc8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8010e12:	68bb      	ldr	r3, [r7, #8]
 8010e14:	695b      	ldr	r3, [r3, #20]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d106      	bne.n	8010e28 <lwip_netconn_do_write+0x80>
 8010e1a:	4b23      	ldr	r3, [pc, #140]	; (8010ea8 <lwip_netconn_do_write+0x100>)
 8010e1c:	f240 7224 	movw	r2, #1828	; 0x724
 8010e20:	4924      	ldr	r1, [pc, #144]	; (8010eb4 <lwip_netconn_do_write+0x10c>)
 8010e22:	4823      	ldr	r0, [pc, #140]	; (8010eb0 <lwip_netconn_do_write+0x108>)
 8010e24:	f00b fed0 	bl	801cbc8 <iprintf>
        msg->conn->current_msg = msg;
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	68ba      	ldr	r2, [r7, #8]
 8010e2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	2100      	movs	r1, #0
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff fdea 	bl	8010a10 <lwip_netconn_do_writemore>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d02e      	beq.n	8010ea0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	785b      	ldrb	r3, [r3, #1]
 8010e48:	2b01      	cmp	r3, #1
 8010e4a:	d006      	beq.n	8010e5a <lwip_netconn_do_write+0xb2>
 8010e4c:	4b16      	ldr	r3, [pc, #88]	; (8010ea8 <lwip_netconn_do_write+0x100>)
 8010e4e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8010e52:	4919      	ldr	r1, [pc, #100]	; (8010eb8 <lwip_netconn_do_write+0x110>)
 8010e54:	4816      	ldr	r0, [pc, #88]	; (8010eb0 <lwip_netconn_do_write+0x108>)
 8010e56:	f00b feb7 	bl	801cbc8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8010e5a:	4818      	ldr	r0, [pc, #96]	; (8010ebc <lwip_netconn_do_write+0x114>)
 8010e5c:	f00b fe1d 	bl	801ca9a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	330c      	adds	r3, #12
 8010e66:	2100      	movs	r1, #0
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f00b fd74 	bl	801c956 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8010e6e:	4813      	ldr	r0, [pc, #76]	; (8010ebc <lwip_netconn_do_write+0x114>)
 8010e70:	f00b fe04 	bl	801ca7c <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	785b      	ldrb	r3, [r3, #1]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d110      	bne.n	8010ea0 <lwip_netconn_do_write+0xf8>
 8010e7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ea8 <lwip_netconn_do_write+0x100>)
 8010e80:	f240 722c 	movw	r2, #1836	; 0x72c
 8010e84:	490c      	ldr	r1, [pc, #48]	; (8010eb8 <lwip_netconn_do_write+0x110>)
 8010e86:	480a      	ldr	r0, [pc, #40]	; (8010eb0 <lwip_netconn_do_write+0x108>)
 8010e88:	f00b fe9e 	bl	801cbc8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010e8c:	e008      	b.n	8010ea0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8010e8e:	23f5      	movs	r3, #245	; 0xf5
 8010e90:	73fb      	strb	r3, [r7, #15]
 8010e92:	e001      	b.n	8010e98 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8010e94:	23fa      	movs	r3, #250	; 0xfa
 8010e96:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8010e98:	68bb      	ldr	r3, [r7, #8]
 8010e9a:	7bfa      	ldrb	r2, [r7, #15]
 8010e9c:	711a      	strb	r2, [r3, #4]
 8010e9e:	e000      	b.n	8010ea2 <lwip_netconn_do_write+0xfa>
        return;
 8010ea0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8010ea2:	3710      	adds	r7, #16
 8010ea4:	46bd      	mov	sp, r7
 8010ea6:	bd80      	pop	{r7, pc}
 8010ea8:	0801dec4 	.word	0x0801dec4
 8010eac:	0801e268 	.word	0x0801e268
 8010eb0:	0801df08 	.word	0x0801df08
 8010eb4:	0801e3f0 	.word	0x0801e3f0
 8010eb8:	0801e284 	.word	0x0801e284
 8010ebc:	20008cf0 	.word	0x20008cf0

08010ec0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	785b      	ldrb	r3, [r3, #1]
 8010ed2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d069      	beq.n	8010fb2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681b      	ldr	r3, [r3, #0]
 8010ee2:	781b      	ldrb	r3, [r3, #0]
 8010ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8010ee8:	2b10      	cmp	r3, #16
 8010eea:	d162      	bne.n	8010fb2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010ef0:	2b03      	cmp	r3, #3
 8010ef2:	d002      	beq.n	8010efa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8010ef4:	7afb      	ldrb	r3, [r7, #11]
 8010ef6:	2b02      	cmp	r3, #2
 8010ef8:	d05b      	beq.n	8010fb2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8010efa:	7afb      	ldrb	r3, [r7, #11]
 8010efc:	2b03      	cmp	r3, #3
 8010efe:	d103      	bne.n	8010f08 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	22f5      	movs	r2, #245	; 0xf5
 8010f04:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010f06:	e059      	b.n	8010fbc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8010f08:	7afb      	ldrb	r3, [r7, #11]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d103      	bne.n	8010f16 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	22fb      	movs	r2, #251	; 0xfb
 8010f12:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8010f14:	e052      	b.n	8010fbc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	7a1b      	ldrb	r3, [r3, #8]
 8010f1a:	f003 0301 	and.w	r3, r3, #1
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d004      	beq.n	8010f2c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff f852 	bl	800ffd0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	6a1b      	ldr	r3, [r3, #32]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d006      	beq.n	8010f44 <lwip_netconn_do_close+0x84>
 8010f36:	4b23      	ldr	r3, [pc, #140]	; (8010fc4 <lwip_netconn_do_close+0x104>)
 8010f38:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8010f3c:	4922      	ldr	r1, [pc, #136]	; (8010fc8 <lwip_netconn_do_close+0x108>)
 8010f3e:	4823      	ldr	r0, [pc, #140]	; (8010fcc <lwip_netconn_do_close+0x10c>)
 8010f40:	f00b fe42 	bl	801cbc8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2204      	movs	r2, #4
 8010f4a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	68fa      	ldr	r2, [r7, #12]
 8010f52:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2100      	movs	r1, #0
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7ff f8b6 	bl	80100cc <lwip_netconn_do_close_internal>
 8010f60:	4603      	mov	r3, r0
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d029      	beq.n	8010fba <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	785b      	ldrb	r3, [r3, #1]
 8010f6c:	2b04      	cmp	r3, #4
 8010f6e:	d006      	beq.n	8010f7e <lwip_netconn_do_close+0xbe>
 8010f70:	4b14      	ldr	r3, [pc, #80]	; (8010fc4 <lwip_netconn_do_close+0x104>)
 8010f72:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8010f76:	4916      	ldr	r1, [pc, #88]	; (8010fd0 <lwip_netconn_do_close+0x110>)
 8010f78:	4814      	ldr	r0, [pc, #80]	; (8010fcc <lwip_netconn_do_close+0x10c>)
 8010f7a:	f00b fe25 	bl	801cbc8 <iprintf>
        UNLOCK_TCPIP_CORE();
 8010f7e:	4815      	ldr	r0, [pc, #84]	; (8010fd4 <lwip_netconn_do_close+0x114>)
 8010f80:	f00b fd8b 	bl	801ca9a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	330c      	adds	r3, #12
 8010f8a:	2100      	movs	r1, #0
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	f00b fce2 	bl	801c956 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010f92:	4810      	ldr	r0, [pc, #64]	; (8010fd4 <lwip_netconn_do_close+0x114>)
 8010f94:	f00b fd72 	bl	801ca7c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	785b      	ldrb	r3, [r3, #1]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d00b      	beq.n	8010fba <lwip_netconn_do_close+0xfa>
 8010fa2:	4b08      	ldr	r3, [pc, #32]	; (8010fc4 <lwip_netconn_do_close+0x104>)
 8010fa4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8010fa8:	4909      	ldr	r1, [pc, #36]	; (8010fd0 <lwip_netconn_do_close+0x110>)
 8010faa:	4808      	ldr	r0, [pc, #32]	; (8010fcc <lwip_netconn_do_close+0x10c>)
 8010fac:	f00b fe0c 	bl	801cbc8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8010fb0:	e003      	b.n	8010fba <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	22f5      	movs	r2, #245	; 0xf5
 8010fb6:	711a      	strb	r2, [r3, #4]
 8010fb8:	e000      	b.n	8010fbc <lwip_netconn_do_close+0xfc>
      return;
 8010fba:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8010fbc:	3710      	adds	r7, #16
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}
 8010fc2:	bf00      	nop
 8010fc4:	0801dec4 	.word	0x0801dec4
 8010fc8:	0801e268 	.word	0x0801e268
 8010fcc:	0801df08 	.word	0x0801df08
 8010fd0:	0801e284 	.word	0x0801e284
 8010fd4:	20008cf0 	.word	0x20008cf0

08010fd8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d013      	beq.n	801100e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d00b      	beq.n	8011006 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f001 ffa0 	bl	8012f38 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	605a      	str	r2, [r3, #4]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011006:	6879      	ldr	r1, [r7, #4]
 8011008:	2006      	movs	r0, #6
 801100a:	f001 f8f5 	bl	80121f8 <memp_free>
  }
}
 801100e:	bf00      	nop
 8011010:	3708      	adds	r7, #8
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
	...

08011018 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	60b9      	str	r1, [r7, #8]
 8011022:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d108      	bne.n	801103c <netbuf_data+0x24>
 801102a:	4b1b      	ldr	r3, [pc, #108]	; (8011098 <netbuf_data+0x80>)
 801102c:	22c6      	movs	r2, #198	; 0xc6
 801102e:	491b      	ldr	r1, [pc, #108]	; (801109c <netbuf_data+0x84>)
 8011030:	481b      	ldr	r0, [pc, #108]	; (80110a0 <netbuf_data+0x88>)
 8011032:	f00b fdc9 	bl	801cbc8 <iprintf>
 8011036:	f06f 030f 	mvn.w	r3, #15
 801103a:	e029      	b.n	8011090 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d108      	bne.n	8011054 <netbuf_data+0x3c>
 8011042:	4b15      	ldr	r3, [pc, #84]	; (8011098 <netbuf_data+0x80>)
 8011044:	22c7      	movs	r2, #199	; 0xc7
 8011046:	4917      	ldr	r1, [pc, #92]	; (80110a4 <netbuf_data+0x8c>)
 8011048:	4815      	ldr	r0, [pc, #84]	; (80110a0 <netbuf_data+0x88>)
 801104a:	f00b fdbd 	bl	801cbc8 <iprintf>
 801104e:	f06f 030f 	mvn.w	r3, #15
 8011052:	e01d      	b.n	8011090 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d108      	bne.n	801106c <netbuf_data+0x54>
 801105a:	4b0f      	ldr	r3, [pc, #60]	; (8011098 <netbuf_data+0x80>)
 801105c:	22c8      	movs	r2, #200	; 0xc8
 801105e:	4912      	ldr	r1, [pc, #72]	; (80110a8 <netbuf_data+0x90>)
 8011060:	480f      	ldr	r0, [pc, #60]	; (80110a0 <netbuf_data+0x88>)
 8011062:	f00b fdb1 	bl	801cbc8 <iprintf>
 8011066:	f06f 030f 	mvn.w	r3, #15
 801106a:	e011      	b.n	8011090 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	685b      	ldr	r3, [r3, #4]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d102      	bne.n	801107a <netbuf_data+0x62>
    return ERR_BUF;
 8011074:	f06f 0301 	mvn.w	r3, #1
 8011078:	e00a      	b.n	8011090 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	685a      	ldr	r2, [r3, #4]
 8011080:	68bb      	ldr	r3, [r7, #8]
 8011082:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	685b      	ldr	r3, [r3, #4]
 8011088:	895a      	ldrh	r2, [r3, #10]
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801108e:	2300      	movs	r3, #0
}
 8011090:	4618      	mov	r0, r3
 8011092:	3710      	adds	r7, #16
 8011094:	46bd      	mov	sp, r7
 8011096:	bd80      	pop	{r7, pc}
 8011098:	0801e41c 	.word	0x0801e41c
 801109c:	0801e524 	.word	0x0801e524
 80110a0:	0801e46c 	.word	0x0801e46c
 80110a4:	0801e540 	.word	0x0801e540
 80110a8:	0801e560 	.word	0x0801e560

080110ac <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d108      	bne.n	80110cc <netbuf_next+0x20>
 80110ba:	4b11      	ldr	r3, [pc, #68]	; (8011100 <netbuf_next+0x54>)
 80110bc:	22e0      	movs	r2, #224	; 0xe0
 80110be:	4911      	ldr	r1, [pc, #68]	; (8011104 <netbuf_next+0x58>)
 80110c0:	4811      	ldr	r0, [pc, #68]	; (8011108 <netbuf_next+0x5c>)
 80110c2:	f00b fd81 	bl	801cbc8 <iprintf>
 80110c6:	f04f 33ff 	mov.w	r3, #4294967295
 80110ca:	e014      	b.n	80110f6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	685b      	ldr	r3, [r3, #4]
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d102      	bne.n	80110dc <netbuf_next+0x30>
    return -1;
 80110d6:	f04f 33ff 	mov.w	r3, #4294967295
 80110da:	e00c      	b.n	80110f6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d101      	bne.n	80110f4 <netbuf_next+0x48>
    return 1;
 80110f0:	2301      	movs	r3, #1
 80110f2:	e000      	b.n	80110f6 <netbuf_next+0x4a>
  }
  return 0;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3708      	adds	r7, #8
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	0801e41c 	.word	0x0801e41c
 8011104:	0801e57c 	.word	0x0801e57c
 8011108:	0801e46c 	.word	0x0801e46c

0801110c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011116:	f008 fca9 	bl	8019a6c <sys_timeouts_sleeptime>
 801111a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011122:	d10b      	bne.n	801113c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011124:	4813      	ldr	r0, [pc, #76]	; (8011174 <tcpip_timeouts_mbox_fetch+0x68>)
 8011126:	f00b fcb8 	bl	801ca9a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801112a:	2200      	movs	r2, #0
 801112c:	6839      	ldr	r1, [r7, #0]
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f00b fb70 	bl	801c814 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011134:	480f      	ldr	r0, [pc, #60]	; (8011174 <tcpip_timeouts_mbox_fetch+0x68>)
 8011136:	f00b fca1 	bl	801ca7c <sys_mutex_lock>
    return;
 801113a:	e018      	b.n	801116e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d102      	bne.n	8011148 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011142:	f008 fc59 	bl	80199f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011146:	e7e6      	b.n	8011116 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011148:	480a      	ldr	r0, [pc, #40]	; (8011174 <tcpip_timeouts_mbox_fetch+0x68>)
 801114a:	f00b fca6 	bl	801ca9a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801114e:	68fa      	ldr	r2, [r7, #12]
 8011150:	6839      	ldr	r1, [r7, #0]
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f00b fb5e 	bl	801c814 <sys_arch_mbox_fetch>
 8011158:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801115a:	4806      	ldr	r0, [pc, #24]	; (8011174 <tcpip_timeouts_mbox_fetch+0x68>)
 801115c:	f00b fc8e 	bl	801ca7c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011166:	d102      	bne.n	801116e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8011168:	f008 fc46 	bl	80199f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801116c:	e7d3      	b.n	8011116 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801116e:	3710      	adds	r7, #16
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	20008cf0 	.word	0x20008cf0

08011178 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8011180:	4810      	ldr	r0, [pc, #64]	; (80111c4 <tcpip_thread+0x4c>)
 8011182:	f00b fc7b 	bl	801ca7c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8011186:	4b10      	ldr	r3, [pc, #64]	; (80111c8 <tcpip_thread+0x50>)
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d005      	beq.n	801119a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801118e:	4b0e      	ldr	r3, [pc, #56]	; (80111c8 <tcpip_thread+0x50>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	4a0e      	ldr	r2, [pc, #56]	; (80111cc <tcpip_thread+0x54>)
 8011194:	6812      	ldr	r2, [r2, #0]
 8011196:	4610      	mov	r0, r2
 8011198:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801119a:	f107 030c 	add.w	r3, r7, #12
 801119e:	4619      	mov	r1, r3
 80111a0:	480b      	ldr	r0, [pc, #44]	; (80111d0 <tcpip_thread+0x58>)
 80111a2:	f7ff ffb3 	bl	801110c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d106      	bne.n	80111ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80111ac:	4b09      	ldr	r3, [pc, #36]	; (80111d4 <tcpip_thread+0x5c>)
 80111ae:	2291      	movs	r2, #145	; 0x91
 80111b0:	4909      	ldr	r1, [pc, #36]	; (80111d8 <tcpip_thread+0x60>)
 80111b2:	480a      	ldr	r0, [pc, #40]	; (80111dc <tcpip_thread+0x64>)
 80111b4:	f00b fd08 	bl	801cbc8 <iprintf>
      continue;
 80111b8:	e003      	b.n	80111c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	4618      	mov	r0, r3
 80111be:	f000 f80f 	bl	80111e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80111c2:	e7ea      	b.n	801119a <tcpip_thread+0x22>
 80111c4:	20008cf0 	.word	0x20008cf0
 80111c8:	200086c4 	.word	0x200086c4
 80111cc:	200086c8 	.word	0x200086c8
 80111d0:	200086cc 	.word	0x200086cc
 80111d4:	0801e5b4 	.word	0x0801e5b4
 80111d8:	0801e5e4 	.word	0x0801e5e4
 80111dc:	0801e604 	.word	0x0801e604

080111e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	2b01      	cmp	r3, #1
 80111ee:	d018      	beq.n	8011222 <tcpip_thread_handle_msg+0x42>
 80111f0:	2b02      	cmp	r3, #2
 80111f2:	d021      	beq.n	8011238 <tcpip_thread_handle_msg+0x58>
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d126      	bne.n	8011246 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	687a      	ldr	r2, [r7, #4]
 80111fe:	6850      	ldr	r0, [r2, #4]
 8011200:	687a      	ldr	r2, [r7, #4]
 8011202:	6892      	ldr	r2, [r2, #8]
 8011204:	4611      	mov	r1, r2
 8011206:	4798      	blx	r3
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	d004      	beq.n	8011218 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	4618      	mov	r0, r3
 8011214:	f001 fe90 	bl	8012f38 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011218:	6879      	ldr	r1, [r7, #4]
 801121a:	2009      	movs	r0, #9
 801121c:	f000 ffec 	bl	80121f8 <memp_free>
      break;
 8011220:	e018      	b.n	8011254 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	685b      	ldr	r3, [r3, #4]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	6892      	ldr	r2, [r2, #8]
 801122a:	4610      	mov	r0, r2
 801122c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801122e:	6879      	ldr	r1, [r7, #4]
 8011230:	2008      	movs	r0, #8
 8011232:	f000 ffe1 	bl	80121f8 <memp_free>
      break;
 8011236:	e00d      	b.n	8011254 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	687a      	ldr	r2, [r7, #4]
 801123e:	6892      	ldr	r2, [r2, #8]
 8011240:	4610      	mov	r0, r2
 8011242:	4798      	blx	r3
      break;
 8011244:	e006      	b.n	8011254 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011246:	4b05      	ldr	r3, [pc, #20]	; (801125c <tcpip_thread_handle_msg+0x7c>)
 8011248:	22cf      	movs	r2, #207	; 0xcf
 801124a:	4905      	ldr	r1, [pc, #20]	; (8011260 <tcpip_thread_handle_msg+0x80>)
 801124c:	4805      	ldr	r0, [pc, #20]	; (8011264 <tcpip_thread_handle_msg+0x84>)
 801124e:	f00b fcbb 	bl	801cbc8 <iprintf>
      break;
 8011252:	bf00      	nop
  }
}
 8011254:	bf00      	nop
 8011256:	3708      	adds	r7, #8
 8011258:	46bd      	mov	sp, r7
 801125a:	bd80      	pop	{r7, pc}
 801125c:	0801e5b4 	.word	0x0801e5b4
 8011260:	0801e5e4 	.word	0x0801e5e4
 8011264:	0801e604 	.word	0x0801e604

08011268 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b086      	sub	sp, #24
 801126c:	af00      	add	r7, sp, #0
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011274:	481a      	ldr	r0, [pc, #104]	; (80112e0 <tcpip_inpkt+0x78>)
 8011276:	f00b fb28 	bl	801c8ca <sys_mbox_valid>
 801127a:	4603      	mov	r3, r0
 801127c:	2b00      	cmp	r3, #0
 801127e:	d105      	bne.n	801128c <tcpip_inpkt+0x24>
 8011280:	4b18      	ldr	r3, [pc, #96]	; (80112e4 <tcpip_inpkt+0x7c>)
 8011282:	22fc      	movs	r2, #252	; 0xfc
 8011284:	4918      	ldr	r1, [pc, #96]	; (80112e8 <tcpip_inpkt+0x80>)
 8011286:	4819      	ldr	r0, [pc, #100]	; (80112ec <tcpip_inpkt+0x84>)
 8011288:	f00b fc9e 	bl	801cbc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801128c:	2009      	movs	r0, #9
 801128e:	f000 ff3d 	bl	801210c <memp_malloc>
 8011292:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801129a:	f04f 33ff 	mov.w	r3, #4294967295
 801129e:	e01a      	b.n	80112d6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80112a0:	697b      	ldr	r3, [r7, #20]
 80112a2:	2200      	movs	r2, #0
 80112a4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	68fa      	ldr	r2, [r7, #12]
 80112aa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	68ba      	ldr	r2, [r7, #8]
 80112b0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	687a      	ldr	r2, [r7, #4]
 80112b6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80112b8:	6979      	ldr	r1, [r7, #20]
 80112ba:	4809      	ldr	r0, [pc, #36]	; (80112e0 <tcpip_inpkt+0x78>)
 80112bc:	f00b fa90 	bl	801c7e0 <sys_mbox_trypost>
 80112c0:	4603      	mov	r3, r0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d006      	beq.n	80112d4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80112c6:	6979      	ldr	r1, [r7, #20]
 80112c8:	2009      	movs	r0, #9
 80112ca:	f000 ff95 	bl	80121f8 <memp_free>
    return ERR_MEM;
 80112ce:	f04f 33ff 	mov.w	r3, #4294967295
 80112d2:	e000      	b.n	80112d6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80112d4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3718      	adds	r7, #24
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	bf00      	nop
 80112e0:	200086cc 	.word	0x200086cc
 80112e4:	0801e5b4 	.word	0x0801e5b4
 80112e8:	0801e62c 	.word	0x0801e62c
 80112ec:	0801e604 	.word	0x0801e604

080112f0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b082      	sub	sp, #8
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
 80112f8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011300:	f003 0318 	and.w	r3, r3, #24
 8011304:	2b00      	cmp	r3, #0
 8011306:	d006      	beq.n	8011316 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011308:	4a08      	ldr	r2, [pc, #32]	; (801132c <tcpip_input+0x3c>)
 801130a:	6839      	ldr	r1, [r7, #0]
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f7ff ffab 	bl	8011268 <tcpip_inpkt>
 8011312:	4603      	mov	r3, r0
 8011314:	e005      	b.n	8011322 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011316:	4a06      	ldr	r2, [pc, #24]	; (8011330 <tcpip_input+0x40>)
 8011318:	6839      	ldr	r1, [r7, #0]
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f7ff ffa4 	bl	8011268 <tcpip_inpkt>
 8011320:	4603      	mov	r3, r0
}
 8011322:	4618      	mov	r0, r3
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	0801c5cd 	.word	0x0801c5cd
 8011330:	0801b4ed 	.word	0x0801b4ed

08011334 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801133e:	4819      	ldr	r0, [pc, #100]	; (80113a4 <tcpip_try_callback+0x70>)
 8011340:	f00b fac3 	bl	801c8ca <sys_mbox_valid>
 8011344:	4603      	mov	r3, r0
 8011346:	2b00      	cmp	r3, #0
 8011348:	d106      	bne.n	8011358 <tcpip_try_callback+0x24>
 801134a:	4b17      	ldr	r3, [pc, #92]	; (80113a8 <tcpip_try_callback+0x74>)
 801134c:	f240 125d 	movw	r2, #349	; 0x15d
 8011350:	4916      	ldr	r1, [pc, #88]	; (80113ac <tcpip_try_callback+0x78>)
 8011352:	4817      	ldr	r0, [pc, #92]	; (80113b0 <tcpip_try_callback+0x7c>)
 8011354:	f00b fc38 	bl	801cbc8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011358:	2008      	movs	r0, #8
 801135a:	f000 fed7 	bl	801210c <memp_malloc>
 801135e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d102      	bne.n	801136c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011366:	f04f 33ff 	mov.w	r3, #4294967295
 801136a:	e017      	b.n	801139c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	2201      	movs	r2, #1
 8011370:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	683a      	ldr	r2, [r7, #0]
 801137c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801137e:	68f9      	ldr	r1, [r7, #12]
 8011380:	4808      	ldr	r0, [pc, #32]	; (80113a4 <tcpip_try_callback+0x70>)
 8011382:	f00b fa2d 	bl	801c7e0 <sys_mbox_trypost>
 8011386:	4603      	mov	r3, r0
 8011388:	2b00      	cmp	r3, #0
 801138a:	d006      	beq.n	801139a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801138c:	68f9      	ldr	r1, [r7, #12]
 801138e:	2008      	movs	r0, #8
 8011390:	f000 ff32 	bl	80121f8 <memp_free>
    return ERR_MEM;
 8011394:	f04f 33ff 	mov.w	r3, #4294967295
 8011398:	e000      	b.n	801139c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801139a:	2300      	movs	r3, #0
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	200086cc 	.word	0x200086cc
 80113a8:	0801e5b4 	.word	0x0801e5b4
 80113ac:	0801e62c 	.word	0x0801e62c
 80113b0:	0801e604 	.word	0x0801e604

080113b4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b084      	sub	sp, #16
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	60f8      	str	r0, [r7, #12]
 80113bc:	60b9      	str	r1, [r7, #8]
 80113be:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80113c0:	4806      	ldr	r0, [pc, #24]	; (80113dc <tcpip_send_msg_wait_sem+0x28>)
 80113c2:	f00b fb5b 	bl	801ca7c <sys_mutex_lock>
  fn(apimsg);
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	68b8      	ldr	r0, [r7, #8]
 80113ca:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80113cc:	4803      	ldr	r0, [pc, #12]	; (80113dc <tcpip_send_msg_wait_sem+0x28>)
 80113ce:	f00b fb64 	bl	801ca9a <sys_mutex_unlock>
  return ERR_OK;
 80113d2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3710      	adds	r7, #16
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	20008cf0 	.word	0x20008cf0

080113e0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af02      	add	r7, sp, #8
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80113ea:	f000 f9ea 	bl	80117c2 <lwip_init>

  tcpip_init_done = initfunc;
 80113ee:	4a17      	ldr	r2, [pc, #92]	; (801144c <tcpip_init+0x6c>)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80113f4:	4a16      	ldr	r2, [pc, #88]	; (8011450 <tcpip_init+0x70>)
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80113fa:	2106      	movs	r1, #6
 80113fc:	4815      	ldr	r0, [pc, #84]	; (8011454 <tcpip_init+0x74>)
 80113fe:	f00b f9bb 	bl	801c778 <sys_mbox_new>
 8011402:	4603      	mov	r3, r0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d006      	beq.n	8011416 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011408:	4b13      	ldr	r3, [pc, #76]	; (8011458 <tcpip_init+0x78>)
 801140a:	f240 2261 	movw	r2, #609	; 0x261
 801140e:	4913      	ldr	r1, [pc, #76]	; (801145c <tcpip_init+0x7c>)
 8011410:	4813      	ldr	r0, [pc, #76]	; (8011460 <tcpip_init+0x80>)
 8011412:	f00b fbd9 	bl	801cbc8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011416:	4813      	ldr	r0, [pc, #76]	; (8011464 <tcpip_init+0x84>)
 8011418:	f00b fb14 	bl	801ca44 <sys_mutex_new>
 801141c:	4603      	mov	r3, r0
 801141e:	2b00      	cmp	r3, #0
 8011420:	d006      	beq.n	8011430 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011422:	4b0d      	ldr	r3, [pc, #52]	; (8011458 <tcpip_init+0x78>)
 8011424:	f240 2265 	movw	r2, #613	; 0x265
 8011428:	490f      	ldr	r1, [pc, #60]	; (8011468 <tcpip_init+0x88>)
 801142a:	480d      	ldr	r0, [pc, #52]	; (8011460 <tcpip_init+0x80>)
 801142c:	f00b fbcc 	bl	801cbc8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011430:	2300      	movs	r3, #0
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011438:	2200      	movs	r2, #0
 801143a:	490c      	ldr	r1, [pc, #48]	; (801146c <tcpip_init+0x8c>)
 801143c:	480c      	ldr	r0, [pc, #48]	; (8011470 <tcpip_init+0x90>)
 801143e:	f00b fb39 	bl	801cab4 <sys_thread_new>
}
 8011442:	bf00      	nop
 8011444:	3708      	adds	r7, #8
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	200086c4 	.word	0x200086c4
 8011450:	200086c8 	.word	0x200086c8
 8011454:	200086cc 	.word	0x200086cc
 8011458:	0801e5b4 	.word	0x0801e5b4
 801145c:	0801e63c 	.word	0x0801e63c
 8011460:	0801e604 	.word	0x0801e604
 8011464:	20008cf0 	.word	0x20008cf0
 8011468:	0801e660 	.word	0x0801e660
 801146c:	08011179 	.word	0x08011179
 8011470:	0801e684 	.word	0x0801e684

08011474 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011474:	b480      	push	{r7}
 8011476:	b083      	sub	sp, #12
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801147e:	88fb      	ldrh	r3, [r7, #6]
 8011480:	021b      	lsls	r3, r3, #8
 8011482:	b21a      	sxth	r2, r3
 8011484:	88fb      	ldrh	r3, [r7, #6]
 8011486:	0a1b      	lsrs	r3, r3, #8
 8011488:	b29b      	uxth	r3, r3
 801148a:	b21b      	sxth	r3, r3
 801148c:	4313      	orrs	r3, r2
 801148e:	b21b      	sxth	r3, r3
 8011490:	b29b      	uxth	r3, r3
}
 8011492:	4618      	mov	r0, r3
 8011494:	370c      	adds	r7, #12
 8011496:	46bd      	mov	sp, r7
 8011498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149c:	4770      	bx	lr

0801149e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801149e:	b480      	push	{r7}
 80114a0:	b083      	sub	sp, #12
 80114a2:	af00      	add	r7, sp, #0
 80114a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	061a      	lsls	r2, r3, #24
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	021b      	lsls	r3, r3, #8
 80114ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80114b2:	431a      	orrs	r2, r3
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	0a1b      	lsrs	r3, r3, #8
 80114b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80114bc:	431a      	orrs	r2, r3
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	0e1b      	lsrs	r3, r3, #24
 80114c2:	4313      	orrs	r3, r2
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 80114d0:	b480      	push	{r7}
 80114d2:	b089      	sub	sp, #36	; 0x24
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
 80114d8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 80114de:	2300      	movs	r3, #0
 80114e0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 80114e2:	2300      	movs	r3, #0
 80114e4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	f003 0301 	and.w	r3, r3, #1
 80114ec:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00d      	beq.n	8011510 <lwip_standard_chksum+0x40>
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	dd0a      	ble.n	8011510 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80114fa:	69fa      	ldr	r2, [r7, #28]
 80114fc:	1c53      	adds	r3, r2, #1
 80114fe:	61fb      	str	r3, [r7, #28]
 8011500:	f107 030e 	add.w	r3, r7, #14
 8011504:	3301      	adds	r3, #1
 8011506:	7812      	ldrb	r2, [r2, #0]
 8011508:	701a      	strb	r2, [r3, #0]
    len--;
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	3b01      	subs	r3, #1
 801150e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8011514:	e00a      	b.n	801152c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8011516:	69bb      	ldr	r3, [r7, #24]
 8011518:	1c9a      	adds	r2, r3, #2
 801151a:	61ba      	str	r2, [r7, #24]
 801151c:	881b      	ldrh	r3, [r3, #0]
 801151e:	461a      	mov	r2, r3
 8011520:	697b      	ldr	r3, [r7, #20]
 8011522:	4413      	add	r3, r2
 8011524:	617b      	str	r3, [r7, #20]
    len -= 2;
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	3b02      	subs	r3, #2
 801152a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 801152c:	683b      	ldr	r3, [r7, #0]
 801152e:	2b01      	cmp	r3, #1
 8011530:	dcf1      	bgt.n	8011516 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	2b00      	cmp	r3, #0
 8011536:	dd04      	ble.n	8011542 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8011538:	f107 030e 	add.w	r3, r7, #14
 801153c:	69ba      	ldr	r2, [r7, #24]
 801153e:	7812      	ldrb	r2, [r2, #0]
 8011540:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8011542:	89fb      	ldrh	r3, [r7, #14]
 8011544:	461a      	mov	r2, r3
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	4413      	add	r3, r2
 801154a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 801154c:	697b      	ldr	r3, [r7, #20]
 801154e:	0c1a      	lsrs	r2, r3, #16
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	b29b      	uxth	r3, r3
 8011554:	4413      	add	r3, r2
 8011556:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	0c1a      	lsrs	r2, r3, #16
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	b29b      	uxth	r3, r3
 8011560:	4413      	add	r3, r2
 8011562:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d007      	beq.n	801157a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	021b      	lsls	r3, r3, #8
 801156e:	b29a      	uxth	r2, r3
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	0a1b      	lsrs	r3, r3, #8
 8011574:	b2db      	uxtb	r3, r3
 8011576:	4313      	orrs	r3, r2
 8011578:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 801157a:	697b      	ldr	r3, [r7, #20]
 801157c:	b29b      	uxth	r3, r3
}
 801157e:	4618      	mov	r0, r3
 8011580:	3724      	adds	r7, #36	; 0x24
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr

0801158a <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b086      	sub	sp, #24
 801158e:	af00      	add	r7, sp, #0
 8011590:	60f8      	str	r0, [r7, #12]
 8011592:	607b      	str	r3, [r7, #4]
 8011594:	460b      	mov	r3, r1
 8011596:	72fb      	strb	r3, [r7, #11]
 8011598:	4613      	mov	r3, r2
 801159a:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 801159c:	2300      	movs	r3, #0
 801159e:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	617b      	str	r3, [r7, #20]
 80115a4:	e02b      	b.n	80115fe <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	685a      	ldr	r2, [r3, #4]
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	895b      	ldrh	r3, [r3, #10]
 80115ae:	4619      	mov	r1, r3
 80115b0:	4610      	mov	r0, r2
 80115b2:	f7ff ff8d 	bl	80114d0 <lwip_standard_chksum>
 80115b6:	4603      	mov	r3, r0
 80115b8:	461a      	mov	r2, r3
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	4413      	add	r3, r2
 80115be:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	0c1a      	lsrs	r2, r3, #16
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	4413      	add	r3, r2
 80115ca:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	895b      	ldrh	r3, [r3, #10]
 80115d0:	f003 0301 	and.w	r3, r3, #1
 80115d4:	b29b      	uxth	r3, r3
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d00e      	beq.n	80115f8 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	bf0c      	ite	eq
 80115e0:	2301      	moveq	r3, #1
 80115e2:	2300      	movne	r3, #0
 80115e4:	b2db      	uxtb	r3, r3
 80115e6:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	021b      	lsls	r3, r3, #8
 80115ec:	b29a      	uxth	r2, r3
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	0a1b      	lsrs	r3, r3, #8
 80115f2:	b2db      	uxtb	r3, r3
 80115f4:	4313      	orrs	r3, r2
 80115f6:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	617b      	str	r3, [r7, #20]
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d1d0      	bne.n	80115a6 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d007      	beq.n	801161a <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	021b      	lsls	r3, r3, #8
 801160e:	b29a      	uxth	r2, r3
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	0a1b      	lsrs	r3, r3, #8
 8011614:	b2db      	uxtb	r3, r3
 8011616:	4313      	orrs	r3, r2
 8011618:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 801161a:	7afb      	ldrb	r3, [r7, #11]
 801161c:	b29b      	uxth	r3, r3
 801161e:	4618      	mov	r0, r3
 8011620:	f7ff ff28 	bl	8011474 <lwip_htons>
 8011624:	4603      	mov	r3, r0
 8011626:	461a      	mov	r2, r3
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4413      	add	r3, r2
 801162c:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 801162e:	893b      	ldrh	r3, [r7, #8]
 8011630:	4618      	mov	r0, r3
 8011632:	f7ff ff1f 	bl	8011474 <lwip_htons>
 8011636:	4603      	mov	r3, r0
 8011638:	461a      	mov	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	4413      	add	r3, r2
 801163e:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	0c1a      	lsrs	r2, r3, #16
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	b29b      	uxth	r3, r3
 8011648:	4413      	add	r3, r2
 801164a:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	0c1a      	lsrs	r2, r3, #16
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	b29b      	uxth	r3, r3
 8011654:	4413      	add	r3, r2
 8011656:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	b29b      	uxth	r3, r3
 801165c:	43db      	mvns	r3, r3
 801165e:	b29b      	uxth	r3, r3
}
 8011660:	4618      	mov	r0, r3
 8011662:	3718      	adds	r7, #24
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	b086      	sub	sp, #24
 801166c:	af00      	add	r7, sp, #0
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	607b      	str	r3, [r7, #4]
 8011672:	460b      	mov	r3, r1
 8011674:	72fb      	strb	r3, [r7, #11]
 8011676:	4613      	mov	r3, r2
 8011678:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	b29b      	uxth	r3, r3
 8011684:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	0c1b      	lsrs	r3, r3, #16
 801168a:	693a      	ldr	r2, [r7, #16]
 801168c:	4413      	add	r3, r2
 801168e:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8011690:	6a3b      	ldr	r3, [r7, #32]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	b29b      	uxth	r3, r3
 801169a:	693a      	ldr	r2, [r7, #16]
 801169c:	4413      	add	r3, r2
 801169e:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	0c1b      	lsrs	r3, r3, #16
 80116a4:	693a      	ldr	r2, [r7, #16]
 80116a6:	4413      	add	r3, r2
 80116a8:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	0c1a      	lsrs	r2, r3, #16
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	b29b      	uxth	r3, r3
 80116b2:	4413      	add	r3, r2
 80116b4:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 80116b6:	693b      	ldr	r3, [r7, #16]
 80116b8:	0c1a      	lsrs	r2, r3, #16
 80116ba:	693b      	ldr	r3, [r7, #16]
 80116bc:	b29b      	uxth	r3, r3
 80116be:	4413      	add	r3, r2
 80116c0:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80116c2:	893a      	ldrh	r2, [r7, #8]
 80116c4:	7af9      	ldrb	r1, [r7, #11]
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	68f8      	ldr	r0, [r7, #12]
 80116ca:	f7ff ff5e 	bl	801158a <inet_cksum_pseudo_base>
 80116ce:	4603      	mov	r3, r0
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3718      	adds	r7, #24
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}

080116d8 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b086      	sub	sp, #24
 80116dc:	af02      	add	r7, sp, #8
 80116de:	60f8      	str	r0, [r7, #12]
 80116e0:	607b      	str	r3, [r7, #4]
 80116e2:	460b      	mov	r3, r1
 80116e4:	72fb      	strb	r3, [r7, #11]
 80116e6:	4613      	mov	r3, r2
 80116e8:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 80116ea:	893a      	ldrh	r2, [r7, #8]
 80116ec:	7af9      	ldrb	r1, [r7, #11]
 80116ee:	69bb      	ldr	r3, [r7, #24]
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7ff ffb7 	bl	8011668 <inet_chksum_pseudo>
 80116fa:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3710      	adds	r7, #16
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8011710:	887b      	ldrh	r3, [r7, #2]
 8011712:	4619      	mov	r1, r3
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f7ff fedb 	bl	80114d0 <lwip_standard_chksum>
 801171a:	4603      	mov	r3, r0
 801171c:	43db      	mvns	r3, r3
 801171e:	b29b      	uxth	r3, r3
}
 8011720:	4618      	mov	r0, r3
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}

08011728 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8011730:	2300      	movs	r3, #0
 8011732:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8011734:	2300      	movs	r3, #0
 8011736:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	613b      	str	r3, [r7, #16]
 801173c:	e02b      	b.n	8011796 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	685a      	ldr	r2, [r3, #4]
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	895b      	ldrh	r3, [r3, #10]
 8011746:	4619      	mov	r1, r3
 8011748:	4610      	mov	r0, r2
 801174a:	f7ff fec1 	bl	80114d0 <lwip_standard_chksum>
 801174e:	4603      	mov	r3, r0
 8011750:	461a      	mov	r2, r3
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	4413      	add	r3, r2
 8011756:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8011758:	697b      	ldr	r3, [r7, #20]
 801175a:	0c1a      	lsrs	r2, r3, #16
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	b29b      	uxth	r3, r3
 8011760:	4413      	add	r3, r2
 8011762:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	895b      	ldrh	r3, [r3, #10]
 8011768:	f003 0301 	and.w	r3, r3, #1
 801176c:	b29b      	uxth	r3, r3
 801176e:	2b00      	cmp	r3, #0
 8011770:	d00e      	beq.n	8011790 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2b00      	cmp	r3, #0
 8011776:	bf0c      	ite	eq
 8011778:	2301      	moveq	r3, #1
 801177a:	2300      	movne	r3, #0
 801177c:	b2db      	uxtb	r3, r3
 801177e:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8011780:	697b      	ldr	r3, [r7, #20]
 8011782:	021b      	lsls	r3, r3, #8
 8011784:	b29a      	uxth	r2, r3
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	0a1b      	lsrs	r3, r3, #8
 801178a:	b2db      	uxtb	r3, r3
 801178c:	4313      	orrs	r3, r2
 801178e:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	613b      	str	r3, [r7, #16]
 8011796:	693b      	ldr	r3, [r7, #16]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d1d0      	bne.n	801173e <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d007      	beq.n	80117b2 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	021b      	lsls	r3, r3, #8
 80117a6:	b29a      	uxth	r2, r3
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	0a1b      	lsrs	r3, r3, #8
 80117ac:	b2db      	uxtb	r3, r3
 80117ae:	4313      	orrs	r3, r2
 80117b0:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	43db      	mvns	r3, r3
 80117b8:	b29b      	uxth	r3, r3
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3718      	adds	r7, #24
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b082      	sub	sp, #8
 80117c6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80117c8:	2300      	movs	r3, #0
 80117ca:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80117cc:	f00b f92c 	bl	801ca28 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80117d0:	f000 f8d4 	bl	801197c <mem_init>
  memp_init();
 80117d4:	f000 fc2c 	bl	8012030 <memp_init>
  pbuf_init();
  netif_init();
 80117d8:	f000 fd38 	bl	801224c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80117dc:	f008 f97e 	bl	8019adc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80117e0:	f001 fe44 	bl	801346c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80117e4:	f008 f8c2 	bl	801996c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80117e8:	bf00      	nop
 80117ea:	3708      	adds	r7, #8
 80117ec:	46bd      	mov	sp, r7
 80117ee:	bd80      	pop	{r7, pc}

080117f0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80117fa:	4b05      	ldr	r3, [pc, #20]	; (8011810 <ptr_to_mem+0x20>)
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	88fb      	ldrh	r3, [r7, #6]
 8011800:	4413      	add	r3, r2
}
 8011802:	4618      	mov	r0, r3
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop
 8011810:	200086d0 	.word	0x200086d0

08011814 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011814:	b480      	push	{r7}
 8011816:	b083      	sub	sp, #12
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4a05      	ldr	r2, [pc, #20]	; (8011834 <mem_to_ptr+0x20>)
 8011820:	6812      	ldr	r2, [r2, #0]
 8011822:	1a9b      	subs	r3, r3, r2
 8011824:	b29b      	uxth	r3, r3
}
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr
 8011832:	bf00      	nop
 8011834:	200086d0 	.word	0x200086d0

08011838 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011838:	b590      	push	{r4, r7, lr}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011840:	4b45      	ldr	r3, [pc, #276]	; (8011958 <plug_holes+0x120>)
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	687a      	ldr	r2, [r7, #4]
 8011846:	429a      	cmp	r2, r3
 8011848:	d206      	bcs.n	8011858 <plug_holes+0x20>
 801184a:	4b44      	ldr	r3, [pc, #272]	; (801195c <plug_holes+0x124>)
 801184c:	f240 12df 	movw	r2, #479	; 0x1df
 8011850:	4943      	ldr	r1, [pc, #268]	; (8011960 <plug_holes+0x128>)
 8011852:	4844      	ldr	r0, [pc, #272]	; (8011964 <plug_holes+0x12c>)
 8011854:	f00b f9b8 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011858:	4b43      	ldr	r3, [pc, #268]	; (8011968 <plug_holes+0x130>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	429a      	cmp	r2, r3
 8011860:	d306      	bcc.n	8011870 <plug_holes+0x38>
 8011862:	4b3e      	ldr	r3, [pc, #248]	; (801195c <plug_holes+0x124>)
 8011864:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011868:	4940      	ldr	r1, [pc, #256]	; (801196c <plug_holes+0x134>)
 801186a:	483e      	ldr	r0, [pc, #248]	; (8011964 <plug_holes+0x12c>)
 801186c:	f00b f9ac 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	791b      	ldrb	r3, [r3, #4]
 8011874:	2b00      	cmp	r3, #0
 8011876:	d006      	beq.n	8011886 <plug_holes+0x4e>
 8011878:	4b38      	ldr	r3, [pc, #224]	; (801195c <plug_holes+0x124>)
 801187a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801187e:	493c      	ldr	r1, [pc, #240]	; (8011970 <plug_holes+0x138>)
 8011880:	4838      	ldr	r0, [pc, #224]	; (8011964 <plug_holes+0x12c>)
 8011882:	f00b f9a1 	bl	801cbc8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801188e:	d906      	bls.n	801189e <plug_holes+0x66>
 8011890:	4b32      	ldr	r3, [pc, #200]	; (801195c <plug_holes+0x124>)
 8011892:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011896:	4937      	ldr	r1, [pc, #220]	; (8011974 <plug_holes+0x13c>)
 8011898:	4832      	ldr	r0, [pc, #200]	; (8011964 <plug_holes+0x12c>)
 801189a:	f00b f995 	bl	801cbc8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	881b      	ldrh	r3, [r3, #0]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7ff ffa4 	bl	80117f0 <ptr_to_mem>
 80118a8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80118aa:	687a      	ldr	r2, [r7, #4]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	429a      	cmp	r2, r3
 80118b0:	d024      	beq.n	80118fc <plug_holes+0xc4>
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	791b      	ldrb	r3, [r3, #4]
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d120      	bne.n	80118fc <plug_holes+0xc4>
 80118ba:	4b2b      	ldr	r3, [pc, #172]	; (8011968 <plug_holes+0x130>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	68fa      	ldr	r2, [r7, #12]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d01b      	beq.n	80118fc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80118c4:	4b2c      	ldr	r3, [pc, #176]	; (8011978 <plug_holes+0x140>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	68fa      	ldr	r2, [r7, #12]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d102      	bne.n	80118d4 <plug_holes+0x9c>
      lfree = mem;
 80118ce:	4a2a      	ldr	r2, [pc, #168]	; (8011978 <plug_holes+0x140>)
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	881a      	ldrh	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	881b      	ldrh	r3, [r3, #0]
 80118e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80118e4:	d00a      	beq.n	80118fc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	881b      	ldrh	r3, [r3, #0]
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7ff ff80 	bl	80117f0 <ptr_to_mem>
 80118f0:	4604      	mov	r4, r0
 80118f2:	6878      	ldr	r0, [r7, #4]
 80118f4:	f7ff ff8e 	bl	8011814 <mem_to_ptr>
 80118f8:	4603      	mov	r3, r0
 80118fa:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	885b      	ldrh	r3, [r3, #2]
 8011900:	4618      	mov	r0, r3
 8011902:	f7ff ff75 	bl	80117f0 <ptr_to_mem>
 8011906:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	429a      	cmp	r2, r3
 801190e:	d01f      	beq.n	8011950 <plug_holes+0x118>
 8011910:	68bb      	ldr	r3, [r7, #8]
 8011912:	791b      	ldrb	r3, [r3, #4]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d11b      	bne.n	8011950 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011918:	4b17      	ldr	r3, [pc, #92]	; (8011978 <plug_holes+0x140>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	429a      	cmp	r2, r3
 8011920:	d102      	bne.n	8011928 <plug_holes+0xf0>
      lfree = pmem;
 8011922:	4a15      	ldr	r2, [pc, #84]	; (8011978 <plug_holes+0x140>)
 8011924:	68bb      	ldr	r3, [r7, #8]
 8011926:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	881a      	ldrh	r2, [r3, #0]
 801192c:	68bb      	ldr	r3, [r7, #8]
 801192e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	881b      	ldrh	r3, [r3, #0]
 8011934:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011938:	d00a      	beq.n	8011950 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	4618      	mov	r0, r3
 8011940:	f7ff ff56 	bl	80117f0 <ptr_to_mem>
 8011944:	4604      	mov	r4, r0
 8011946:	68b8      	ldr	r0, [r7, #8]
 8011948:	f7ff ff64 	bl	8011814 <mem_to_ptr>
 801194c:	4603      	mov	r3, r0
 801194e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011950:	bf00      	nop
 8011952:	3714      	adds	r7, #20
 8011954:	46bd      	mov	sp, r7
 8011956:	bd90      	pop	{r4, r7, pc}
 8011958:	200086d0 	.word	0x200086d0
 801195c:	0801e694 	.word	0x0801e694
 8011960:	0801e6c4 	.word	0x0801e6c4
 8011964:	0801e6dc 	.word	0x0801e6dc
 8011968:	200086d4 	.word	0x200086d4
 801196c:	0801e704 	.word	0x0801e704
 8011970:	0801e720 	.word	0x0801e720
 8011974:	0801e73c 	.word	0x0801e73c
 8011978:	200086dc 	.word	0x200086dc

0801197c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011982:	4b1d      	ldr	r3, [pc, #116]	; (80119f8 <mem_init+0x7c>)
 8011984:	4a1d      	ldr	r2, [pc, #116]	; (80119fc <mem_init+0x80>)
 8011986:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011988:	4b1b      	ldr	r3, [pc, #108]	; (80119f8 <mem_init+0x7c>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011994:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2200      	movs	r2, #0
 801199a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80119a2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80119a6:	f7ff ff23 	bl	80117f0 <ptr_to_mem>
 80119aa:	4602      	mov	r2, r0
 80119ac:	4b14      	ldr	r3, [pc, #80]	; (8011a00 <mem_init+0x84>)
 80119ae:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80119b0:	4b13      	ldr	r3, [pc, #76]	; (8011a00 <mem_init+0x84>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	2201      	movs	r2, #1
 80119b6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80119b8:	4b11      	ldr	r3, [pc, #68]	; (8011a00 <mem_init+0x84>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80119c0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80119c2:	4b0f      	ldr	r3, [pc, #60]	; (8011a00 <mem_init+0x84>)
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80119ca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80119cc:	4b0a      	ldr	r3, [pc, #40]	; (80119f8 <mem_init+0x7c>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	4a0c      	ldr	r2, [pc, #48]	; (8011a04 <mem_init+0x88>)
 80119d2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80119d4:	480c      	ldr	r0, [pc, #48]	; (8011a08 <mem_init+0x8c>)
 80119d6:	f00b f835 	bl	801ca44 <sys_mutex_new>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d006      	beq.n	80119ee <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80119e0:	4b0a      	ldr	r3, [pc, #40]	; (8011a0c <mem_init+0x90>)
 80119e2:	f240 221f 	movw	r2, #543	; 0x21f
 80119e6:	490a      	ldr	r1, [pc, #40]	; (8011a10 <mem_init+0x94>)
 80119e8:	480a      	ldr	r0, [pc, #40]	; (8011a14 <mem_init+0x98>)
 80119ea:	f00b f8ed 	bl	801cbc8 <iprintf>
  }
}
 80119ee:	bf00      	nop
 80119f0:	3708      	adds	r7, #8
 80119f2:	46bd      	mov	sp, r7
 80119f4:	bd80      	pop	{r7, pc}
 80119f6:	bf00      	nop
 80119f8:	200086d0 	.word	0x200086d0
 80119fc:	30004000 	.word	0x30004000
 8011a00:	200086d4 	.word	0x200086d4
 8011a04:	200086dc 	.word	0x200086dc
 8011a08:	200086d8 	.word	0x200086d8
 8011a0c:	0801e694 	.word	0x0801e694
 8011a10:	0801e768 	.word	0x0801e768
 8011a14:	0801e6dc 	.word	0x0801e6dc

08011a18 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b086      	sub	sp, #24
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7ff fef7 	bl	8011814 <mem_to_ptr>
 8011a26:	4603      	mov	r3, r0
 8011a28:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	881b      	ldrh	r3, [r3, #0]
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f7ff fede 	bl	80117f0 <ptr_to_mem>
 8011a34:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	885b      	ldrh	r3, [r3, #2]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7ff fed8 	bl	80117f0 <ptr_to_mem>
 8011a40:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	881b      	ldrh	r3, [r3, #0]
 8011a46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a4a:	d818      	bhi.n	8011a7e <mem_link_valid+0x66>
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	885b      	ldrh	r3, [r3, #2]
 8011a50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011a54:	d813      	bhi.n	8011a7e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011a5a:	8afa      	ldrh	r2, [r7, #22]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d004      	beq.n	8011a6a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	8afa      	ldrh	r2, [r7, #22]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d109      	bne.n	8011a7e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011a6a:	4b08      	ldr	r3, [pc, #32]	; (8011a8c <mem_link_valid+0x74>)
 8011a6c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011a6e:	693a      	ldr	r2, [r7, #16]
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d006      	beq.n	8011a82 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	885b      	ldrh	r3, [r3, #2]
 8011a78:	8afa      	ldrh	r2, [r7, #22]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d001      	beq.n	8011a82 <mem_link_valid+0x6a>
    return 0;
 8011a7e:	2300      	movs	r3, #0
 8011a80:	e000      	b.n	8011a84 <mem_link_valid+0x6c>
  }
  return 1;
 8011a82:	2301      	movs	r3, #1
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3718      	adds	r7, #24
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	200086d4 	.word	0x200086d4

08011a90 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b088      	sub	sp, #32
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d070      	beq.n	8011b80 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f003 0303 	and.w	r3, r3, #3
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d00d      	beq.n	8011ac4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011aa8:	4b37      	ldr	r3, [pc, #220]	; (8011b88 <mem_free+0xf8>)
 8011aaa:	f240 2273 	movw	r2, #627	; 0x273
 8011aae:	4937      	ldr	r1, [pc, #220]	; (8011b8c <mem_free+0xfc>)
 8011ab0:	4837      	ldr	r0, [pc, #220]	; (8011b90 <mem_free+0x100>)
 8011ab2:	f00b f889 	bl	801cbc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011ab6:	f00b f823 	bl	801cb00 <sys_arch_protect>
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f00b f82d 	bl	801cb1c <sys_arch_unprotect>
    return;
 8011ac2:	e05e      	b.n	8011b82 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	3b08      	subs	r3, #8
 8011ac8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011aca:	4b32      	ldr	r3, [pc, #200]	; (8011b94 <mem_free+0x104>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	69fa      	ldr	r2, [r7, #28]
 8011ad0:	429a      	cmp	r2, r3
 8011ad2:	d306      	bcc.n	8011ae2 <mem_free+0x52>
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f103 020c 	add.w	r2, r3, #12
 8011ada:	4b2f      	ldr	r3, [pc, #188]	; (8011b98 <mem_free+0x108>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d90d      	bls.n	8011afe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011ae2:	4b29      	ldr	r3, [pc, #164]	; (8011b88 <mem_free+0xf8>)
 8011ae4:	f240 227f 	movw	r2, #639	; 0x27f
 8011ae8:	492c      	ldr	r1, [pc, #176]	; (8011b9c <mem_free+0x10c>)
 8011aea:	4829      	ldr	r0, [pc, #164]	; (8011b90 <mem_free+0x100>)
 8011aec:	f00b f86c 	bl	801cbc8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011af0:	f00b f806 	bl	801cb00 <sys_arch_protect>
 8011af4:	6138      	str	r0, [r7, #16]
 8011af6:	6938      	ldr	r0, [r7, #16]
 8011af8:	f00b f810 	bl	801cb1c <sys_arch_unprotect>
    return;
 8011afc:	e041      	b.n	8011b82 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011afe:	4828      	ldr	r0, [pc, #160]	; (8011ba0 <mem_free+0x110>)
 8011b00:	f00a ffbc 	bl	801ca7c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	791b      	ldrb	r3, [r3, #4]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d110      	bne.n	8011b2e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011b0c:	4b1e      	ldr	r3, [pc, #120]	; (8011b88 <mem_free+0xf8>)
 8011b0e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011b12:	4924      	ldr	r1, [pc, #144]	; (8011ba4 <mem_free+0x114>)
 8011b14:	481e      	ldr	r0, [pc, #120]	; (8011b90 <mem_free+0x100>)
 8011b16:	f00b f857 	bl	801cbc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011b1a:	4821      	ldr	r0, [pc, #132]	; (8011ba0 <mem_free+0x110>)
 8011b1c:	f00a ffbd 	bl	801ca9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011b20:	f00a ffee 	bl	801cb00 <sys_arch_protect>
 8011b24:	6178      	str	r0, [r7, #20]
 8011b26:	6978      	ldr	r0, [r7, #20]
 8011b28:	f00a fff8 	bl	801cb1c <sys_arch_unprotect>
    return;
 8011b2c:	e029      	b.n	8011b82 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011b2e:	69f8      	ldr	r0, [r7, #28]
 8011b30:	f7ff ff72 	bl	8011a18 <mem_link_valid>
 8011b34:	4603      	mov	r3, r0
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d110      	bne.n	8011b5c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011b3a:	4b13      	ldr	r3, [pc, #76]	; (8011b88 <mem_free+0xf8>)
 8011b3c:	f240 2295 	movw	r2, #661	; 0x295
 8011b40:	4919      	ldr	r1, [pc, #100]	; (8011ba8 <mem_free+0x118>)
 8011b42:	4813      	ldr	r0, [pc, #76]	; (8011b90 <mem_free+0x100>)
 8011b44:	f00b f840 	bl	801cbc8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011b48:	4815      	ldr	r0, [pc, #84]	; (8011ba0 <mem_free+0x110>)
 8011b4a:	f00a ffa6 	bl	801ca9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011b4e:	f00a ffd7 	bl	801cb00 <sys_arch_protect>
 8011b52:	61b8      	str	r0, [r7, #24]
 8011b54:	69b8      	ldr	r0, [r7, #24]
 8011b56:	f00a ffe1 	bl	801cb1c <sys_arch_unprotect>
    return;
 8011b5a:	e012      	b.n	8011b82 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011b5c:	69fb      	ldr	r3, [r7, #28]
 8011b5e:	2200      	movs	r2, #0
 8011b60:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011b62:	4b12      	ldr	r3, [pc, #72]	; (8011bac <mem_free+0x11c>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	69fa      	ldr	r2, [r7, #28]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d202      	bcs.n	8011b72 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011b6c:	4a0f      	ldr	r2, [pc, #60]	; (8011bac <mem_free+0x11c>)
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011b72:	69f8      	ldr	r0, [r7, #28]
 8011b74:	f7ff fe60 	bl	8011838 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011b78:	4809      	ldr	r0, [pc, #36]	; (8011ba0 <mem_free+0x110>)
 8011b7a:	f00a ff8e 	bl	801ca9a <sys_mutex_unlock>
 8011b7e:	e000      	b.n	8011b82 <mem_free+0xf2>
    return;
 8011b80:	bf00      	nop
}
 8011b82:	3720      	adds	r7, #32
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	0801e694 	.word	0x0801e694
 8011b8c:	0801e784 	.word	0x0801e784
 8011b90:	0801e6dc 	.word	0x0801e6dc
 8011b94:	200086d0 	.word	0x200086d0
 8011b98:	200086d4 	.word	0x200086d4
 8011b9c:	0801e7a8 	.word	0x0801e7a8
 8011ba0:	200086d8 	.word	0x200086d8
 8011ba4:	0801e7c4 	.word	0x0801e7c4
 8011ba8:	0801e7ec 	.word	0x0801e7ec
 8011bac:	200086dc 	.word	0x200086dc

08011bb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b088      	sub	sp, #32
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011bbc:	887b      	ldrh	r3, [r7, #2]
 8011bbe:	3303      	adds	r3, #3
 8011bc0:	b29b      	uxth	r3, r3
 8011bc2:	f023 0303 	bic.w	r3, r3, #3
 8011bc6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011bc8:	8bfb      	ldrh	r3, [r7, #30]
 8011bca:	2b0b      	cmp	r3, #11
 8011bcc:	d801      	bhi.n	8011bd2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011bce:	230c      	movs	r3, #12
 8011bd0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011bd2:	8bfb      	ldrh	r3, [r7, #30]
 8011bd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011bd8:	d803      	bhi.n	8011be2 <mem_trim+0x32>
 8011bda:	8bfa      	ldrh	r2, [r7, #30]
 8011bdc:	887b      	ldrh	r3, [r7, #2]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d201      	bcs.n	8011be6 <mem_trim+0x36>
    return NULL;
 8011be2:	2300      	movs	r3, #0
 8011be4:	e0d8      	b.n	8011d98 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011be6:	4b6e      	ldr	r3, [pc, #440]	; (8011da0 <mem_trim+0x1f0>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d304      	bcc.n	8011bfa <mem_trim+0x4a>
 8011bf0:	4b6c      	ldr	r3, [pc, #432]	; (8011da4 <mem_trim+0x1f4>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d306      	bcc.n	8011c08 <mem_trim+0x58>
 8011bfa:	4b6b      	ldr	r3, [pc, #428]	; (8011da8 <mem_trim+0x1f8>)
 8011bfc:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011c00:	496a      	ldr	r1, [pc, #424]	; (8011dac <mem_trim+0x1fc>)
 8011c02:	486b      	ldr	r0, [pc, #428]	; (8011db0 <mem_trim+0x200>)
 8011c04:	f00a ffe0 	bl	801cbc8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011c08:	4b65      	ldr	r3, [pc, #404]	; (8011da0 <mem_trim+0x1f0>)
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	687a      	ldr	r2, [r7, #4]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d304      	bcc.n	8011c1c <mem_trim+0x6c>
 8011c12:	4b64      	ldr	r3, [pc, #400]	; (8011da4 <mem_trim+0x1f4>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	687a      	ldr	r2, [r7, #4]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d307      	bcc.n	8011c2c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011c1c:	f00a ff70 	bl	801cb00 <sys_arch_protect>
 8011c20:	60b8      	str	r0, [r7, #8]
 8011c22:	68b8      	ldr	r0, [r7, #8]
 8011c24:	f00a ff7a 	bl	801cb1c <sys_arch_unprotect>
    return rmem;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	e0b5      	b.n	8011d98 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	3b08      	subs	r3, #8
 8011c30:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011c32:	69b8      	ldr	r0, [r7, #24]
 8011c34:	f7ff fdee 	bl	8011814 <mem_to_ptr>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011c3c:	69bb      	ldr	r3, [r7, #24]
 8011c3e:	881a      	ldrh	r2, [r3, #0]
 8011c40:	8afb      	ldrh	r3, [r7, #22]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	b29b      	uxth	r3, r3
 8011c46:	3b08      	subs	r3, #8
 8011c48:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011c4a:	8bfa      	ldrh	r2, [r7, #30]
 8011c4c:	8abb      	ldrh	r3, [r7, #20]
 8011c4e:	429a      	cmp	r2, r3
 8011c50:	d906      	bls.n	8011c60 <mem_trim+0xb0>
 8011c52:	4b55      	ldr	r3, [pc, #340]	; (8011da8 <mem_trim+0x1f8>)
 8011c54:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011c58:	4956      	ldr	r1, [pc, #344]	; (8011db4 <mem_trim+0x204>)
 8011c5a:	4855      	ldr	r0, [pc, #340]	; (8011db0 <mem_trim+0x200>)
 8011c5c:	f00a ffb4 	bl	801cbc8 <iprintf>
  if (newsize > size) {
 8011c60:	8bfa      	ldrh	r2, [r7, #30]
 8011c62:	8abb      	ldrh	r3, [r7, #20]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d901      	bls.n	8011c6c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	e095      	b.n	8011d98 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011c6c:	8bfa      	ldrh	r2, [r7, #30]
 8011c6e:	8abb      	ldrh	r3, [r7, #20]
 8011c70:	429a      	cmp	r2, r3
 8011c72:	d101      	bne.n	8011c78 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	e08f      	b.n	8011d98 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011c78:	484f      	ldr	r0, [pc, #316]	; (8011db8 <mem_trim+0x208>)
 8011c7a:	f00a feff 	bl	801ca7c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011c7e:	69bb      	ldr	r3, [r7, #24]
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7ff fdb4 	bl	80117f0 <ptr_to_mem>
 8011c88:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	791b      	ldrb	r3, [r3, #4]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d13f      	bne.n	8011d12 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011c92:	69bb      	ldr	r3, [r7, #24]
 8011c94:	881b      	ldrh	r3, [r3, #0]
 8011c96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c9a:	d106      	bne.n	8011caa <mem_trim+0xfa>
 8011c9c:	4b42      	ldr	r3, [pc, #264]	; (8011da8 <mem_trim+0x1f8>)
 8011c9e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8011ca2:	4946      	ldr	r1, [pc, #280]	; (8011dbc <mem_trim+0x20c>)
 8011ca4:	4842      	ldr	r0, [pc, #264]	; (8011db0 <mem_trim+0x200>)
 8011ca6:	f00a ff8f 	bl	801cbc8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	881b      	ldrh	r3, [r3, #0]
 8011cae:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011cb0:	8afa      	ldrh	r2, [r7, #22]
 8011cb2:	8bfb      	ldrh	r3, [r7, #30]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	3308      	adds	r3, #8
 8011cba:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8011cbc:	4b40      	ldr	r3, [pc, #256]	; (8011dc0 <mem_trim+0x210>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	693a      	ldr	r2, [r7, #16]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d106      	bne.n	8011cd4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8011cc6:	89fb      	ldrh	r3, [r7, #14]
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff fd91 	bl	80117f0 <ptr_to_mem>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	4b3b      	ldr	r3, [pc, #236]	; (8011dc0 <mem_trim+0x210>)
 8011cd2:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8011cd4:	89fb      	ldrh	r3, [r7, #14]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7ff fd8a 	bl	80117f0 <ptr_to_mem>
 8011cdc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	89ba      	ldrh	r2, [r7, #12]
 8011ce8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	8afa      	ldrh	r2, [r7, #22]
 8011cee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8011cf0:	69bb      	ldr	r3, [r7, #24]
 8011cf2:	89fa      	ldrh	r2, [r7, #14]
 8011cf4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	881b      	ldrh	r3, [r3, #0]
 8011cfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011cfe:	d047      	beq.n	8011d90 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	881b      	ldrh	r3, [r3, #0]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7ff fd73 	bl	80117f0 <ptr_to_mem>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	89fb      	ldrh	r3, [r7, #14]
 8011d0e:	8053      	strh	r3, [r2, #2]
 8011d10:	e03e      	b.n	8011d90 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8011d12:	8bfb      	ldrh	r3, [r7, #30]
 8011d14:	f103 0214 	add.w	r2, r3, #20
 8011d18:	8abb      	ldrh	r3, [r7, #20]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d838      	bhi.n	8011d90 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8011d1e:	8afa      	ldrh	r2, [r7, #22]
 8011d20:	8bfb      	ldrh	r3, [r7, #30]
 8011d22:	4413      	add	r3, r2
 8011d24:	b29b      	uxth	r3, r3
 8011d26:	3308      	adds	r3, #8
 8011d28:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011d2a:	69bb      	ldr	r3, [r7, #24]
 8011d2c:	881b      	ldrh	r3, [r3, #0]
 8011d2e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011d32:	d106      	bne.n	8011d42 <mem_trim+0x192>
 8011d34:	4b1c      	ldr	r3, [pc, #112]	; (8011da8 <mem_trim+0x1f8>)
 8011d36:	f240 3216 	movw	r2, #790	; 0x316
 8011d3a:	4920      	ldr	r1, [pc, #128]	; (8011dbc <mem_trim+0x20c>)
 8011d3c:	481c      	ldr	r0, [pc, #112]	; (8011db0 <mem_trim+0x200>)
 8011d3e:	f00a ff43 	bl	801cbc8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8011d42:	89fb      	ldrh	r3, [r7, #14]
 8011d44:	4618      	mov	r0, r3
 8011d46:	f7ff fd53 	bl	80117f0 <ptr_to_mem>
 8011d4a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011d4c:	4b1c      	ldr	r3, [pc, #112]	; (8011dc0 <mem_trim+0x210>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	693a      	ldr	r2, [r7, #16]
 8011d52:	429a      	cmp	r2, r3
 8011d54:	d202      	bcs.n	8011d5c <mem_trim+0x1ac>
      lfree = mem2;
 8011d56:	4a1a      	ldr	r2, [pc, #104]	; (8011dc0 <mem_trim+0x210>)
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	881a      	ldrh	r2, [r3, #0]
 8011d66:	693b      	ldr	r3, [r7, #16]
 8011d68:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	8afa      	ldrh	r2, [r7, #22]
 8011d6e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8011d70:	69bb      	ldr	r3, [r7, #24]
 8011d72:	89fa      	ldrh	r2, [r7, #14]
 8011d74:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011d76:	693b      	ldr	r3, [r7, #16]
 8011d78:	881b      	ldrh	r3, [r3, #0]
 8011d7a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011d7e:	d007      	beq.n	8011d90 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7ff fd33 	bl	80117f0 <ptr_to_mem>
 8011d8a:	4602      	mov	r2, r0
 8011d8c:	89fb      	ldrh	r3, [r7, #14]
 8011d8e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011d90:	4809      	ldr	r0, [pc, #36]	; (8011db8 <mem_trim+0x208>)
 8011d92:	f00a fe82 	bl	801ca9a <sys_mutex_unlock>
  return rmem;
 8011d96:	687b      	ldr	r3, [r7, #4]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3720      	adds	r7, #32
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	200086d0 	.word	0x200086d0
 8011da4:	200086d4 	.word	0x200086d4
 8011da8:	0801e694 	.word	0x0801e694
 8011dac:	0801e820 	.word	0x0801e820
 8011db0:	0801e6dc 	.word	0x0801e6dc
 8011db4:	0801e838 	.word	0x0801e838
 8011db8:	200086d8 	.word	0x200086d8
 8011dbc:	0801e858 	.word	0x0801e858
 8011dc0:	200086dc 	.word	0x200086dc

08011dc4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b088      	sub	sp, #32
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	4603      	mov	r3, r0
 8011dcc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8011dce:	88fb      	ldrh	r3, [r7, #6]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d101      	bne.n	8011dd8 <mem_malloc+0x14>
    return NULL;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	e0e2      	b.n	8011f9e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8011dd8:	88fb      	ldrh	r3, [r7, #6]
 8011dda:	3303      	adds	r3, #3
 8011ddc:	b29b      	uxth	r3, r3
 8011dde:	f023 0303 	bic.w	r3, r3, #3
 8011de2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011de4:	8bbb      	ldrh	r3, [r7, #28]
 8011de6:	2b0b      	cmp	r3, #11
 8011de8:	d801      	bhi.n	8011dee <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011dea:	230c      	movs	r3, #12
 8011dec:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8011dee:	8bbb      	ldrh	r3, [r7, #28]
 8011df0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011df4:	d803      	bhi.n	8011dfe <mem_malloc+0x3a>
 8011df6:	8bba      	ldrh	r2, [r7, #28]
 8011df8:	88fb      	ldrh	r3, [r7, #6]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d201      	bcs.n	8011e02 <mem_malloc+0x3e>
    return NULL;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	e0cd      	b.n	8011f9e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8011e02:	4869      	ldr	r0, [pc, #420]	; (8011fa8 <mem_malloc+0x1e4>)
 8011e04:	f00a fe3a 	bl	801ca7c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011e08:	4b68      	ldr	r3, [pc, #416]	; (8011fac <mem_malloc+0x1e8>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7ff fd01 	bl	8011814 <mem_to_ptr>
 8011e12:	4603      	mov	r3, r0
 8011e14:	83fb      	strh	r3, [r7, #30]
 8011e16:	e0b7      	b.n	8011f88 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011e18:	8bfb      	ldrh	r3, [r7, #30]
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f7ff fce8 	bl	80117f0 <ptr_to_mem>
 8011e20:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8011e22:	697b      	ldr	r3, [r7, #20]
 8011e24:	791b      	ldrb	r3, [r3, #4]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	f040 80a7 	bne.w	8011f7a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	881b      	ldrh	r3, [r3, #0]
 8011e30:	461a      	mov	r2, r3
 8011e32:	8bfb      	ldrh	r3, [r7, #30]
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	f1a3 0208 	sub.w	r2, r3, #8
 8011e3a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	f0c0 809c 	bcc.w	8011f7a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	881b      	ldrh	r3, [r3, #0]
 8011e46:	461a      	mov	r2, r3
 8011e48:	8bfb      	ldrh	r3, [r7, #30]
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	f1a3 0208 	sub.w	r2, r3, #8
 8011e50:	8bbb      	ldrh	r3, [r7, #28]
 8011e52:	3314      	adds	r3, #20
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d333      	bcc.n	8011ec0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011e58:	8bfa      	ldrh	r2, [r7, #30]
 8011e5a:	8bbb      	ldrh	r3, [r7, #28]
 8011e5c:	4413      	add	r3, r2
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	3308      	adds	r3, #8
 8011e62:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011e64:	8a7b      	ldrh	r3, [r7, #18]
 8011e66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011e6a:	d106      	bne.n	8011e7a <mem_malloc+0xb6>
 8011e6c:	4b50      	ldr	r3, [pc, #320]	; (8011fb0 <mem_malloc+0x1ec>)
 8011e6e:	f240 3287 	movw	r2, #903	; 0x387
 8011e72:	4950      	ldr	r1, [pc, #320]	; (8011fb4 <mem_malloc+0x1f0>)
 8011e74:	4850      	ldr	r0, [pc, #320]	; (8011fb8 <mem_malloc+0x1f4>)
 8011e76:	f00a fea7 	bl	801cbc8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011e7a:	8a7b      	ldrh	r3, [r7, #18]
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7ff fcb7 	bl	80117f0 <ptr_to_mem>
 8011e82:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	2200      	movs	r2, #0
 8011e88:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	881a      	ldrh	r2, [r3, #0]
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	8bfa      	ldrh	r2, [r7, #30]
 8011e96:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	8a7a      	ldrh	r2, [r7, #18]
 8011e9c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	2201      	movs	r2, #1
 8011ea2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011eac:	d00b      	beq.n	8011ec6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	881b      	ldrh	r3, [r3, #0]
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f7ff fc9c 	bl	80117f0 <ptr_to_mem>
 8011eb8:	4602      	mov	r2, r0
 8011eba:	8a7b      	ldrh	r3, [r7, #18]
 8011ebc:	8053      	strh	r3, [r2, #2]
 8011ebe:	e002      	b.n	8011ec6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8011ec0:	697b      	ldr	r3, [r7, #20]
 8011ec2:	2201      	movs	r2, #1
 8011ec4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8011ec6:	4b39      	ldr	r3, [pc, #228]	; (8011fac <mem_malloc+0x1e8>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	697a      	ldr	r2, [r7, #20]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d127      	bne.n	8011f20 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8011ed0:	4b36      	ldr	r3, [pc, #216]	; (8011fac <mem_malloc+0x1e8>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8011ed6:	e005      	b.n	8011ee4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	881b      	ldrh	r3, [r3, #0]
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7ff fc87 	bl	80117f0 <ptr_to_mem>
 8011ee2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011ee4:	69bb      	ldr	r3, [r7, #24]
 8011ee6:	791b      	ldrb	r3, [r3, #4]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d004      	beq.n	8011ef6 <mem_malloc+0x132>
 8011eec:	4b33      	ldr	r3, [pc, #204]	; (8011fbc <mem_malloc+0x1f8>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	69ba      	ldr	r2, [r7, #24]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d1f0      	bne.n	8011ed8 <mem_malloc+0x114>
          }
          lfree = cur;
 8011ef6:	4a2d      	ldr	r2, [pc, #180]	; (8011fac <mem_malloc+0x1e8>)
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011efc:	4b2b      	ldr	r3, [pc, #172]	; (8011fac <mem_malloc+0x1e8>)
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	4b2e      	ldr	r3, [pc, #184]	; (8011fbc <mem_malloc+0x1f8>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	429a      	cmp	r2, r3
 8011f06:	d00b      	beq.n	8011f20 <mem_malloc+0x15c>
 8011f08:	4b28      	ldr	r3, [pc, #160]	; (8011fac <mem_malloc+0x1e8>)
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	791b      	ldrb	r3, [r3, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d006      	beq.n	8011f20 <mem_malloc+0x15c>
 8011f12:	4b27      	ldr	r3, [pc, #156]	; (8011fb0 <mem_malloc+0x1ec>)
 8011f14:	f240 32b5 	movw	r2, #949	; 0x3b5
 8011f18:	4929      	ldr	r1, [pc, #164]	; (8011fc0 <mem_malloc+0x1fc>)
 8011f1a:	4827      	ldr	r0, [pc, #156]	; (8011fb8 <mem_malloc+0x1f4>)
 8011f1c:	f00a fe54 	bl	801cbc8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8011f20:	4821      	ldr	r0, [pc, #132]	; (8011fa8 <mem_malloc+0x1e4>)
 8011f22:	f00a fdba 	bl	801ca9a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011f26:	8bba      	ldrh	r2, [r7, #28]
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	4413      	add	r3, r2
 8011f2c:	3308      	adds	r3, #8
 8011f2e:	4a23      	ldr	r2, [pc, #140]	; (8011fbc <mem_malloc+0x1f8>)
 8011f30:	6812      	ldr	r2, [r2, #0]
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d906      	bls.n	8011f44 <mem_malloc+0x180>
 8011f36:	4b1e      	ldr	r3, [pc, #120]	; (8011fb0 <mem_malloc+0x1ec>)
 8011f38:	f240 32ba 	movw	r2, #954	; 0x3ba
 8011f3c:	4921      	ldr	r1, [pc, #132]	; (8011fc4 <mem_malloc+0x200>)
 8011f3e:	481e      	ldr	r0, [pc, #120]	; (8011fb8 <mem_malloc+0x1f4>)
 8011f40:	f00a fe42 	bl	801cbc8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	f003 0303 	and.w	r3, r3, #3
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d006      	beq.n	8011f5c <mem_malloc+0x198>
 8011f4e:	4b18      	ldr	r3, [pc, #96]	; (8011fb0 <mem_malloc+0x1ec>)
 8011f50:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 8011f54:	491c      	ldr	r1, [pc, #112]	; (8011fc8 <mem_malloc+0x204>)
 8011f56:	4818      	ldr	r0, [pc, #96]	; (8011fb8 <mem_malloc+0x1f4>)
 8011f58:	f00a fe36 	bl	801cbc8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	f003 0303 	and.w	r3, r3, #3
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d006      	beq.n	8011f74 <mem_malloc+0x1b0>
 8011f66:	4b12      	ldr	r3, [pc, #72]	; (8011fb0 <mem_malloc+0x1ec>)
 8011f68:	f240 32be 	movw	r2, #958	; 0x3be
 8011f6c:	4917      	ldr	r1, [pc, #92]	; (8011fcc <mem_malloc+0x208>)
 8011f6e:	4812      	ldr	r0, [pc, #72]	; (8011fb8 <mem_malloc+0x1f4>)
 8011f70:	f00a fe2a 	bl	801cbc8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	3308      	adds	r3, #8
 8011f78:	e011      	b.n	8011f9e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011f7a:	8bfb      	ldrh	r3, [r7, #30]
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7ff fc37 	bl	80117f0 <ptr_to_mem>
 8011f82:	4603      	mov	r3, r0
 8011f84:	881b      	ldrh	r3, [r3, #0]
 8011f86:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011f88:	8bfa      	ldrh	r2, [r7, #30]
 8011f8a:	8bbb      	ldrh	r3, [r7, #28]
 8011f8c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8011f90:	429a      	cmp	r2, r3
 8011f92:	f4ff af41 	bcc.w	8011e18 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8011f96:	4804      	ldr	r0, [pc, #16]	; (8011fa8 <mem_malloc+0x1e4>)
 8011f98:	f00a fd7f 	bl	801ca9a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8011f9c:	2300      	movs	r3, #0
}
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	3720      	adds	r7, #32
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
 8011fa6:	bf00      	nop
 8011fa8:	200086d8 	.word	0x200086d8
 8011fac:	200086dc 	.word	0x200086dc
 8011fb0:	0801e694 	.word	0x0801e694
 8011fb4:	0801e858 	.word	0x0801e858
 8011fb8:	0801e6dc 	.word	0x0801e6dc
 8011fbc:	200086d4 	.word	0x200086d4
 8011fc0:	0801e86c 	.word	0x0801e86c
 8011fc4:	0801e888 	.word	0x0801e888
 8011fc8:	0801e8b8 	.word	0x0801e8b8
 8011fcc:	0801e8e8 	.word	0x0801e8e8

08011fd0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8011fd0:	b480      	push	{r7}
 8011fd2:	b085      	sub	sp, #20
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	689b      	ldr	r3, [r3, #8]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	3303      	adds	r3, #3
 8011fe6:	f023 0303 	bic.w	r3, r3, #3
 8011fea:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011fec:	2300      	movs	r3, #0
 8011fee:	60fb      	str	r3, [r7, #12]
 8011ff0:	e011      	b.n	8012016 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	689b      	ldr	r3, [r3, #8]
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	689b      	ldr	r3, [r3, #8]
 8012000:	68ba      	ldr	r2, [r7, #8]
 8012002:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	881b      	ldrh	r3, [r3, #0]
 8012008:	461a      	mov	r2, r3
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	4413      	add	r3, r2
 801200e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012010:	68fb      	ldr	r3, [r7, #12]
 8012012:	3301      	adds	r3, #1
 8012014:	60fb      	str	r3, [r7, #12]
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	885b      	ldrh	r3, [r3, #2]
 801201a:	461a      	mov	r2, r3
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	4293      	cmp	r3, r2
 8012020:	dbe7      	blt.n	8011ff2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012022:	bf00      	nop
 8012024:	3714      	adds	r7, #20
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr
	...

08012030 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012036:	2300      	movs	r3, #0
 8012038:	80fb      	strh	r3, [r7, #6]
 801203a:	e009      	b.n	8012050 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801203c:	88fb      	ldrh	r3, [r7, #6]
 801203e:	4a08      	ldr	r2, [pc, #32]	; (8012060 <memp_init+0x30>)
 8012040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012044:	4618      	mov	r0, r3
 8012046:	f7ff ffc3 	bl	8011fd0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801204a:	88fb      	ldrh	r3, [r7, #6]
 801204c:	3301      	adds	r3, #1
 801204e:	80fb      	strh	r3, [r7, #6]
 8012050:	88fb      	ldrh	r3, [r7, #6]
 8012052:	2b0c      	cmp	r3, #12
 8012054:	d9f2      	bls.n	801203c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012056:	bf00      	nop
 8012058:	3708      	adds	r7, #8
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	08021118 	.word	0x08021118

08012064 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012064:	b580      	push	{r7, lr}
 8012066:	b084      	sub	sp, #16
 8012068:	af00      	add	r7, sp, #0
 801206a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 801206c:	f00a fd48 	bl	801cb00 <sys_arch_protect>
 8012070:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	689b      	ldr	r3, [r3, #8]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d015      	beq.n	80120ac <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	68ba      	ldr	r2, [r7, #8]
 8012086:	6812      	ldr	r2, [r2, #0]
 8012088:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	f003 0303 	and.w	r3, r3, #3
 8012090:	2b00      	cmp	r3, #0
 8012092:	d006      	beq.n	80120a2 <do_memp_malloc_pool+0x3e>
 8012094:	4b09      	ldr	r3, [pc, #36]	; (80120bc <do_memp_malloc_pool+0x58>)
 8012096:	f240 1219 	movw	r2, #281	; 0x119
 801209a:	4909      	ldr	r1, [pc, #36]	; (80120c0 <do_memp_malloc_pool+0x5c>)
 801209c:	4809      	ldr	r0, [pc, #36]	; (80120c4 <do_memp_malloc_pool+0x60>)
 801209e:	f00a fd93 	bl	801cbc8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80120a2:	68f8      	ldr	r0, [r7, #12]
 80120a4:	f00a fd3a 	bl	801cb1c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80120a8:	68bb      	ldr	r3, [r7, #8]
 80120aa:	e003      	b.n	80120b4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80120ac:	68f8      	ldr	r0, [r7, #12]
 80120ae:	f00a fd35 	bl	801cb1c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80120b2:	2300      	movs	r3, #0
}
 80120b4:	4618      	mov	r0, r3
 80120b6:	3710      	adds	r7, #16
 80120b8:	46bd      	mov	sp, r7
 80120ba:	bd80      	pop	{r7, pc}
 80120bc:	0801e90c 	.word	0x0801e90c
 80120c0:	0801e93c 	.word	0x0801e93c
 80120c4:	0801e960 	.word	0x0801e960

080120c8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d106      	bne.n	80120e4 <memp_malloc_pool+0x1c>
 80120d6:	4b0a      	ldr	r3, [pc, #40]	; (8012100 <memp_malloc_pool+0x38>)
 80120d8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80120dc:	4909      	ldr	r1, [pc, #36]	; (8012104 <memp_malloc_pool+0x3c>)
 80120de:	480a      	ldr	r0, [pc, #40]	; (8012108 <memp_malloc_pool+0x40>)
 80120e0:	f00a fd72 	bl	801cbc8 <iprintf>
  if (desc == NULL) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <memp_malloc_pool+0x26>
    return NULL;
 80120ea:	2300      	movs	r3, #0
 80120ec:	e003      	b.n	80120f6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7ff ffb8 	bl	8012064 <do_memp_malloc_pool>
 80120f4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80120f6:	4618      	mov	r0, r3
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	0801e90c 	.word	0x0801e90c
 8012104:	0801e988 	.word	0x0801e988
 8012108:	0801e960 	.word	0x0801e960

0801210c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af00      	add	r7, sp, #0
 8012112:	4603      	mov	r3, r0
 8012114:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012116:	79fb      	ldrb	r3, [r7, #7]
 8012118:	2b0c      	cmp	r3, #12
 801211a:	d908      	bls.n	801212e <memp_malloc+0x22>
 801211c:	4b0a      	ldr	r3, [pc, #40]	; (8012148 <memp_malloc+0x3c>)
 801211e:	f240 1257 	movw	r2, #343	; 0x157
 8012122:	490a      	ldr	r1, [pc, #40]	; (801214c <memp_malloc+0x40>)
 8012124:	480a      	ldr	r0, [pc, #40]	; (8012150 <memp_malloc+0x44>)
 8012126:	f00a fd4f 	bl	801cbc8 <iprintf>
 801212a:	2300      	movs	r3, #0
 801212c:	e008      	b.n	8012140 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801212e:	79fb      	ldrb	r3, [r7, #7]
 8012130:	4a08      	ldr	r2, [pc, #32]	; (8012154 <memp_malloc+0x48>)
 8012132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012136:	4618      	mov	r0, r3
 8012138:	f7ff ff94 	bl	8012064 <do_memp_malloc_pool>
 801213c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801213e:	68fb      	ldr	r3, [r7, #12]
}
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	0801e90c 	.word	0x0801e90c
 801214c:	0801e99c 	.word	0x0801e99c
 8012150:	0801e960 	.word	0x0801e960
 8012154:	08021118 	.word	0x08021118

08012158 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	f003 0303 	and.w	r3, r3, #3
 8012168:	2b00      	cmp	r3, #0
 801216a:	d006      	beq.n	801217a <do_memp_free_pool+0x22>
 801216c:	4b0d      	ldr	r3, [pc, #52]	; (80121a4 <do_memp_free_pool+0x4c>)
 801216e:	f240 126d 	movw	r2, #365	; 0x16d
 8012172:	490d      	ldr	r1, [pc, #52]	; (80121a8 <do_memp_free_pool+0x50>)
 8012174:	480d      	ldr	r0, [pc, #52]	; (80121ac <do_memp_free_pool+0x54>)
 8012176:	f00a fd27 	bl	801cbc8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801217a:	683b      	ldr	r3, [r7, #0]
 801217c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801217e:	f00a fcbf 	bl	801cb00 <sys_arch_protect>
 8012182:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	689b      	ldr	r3, [r3, #8]
 8012188:	681a      	ldr	r2, [r3, #0]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	689b      	ldr	r3, [r3, #8]
 8012192:	68fa      	ldr	r2, [r7, #12]
 8012194:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012196:	68b8      	ldr	r0, [r7, #8]
 8012198:	f00a fcc0 	bl	801cb1c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801219c:	bf00      	nop
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	0801e90c 	.word	0x0801e90c
 80121a8:	0801e9bc 	.word	0x0801e9bc
 80121ac:	0801e960 	.word	0x0801e960

080121b0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b082      	sub	sp, #8
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d106      	bne.n	80121ce <memp_free_pool+0x1e>
 80121c0:	4b0a      	ldr	r3, [pc, #40]	; (80121ec <memp_free_pool+0x3c>)
 80121c2:	f240 1295 	movw	r2, #405	; 0x195
 80121c6:	490a      	ldr	r1, [pc, #40]	; (80121f0 <memp_free_pool+0x40>)
 80121c8:	480a      	ldr	r0, [pc, #40]	; (80121f4 <memp_free_pool+0x44>)
 80121ca:	f00a fcfd 	bl	801cbc8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d007      	beq.n	80121e4 <memp_free_pool+0x34>
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d004      	beq.n	80121e4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80121da:	6839      	ldr	r1, [r7, #0]
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff ffbb 	bl	8012158 <do_memp_free_pool>
 80121e2:	e000      	b.n	80121e6 <memp_free_pool+0x36>
    return;
 80121e4:	bf00      	nop
}
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}
 80121ec:	0801e90c 	.word	0x0801e90c
 80121f0:	0801e988 	.word	0x0801e988
 80121f4:	0801e960 	.word	0x0801e960

080121f8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80121f8:	b580      	push	{r7, lr}
 80121fa:	b082      	sub	sp, #8
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	4603      	mov	r3, r0
 8012200:	6039      	str	r1, [r7, #0]
 8012202:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012204:	79fb      	ldrb	r3, [r7, #7]
 8012206:	2b0c      	cmp	r3, #12
 8012208:	d907      	bls.n	801221a <memp_free+0x22>
 801220a:	4b0c      	ldr	r3, [pc, #48]	; (801223c <memp_free+0x44>)
 801220c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012210:	490b      	ldr	r1, [pc, #44]	; (8012240 <memp_free+0x48>)
 8012212:	480c      	ldr	r0, [pc, #48]	; (8012244 <memp_free+0x4c>)
 8012214:	f00a fcd8 	bl	801cbc8 <iprintf>
 8012218:	e00c      	b.n	8012234 <memp_free+0x3c>

  if (mem == NULL) {
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d008      	beq.n	8012232 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012220:	79fb      	ldrb	r3, [r7, #7]
 8012222:	4a09      	ldr	r2, [pc, #36]	; (8012248 <memp_free+0x50>)
 8012224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012228:	6839      	ldr	r1, [r7, #0]
 801222a:	4618      	mov	r0, r3
 801222c:	f7ff ff94 	bl	8012158 <do_memp_free_pool>
 8012230:	e000      	b.n	8012234 <memp_free+0x3c>
    return;
 8012232:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012234:	3708      	adds	r7, #8
 8012236:	46bd      	mov	sp, r7
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	0801e90c 	.word	0x0801e90c
 8012240:	0801e9dc 	.word	0x0801e9dc
 8012244:	0801e960 	.word	0x0801e960
 8012248:	08021118 	.word	0x08021118

0801224c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801224c:	b480      	push	{r7}
 801224e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012250:	bf00      	nop
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr
	...

0801225c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b086      	sub	sp, #24
 8012260:	af00      	add	r7, sp, #0
 8012262:	60f8      	str	r0, [r7, #12]
 8012264:	60b9      	str	r1, [r7, #8]
 8012266:	607a      	str	r2, [r7, #4]
 8012268:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d108      	bne.n	8012282 <netif_add+0x26>
 8012270:	4b57      	ldr	r3, [pc, #348]	; (80123d0 <netif_add+0x174>)
 8012272:	f240 1227 	movw	r2, #295	; 0x127
 8012276:	4957      	ldr	r1, [pc, #348]	; (80123d4 <netif_add+0x178>)
 8012278:	4857      	ldr	r0, [pc, #348]	; (80123d8 <netif_add+0x17c>)
 801227a:	f00a fca5 	bl	801cbc8 <iprintf>
 801227e:	2300      	movs	r3, #0
 8012280:	e0a2      	b.n	80123c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012284:	2b00      	cmp	r3, #0
 8012286:	d108      	bne.n	801229a <netif_add+0x3e>
 8012288:	4b51      	ldr	r3, [pc, #324]	; (80123d0 <netif_add+0x174>)
 801228a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801228e:	4953      	ldr	r1, [pc, #332]	; (80123dc <netif_add+0x180>)
 8012290:	4851      	ldr	r0, [pc, #324]	; (80123d8 <netif_add+0x17c>)
 8012292:	f00a fc99 	bl	801cbc8 <iprintf>
 8012296:	2300      	movs	r3, #0
 8012298:	e096      	b.n	80123c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d101      	bne.n	80122a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80122a0:	4b4f      	ldr	r3, [pc, #316]	; (80123e0 <netif_add+0x184>)
 80122a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d101      	bne.n	80122ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80122aa:	4b4d      	ldr	r3, [pc, #308]	; (80123e0 <netif_add+0x184>)
 80122ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d101      	bne.n	80122b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80122b4:	4b4a      	ldr	r3, [pc, #296]	; (80123e0 <netif_add+0x184>)
 80122b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	2200      	movs	r2, #0
 80122bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	2200      	movs	r2, #0
 80122c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	2200      	movs	r2, #0
 80122c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	4a45      	ldr	r2, [pc, #276]	; (80123e4 <netif_add+0x188>)
 80122ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2200      	movs	r2, #0
 80122d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2200      	movs	r2, #0
 80122da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	2200      	movs	r2, #0
 80122e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	6a3a      	ldr	r2, [r7, #32]
 80122e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80122ea:	4b3f      	ldr	r3, [pc, #252]	; (80123e8 <netif_add+0x18c>)
 80122ec:	781a      	ldrb	r2, [r3, #0]
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	68b9      	ldr	r1, [r7, #8]
 8012300:	68f8      	ldr	r0, [r7, #12]
 8012302:	f000 f913 	bl	801252c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8012306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012308:	68f8      	ldr	r0, [r7, #12]
 801230a:	4798      	blx	r3
 801230c:	4603      	mov	r3, r0
 801230e:	2b00      	cmp	r3, #0
 8012310:	d001      	beq.n	8012316 <netif_add+0xba>
    return NULL;
 8012312:	2300      	movs	r3, #0
 8012314:	e058      	b.n	80123c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801231c:	2bff      	cmp	r3, #255	; 0xff
 801231e:	d103      	bne.n	8012328 <netif_add+0xcc>
        netif->num = 0;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2200      	movs	r2, #0
 8012324:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8012328:	2300      	movs	r3, #0
 801232a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801232c:	4b2f      	ldr	r3, [pc, #188]	; (80123ec <netif_add+0x190>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	617b      	str	r3, [r7, #20]
 8012332:	e02b      	b.n	801238c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012334:	697a      	ldr	r2, [r7, #20]
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	429a      	cmp	r2, r3
 801233a:	d106      	bne.n	801234a <netif_add+0xee>
 801233c:	4b24      	ldr	r3, [pc, #144]	; (80123d0 <netif_add+0x174>)
 801233e:	f240 128b 	movw	r2, #395	; 0x18b
 8012342:	492b      	ldr	r1, [pc, #172]	; (80123f0 <netif_add+0x194>)
 8012344:	4824      	ldr	r0, [pc, #144]	; (80123d8 <netif_add+0x17c>)
 8012346:	f00a fc3f 	bl	801cbc8 <iprintf>
        num_netifs++;
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	3301      	adds	r3, #1
 801234e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	2bff      	cmp	r3, #255	; 0xff
 8012354:	dd06      	ble.n	8012364 <netif_add+0x108>
 8012356:	4b1e      	ldr	r3, [pc, #120]	; (80123d0 <netif_add+0x174>)
 8012358:	f240 128d 	movw	r2, #397	; 0x18d
 801235c:	4925      	ldr	r1, [pc, #148]	; (80123f4 <netif_add+0x198>)
 801235e:	481e      	ldr	r0, [pc, #120]	; (80123d8 <netif_add+0x17c>)
 8012360:	f00a fc32 	bl	801cbc8 <iprintf>
        if (netif2->num == netif->num) {
 8012364:	697b      	ldr	r3, [r7, #20]
 8012366:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012370:	429a      	cmp	r2, r3
 8012372:	d108      	bne.n	8012386 <netif_add+0x12a>
          netif->num++;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801237a:	3301      	adds	r3, #1
 801237c:	b2da      	uxtb	r2, r3
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8012384:	e005      	b.n	8012392 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012386:	697b      	ldr	r3, [r7, #20]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	617b      	str	r3, [r7, #20]
 801238c:	697b      	ldr	r3, [r7, #20]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1d0      	bne.n	8012334 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d1be      	bne.n	8012316 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801239e:	2bfe      	cmp	r3, #254	; 0xfe
 80123a0:	d103      	bne.n	80123aa <netif_add+0x14e>
    netif_num = 0;
 80123a2:	4b11      	ldr	r3, [pc, #68]	; (80123e8 <netif_add+0x18c>)
 80123a4:	2200      	movs	r2, #0
 80123a6:	701a      	strb	r2, [r3, #0]
 80123a8:	e006      	b.n	80123b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80123b0:	3301      	adds	r3, #1
 80123b2:	b2da      	uxtb	r2, r3
 80123b4:	4b0c      	ldr	r3, [pc, #48]	; (80123e8 <netif_add+0x18c>)
 80123b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80123b8:	4b0c      	ldr	r3, [pc, #48]	; (80123ec <netif_add+0x190>)
 80123ba:	681a      	ldr	r2, [r3, #0]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80123c0:	4a0a      	ldr	r2, [pc, #40]	; (80123ec <netif_add+0x190>)
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80123c6:	68fb      	ldr	r3, [r7, #12]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3718      	adds	r7, #24
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	0801e9f8 	.word	0x0801e9f8
 80123d4:	0801ea8c 	.word	0x0801ea8c
 80123d8:	0801ea48 	.word	0x0801ea48
 80123dc:	0801eaa8 	.word	0x0801eaa8
 80123e0:	0802118c 	.word	0x0802118c
 80123e4:	08012807 	.word	0x08012807
 80123e8:	20008714 	.word	0x20008714
 80123ec:	2000bda4 	.word	0x2000bda4
 80123f0:	0801eacc 	.word	0x0801eacc
 80123f4:	0801eae0 	.word	0x0801eae0

080123f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b082      	sub	sp, #8
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	6078      	str	r0, [r7, #4]
 8012400:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8012402:	6839      	ldr	r1, [r7, #0]
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f002 ff55 	bl	80152b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801240a:	6839      	ldr	r1, [r7, #0]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f007 fea3 	bl	801a158 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8012412:	bf00      	nop
 8012414:	3708      	adds	r7, #8
 8012416:	46bd      	mov	sp, r7
 8012418:	bd80      	pop	{r7, pc}
	...

0801241c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b086      	sub	sp, #24
 8012420:	af00      	add	r7, sp, #0
 8012422:	60f8      	str	r0, [r7, #12]
 8012424:	60b9      	str	r1, [r7, #8]
 8012426:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d106      	bne.n	801243c <netif_do_set_ipaddr+0x20>
 801242e:	4b1d      	ldr	r3, [pc, #116]	; (80124a4 <netif_do_set_ipaddr+0x88>)
 8012430:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012434:	491c      	ldr	r1, [pc, #112]	; (80124a8 <netif_do_set_ipaddr+0x8c>)
 8012436:	481d      	ldr	r0, [pc, #116]	; (80124ac <netif_do_set_ipaddr+0x90>)
 8012438:	f00a fbc6 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d106      	bne.n	8012450 <netif_do_set_ipaddr+0x34>
 8012442:	4b18      	ldr	r3, [pc, #96]	; (80124a4 <netif_do_set_ipaddr+0x88>)
 8012444:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8012448:	4917      	ldr	r1, [pc, #92]	; (80124a8 <netif_do_set_ipaddr+0x8c>)
 801244a:	4818      	ldr	r0, [pc, #96]	; (80124ac <netif_do_set_ipaddr+0x90>)
 801244c:	f00a fbbc 	bl	801cbc8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	681a      	ldr	r2, [r3, #0]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	3304      	adds	r3, #4
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	429a      	cmp	r2, r3
 801245c:	d01c      	beq.n	8012498 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	3304      	adds	r3, #4
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801246e:	f107 0314 	add.w	r3, r7, #20
 8012472:	4619      	mov	r1, r3
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f7ff ffbf 	bl	80123f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801247a:	68bb      	ldr	r3, [r7, #8]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d002      	beq.n	8012486 <netif_do_set_ipaddr+0x6a>
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	e000      	b.n	8012488 <netif_do_set_ipaddr+0x6c>
 8012486:	2300      	movs	r3, #0
 8012488:	68fa      	ldr	r2, [r7, #12]
 801248a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801248c:	2101      	movs	r1, #1
 801248e:	68f8      	ldr	r0, [r7, #12]
 8012490:	f000 f8d2 	bl	8012638 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012494:	2301      	movs	r3, #1
 8012496:	e000      	b.n	801249a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012498:	2300      	movs	r3, #0
}
 801249a:	4618      	mov	r0, r3
 801249c:	3718      	adds	r7, #24
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	0801e9f8 	.word	0x0801e9f8
 80124a8:	0801eb10 	.word	0x0801eb10
 80124ac:	0801ea48 	.word	0x0801ea48

080124b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b085      	sub	sp, #20
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	681a      	ldr	r2, [r3, #0]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	3308      	adds	r3, #8
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d00a      	beq.n	80124e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d002      	beq.n	80124d6 <netif_do_set_netmask+0x26>
 80124d0:	68bb      	ldr	r3, [r7, #8]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	e000      	b.n	80124d8 <netif_do_set_netmask+0x28>
 80124d6:	2300      	movs	r3, #0
 80124d8:	68fa      	ldr	r2, [r7, #12]
 80124da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80124dc:	2301      	movs	r3, #1
 80124de:	e000      	b.n	80124e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80124e0:	2300      	movs	r3, #0
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3714      	adds	r7, #20
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr

080124ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80124ee:	b480      	push	{r7}
 80124f0:	b085      	sub	sp, #20
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	60f8      	str	r0, [r7, #12]
 80124f6:	60b9      	str	r1, [r7, #8]
 80124f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	681a      	ldr	r2, [r3, #0]
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	330c      	adds	r3, #12
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	429a      	cmp	r2, r3
 8012506:	d00a      	beq.n	801251e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d002      	beq.n	8012514 <netif_do_set_gw+0x26>
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	e000      	b.n	8012516 <netif_do_set_gw+0x28>
 8012514:	2300      	movs	r3, #0
 8012516:	68fa      	ldr	r2, [r7, #12]
 8012518:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801251a:	2301      	movs	r3, #1
 801251c:	e000      	b.n	8012520 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801251e:	2300      	movs	r3, #0
}
 8012520:	4618      	mov	r0, r3
 8012522:	3714      	adds	r7, #20
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b088      	sub	sp, #32
 8012530:	af00      	add	r7, sp, #0
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
 8012538:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801253a:	2300      	movs	r3, #0
 801253c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801253e:	2300      	movs	r3, #0
 8012540:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012542:	68bb      	ldr	r3, [r7, #8]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d101      	bne.n	801254c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012548:	4b1c      	ldr	r3, [pc, #112]	; (80125bc <netif_set_addr+0x90>)
 801254a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	2b00      	cmp	r3, #0
 8012550:	d101      	bne.n	8012556 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012552:	4b1a      	ldr	r3, [pc, #104]	; (80125bc <netif_set_addr+0x90>)
 8012554:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801255c:	4b17      	ldr	r3, [pc, #92]	; (80125bc <netif_set_addr+0x90>)
 801255e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d003      	beq.n	801256e <netif_set_addr+0x42>
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d101      	bne.n	8012572 <netif_set_addr+0x46>
 801256e:	2301      	movs	r3, #1
 8012570:	e000      	b.n	8012574 <netif_set_addr+0x48>
 8012572:	2300      	movs	r3, #0
 8012574:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012576:	697b      	ldr	r3, [r7, #20]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d006      	beq.n	801258a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801257c:	f107 0310 	add.w	r3, r7, #16
 8012580:	461a      	mov	r2, r3
 8012582:	68b9      	ldr	r1, [r7, #8]
 8012584:	68f8      	ldr	r0, [r7, #12]
 8012586:	f7ff ff49 	bl	801241c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801258a:	69fa      	ldr	r2, [r7, #28]
 801258c:	6879      	ldr	r1, [r7, #4]
 801258e:	68f8      	ldr	r0, [r7, #12]
 8012590:	f7ff ff8e 	bl	80124b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012594:	69ba      	ldr	r2, [r7, #24]
 8012596:	6839      	ldr	r1, [r7, #0]
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f7ff ffa8 	bl	80124ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d106      	bne.n	80125b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80125a4:	f107 0310 	add.w	r3, r7, #16
 80125a8:	461a      	mov	r2, r3
 80125aa:	68b9      	ldr	r1, [r7, #8]
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f7ff ff35 	bl	801241c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80125b2:	bf00      	nop
 80125b4:	3720      	adds	r7, #32
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	0802118c 	.word	0x0802118c

080125c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80125c0:	b480      	push	{r7}
 80125c2:	b083      	sub	sp, #12
 80125c4:	af00      	add	r7, sp, #0
 80125c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80125c8:	4a04      	ldr	r2, [pc, #16]	; (80125dc <netif_set_default+0x1c>)
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80125ce:	bf00      	nop
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr
 80125da:	bf00      	nop
 80125dc:	2000bda8 	.word	0x2000bda8

080125e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b082      	sub	sp, #8
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d107      	bne.n	80125fe <netif_set_up+0x1e>
 80125ee:	4b0f      	ldr	r3, [pc, #60]	; (801262c <netif_set_up+0x4c>)
 80125f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80125f4:	490e      	ldr	r1, [pc, #56]	; (8012630 <netif_set_up+0x50>)
 80125f6:	480f      	ldr	r0, [pc, #60]	; (8012634 <netif_set_up+0x54>)
 80125f8:	f00a fae6 	bl	801cbc8 <iprintf>
 80125fc:	e013      	b.n	8012626 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012604:	f003 0301 	and.w	r3, r3, #1
 8012608:	2b00      	cmp	r3, #0
 801260a:	d10c      	bne.n	8012626 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012612:	f043 0301 	orr.w	r3, r3, #1
 8012616:	b2da      	uxtb	r2, r3
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801261e:	2103      	movs	r1, #3
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 f809 	bl	8012638 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012626:	3708      	adds	r7, #8
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	0801e9f8 	.word	0x0801e9f8
 8012630:	0801eb80 	.word	0x0801eb80
 8012634:	0801ea48 	.word	0x0801ea48

08012638 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012638:	b580      	push	{r7, lr}
 801263a:	b082      	sub	sp, #8
 801263c:	af00      	add	r7, sp, #0
 801263e:	6078      	str	r0, [r7, #4]
 8012640:	460b      	mov	r3, r1
 8012642:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d106      	bne.n	8012658 <netif_issue_reports+0x20>
 801264a:	4b18      	ldr	r3, [pc, #96]	; (80126ac <netif_issue_reports+0x74>)
 801264c:	f240 326d 	movw	r2, #877	; 0x36d
 8012650:	4917      	ldr	r1, [pc, #92]	; (80126b0 <netif_issue_reports+0x78>)
 8012652:	4818      	ldr	r0, [pc, #96]	; (80126b4 <netif_issue_reports+0x7c>)
 8012654:	f00a fab8 	bl	801cbc8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801265e:	f003 0304 	and.w	r3, r3, #4
 8012662:	2b00      	cmp	r3, #0
 8012664:	d01e      	beq.n	80126a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801266c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012670:	2b00      	cmp	r3, #0
 8012672:	d017      	beq.n	80126a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012674:	78fb      	ldrb	r3, [r7, #3]
 8012676:	f003 0301 	and.w	r3, r3, #1
 801267a:	2b00      	cmp	r3, #0
 801267c:	d013      	beq.n	80126a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	3304      	adds	r3, #4
 8012682:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012684:	2b00      	cmp	r3, #0
 8012686:	d00e      	beq.n	80126a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801268e:	f003 0308 	and.w	r3, r3, #8
 8012692:	2b00      	cmp	r3, #0
 8012694:	d007      	beq.n	80126a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	3304      	adds	r3, #4
 801269a:	4619      	mov	r1, r3
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f008 fcc5 	bl	801b02c <etharp_request>
 80126a2:	e000      	b.n	80126a6 <netif_issue_reports+0x6e>
    return;
 80126a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80126a6:	3708      	adds	r7, #8
 80126a8:	46bd      	mov	sp, r7
 80126aa:	bd80      	pop	{r7, pc}
 80126ac:	0801e9f8 	.word	0x0801e9f8
 80126b0:	0801eb9c 	.word	0x0801eb9c
 80126b4:	0801ea48 	.word	0x0801ea48

080126b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d107      	bne.n	80126d6 <netif_set_down+0x1e>
 80126c6:	4b12      	ldr	r3, [pc, #72]	; (8012710 <netif_set_down+0x58>)
 80126c8:	f240 329b 	movw	r2, #923	; 0x39b
 80126cc:	4911      	ldr	r1, [pc, #68]	; (8012714 <netif_set_down+0x5c>)
 80126ce:	4812      	ldr	r0, [pc, #72]	; (8012718 <netif_set_down+0x60>)
 80126d0:	f00a fa7a 	bl	801cbc8 <iprintf>
 80126d4:	e019      	b.n	801270a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126dc:	f003 0301 	and.w	r3, r3, #1
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d012      	beq.n	801270a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126ea:	f023 0301 	bic.w	r3, r3, #1
 80126ee:	b2da      	uxtb	r2, r3
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80126fc:	f003 0308 	and.w	r3, r3, #8
 8012700:	2b00      	cmp	r3, #0
 8012702:	d002      	beq.n	801270a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f008 f84f 	bl	801a7a8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801270a:	3708      	adds	r7, #8
 801270c:	46bd      	mov	sp, r7
 801270e:	bd80      	pop	{r7, pc}
 8012710:	0801e9f8 	.word	0x0801e9f8
 8012714:	0801ebc0 	.word	0x0801ebc0
 8012718:	0801ea48 	.word	0x0801ea48

0801271c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b082      	sub	sp, #8
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d107      	bne.n	801273a <netif_set_link_up+0x1e>
 801272a:	4b13      	ldr	r3, [pc, #76]	; (8012778 <netif_set_link_up+0x5c>)
 801272c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012730:	4912      	ldr	r1, [pc, #72]	; (801277c <netif_set_link_up+0x60>)
 8012732:	4813      	ldr	r0, [pc, #76]	; (8012780 <netif_set_link_up+0x64>)
 8012734:	f00a fa48 	bl	801cbc8 <iprintf>
 8012738:	e01b      	b.n	8012772 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012740:	f003 0304 	and.w	r3, r3, #4
 8012744:	2b00      	cmp	r3, #0
 8012746:	d114      	bne.n	8012772 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801274e:	f043 0304 	orr.w	r3, r3, #4
 8012752:	b2da      	uxtb	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801275a:	2103      	movs	r1, #3
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f7ff ff6b 	bl	8012638 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	69db      	ldr	r3, [r3, #28]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d003      	beq.n	8012772 <netif_set_link_up+0x56>
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	69db      	ldr	r3, [r3, #28]
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	0801e9f8 	.word	0x0801e9f8
 801277c:	0801ebe0 	.word	0x0801ebe0
 8012780:	0801ea48 	.word	0x0801ea48

08012784 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d107      	bne.n	80127a2 <netif_set_link_down+0x1e>
 8012792:	4b11      	ldr	r3, [pc, #68]	; (80127d8 <netif_set_link_down+0x54>)
 8012794:	f240 4206 	movw	r2, #1030	; 0x406
 8012798:	4910      	ldr	r1, [pc, #64]	; (80127dc <netif_set_link_down+0x58>)
 801279a:	4811      	ldr	r0, [pc, #68]	; (80127e0 <netif_set_link_down+0x5c>)
 801279c:	f00a fa14 	bl	801cbc8 <iprintf>
 80127a0:	e017      	b.n	80127d2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127a8:	f003 0304 	and.w	r3, r3, #4
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d010      	beq.n	80127d2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80127b6:	f023 0304 	bic.w	r3, r3, #4
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	69db      	ldr	r3, [r3, #28]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d003      	beq.n	80127d2 <netif_set_link_down+0x4e>
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	69db      	ldr	r3, [r3, #28]
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80127d2:	3708      	adds	r7, #8
 80127d4:	46bd      	mov	sp, r7
 80127d6:	bd80      	pop	{r7, pc}
 80127d8:	0801e9f8 	.word	0x0801e9f8
 80127dc:	0801ec04 	.word	0x0801ec04
 80127e0:	0801ea48 	.word	0x0801ea48

080127e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	61da      	str	r2, [r3, #28]
  }
}
 80127fa:	bf00      	nop
 80127fc:	370c      	adds	r7, #12
 80127fe:	46bd      	mov	sp, r7
 8012800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012804:	4770      	bx	lr

08012806 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012806:	b480      	push	{r7}
 8012808:	b085      	sub	sp, #20
 801280a:	af00      	add	r7, sp, #0
 801280c:	60f8      	str	r0, [r7, #12]
 801280e:	60b9      	str	r1, [r7, #8]
 8012810:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012812:	f06f 030b 	mvn.w	r3, #11
}
 8012816:	4618      	mov	r0, r3
 8012818:	3714      	adds	r7, #20
 801281a:	46bd      	mov	sp, r7
 801281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012820:	4770      	bx	lr
	...

08012824 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012824:	b480      	push	{r7}
 8012826:	b085      	sub	sp, #20
 8012828:	af00      	add	r7, sp, #0
 801282a:	4603      	mov	r3, r0
 801282c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801282e:	79fb      	ldrb	r3, [r7, #7]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d013      	beq.n	801285c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012834:	4b0d      	ldr	r3, [pc, #52]	; (801286c <netif_get_by_index+0x48>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	60fb      	str	r3, [r7, #12]
 801283a:	e00c      	b.n	8012856 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012842:	3301      	adds	r3, #1
 8012844:	b2db      	uxtb	r3, r3
 8012846:	79fa      	ldrb	r2, [r7, #7]
 8012848:	429a      	cmp	r2, r3
 801284a:	d101      	bne.n	8012850 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	e006      	b.n	801285e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	60fb      	str	r3, [r7, #12]
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d1ef      	bne.n	801283c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801285c:	2300      	movs	r3, #0
}
 801285e:	4618      	mov	r0, r3
 8012860:	3714      	adds	r7, #20
 8012862:	46bd      	mov	sp, r7
 8012864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop
 801286c:	2000bda4 	.word	0x2000bda4

08012870 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b082      	sub	sp, #8
 8012874:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012876:	f00a f943 	bl	801cb00 <sys_arch_protect>
 801287a:	6038      	str	r0, [r7, #0]
 801287c:	4b0d      	ldr	r3, [pc, #52]	; (80128b4 <pbuf_free_ooseq+0x44>)
 801287e:	2200      	movs	r2, #0
 8012880:	701a      	strb	r2, [r3, #0]
 8012882:	6838      	ldr	r0, [r7, #0]
 8012884:	f00a f94a 	bl	801cb1c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012888:	4b0b      	ldr	r3, [pc, #44]	; (80128b8 <pbuf_free_ooseq+0x48>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	607b      	str	r3, [r7, #4]
 801288e:	e00a      	b.n	80128a6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012894:	2b00      	cmp	r3, #0
 8012896:	d003      	beq.n	80128a0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012898:	6878      	ldr	r0, [r7, #4]
 801289a:	f002 fd49 	bl	8015330 <tcp_free_ooseq>
      return;
 801289e:	e005      	b.n	80128ac <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	607b      	str	r3, [r7, #4]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d1f1      	bne.n	8012890 <pbuf_free_ooseq+0x20>
    }
  }
}
 80128ac:	3708      	adds	r7, #8
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	2000bdac 	.word	0x2000bdac
 80128b8:	2000bdb4 	.word	0x2000bdb4

080128bc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80128c4:	f7ff ffd4 	bl	8012870 <pbuf_free_ooseq>
}
 80128c8:	bf00      	nop
 80128ca:	3708      	adds	r7, #8
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b082      	sub	sp, #8
 80128d4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80128d6:	f00a f913 	bl	801cb00 <sys_arch_protect>
 80128da:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80128dc:	4b0f      	ldr	r3, [pc, #60]	; (801291c <pbuf_pool_is_empty+0x4c>)
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80128e2:	4b0e      	ldr	r3, [pc, #56]	; (801291c <pbuf_pool_is_empty+0x4c>)
 80128e4:	2201      	movs	r2, #1
 80128e6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f00a f917 	bl	801cb1c <sys_arch_unprotect>

  if (!queued) {
 80128ee:	78fb      	ldrb	r3, [r7, #3]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10f      	bne.n	8012914 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80128f4:	2100      	movs	r1, #0
 80128f6:	480a      	ldr	r0, [pc, #40]	; (8012920 <pbuf_pool_is_empty+0x50>)
 80128f8:	f7fe fd1c 	bl	8011334 <tcpip_try_callback>
 80128fc:	4603      	mov	r3, r0
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d008      	beq.n	8012914 <pbuf_pool_is_empty+0x44>
 8012902:	f00a f8fd 	bl	801cb00 <sys_arch_protect>
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	4b04      	ldr	r3, [pc, #16]	; (801291c <pbuf_pool_is_empty+0x4c>)
 801290a:	2200      	movs	r2, #0
 801290c:	701a      	strb	r2, [r3, #0]
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f00a f904 	bl	801cb1c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012914:	bf00      	nop
 8012916:	3708      	adds	r7, #8
 8012918:	46bd      	mov	sp, r7
 801291a:	bd80      	pop	{r7, pc}
 801291c:	2000bdac 	.word	0x2000bdac
 8012920:	080128bd 	.word	0x080128bd

08012924 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012924:	b480      	push	{r7}
 8012926:	b085      	sub	sp, #20
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	4611      	mov	r1, r2
 8012930:	461a      	mov	r2, r3
 8012932:	460b      	mov	r3, r1
 8012934:	80fb      	strh	r3, [r7, #6]
 8012936:	4613      	mov	r3, r2
 8012938:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2200      	movs	r2, #0
 801293e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	68ba      	ldr	r2, [r7, #8]
 8012944:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	88fa      	ldrh	r2, [r7, #6]
 801294a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	88ba      	ldrh	r2, [r7, #4]
 8012950:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012952:	8b3b      	ldrh	r3, [r7, #24]
 8012954:	b2da      	uxtb	r2, r3
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	7f3a      	ldrb	r2, [r7, #28]
 801295e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2201      	movs	r2, #1
 8012964:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2200      	movs	r2, #0
 801296a:	73da      	strb	r2, [r3, #15]
}
 801296c:	bf00      	nop
 801296e:	3714      	adds	r7, #20
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b08c      	sub	sp, #48	; 0x30
 801297c:	af02      	add	r7, sp, #8
 801297e:	4603      	mov	r3, r0
 8012980:	71fb      	strb	r3, [r7, #7]
 8012982:	460b      	mov	r3, r1
 8012984:	80bb      	strh	r3, [r7, #4]
 8012986:	4613      	mov	r3, r2
 8012988:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801298a:	79fb      	ldrb	r3, [r7, #7]
 801298c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801298e:	887b      	ldrh	r3, [r7, #2]
 8012990:	2b41      	cmp	r3, #65	; 0x41
 8012992:	d00b      	beq.n	80129ac <pbuf_alloc+0x34>
 8012994:	2b41      	cmp	r3, #65	; 0x41
 8012996:	dc02      	bgt.n	801299e <pbuf_alloc+0x26>
 8012998:	2b01      	cmp	r3, #1
 801299a:	d007      	beq.n	80129ac <pbuf_alloc+0x34>
 801299c:	e0c2      	b.n	8012b24 <pbuf_alloc+0x1ac>
 801299e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80129a2:	d00b      	beq.n	80129bc <pbuf_alloc+0x44>
 80129a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80129a8:	d070      	beq.n	8012a8c <pbuf_alloc+0x114>
 80129aa:	e0bb      	b.n	8012b24 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80129ac:	887a      	ldrh	r2, [r7, #2]
 80129ae:	88bb      	ldrh	r3, [r7, #4]
 80129b0:	4619      	mov	r1, r3
 80129b2:	2000      	movs	r0, #0
 80129b4:	f000 f8d2 	bl	8012b5c <pbuf_alloc_reference>
 80129b8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80129ba:	e0bd      	b.n	8012b38 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80129bc:	2300      	movs	r3, #0
 80129be:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80129c0:	2300      	movs	r3, #0
 80129c2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80129c4:	88bb      	ldrh	r3, [r7, #4]
 80129c6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80129c8:	200c      	movs	r0, #12
 80129ca:	f7ff fb9f 	bl	801210c <memp_malloc>
 80129ce:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d109      	bne.n	80129ea <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 80129d6:	f7ff ff7b 	bl	80128d0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80129da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d002      	beq.n	80129e6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 80129e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129e2:	f000 faa9 	bl	8012f38 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80129e6:	2300      	movs	r3, #0
 80129e8:	e0a7      	b.n	8012b3a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80129ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129ec:	3303      	adds	r3, #3
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	f023 0303 	bic.w	r3, r3, #3
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80129fa:	b29b      	uxth	r3, r3
 80129fc:	8b7a      	ldrh	r2, [r7, #26]
 80129fe:	4293      	cmp	r3, r2
 8012a00:	bf28      	it	cs
 8012a02:	4613      	movcs	r3, r2
 8012a04:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012a06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a08:	3310      	adds	r3, #16
 8012a0a:	693a      	ldr	r2, [r7, #16]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	3303      	adds	r3, #3
 8012a10:	f023 0303 	bic.w	r3, r3, #3
 8012a14:	4618      	mov	r0, r3
 8012a16:	89f9      	ldrh	r1, [r7, #14]
 8012a18:	8b7a      	ldrh	r2, [r7, #26]
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	887b      	ldrh	r3, [r7, #2]
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	460b      	mov	r3, r1
 8012a24:	4601      	mov	r1, r0
 8012a26:	6938      	ldr	r0, [r7, #16]
 8012a28:	f7ff ff7c 	bl	8012924 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	f003 0303 	and.w	r3, r3, #3
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d006      	beq.n	8012a46 <pbuf_alloc+0xce>
 8012a38:	4b42      	ldr	r3, [pc, #264]	; (8012b44 <pbuf_alloc+0x1cc>)
 8012a3a:	f240 1201 	movw	r2, #257	; 0x101
 8012a3e:	4942      	ldr	r1, [pc, #264]	; (8012b48 <pbuf_alloc+0x1d0>)
 8012a40:	4842      	ldr	r0, [pc, #264]	; (8012b4c <pbuf_alloc+0x1d4>)
 8012a42:	f00a f8c1 	bl	801cbc8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012a46:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a48:	3303      	adds	r3, #3
 8012a4a:	f023 0303 	bic.w	r3, r3, #3
 8012a4e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012a52:	d106      	bne.n	8012a62 <pbuf_alloc+0xea>
 8012a54:	4b3b      	ldr	r3, [pc, #236]	; (8012b44 <pbuf_alloc+0x1cc>)
 8012a56:	f240 1203 	movw	r2, #259	; 0x103
 8012a5a:	493d      	ldr	r1, [pc, #244]	; (8012b50 <pbuf_alloc+0x1d8>)
 8012a5c:	483b      	ldr	r0, [pc, #236]	; (8012b4c <pbuf_alloc+0x1d4>)
 8012a5e:	f00a f8b3 	bl	801cbc8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d102      	bne.n	8012a6e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8012a6c:	e002      	b.n	8012a74 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	693a      	ldr	r2, [r7, #16]
 8012a72:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012a78:	8b7a      	ldrh	r2, [r7, #26]
 8012a7a:	89fb      	ldrh	r3, [r7, #14]
 8012a7c:	1ad3      	subs	r3, r2, r3
 8012a7e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012a80:	2300      	movs	r3, #0
 8012a82:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012a84:	8b7b      	ldrh	r3, [r7, #26]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d19e      	bne.n	80129c8 <pbuf_alloc+0x50>
      break;
 8012a8a:	e055      	b.n	8012b38 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012a8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a8e:	3303      	adds	r3, #3
 8012a90:	b29b      	uxth	r3, r3
 8012a92:	f023 0303 	bic.w	r3, r3, #3
 8012a96:	b29a      	uxth	r2, r3
 8012a98:	88bb      	ldrh	r3, [r7, #4]
 8012a9a:	3303      	adds	r3, #3
 8012a9c:	b29b      	uxth	r3, r3
 8012a9e:	f023 0303 	bic.w	r3, r3, #3
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	4413      	add	r3, r2
 8012aa6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012aa8:	8b3b      	ldrh	r3, [r7, #24]
 8012aaa:	3310      	adds	r3, #16
 8012aac:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012aae:	8b3a      	ldrh	r2, [r7, #24]
 8012ab0:	88bb      	ldrh	r3, [r7, #4]
 8012ab2:	3303      	adds	r3, #3
 8012ab4:	f023 0303 	bic.w	r3, r3, #3
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d306      	bcc.n	8012aca <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012abc:	8afa      	ldrh	r2, [r7, #22]
 8012abe:	88bb      	ldrh	r3, [r7, #4]
 8012ac0:	3303      	adds	r3, #3
 8012ac2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012ac6:	429a      	cmp	r2, r3
 8012ac8:	d201      	bcs.n	8012ace <pbuf_alloc+0x156>
        return NULL;
 8012aca:	2300      	movs	r3, #0
 8012acc:	e035      	b.n	8012b3a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012ace:	8afb      	ldrh	r3, [r7, #22]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7ff f977 	bl	8011dc4 <mem_malloc>
 8012ad6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8012ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d101      	bne.n	8012ae2 <pbuf_alloc+0x16a>
        return NULL;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	e02b      	b.n	8012b3a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ae4:	3310      	adds	r3, #16
 8012ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ae8:	4413      	add	r3, r2
 8012aea:	3303      	adds	r3, #3
 8012aec:	f023 0303 	bic.w	r3, r3, #3
 8012af0:	4618      	mov	r0, r3
 8012af2:	88b9      	ldrh	r1, [r7, #4]
 8012af4:	88ba      	ldrh	r2, [r7, #4]
 8012af6:	2300      	movs	r3, #0
 8012af8:	9301      	str	r3, [sp, #4]
 8012afa:	887b      	ldrh	r3, [r7, #2]
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	460b      	mov	r3, r1
 8012b00:	4601      	mov	r1, r0
 8012b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b04:	f7ff ff0e 	bl	8012924 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0a:	685b      	ldr	r3, [r3, #4]
 8012b0c:	f003 0303 	and.w	r3, r3, #3
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d010      	beq.n	8012b36 <pbuf_alloc+0x1be>
 8012b14:	4b0b      	ldr	r3, [pc, #44]	; (8012b44 <pbuf_alloc+0x1cc>)
 8012b16:	f240 1223 	movw	r2, #291	; 0x123
 8012b1a:	490e      	ldr	r1, [pc, #56]	; (8012b54 <pbuf_alloc+0x1dc>)
 8012b1c:	480b      	ldr	r0, [pc, #44]	; (8012b4c <pbuf_alloc+0x1d4>)
 8012b1e:	f00a f853 	bl	801cbc8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012b22:	e008      	b.n	8012b36 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012b24:	4b07      	ldr	r3, [pc, #28]	; (8012b44 <pbuf_alloc+0x1cc>)
 8012b26:	f240 1227 	movw	r2, #295	; 0x127
 8012b2a:	490b      	ldr	r1, [pc, #44]	; (8012b58 <pbuf_alloc+0x1e0>)
 8012b2c:	4807      	ldr	r0, [pc, #28]	; (8012b4c <pbuf_alloc+0x1d4>)
 8012b2e:	f00a f84b 	bl	801cbc8 <iprintf>
      return NULL;
 8012b32:	2300      	movs	r3, #0
 8012b34:	e001      	b.n	8012b3a <pbuf_alloc+0x1c2>
      break;
 8012b36:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	3728      	adds	r7, #40	; 0x28
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	0801ec28 	.word	0x0801ec28
 8012b48:	0801ec58 	.word	0x0801ec58
 8012b4c:	0801ec88 	.word	0x0801ec88
 8012b50:	0801ecb0 	.word	0x0801ecb0
 8012b54:	0801ece4 	.word	0x0801ece4
 8012b58:	0801ed10 	.word	0x0801ed10

08012b5c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b086      	sub	sp, #24
 8012b60:	af02      	add	r7, sp, #8
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	460b      	mov	r3, r1
 8012b66:	807b      	strh	r3, [r7, #2]
 8012b68:	4613      	mov	r3, r2
 8012b6a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012b6c:	883b      	ldrh	r3, [r7, #0]
 8012b6e:	2b41      	cmp	r3, #65	; 0x41
 8012b70:	d009      	beq.n	8012b86 <pbuf_alloc_reference+0x2a>
 8012b72:	883b      	ldrh	r3, [r7, #0]
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	d006      	beq.n	8012b86 <pbuf_alloc_reference+0x2a>
 8012b78:	4b0f      	ldr	r3, [pc, #60]	; (8012bb8 <pbuf_alloc_reference+0x5c>)
 8012b7a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012b7e:	490f      	ldr	r1, [pc, #60]	; (8012bbc <pbuf_alloc_reference+0x60>)
 8012b80:	480f      	ldr	r0, [pc, #60]	; (8012bc0 <pbuf_alloc_reference+0x64>)
 8012b82:	f00a f821 	bl	801cbc8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012b86:	200b      	movs	r0, #11
 8012b88:	f7ff fac0 	bl	801210c <memp_malloc>
 8012b8c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012b94:	2300      	movs	r3, #0
 8012b96:	e00b      	b.n	8012bb0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012b98:	8879      	ldrh	r1, [r7, #2]
 8012b9a:	887a      	ldrh	r2, [r7, #2]
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	9301      	str	r3, [sp, #4]
 8012ba0:	883b      	ldrh	r3, [r7, #0]
 8012ba2:	9300      	str	r3, [sp, #0]
 8012ba4:	460b      	mov	r3, r1
 8012ba6:	6879      	ldr	r1, [r7, #4]
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f7ff febb 	bl	8012924 <pbuf_init_alloced_pbuf>
  return p;
 8012bae:	68fb      	ldr	r3, [r7, #12]
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	0801ec28 	.word	0x0801ec28
 8012bbc:	0801ed2c 	.word	0x0801ed2c
 8012bc0:	0801ec88 	.word	0x0801ec88

08012bc4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b088      	sub	sp, #32
 8012bc8:	af02      	add	r7, sp, #8
 8012bca:	607b      	str	r3, [r7, #4]
 8012bcc:	4603      	mov	r3, r0
 8012bce:	73fb      	strb	r3, [r7, #15]
 8012bd0:	460b      	mov	r3, r1
 8012bd2:	81bb      	strh	r3, [r7, #12]
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012bd8:	7bfb      	ldrb	r3, [r7, #15]
 8012bda:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012bdc:	8a7b      	ldrh	r3, [r7, #18]
 8012bde:	3303      	adds	r3, #3
 8012be0:	f023 0203 	bic.w	r2, r3, #3
 8012be4:	89bb      	ldrh	r3, [r7, #12]
 8012be6:	441a      	add	r2, r3
 8012be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012bea:	429a      	cmp	r2, r3
 8012bec:	d901      	bls.n	8012bf2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	e018      	b.n	8012c24 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012bf2:	6a3b      	ldr	r3, [r7, #32]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d007      	beq.n	8012c08 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012bf8:	8a7b      	ldrh	r3, [r7, #18]
 8012bfa:	3303      	adds	r3, #3
 8012bfc:	f023 0303 	bic.w	r3, r3, #3
 8012c00:	6a3a      	ldr	r2, [r7, #32]
 8012c02:	4413      	add	r3, r2
 8012c04:	617b      	str	r3, [r7, #20]
 8012c06:	e001      	b.n	8012c0c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012c08:	2300      	movs	r3, #0
 8012c0a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	89b9      	ldrh	r1, [r7, #12]
 8012c10:	89ba      	ldrh	r2, [r7, #12]
 8012c12:	2302      	movs	r3, #2
 8012c14:	9301      	str	r3, [sp, #4]
 8012c16:	897b      	ldrh	r3, [r7, #10]
 8012c18:	9300      	str	r3, [sp, #0]
 8012c1a:	460b      	mov	r3, r1
 8012c1c:	6979      	ldr	r1, [r7, #20]
 8012c1e:	f7ff fe81 	bl	8012924 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012c22:	687b      	ldr	r3, [r7, #4]
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3718      	adds	r7, #24
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b084      	sub	sp, #16
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
 8012c34:	460b      	mov	r3, r1
 8012c36:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d106      	bne.n	8012c4c <pbuf_realloc+0x20>
 8012c3e:	4b3a      	ldr	r3, [pc, #232]	; (8012d28 <pbuf_realloc+0xfc>)
 8012c40:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012c44:	4939      	ldr	r1, [pc, #228]	; (8012d2c <pbuf_realloc+0x100>)
 8012c46:	483a      	ldr	r0, [pc, #232]	; (8012d30 <pbuf_realloc+0x104>)
 8012c48:	f009 ffbe 	bl	801cbc8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	891b      	ldrh	r3, [r3, #8]
 8012c50:	887a      	ldrh	r2, [r7, #2]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d264      	bcs.n	8012d20 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	891a      	ldrh	r2, [r3, #8]
 8012c5a:	887b      	ldrh	r3, [r7, #2]
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012c60:	887b      	ldrh	r3, [r7, #2]
 8012c62:	817b      	strh	r3, [r7, #10]
  q = p;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012c68:	e018      	b.n	8012c9c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	895b      	ldrh	r3, [r3, #10]
 8012c6e:	897a      	ldrh	r2, [r7, #10]
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	891a      	ldrh	r2, [r3, #8]
 8012c78:	893b      	ldrh	r3, [r7, #8]
 8012c7a:	1ad3      	subs	r3, r2, r3
 8012c7c:	b29a      	uxth	r2, r3
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d106      	bne.n	8012c9c <pbuf_realloc+0x70>
 8012c8e:	4b26      	ldr	r3, [pc, #152]	; (8012d28 <pbuf_realloc+0xfc>)
 8012c90:	f240 12af 	movw	r2, #431	; 0x1af
 8012c94:	4927      	ldr	r1, [pc, #156]	; (8012d34 <pbuf_realloc+0x108>)
 8012c96:	4826      	ldr	r0, [pc, #152]	; (8012d30 <pbuf_realloc+0x104>)
 8012c98:	f009 ff96 	bl	801cbc8 <iprintf>
  while (rem_len > q->len) {
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	895b      	ldrh	r3, [r3, #10]
 8012ca0:	897a      	ldrh	r2, [r7, #10]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d8e1      	bhi.n	8012c6a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	7b1b      	ldrb	r3, [r3, #12]
 8012caa:	f003 030f 	and.w	r3, r3, #15
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d122      	bne.n	8012cf8 <pbuf_realloc+0xcc>
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	895b      	ldrh	r3, [r3, #10]
 8012cb6:	897a      	ldrh	r2, [r7, #10]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d01d      	beq.n	8012cf8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	7b5b      	ldrb	r3, [r3, #13]
 8012cc0:	f003 0302 	and.w	r3, r3, #2
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d117      	bne.n	8012cf8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	461a      	mov	r2, r3
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	1ad3      	subs	r3, r2, r3
 8012cd2:	b29a      	uxth	r2, r3
 8012cd4:	897b      	ldrh	r3, [r7, #10]
 8012cd6:	4413      	add	r3, r2
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	4619      	mov	r1, r3
 8012cdc:	68f8      	ldr	r0, [r7, #12]
 8012cde:	f7fe ff67 	bl	8011bb0 <mem_trim>
 8012ce2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d106      	bne.n	8012cf8 <pbuf_realloc+0xcc>
 8012cea:	4b0f      	ldr	r3, [pc, #60]	; (8012d28 <pbuf_realloc+0xfc>)
 8012cec:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012cf0:	4911      	ldr	r1, [pc, #68]	; (8012d38 <pbuf_realloc+0x10c>)
 8012cf2:	480f      	ldr	r0, [pc, #60]	; (8012d30 <pbuf_realloc+0x104>)
 8012cf4:	f009 ff68 	bl	801cbc8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	897a      	ldrh	r2, [r7, #10]
 8012cfc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	895a      	ldrh	r2, [r3, #10]
 8012d02:	68fb      	ldr	r3, [r7, #12]
 8012d04:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d004      	beq.n	8012d18 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f000 f910 	bl	8012f38 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	601a      	str	r2, [r3, #0]
 8012d1e:	e000      	b.n	8012d22 <pbuf_realloc+0xf6>
    return;
 8012d20:	bf00      	nop

}
 8012d22:	3710      	adds	r7, #16
 8012d24:	46bd      	mov	sp, r7
 8012d26:	bd80      	pop	{r7, pc}
 8012d28:	0801ec28 	.word	0x0801ec28
 8012d2c:	0801ed40 	.word	0x0801ed40
 8012d30:	0801ec88 	.word	0x0801ec88
 8012d34:	0801ed58 	.word	0x0801ed58
 8012d38:	0801ed70 	.word	0x0801ed70

08012d3c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b086      	sub	sp, #24
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	60f8      	str	r0, [r7, #12]
 8012d44:	60b9      	str	r1, [r7, #8]
 8012d46:	4613      	mov	r3, r2
 8012d48:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d106      	bne.n	8012d5e <pbuf_add_header_impl+0x22>
 8012d50:	4b2b      	ldr	r3, [pc, #172]	; (8012e00 <pbuf_add_header_impl+0xc4>)
 8012d52:	f240 12df 	movw	r2, #479	; 0x1df
 8012d56:	492b      	ldr	r1, [pc, #172]	; (8012e04 <pbuf_add_header_impl+0xc8>)
 8012d58:	482b      	ldr	r0, [pc, #172]	; (8012e08 <pbuf_add_header_impl+0xcc>)
 8012d5a:	f009 ff35 	bl	801cbc8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d003      	beq.n	8012d6c <pbuf_add_header_impl+0x30>
 8012d64:	68bb      	ldr	r3, [r7, #8]
 8012d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d6a:	d301      	bcc.n	8012d70 <pbuf_add_header_impl+0x34>
    return 1;
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	e043      	b.n	8012df8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	2b00      	cmp	r3, #0
 8012d74:	d101      	bne.n	8012d7a <pbuf_add_header_impl+0x3e>
    return 0;
 8012d76:	2300      	movs	r3, #0
 8012d78:	e03e      	b.n	8012df8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012d7a:	68bb      	ldr	r3, [r7, #8]
 8012d7c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	891a      	ldrh	r2, [r3, #8]
 8012d82:	8a7b      	ldrh	r3, [r7, #18]
 8012d84:	4413      	add	r3, r2
 8012d86:	b29b      	uxth	r3, r3
 8012d88:	8a7a      	ldrh	r2, [r7, #18]
 8012d8a:	429a      	cmp	r2, r3
 8012d8c:	d901      	bls.n	8012d92 <pbuf_add_header_impl+0x56>
    return 1;
 8012d8e:	2301      	movs	r3, #1
 8012d90:	e032      	b.n	8012df8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	7b1b      	ldrb	r3, [r3, #12]
 8012d96:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012d98:	8a3b      	ldrh	r3, [r7, #16]
 8012d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d00c      	beq.n	8012dbc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	685a      	ldr	r2, [r3, #4]
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	425b      	negs	r3, r3
 8012daa:	4413      	add	r3, r2
 8012dac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	3310      	adds	r3, #16
 8012db2:	697a      	ldr	r2, [r7, #20]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d20d      	bcs.n	8012dd4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012db8:	2301      	movs	r3, #1
 8012dba:	e01d      	b.n	8012df8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012dbc:	79fb      	ldrb	r3, [r7, #7]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d006      	beq.n	8012dd0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	685a      	ldr	r2, [r3, #4]
 8012dc6:	68bb      	ldr	r3, [r7, #8]
 8012dc8:	425b      	negs	r3, r3
 8012dca:	4413      	add	r3, r2
 8012dcc:	617b      	str	r3, [r7, #20]
 8012dce:	e001      	b.n	8012dd4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012dd0:	2301      	movs	r3, #1
 8012dd2:	e011      	b.n	8012df8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	697a      	ldr	r2, [r7, #20]
 8012dd8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	895a      	ldrh	r2, [r3, #10]
 8012dde:	8a7b      	ldrh	r3, [r7, #18]
 8012de0:	4413      	add	r3, r2
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	891a      	ldrh	r2, [r3, #8]
 8012dec:	8a7b      	ldrh	r3, [r7, #18]
 8012dee:	4413      	add	r3, r2
 8012df0:	b29a      	uxth	r2, r3
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	811a      	strh	r2, [r3, #8]


  return 0;
 8012df6:	2300      	movs	r3, #0
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3718      	adds	r7, #24
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	0801ec28 	.word	0x0801ec28
 8012e04:	0801ed8c 	.word	0x0801ed8c
 8012e08:	0801ec88 	.word	0x0801ec88

08012e0c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012e16:	2200      	movs	r2, #0
 8012e18:	6839      	ldr	r1, [r7, #0]
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7ff ff8e 	bl	8012d3c <pbuf_add_header_impl>
 8012e20:	4603      	mov	r3, r0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
	...

08012e2c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b084      	sub	sp, #16
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d106      	bne.n	8012e4a <pbuf_remove_header+0x1e>
 8012e3c:	4b20      	ldr	r3, [pc, #128]	; (8012ec0 <pbuf_remove_header+0x94>)
 8012e3e:	f240 224b 	movw	r2, #587	; 0x24b
 8012e42:	4920      	ldr	r1, [pc, #128]	; (8012ec4 <pbuf_remove_header+0x98>)
 8012e44:	4820      	ldr	r0, [pc, #128]	; (8012ec8 <pbuf_remove_header+0x9c>)
 8012e46:	f009 febf 	bl	801cbc8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d003      	beq.n	8012e58 <pbuf_remove_header+0x2c>
 8012e50:	683b      	ldr	r3, [r7, #0]
 8012e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e56:	d301      	bcc.n	8012e5c <pbuf_remove_header+0x30>
    return 1;
 8012e58:	2301      	movs	r3, #1
 8012e5a:	e02c      	b.n	8012eb6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012e5c:	683b      	ldr	r3, [r7, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d101      	bne.n	8012e66 <pbuf_remove_header+0x3a>
    return 0;
 8012e62:	2300      	movs	r3, #0
 8012e64:	e027      	b.n	8012eb6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8012e66:	683b      	ldr	r3, [r7, #0]
 8012e68:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	895b      	ldrh	r3, [r3, #10]
 8012e6e:	89fa      	ldrh	r2, [r7, #14]
 8012e70:	429a      	cmp	r2, r3
 8012e72:	d908      	bls.n	8012e86 <pbuf_remove_header+0x5a>
 8012e74:	4b12      	ldr	r3, [pc, #72]	; (8012ec0 <pbuf_remove_header+0x94>)
 8012e76:	f240 2255 	movw	r2, #597	; 0x255
 8012e7a:	4914      	ldr	r1, [pc, #80]	; (8012ecc <pbuf_remove_header+0xa0>)
 8012e7c:	4812      	ldr	r0, [pc, #72]	; (8012ec8 <pbuf_remove_header+0x9c>)
 8012e7e:	f009 fea3 	bl	801cbc8 <iprintf>
 8012e82:	2301      	movs	r3, #1
 8012e84:	e017      	b.n	8012eb6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	685a      	ldr	r2, [r3, #4]
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	441a      	add	r2, r3
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	895a      	ldrh	r2, [r3, #10]
 8012e9c:	89fb      	ldrh	r3, [r7, #14]
 8012e9e:	1ad3      	subs	r3, r2, r3
 8012ea0:	b29a      	uxth	r2, r3
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	891a      	ldrh	r2, [r3, #8]
 8012eaa:	89fb      	ldrh	r3, [r7, #14]
 8012eac:	1ad3      	subs	r3, r2, r3
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8012eb4:	2300      	movs	r3, #0
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	0801ec28 	.word	0x0801ec28
 8012ec4:	0801ed8c 	.word	0x0801ed8c
 8012ec8:	0801ec88 	.word	0x0801ec88
 8012ecc:	0801ed98 	.word	0x0801ed98

08012ed0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
 8012ed6:	6078      	str	r0, [r7, #4]
 8012ed8:	460b      	mov	r3, r1
 8012eda:	807b      	strh	r3, [r7, #2]
 8012edc:	4613      	mov	r3, r2
 8012ede:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8012ee0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	da08      	bge.n	8012efa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012ee8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012eec:	425b      	negs	r3, r3
 8012eee:	4619      	mov	r1, r3
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7ff ff9b 	bl	8012e2c <pbuf_remove_header>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	e007      	b.n	8012f0a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012efa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012efe:	787a      	ldrb	r2, [r7, #1]
 8012f00:	4619      	mov	r1, r3
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7ff ff1a 	bl	8012d3c <pbuf_add_header_impl>
 8012f08:	4603      	mov	r3, r0
  }
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3708      	adds	r7, #8
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	bd80      	pop	{r7, pc}

08012f12 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8012f12:	b580      	push	{r7, lr}
 8012f14:	b082      	sub	sp, #8
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
 8012f1a:	460b      	mov	r3, r1
 8012f1c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8012f1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012f22:	2201      	movs	r2, #1
 8012f24:	4619      	mov	r1, r3
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f7ff ffd2 	bl	8012ed0 <pbuf_header_impl>
 8012f2c:	4603      	mov	r3, r0
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3708      	adds	r7, #8
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}
	...

08012f38 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b088      	sub	sp, #32
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d10b      	bne.n	8012f5e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d106      	bne.n	8012f5a <pbuf_free+0x22>
 8012f4c:	4b3b      	ldr	r3, [pc, #236]	; (801303c <pbuf_free+0x104>)
 8012f4e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012f52:	493b      	ldr	r1, [pc, #236]	; (8013040 <pbuf_free+0x108>)
 8012f54:	483b      	ldr	r0, [pc, #236]	; (8013044 <pbuf_free+0x10c>)
 8012f56:	f009 fe37 	bl	801cbc8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	e069      	b.n	8013032 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8012f62:	e062      	b.n	801302a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8012f64:	f009 fdcc 	bl	801cb00 <sys_arch_protect>
 8012f68:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	7b9b      	ldrb	r3, [r3, #14]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d106      	bne.n	8012f80 <pbuf_free+0x48>
 8012f72:	4b32      	ldr	r3, [pc, #200]	; (801303c <pbuf_free+0x104>)
 8012f74:	f240 22f1 	movw	r2, #753	; 0x2f1
 8012f78:	4933      	ldr	r1, [pc, #204]	; (8013048 <pbuf_free+0x110>)
 8012f7a:	4832      	ldr	r0, [pc, #200]	; (8013044 <pbuf_free+0x10c>)
 8012f7c:	f009 fe24 	bl	801cbc8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	7b9b      	ldrb	r3, [r3, #14]
 8012f84:	3b01      	subs	r3, #1
 8012f86:	b2da      	uxtb	r2, r3
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	739a      	strb	r2, [r3, #14]
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	7b9b      	ldrb	r3, [r3, #14]
 8012f90:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8012f92:	69b8      	ldr	r0, [r7, #24]
 8012f94:	f009 fdc2 	bl	801cb1c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8012f98:	7dfb      	ldrb	r3, [r7, #23]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d143      	bne.n	8013026 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	7b1b      	ldrb	r3, [r3, #12]
 8012fa8:	f003 030f 	and.w	r3, r3, #15
 8012fac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	7b5b      	ldrb	r3, [r3, #13]
 8012fb2:	f003 0302 	and.w	r3, r3, #2
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d011      	beq.n	8012fde <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	691b      	ldr	r3, [r3, #16]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d106      	bne.n	8012fd4 <pbuf_free+0x9c>
 8012fc6:	4b1d      	ldr	r3, [pc, #116]	; (801303c <pbuf_free+0x104>)
 8012fc8:	f240 22ff 	movw	r2, #767	; 0x2ff
 8012fcc:	491f      	ldr	r1, [pc, #124]	; (801304c <pbuf_free+0x114>)
 8012fce:	481d      	ldr	r0, [pc, #116]	; (8013044 <pbuf_free+0x10c>)
 8012fd0:	f009 fdfa 	bl	801cbc8 <iprintf>
        pc->custom_free_function(p);
 8012fd4:	68bb      	ldr	r3, [r7, #8]
 8012fd6:	691b      	ldr	r3, [r3, #16]
 8012fd8:	6878      	ldr	r0, [r7, #4]
 8012fda:	4798      	blx	r3
 8012fdc:	e01d      	b.n	801301a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8012fde:	7bfb      	ldrb	r3, [r7, #15]
 8012fe0:	2b02      	cmp	r3, #2
 8012fe2:	d104      	bne.n	8012fee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012fe4:	6879      	ldr	r1, [r7, #4]
 8012fe6:	200c      	movs	r0, #12
 8012fe8:	f7ff f906 	bl	80121f8 <memp_free>
 8012fec:	e015      	b.n	801301a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8012fee:	7bfb      	ldrb	r3, [r7, #15]
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d104      	bne.n	8012ffe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012ff4:	6879      	ldr	r1, [r7, #4]
 8012ff6:	200b      	movs	r0, #11
 8012ff8:	f7ff f8fe 	bl	80121f8 <memp_free>
 8012ffc:	e00d      	b.n	801301a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8012ffe:	7bfb      	ldrb	r3, [r7, #15]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d103      	bne.n	801300c <pbuf_free+0xd4>
          mem_free(p);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7fe fd43 	bl	8011a90 <mem_free>
 801300a:	e006      	b.n	801301a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801300c:	4b0b      	ldr	r3, [pc, #44]	; (801303c <pbuf_free+0x104>)
 801300e:	f240 320f 	movw	r2, #783	; 0x30f
 8013012:	490f      	ldr	r1, [pc, #60]	; (8013050 <pbuf_free+0x118>)
 8013014:	480b      	ldr	r0, [pc, #44]	; (8013044 <pbuf_free+0x10c>)
 8013016:	f009 fdd7 	bl	801cbc8 <iprintf>
        }
      }
      count++;
 801301a:	7ffb      	ldrb	r3, [r7, #31]
 801301c:	3301      	adds	r3, #1
 801301e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013020:	693b      	ldr	r3, [r7, #16]
 8013022:	607b      	str	r3, [r7, #4]
 8013024:	e001      	b.n	801302a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013026:	2300      	movs	r3, #0
 8013028:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d199      	bne.n	8012f64 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013030:	7ffb      	ldrb	r3, [r7, #31]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3720      	adds	r7, #32
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	0801ec28 	.word	0x0801ec28
 8013040:	0801ed8c 	.word	0x0801ed8c
 8013044:	0801ec88 	.word	0x0801ec88
 8013048:	0801edb8 	.word	0x0801edb8
 801304c:	0801edd0 	.word	0x0801edd0
 8013050:	0801edf4 	.word	0x0801edf4

08013054 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013054:	b480      	push	{r7}
 8013056:	b085      	sub	sp, #20
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801305c:	2300      	movs	r3, #0
 801305e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013060:	e005      	b.n	801306e <pbuf_clen+0x1a>
    ++len;
 8013062:	89fb      	ldrh	r3, [r7, #14]
 8013064:	3301      	adds	r3, #1
 8013066:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d1f6      	bne.n	8013062 <pbuf_clen+0xe>
  }
  return len;
 8013074:	89fb      	ldrh	r3, [r7, #14]
}
 8013076:	4618      	mov	r0, r3
 8013078:	3714      	adds	r7, #20
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
	...

08013084 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b084      	sub	sp, #16
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d016      	beq.n	80130c0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013092:	f009 fd35 	bl	801cb00 <sys_arch_protect>
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	7b9b      	ldrb	r3, [r3, #14]
 801309c:	3301      	adds	r3, #1
 801309e:	b2da      	uxtb	r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	739a      	strb	r2, [r3, #14]
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f009 fd39 	bl	801cb1c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	7b9b      	ldrb	r3, [r3, #14]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d106      	bne.n	80130c0 <pbuf_ref+0x3c>
 80130b2:	4b05      	ldr	r3, [pc, #20]	; (80130c8 <pbuf_ref+0x44>)
 80130b4:	f240 3242 	movw	r2, #834	; 0x342
 80130b8:	4904      	ldr	r1, [pc, #16]	; (80130cc <pbuf_ref+0x48>)
 80130ba:	4805      	ldr	r0, [pc, #20]	; (80130d0 <pbuf_ref+0x4c>)
 80130bc:	f009 fd84 	bl	801cbc8 <iprintf>
  }
}
 80130c0:	bf00      	nop
 80130c2:	3710      	adds	r7, #16
 80130c4:	46bd      	mov	sp, r7
 80130c6:	bd80      	pop	{r7, pc}
 80130c8:	0801ec28 	.word	0x0801ec28
 80130cc:	0801ee08 	.word	0x0801ee08
 80130d0:	0801ec88 	.word	0x0801ec88

080130d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	6078      	str	r0, [r7, #4]
 80130dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d002      	beq.n	80130ea <pbuf_cat+0x16>
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d107      	bne.n	80130fa <pbuf_cat+0x26>
 80130ea:	4b20      	ldr	r3, [pc, #128]	; (801316c <pbuf_cat+0x98>)
 80130ec:	f240 325a 	movw	r2, #858	; 0x35a
 80130f0:	491f      	ldr	r1, [pc, #124]	; (8013170 <pbuf_cat+0x9c>)
 80130f2:	4820      	ldr	r0, [pc, #128]	; (8013174 <pbuf_cat+0xa0>)
 80130f4:	f009 fd68 	bl	801cbc8 <iprintf>
 80130f8:	e034      	b.n	8013164 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	60fb      	str	r3, [r7, #12]
 80130fe:	e00a      	b.n	8013116 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	891a      	ldrh	r2, [r3, #8]
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	891b      	ldrh	r3, [r3, #8]
 8013108:	4413      	add	r3, r2
 801310a:	b29a      	uxth	r2, r3
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	60fb      	str	r3, [r7, #12]
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d1f0      	bne.n	8013100 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	891a      	ldrh	r2, [r3, #8]
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	895b      	ldrh	r3, [r3, #10]
 8013126:	429a      	cmp	r2, r3
 8013128:	d006      	beq.n	8013138 <pbuf_cat+0x64>
 801312a:	4b10      	ldr	r3, [pc, #64]	; (801316c <pbuf_cat+0x98>)
 801312c:	f240 3262 	movw	r2, #866	; 0x362
 8013130:	4911      	ldr	r1, [pc, #68]	; (8013178 <pbuf_cat+0xa4>)
 8013132:	4810      	ldr	r0, [pc, #64]	; (8013174 <pbuf_cat+0xa0>)
 8013134:	f009 fd48 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d006      	beq.n	801314e <pbuf_cat+0x7a>
 8013140:	4b0a      	ldr	r3, [pc, #40]	; (801316c <pbuf_cat+0x98>)
 8013142:	f240 3263 	movw	r2, #867	; 0x363
 8013146:	490d      	ldr	r1, [pc, #52]	; (801317c <pbuf_cat+0xa8>)
 8013148:	480a      	ldr	r0, [pc, #40]	; (8013174 <pbuf_cat+0xa0>)
 801314a:	f009 fd3d 	bl	801cbc8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	891a      	ldrh	r2, [r3, #8]
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	891b      	ldrh	r3, [r3, #8]
 8013156:	4413      	add	r3, r2
 8013158:	b29a      	uxth	r2, r3
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	683a      	ldr	r2, [r7, #0]
 8013162:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013164:	3710      	adds	r7, #16
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
 801316a:	bf00      	nop
 801316c:	0801ec28 	.word	0x0801ec28
 8013170:	0801ee1c 	.word	0x0801ee1c
 8013174:	0801ec88 	.word	0x0801ec88
 8013178:	0801ee54 	.word	0x0801ee54
 801317c:	0801ee84 	.word	0x0801ee84

08013180 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b086      	sub	sp, #24
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801318a:	2300      	movs	r3, #0
 801318c:	617b      	str	r3, [r7, #20]
 801318e:	2300      	movs	r3, #0
 8013190:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d008      	beq.n	80131aa <pbuf_copy+0x2a>
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d005      	beq.n	80131aa <pbuf_copy+0x2a>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	891a      	ldrh	r2, [r3, #8]
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	891b      	ldrh	r3, [r3, #8]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d209      	bcs.n	80131be <pbuf_copy+0x3e>
 80131aa:	4b57      	ldr	r3, [pc, #348]	; (8013308 <pbuf_copy+0x188>)
 80131ac:	f240 32ca 	movw	r2, #970	; 0x3ca
 80131b0:	4956      	ldr	r1, [pc, #344]	; (801330c <pbuf_copy+0x18c>)
 80131b2:	4857      	ldr	r0, [pc, #348]	; (8013310 <pbuf_copy+0x190>)
 80131b4:	f009 fd08 	bl	801cbc8 <iprintf>
 80131b8:	f06f 030f 	mvn.w	r3, #15
 80131bc:	e09f      	b.n	80132fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	895b      	ldrh	r3, [r3, #10]
 80131c2:	461a      	mov	r2, r3
 80131c4:	697b      	ldr	r3, [r7, #20]
 80131c6:	1ad2      	subs	r2, r2, r3
 80131c8:	683b      	ldr	r3, [r7, #0]
 80131ca:	895b      	ldrh	r3, [r3, #10]
 80131cc:	4619      	mov	r1, r3
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	1acb      	subs	r3, r1, r3
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d306      	bcc.n	80131e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	895b      	ldrh	r3, [r3, #10]
 80131da:	461a      	mov	r2, r3
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	1ad3      	subs	r3, r2, r3
 80131e0:	60fb      	str	r3, [r7, #12]
 80131e2:	e005      	b.n	80131f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	895b      	ldrh	r3, [r3, #10]
 80131e8:	461a      	mov	r2, r3
 80131ea:	697b      	ldr	r3, [r7, #20]
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	685a      	ldr	r2, [r3, #4]
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	18d0      	adds	r0, r2, r3
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	685a      	ldr	r2, [r3, #4]
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	4413      	add	r3, r2
 8013200:	68fa      	ldr	r2, [r7, #12]
 8013202:	4619      	mov	r1, r3
 8013204:	f009 fccd 	bl	801cba2 <memcpy>
    offset_to += len;
 8013208:	697a      	ldr	r2, [r7, #20]
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	4413      	add	r3, r2
 801320e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013210:	693a      	ldr	r2, [r7, #16]
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	4413      	add	r3, r2
 8013216:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	895b      	ldrh	r3, [r3, #10]
 801321c:	461a      	mov	r2, r3
 801321e:	697b      	ldr	r3, [r7, #20]
 8013220:	4293      	cmp	r3, r2
 8013222:	d906      	bls.n	8013232 <pbuf_copy+0xb2>
 8013224:	4b38      	ldr	r3, [pc, #224]	; (8013308 <pbuf_copy+0x188>)
 8013226:	f240 32d9 	movw	r2, #985	; 0x3d9
 801322a:	493a      	ldr	r1, [pc, #232]	; (8013314 <pbuf_copy+0x194>)
 801322c:	4838      	ldr	r0, [pc, #224]	; (8013310 <pbuf_copy+0x190>)
 801322e:	f009 fccb 	bl	801cbc8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	895b      	ldrh	r3, [r3, #10]
 8013236:	461a      	mov	r2, r3
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	4293      	cmp	r3, r2
 801323c:	d906      	bls.n	801324c <pbuf_copy+0xcc>
 801323e:	4b32      	ldr	r3, [pc, #200]	; (8013308 <pbuf_copy+0x188>)
 8013240:	f240 32da 	movw	r2, #986	; 0x3da
 8013244:	4934      	ldr	r1, [pc, #208]	; (8013318 <pbuf_copy+0x198>)
 8013246:	4832      	ldr	r0, [pc, #200]	; (8013310 <pbuf_copy+0x190>)
 8013248:	f009 fcbe 	bl	801cbc8 <iprintf>
    if (offset_from >= p_from->len) {
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	895b      	ldrh	r3, [r3, #10]
 8013250:	461a      	mov	r2, r3
 8013252:	693b      	ldr	r3, [r7, #16]
 8013254:	4293      	cmp	r3, r2
 8013256:	d304      	bcc.n	8013262 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013258:	2300      	movs	r3, #0
 801325a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	895b      	ldrh	r3, [r3, #10]
 8013266:	461a      	mov	r2, r3
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	4293      	cmp	r3, r2
 801326c:	d114      	bne.n	8013298 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801326e:	2300      	movs	r3, #0
 8013270:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	681b      	ldr	r3, [r3, #0]
 8013276:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d10c      	bne.n	8013298 <pbuf_copy+0x118>
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d009      	beq.n	8013298 <pbuf_copy+0x118>
 8013284:	4b20      	ldr	r3, [pc, #128]	; (8013308 <pbuf_copy+0x188>)
 8013286:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801328a:	4924      	ldr	r1, [pc, #144]	; (801331c <pbuf_copy+0x19c>)
 801328c:	4820      	ldr	r0, [pc, #128]	; (8013310 <pbuf_copy+0x190>)
 801328e:	f009 fc9b 	bl	801cbc8 <iprintf>
 8013292:	f06f 030f 	mvn.w	r3, #15
 8013296:	e032      	b.n	80132fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d013      	beq.n	80132c6 <pbuf_copy+0x146>
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	895a      	ldrh	r2, [r3, #10]
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	891b      	ldrh	r3, [r3, #8]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d10d      	bne.n	80132c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80132aa:	683b      	ldr	r3, [r7, #0]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d009      	beq.n	80132c6 <pbuf_copy+0x146>
 80132b2:	4b15      	ldr	r3, [pc, #84]	; (8013308 <pbuf_copy+0x188>)
 80132b4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80132b8:	4919      	ldr	r1, [pc, #100]	; (8013320 <pbuf_copy+0x1a0>)
 80132ba:	4815      	ldr	r0, [pc, #84]	; (8013310 <pbuf_copy+0x190>)
 80132bc:	f009 fc84 	bl	801cbc8 <iprintf>
 80132c0:	f06f 0305 	mvn.w	r3, #5
 80132c4:	e01b      	b.n	80132fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d013      	beq.n	80132f4 <pbuf_copy+0x174>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	895a      	ldrh	r2, [r3, #10]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	891b      	ldrh	r3, [r3, #8]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d10d      	bne.n	80132f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d009      	beq.n	80132f4 <pbuf_copy+0x174>
 80132e0:	4b09      	ldr	r3, [pc, #36]	; (8013308 <pbuf_copy+0x188>)
 80132e2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80132e6:	490e      	ldr	r1, [pc, #56]	; (8013320 <pbuf_copy+0x1a0>)
 80132e8:	4809      	ldr	r0, [pc, #36]	; (8013310 <pbuf_copy+0x190>)
 80132ea:	f009 fc6d 	bl	801cbc8 <iprintf>
 80132ee:	f06f 0305 	mvn.w	r3, #5
 80132f2:	e004      	b.n	80132fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	f47f af61 	bne.w	80131be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80132fc:	2300      	movs	r3, #0
}
 80132fe:	4618      	mov	r0, r3
 8013300:	3718      	adds	r7, #24
 8013302:	46bd      	mov	sp, r7
 8013304:	bd80      	pop	{r7, pc}
 8013306:	bf00      	nop
 8013308:	0801ec28 	.word	0x0801ec28
 801330c:	0801eed0 	.word	0x0801eed0
 8013310:	0801ec88 	.word	0x0801ec88
 8013314:	0801ef00 	.word	0x0801ef00
 8013318:	0801ef18 	.word	0x0801ef18
 801331c:	0801ef34 	.word	0x0801ef34
 8013320:	0801ef44 	.word	0x0801ef44

08013324 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013324:	b580      	push	{r7, lr}
 8013326:	b088      	sub	sp, #32
 8013328:	af00      	add	r7, sp, #0
 801332a:	60f8      	str	r0, [r7, #12]
 801332c:	60b9      	str	r1, [r7, #8]
 801332e:	4611      	mov	r1, r2
 8013330:	461a      	mov	r2, r3
 8013332:	460b      	mov	r3, r1
 8013334:	80fb      	strh	r3, [r7, #6]
 8013336:	4613      	mov	r3, r2
 8013338:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801333a:	2300      	movs	r3, #0
 801333c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801333e:	2300      	movs	r3, #0
 8013340:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d108      	bne.n	801335a <pbuf_copy_partial+0x36>
 8013348:	4b2b      	ldr	r3, [pc, #172]	; (80133f8 <pbuf_copy_partial+0xd4>)
 801334a:	f240 420a 	movw	r2, #1034	; 0x40a
 801334e:	492b      	ldr	r1, [pc, #172]	; (80133fc <pbuf_copy_partial+0xd8>)
 8013350:	482b      	ldr	r0, [pc, #172]	; (8013400 <pbuf_copy_partial+0xdc>)
 8013352:	f009 fc39 	bl	801cbc8 <iprintf>
 8013356:	2300      	movs	r3, #0
 8013358:	e04a      	b.n	80133f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d108      	bne.n	8013372 <pbuf_copy_partial+0x4e>
 8013360:	4b25      	ldr	r3, [pc, #148]	; (80133f8 <pbuf_copy_partial+0xd4>)
 8013362:	f240 420b 	movw	r2, #1035	; 0x40b
 8013366:	4927      	ldr	r1, [pc, #156]	; (8013404 <pbuf_copy_partial+0xe0>)
 8013368:	4825      	ldr	r0, [pc, #148]	; (8013400 <pbuf_copy_partial+0xdc>)
 801336a:	f009 fc2d 	bl	801cbc8 <iprintf>
 801336e:	2300      	movs	r3, #0
 8013370:	e03e      	b.n	80133f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	61fb      	str	r3, [r7, #28]
 8013376:	e034      	b.n	80133e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013378:	88bb      	ldrh	r3, [r7, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d00a      	beq.n	8013394 <pbuf_copy_partial+0x70>
 801337e:	69fb      	ldr	r3, [r7, #28]
 8013380:	895b      	ldrh	r3, [r3, #10]
 8013382:	88ba      	ldrh	r2, [r7, #4]
 8013384:	429a      	cmp	r2, r3
 8013386:	d305      	bcc.n	8013394 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013388:	69fb      	ldr	r3, [r7, #28]
 801338a:	895b      	ldrh	r3, [r3, #10]
 801338c:	88ba      	ldrh	r2, [r7, #4]
 801338e:	1ad3      	subs	r3, r2, r3
 8013390:	80bb      	strh	r3, [r7, #4]
 8013392:	e023      	b.n	80133dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	895a      	ldrh	r2, [r3, #10]
 8013398:	88bb      	ldrh	r3, [r7, #4]
 801339a:	1ad3      	subs	r3, r2, r3
 801339c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801339e:	8b3a      	ldrh	r2, [r7, #24]
 80133a0:	88fb      	ldrh	r3, [r7, #6]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d901      	bls.n	80133aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80133a6:	88fb      	ldrh	r3, [r7, #6]
 80133a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80133aa:	8b7b      	ldrh	r3, [r7, #26]
 80133ac:	68ba      	ldr	r2, [r7, #8]
 80133ae:	18d0      	adds	r0, r2, r3
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	685a      	ldr	r2, [r3, #4]
 80133b4:	88bb      	ldrh	r3, [r7, #4]
 80133b6:	4413      	add	r3, r2
 80133b8:	8b3a      	ldrh	r2, [r7, #24]
 80133ba:	4619      	mov	r1, r3
 80133bc:	f009 fbf1 	bl	801cba2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80133c0:	8afa      	ldrh	r2, [r7, #22]
 80133c2:	8b3b      	ldrh	r3, [r7, #24]
 80133c4:	4413      	add	r3, r2
 80133c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80133c8:	8b7a      	ldrh	r2, [r7, #26]
 80133ca:	8b3b      	ldrh	r3, [r7, #24]
 80133cc:	4413      	add	r3, r2
 80133ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80133d0:	88fa      	ldrh	r2, [r7, #6]
 80133d2:	8b3b      	ldrh	r3, [r7, #24]
 80133d4:	1ad3      	subs	r3, r2, r3
 80133d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80133d8:	2300      	movs	r3, #0
 80133da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80133dc:	69fb      	ldr	r3, [r7, #28]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	61fb      	str	r3, [r7, #28]
 80133e2:	88fb      	ldrh	r3, [r7, #6]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d002      	beq.n	80133ee <pbuf_copy_partial+0xca>
 80133e8:	69fb      	ldr	r3, [r7, #28]
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d1c4      	bne.n	8013378 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80133ee:	8afb      	ldrh	r3, [r7, #22]
}
 80133f0:	4618      	mov	r0, r3
 80133f2:	3720      	adds	r7, #32
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bd80      	pop	{r7, pc}
 80133f8:	0801ec28 	.word	0x0801ec28
 80133fc:	0801ef70 	.word	0x0801ef70
 8013400:	0801ec88 	.word	0x0801ec88
 8013404:	0801ef90 	.word	0x0801ef90

08013408 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8013408:	b580      	push	{r7, lr}
 801340a:	b084      	sub	sp, #16
 801340c:	af00      	add	r7, sp, #0
 801340e:	4603      	mov	r3, r0
 8013410:	603a      	str	r2, [r7, #0]
 8013412:	71fb      	strb	r3, [r7, #7]
 8013414:	460b      	mov	r3, r1
 8013416:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	8919      	ldrh	r1, [r3, #8]
 801341c:	88ba      	ldrh	r2, [r7, #4]
 801341e:	79fb      	ldrb	r3, [r7, #7]
 8013420:	4618      	mov	r0, r3
 8013422:	f7ff faa9 	bl	8012978 <pbuf_alloc>
 8013426:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d101      	bne.n	8013432 <pbuf_clone+0x2a>
    return NULL;
 801342e:	2300      	movs	r3, #0
 8013430:	e011      	b.n	8013456 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013432:	6839      	ldr	r1, [r7, #0]
 8013434:	68f8      	ldr	r0, [r7, #12]
 8013436:	f7ff fea3 	bl	8013180 <pbuf_copy>
 801343a:	4603      	mov	r3, r0
 801343c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801343e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d006      	beq.n	8013454 <pbuf_clone+0x4c>
 8013446:	4b06      	ldr	r3, [pc, #24]	; (8013460 <pbuf_clone+0x58>)
 8013448:	f240 5224 	movw	r2, #1316	; 0x524
 801344c:	4905      	ldr	r1, [pc, #20]	; (8013464 <pbuf_clone+0x5c>)
 801344e:	4806      	ldr	r0, [pc, #24]	; (8013468 <pbuf_clone+0x60>)
 8013450:	f009 fbba 	bl	801cbc8 <iprintf>
  return q;
 8013454:	68fb      	ldr	r3, [r7, #12]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	0801ec28 	.word	0x0801ec28
 8013464:	0801f09c 	.word	0x0801f09c
 8013468:	0801ec88 	.word	0x0801ec88

0801346c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013470:	f009 fbc2 	bl	801cbf8 <rand>
 8013474:	4603      	mov	r3, r0
 8013476:	b29b      	uxth	r3, r3
 8013478:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801347c:	b29b      	uxth	r3, r3
 801347e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013482:	b29a      	uxth	r2, r3
 8013484:	4b01      	ldr	r3, [pc, #4]	; (801348c <tcp_init+0x20>)
 8013486:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013488:	bf00      	nop
 801348a:	bd80      	pop	{r7, pc}
 801348c:	20000028 	.word	0x20000028

08013490 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013490:	b580      	push	{r7, lr}
 8013492:	b082      	sub	sp, #8
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	7d1b      	ldrb	r3, [r3, #20]
 801349c:	2b01      	cmp	r3, #1
 801349e:	d105      	bne.n	80134ac <tcp_free+0x1c>
 80134a0:	4b06      	ldr	r3, [pc, #24]	; (80134bc <tcp_free+0x2c>)
 80134a2:	22d4      	movs	r2, #212	; 0xd4
 80134a4:	4906      	ldr	r1, [pc, #24]	; (80134c0 <tcp_free+0x30>)
 80134a6:	4807      	ldr	r0, [pc, #28]	; (80134c4 <tcp_free+0x34>)
 80134a8:	f009 fb8e 	bl	801cbc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80134ac:	6879      	ldr	r1, [r7, #4]
 80134ae:	2001      	movs	r0, #1
 80134b0:	f7fe fea2 	bl	80121f8 <memp_free>
}
 80134b4:	bf00      	nop
 80134b6:	3708      	adds	r7, #8
 80134b8:	46bd      	mov	sp, r7
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	0801f128 	.word	0x0801f128
 80134c0:	0801f158 	.word	0x0801f158
 80134c4:	0801f16c 	.word	0x0801f16c

080134c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b082      	sub	sp, #8
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	7d1b      	ldrb	r3, [r3, #20]
 80134d4:	2b01      	cmp	r3, #1
 80134d6:	d105      	bne.n	80134e4 <tcp_free_listen+0x1c>
 80134d8:	4b06      	ldr	r3, [pc, #24]	; (80134f4 <tcp_free_listen+0x2c>)
 80134da:	22df      	movs	r2, #223	; 0xdf
 80134dc:	4906      	ldr	r1, [pc, #24]	; (80134f8 <tcp_free_listen+0x30>)
 80134de:	4807      	ldr	r0, [pc, #28]	; (80134fc <tcp_free_listen+0x34>)
 80134e0:	f009 fb72 	bl	801cbc8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80134e4:	6879      	ldr	r1, [r7, #4]
 80134e6:	2002      	movs	r0, #2
 80134e8:	f7fe fe86 	bl	80121f8 <memp_free>
}
 80134ec:	bf00      	nop
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	0801f128 	.word	0x0801f128
 80134f8:	0801f194 	.word	0x0801f194
 80134fc:	0801f16c 	.word	0x0801f16c

08013500 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013504:	f001 f9b2 	bl	801486c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013508:	4b07      	ldr	r3, [pc, #28]	; (8013528 <tcp_tmr+0x28>)
 801350a:	781b      	ldrb	r3, [r3, #0]
 801350c:	3301      	adds	r3, #1
 801350e:	b2da      	uxtb	r2, r3
 8013510:	4b05      	ldr	r3, [pc, #20]	; (8013528 <tcp_tmr+0x28>)
 8013512:	701a      	strb	r2, [r3, #0]
 8013514:	4b04      	ldr	r3, [pc, #16]	; (8013528 <tcp_tmr+0x28>)
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	f003 0301 	and.w	r3, r3, #1
 801351c:	2b00      	cmp	r3, #0
 801351e:	d001      	beq.n	8013524 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013520:	f000 fe66 	bl	80141f0 <tcp_slowtmr>
  }
}
 8013524:	bf00      	nop
 8013526:	bd80      	pop	{r7, pc}
 8013528:	20008715 	.word	0x20008715

0801352c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801352c:	b580      	push	{r7, lr}
 801352e:	b084      	sub	sp, #16
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d105      	bne.n	8013548 <tcp_remove_listener+0x1c>
 801353c:	4b0d      	ldr	r3, [pc, #52]	; (8013574 <tcp_remove_listener+0x48>)
 801353e:	22ff      	movs	r2, #255	; 0xff
 8013540:	490d      	ldr	r1, [pc, #52]	; (8013578 <tcp_remove_listener+0x4c>)
 8013542:	480e      	ldr	r0, [pc, #56]	; (801357c <tcp_remove_listener+0x50>)
 8013544:	f009 fb40 	bl	801cbc8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	60fb      	str	r3, [r7, #12]
 801354c:	e00a      	b.n	8013564 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013552:	683a      	ldr	r2, [r7, #0]
 8013554:	429a      	cmp	r2, r3
 8013556:	d102      	bne.n	801355e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	2200      	movs	r2, #0
 801355c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	68db      	ldr	r3, [r3, #12]
 8013562:	60fb      	str	r3, [r7, #12]
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d1f1      	bne.n	801354e <tcp_remove_listener+0x22>
    }
  }
}
 801356a:	bf00      	nop
 801356c:	3710      	adds	r7, #16
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}
 8013572:	bf00      	nop
 8013574:	0801f128 	.word	0x0801f128
 8013578:	0801f1b0 	.word	0x0801f1b0
 801357c:	0801f16c 	.word	0x0801f16c

08013580 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b084      	sub	sp, #16
 8013584:	af00      	add	r7, sp, #0
 8013586:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d106      	bne.n	801359c <tcp_listen_closed+0x1c>
 801358e:	4b14      	ldr	r3, [pc, #80]	; (80135e0 <tcp_listen_closed+0x60>)
 8013590:	f240 1211 	movw	r2, #273	; 0x111
 8013594:	4913      	ldr	r1, [pc, #76]	; (80135e4 <tcp_listen_closed+0x64>)
 8013596:	4814      	ldr	r0, [pc, #80]	; (80135e8 <tcp_listen_closed+0x68>)
 8013598:	f009 fb16 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	7d1b      	ldrb	r3, [r3, #20]
 80135a0:	2b01      	cmp	r3, #1
 80135a2:	d006      	beq.n	80135b2 <tcp_listen_closed+0x32>
 80135a4:	4b0e      	ldr	r3, [pc, #56]	; (80135e0 <tcp_listen_closed+0x60>)
 80135a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80135aa:	4910      	ldr	r1, [pc, #64]	; (80135ec <tcp_listen_closed+0x6c>)
 80135ac:	480e      	ldr	r0, [pc, #56]	; (80135e8 <tcp_listen_closed+0x68>)
 80135ae:	f009 fb0b 	bl	801cbc8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80135b2:	2301      	movs	r3, #1
 80135b4:	60fb      	str	r3, [r7, #12]
 80135b6:	e00b      	b.n	80135d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80135b8:	4a0d      	ldr	r2, [pc, #52]	; (80135f0 <tcp_listen_closed+0x70>)
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	6879      	ldr	r1, [r7, #4]
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7ff ffb1 	bl	801352c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	3301      	adds	r3, #1
 80135ce:	60fb      	str	r3, [r7, #12]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	2b03      	cmp	r3, #3
 80135d4:	d9f0      	bls.n	80135b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80135d6:	bf00      	nop
 80135d8:	3710      	adds	r7, #16
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	0801f128 	.word	0x0801f128
 80135e4:	0801f1d8 	.word	0x0801f1d8
 80135e8:	0801f16c 	.word	0x0801f16c
 80135ec:	0801f1e4 	.word	0x0801f1e4
 80135f0:	08021164 	.word	0x08021164

080135f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80135f4:	b5b0      	push	{r4, r5, r7, lr}
 80135f6:	b088      	sub	sp, #32
 80135f8:	af04      	add	r7, sp, #16
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	460b      	mov	r3, r1
 80135fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d106      	bne.n	8013614 <tcp_close_shutdown+0x20>
 8013606:	4b61      	ldr	r3, [pc, #388]	; (801378c <tcp_close_shutdown+0x198>)
 8013608:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801360c:	4960      	ldr	r1, [pc, #384]	; (8013790 <tcp_close_shutdown+0x19c>)
 801360e:	4861      	ldr	r0, [pc, #388]	; (8013794 <tcp_close_shutdown+0x1a0>)
 8013610:	f009 fada 	bl	801cbc8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013614:	78fb      	ldrb	r3, [r7, #3]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d066      	beq.n	80136e8 <tcp_close_shutdown+0xf4>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	7d1b      	ldrb	r3, [r3, #20]
 801361e:	2b04      	cmp	r3, #4
 8013620:	d003      	beq.n	801362a <tcp_close_shutdown+0x36>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	7d1b      	ldrb	r3, [r3, #20]
 8013626:	2b07      	cmp	r3, #7
 8013628:	d15e      	bne.n	80136e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801362e:	2b00      	cmp	r3, #0
 8013630:	d104      	bne.n	801363c <tcp_close_shutdown+0x48>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013636:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801363a:	d055      	beq.n	80136e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	8b5b      	ldrh	r3, [r3, #26]
 8013640:	f003 0310 	and.w	r3, r3, #16
 8013644:	2b00      	cmp	r3, #0
 8013646:	d106      	bne.n	8013656 <tcp_close_shutdown+0x62>
 8013648:	4b50      	ldr	r3, [pc, #320]	; (801378c <tcp_close_shutdown+0x198>)
 801364a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801364e:	4952      	ldr	r1, [pc, #328]	; (8013798 <tcp_close_shutdown+0x1a4>)
 8013650:	4850      	ldr	r0, [pc, #320]	; (8013794 <tcp_close_shutdown+0x1a0>)
 8013652:	f009 fab9 	bl	801cbc8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801365e:	687d      	ldr	r5, [r7, #4]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	3304      	adds	r3, #4
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	8ad2      	ldrh	r2, [r2, #22]
 8013668:	6879      	ldr	r1, [r7, #4]
 801366a:	8b09      	ldrh	r1, [r1, #24]
 801366c:	9102      	str	r1, [sp, #8]
 801366e:	9201      	str	r2, [sp, #4]
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	462b      	mov	r3, r5
 8013674:	4622      	mov	r2, r4
 8013676:	4601      	mov	r1, r0
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f005 fef5 	bl	8019468 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f001 fca2 	bl	8014fc8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013684:	4b45      	ldr	r3, [pc, #276]	; (801379c <tcp_close_shutdown+0x1a8>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	687a      	ldr	r2, [r7, #4]
 801368a:	429a      	cmp	r2, r3
 801368c:	d105      	bne.n	801369a <tcp_close_shutdown+0xa6>
 801368e:	4b43      	ldr	r3, [pc, #268]	; (801379c <tcp_close_shutdown+0x1a8>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	68db      	ldr	r3, [r3, #12]
 8013694:	4a41      	ldr	r2, [pc, #260]	; (801379c <tcp_close_shutdown+0x1a8>)
 8013696:	6013      	str	r3, [r2, #0]
 8013698:	e013      	b.n	80136c2 <tcp_close_shutdown+0xce>
 801369a:	4b40      	ldr	r3, [pc, #256]	; (801379c <tcp_close_shutdown+0x1a8>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	60fb      	str	r3, [r7, #12]
 80136a0:	e00c      	b.n	80136bc <tcp_close_shutdown+0xc8>
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	68db      	ldr	r3, [r3, #12]
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	429a      	cmp	r2, r3
 80136aa:	d104      	bne.n	80136b6 <tcp_close_shutdown+0xc2>
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	68da      	ldr	r2, [r3, #12]
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	60da      	str	r2, [r3, #12]
 80136b4:	e005      	b.n	80136c2 <tcp_close_shutdown+0xce>
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	68db      	ldr	r3, [r3, #12]
 80136ba:	60fb      	str	r3, [r7, #12]
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1ef      	bne.n	80136a2 <tcp_close_shutdown+0xae>
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2200      	movs	r2, #0
 80136c6:	60da      	str	r2, [r3, #12]
 80136c8:	4b35      	ldr	r3, [pc, #212]	; (80137a0 <tcp_close_shutdown+0x1ac>)
 80136ca:	2201      	movs	r2, #1
 80136cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80136ce:	4b35      	ldr	r3, [pc, #212]	; (80137a4 <tcp_close_shutdown+0x1b0>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d102      	bne.n	80136de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80136d8:	f004 f934 	bl	8017944 <tcp_trigger_input_pcb_close>
 80136dc:	e002      	b.n	80136e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f7ff fed6 	bl	8013490 <tcp_free>
      }
      return ERR_OK;
 80136e4:	2300      	movs	r3, #0
 80136e6:	e04d      	b.n	8013784 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	7d1b      	ldrb	r3, [r3, #20]
 80136ec:	2b01      	cmp	r3, #1
 80136ee:	d02d      	beq.n	801374c <tcp_close_shutdown+0x158>
 80136f0:	2b02      	cmp	r3, #2
 80136f2:	d036      	beq.n	8013762 <tcp_close_shutdown+0x16e>
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d13f      	bne.n	8013778 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	8adb      	ldrh	r3, [r3, #22]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d021      	beq.n	8013744 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013700:	4b29      	ldr	r3, [pc, #164]	; (80137a8 <tcp_close_shutdown+0x1b4>)
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	687a      	ldr	r2, [r7, #4]
 8013706:	429a      	cmp	r2, r3
 8013708:	d105      	bne.n	8013716 <tcp_close_shutdown+0x122>
 801370a:	4b27      	ldr	r3, [pc, #156]	; (80137a8 <tcp_close_shutdown+0x1b4>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	68db      	ldr	r3, [r3, #12]
 8013710:	4a25      	ldr	r2, [pc, #148]	; (80137a8 <tcp_close_shutdown+0x1b4>)
 8013712:	6013      	str	r3, [r2, #0]
 8013714:	e013      	b.n	801373e <tcp_close_shutdown+0x14a>
 8013716:	4b24      	ldr	r3, [pc, #144]	; (80137a8 <tcp_close_shutdown+0x1b4>)
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	60bb      	str	r3, [r7, #8]
 801371c:	e00c      	b.n	8013738 <tcp_close_shutdown+0x144>
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	68db      	ldr	r3, [r3, #12]
 8013722:	687a      	ldr	r2, [r7, #4]
 8013724:	429a      	cmp	r2, r3
 8013726:	d104      	bne.n	8013732 <tcp_close_shutdown+0x13e>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	68da      	ldr	r2, [r3, #12]
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	60da      	str	r2, [r3, #12]
 8013730:	e005      	b.n	801373e <tcp_close_shutdown+0x14a>
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	60bb      	str	r3, [r7, #8]
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d1ef      	bne.n	801371e <tcp_close_shutdown+0x12a>
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2200      	movs	r2, #0
 8013742:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013744:	6878      	ldr	r0, [r7, #4]
 8013746:	f7ff fea3 	bl	8013490 <tcp_free>
      break;
 801374a:	e01a      	b.n	8013782 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f7ff ff17 	bl	8013580 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013752:	6879      	ldr	r1, [r7, #4]
 8013754:	4815      	ldr	r0, [pc, #84]	; (80137ac <tcp_close_shutdown+0x1b8>)
 8013756:	f001 fc87 	bl	8015068 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f7ff feb4 	bl	80134c8 <tcp_free_listen>
      break;
 8013760:	e00f      	b.n	8013782 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013762:	6879      	ldr	r1, [r7, #4]
 8013764:	480d      	ldr	r0, [pc, #52]	; (801379c <tcp_close_shutdown+0x1a8>)
 8013766:	f001 fc7f 	bl	8015068 <tcp_pcb_remove>
 801376a:	4b0d      	ldr	r3, [pc, #52]	; (80137a0 <tcp_close_shutdown+0x1ac>)
 801376c:	2201      	movs	r2, #1
 801376e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7ff fe8d 	bl	8013490 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013776:	e004      	b.n	8013782 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013778:	6878      	ldr	r0, [r7, #4]
 801377a:	f000 f819 	bl	80137b0 <tcp_close_shutdown_fin>
 801377e:	4603      	mov	r3, r0
 8013780:	e000      	b.n	8013784 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8013782:	2300      	movs	r3, #0
}
 8013784:	4618      	mov	r0, r3
 8013786:	3710      	adds	r7, #16
 8013788:	46bd      	mov	sp, r7
 801378a:	bdb0      	pop	{r4, r5, r7, pc}
 801378c:	0801f128 	.word	0x0801f128
 8013790:	0801f1fc 	.word	0x0801f1fc
 8013794:	0801f16c 	.word	0x0801f16c
 8013798:	0801f21c 	.word	0x0801f21c
 801379c:	2000bdb4 	.word	0x2000bdb4
 80137a0:	2000bdb0 	.word	0x2000bdb0
 80137a4:	2000bdc8 	.word	0x2000bdc8
 80137a8:	2000bdc0 	.word	0x2000bdc0
 80137ac:	2000bdbc 	.word	0x2000bdbc

080137b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b084      	sub	sp, #16
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d106      	bne.n	80137cc <tcp_close_shutdown_fin+0x1c>
 80137be:	4b2c      	ldr	r3, [pc, #176]	; (8013870 <tcp_close_shutdown_fin+0xc0>)
 80137c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80137c4:	492b      	ldr	r1, [pc, #172]	; (8013874 <tcp_close_shutdown_fin+0xc4>)
 80137c6:	482c      	ldr	r0, [pc, #176]	; (8013878 <tcp_close_shutdown_fin+0xc8>)
 80137c8:	f009 f9fe 	bl	801cbc8 <iprintf>

  switch (pcb->state) {
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	7d1b      	ldrb	r3, [r3, #20]
 80137d0:	2b04      	cmp	r3, #4
 80137d2:	d010      	beq.n	80137f6 <tcp_close_shutdown_fin+0x46>
 80137d4:	2b07      	cmp	r3, #7
 80137d6:	d01b      	beq.n	8013810 <tcp_close_shutdown_fin+0x60>
 80137d8:	2b03      	cmp	r3, #3
 80137da:	d126      	bne.n	801382a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f004 ff1d 	bl	801861c <tcp_send_fin>
 80137e2:	4603      	mov	r3, r0
 80137e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80137e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d11f      	bne.n	801382e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2205      	movs	r2, #5
 80137f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80137f4:	e01b      	b.n	801382e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f004 ff10 	bl	801861c <tcp_send_fin>
 80137fc:	4603      	mov	r3, r0
 80137fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d114      	bne.n	8013832 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	2205      	movs	r2, #5
 801380c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801380e:	e010      	b.n	8013832 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f004 ff03 	bl	801861c <tcp_send_fin>
 8013816:	4603      	mov	r3, r0
 8013818:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d109      	bne.n	8013836 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	2209      	movs	r2, #9
 8013826:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013828:	e005      	b.n	8013836 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801382a:	2300      	movs	r3, #0
 801382c:	e01c      	b.n	8013868 <tcp_close_shutdown_fin+0xb8>
      break;
 801382e:	bf00      	nop
 8013830:	e002      	b.n	8013838 <tcp_close_shutdown_fin+0x88>
      break;
 8013832:	bf00      	nop
 8013834:	e000      	b.n	8013838 <tcp_close_shutdown_fin+0x88>
      break;
 8013836:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d103      	bne.n	8013848 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f005 f829 	bl	8018898 <tcp_output>
 8013846:	e00d      	b.n	8013864 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8013848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013850:	d108      	bne.n	8013864 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	8b5b      	ldrh	r3, [r3, #26]
 8013856:	f043 0308 	orr.w	r3, r3, #8
 801385a:	b29a      	uxth	r2, r3
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013860:	2300      	movs	r3, #0
 8013862:	e001      	b.n	8013868 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8013864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013868:	4618      	mov	r0, r3
 801386a:	3710      	adds	r7, #16
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}
 8013870:	0801f128 	.word	0x0801f128
 8013874:	0801f1d8 	.word	0x0801f1d8
 8013878:	0801f16c 	.word	0x0801f16c

0801387c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d109      	bne.n	801389e <tcp_close+0x22>
 801388a:	4b0f      	ldr	r3, [pc, #60]	; (80138c8 <tcp_close+0x4c>)
 801388c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013890:	490e      	ldr	r1, [pc, #56]	; (80138cc <tcp_close+0x50>)
 8013892:	480f      	ldr	r0, [pc, #60]	; (80138d0 <tcp_close+0x54>)
 8013894:	f009 f998 	bl	801cbc8 <iprintf>
 8013898:	f06f 030f 	mvn.w	r3, #15
 801389c:	e00f      	b.n	80138be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	7d1b      	ldrb	r3, [r3, #20]
 80138a2:	2b01      	cmp	r3, #1
 80138a4:	d006      	beq.n	80138b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	8b5b      	ldrh	r3, [r3, #26]
 80138aa:	f043 0310 	orr.w	r3, r3, #16
 80138ae:	b29a      	uxth	r2, r3
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80138b4:	2101      	movs	r1, #1
 80138b6:	6878      	ldr	r0, [r7, #4]
 80138b8:	f7ff fe9c 	bl	80135f4 <tcp_close_shutdown>
 80138bc:	4603      	mov	r3, r0
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3708      	adds	r7, #8
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}
 80138c6:	bf00      	nop
 80138c8:	0801f128 	.word	0x0801f128
 80138cc:	0801f238 	.word	0x0801f238
 80138d0:	0801f16c 	.word	0x0801f16c

080138d4 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
 80138da:	60f8      	str	r0, [r7, #12]
 80138dc:	60b9      	str	r1, [r7, #8]
 80138de:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d109      	bne.n	80138fa <tcp_shutdown+0x26>
 80138e6:	4b25      	ldr	r3, [pc, #148]	; (801397c <tcp_shutdown+0xa8>)
 80138e8:	f240 2207 	movw	r2, #519	; 0x207
 80138ec:	4924      	ldr	r1, [pc, #144]	; (8013980 <tcp_shutdown+0xac>)
 80138ee:	4825      	ldr	r0, [pc, #148]	; (8013984 <tcp_shutdown+0xb0>)
 80138f0:	f009 f96a 	bl	801cbc8 <iprintf>
 80138f4:	f06f 030f 	mvn.w	r3, #15
 80138f8:	e03c      	b.n	8013974 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	7d1b      	ldrb	r3, [r3, #20]
 80138fe:	2b01      	cmp	r3, #1
 8013900:	d102      	bne.n	8013908 <tcp_shutdown+0x34>
    return ERR_CONN;
 8013902:	f06f 030a 	mvn.w	r3, #10
 8013906:	e035      	b.n	8013974 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d01b      	beq.n	8013946 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	8b5b      	ldrh	r3, [r3, #26]
 8013912:	f043 0310 	orr.w	r3, r3, #16
 8013916:	b29a      	uxth	r2, r3
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d005      	beq.n	801392e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013922:	2101      	movs	r1, #1
 8013924:	68f8      	ldr	r0, [r7, #12]
 8013926:	f7ff fe65 	bl	80135f4 <tcp_close_shutdown>
 801392a:	4603      	mov	r3, r0
 801392c:	e022      	b.n	8013974 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013932:	2b00      	cmp	r3, #0
 8013934:	d007      	beq.n	8013946 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801393a:	4618      	mov	r0, r3
 801393c:	f7ff fafc 	bl	8012f38 <pbuf_free>
      pcb->refused_data = NULL;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	2200      	movs	r2, #0
 8013944:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d012      	beq.n	8013972 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	7d1b      	ldrb	r3, [r3, #20]
 8013950:	2b03      	cmp	r3, #3
 8013952:	db0b      	blt.n	801396c <tcp_shutdown+0x98>
 8013954:	2b04      	cmp	r3, #4
 8013956:	dd01      	ble.n	801395c <tcp_shutdown+0x88>
 8013958:	2b07      	cmp	r3, #7
 801395a:	d107      	bne.n	801396c <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	b2db      	uxtb	r3, r3
 8013960:	4619      	mov	r1, r3
 8013962:	68f8      	ldr	r0, [r7, #12]
 8013964:	f7ff fe46 	bl	80135f4 <tcp_close_shutdown>
 8013968:	4603      	mov	r3, r0
 801396a:	e003      	b.n	8013974 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801396c:	f06f 030a 	mvn.w	r3, #10
 8013970:	e000      	b.n	8013974 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 8013972:	2300      	movs	r3, #0
}
 8013974:	4618      	mov	r0, r3
 8013976:	3710      	adds	r7, #16
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}
 801397c:	0801f128 	.word	0x0801f128
 8013980:	0801f250 	.word	0x0801f250
 8013984:	0801f16c 	.word	0x0801f16c

08013988 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013988:	b580      	push	{r7, lr}
 801398a:	b08e      	sub	sp, #56	; 0x38
 801398c:	af04      	add	r7, sp, #16
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d107      	bne.n	80139a8 <tcp_abandon+0x20>
 8013998:	4b52      	ldr	r3, [pc, #328]	; (8013ae4 <tcp_abandon+0x15c>)
 801399a:	f240 223d 	movw	r2, #573	; 0x23d
 801399e:	4952      	ldr	r1, [pc, #328]	; (8013ae8 <tcp_abandon+0x160>)
 80139a0:	4852      	ldr	r0, [pc, #328]	; (8013aec <tcp_abandon+0x164>)
 80139a2:	f009 f911 	bl	801cbc8 <iprintf>
 80139a6:	e099      	b.n	8013adc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	7d1b      	ldrb	r3, [r3, #20]
 80139ac:	2b01      	cmp	r3, #1
 80139ae:	d106      	bne.n	80139be <tcp_abandon+0x36>
 80139b0:	4b4c      	ldr	r3, [pc, #304]	; (8013ae4 <tcp_abandon+0x15c>)
 80139b2:	f240 2241 	movw	r2, #577	; 0x241
 80139b6:	494e      	ldr	r1, [pc, #312]	; (8013af0 <tcp_abandon+0x168>)
 80139b8:	484c      	ldr	r0, [pc, #304]	; (8013aec <tcp_abandon+0x164>)
 80139ba:	f009 f905 	bl	801cbc8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	7d1b      	ldrb	r3, [r3, #20]
 80139c2:	2b0a      	cmp	r3, #10
 80139c4:	d107      	bne.n	80139d6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80139c6:	6879      	ldr	r1, [r7, #4]
 80139c8:	484a      	ldr	r0, [pc, #296]	; (8013af4 <tcp_abandon+0x16c>)
 80139ca:	f001 fb4d 	bl	8015068 <tcp_pcb_remove>
    tcp_free(pcb);
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f7ff fd5e 	bl	8013490 <tcp_free>
 80139d4:	e082      	b.n	8013adc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80139d6:	2300      	movs	r3, #0
 80139d8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80139da:	2300      	movs	r3, #0
 80139dc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139e2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139e8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80139f0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	691b      	ldr	r3, [r3, #16]
 80139f6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	7d1b      	ldrb	r3, [r3, #20]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d126      	bne.n	8013a4e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	8adb      	ldrh	r3, [r3, #22]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d02e      	beq.n	8013a66 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013a08:	4b3b      	ldr	r3, [pc, #236]	; (8013af8 <tcp_abandon+0x170>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	687a      	ldr	r2, [r7, #4]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d105      	bne.n	8013a1e <tcp_abandon+0x96>
 8013a12:	4b39      	ldr	r3, [pc, #228]	; (8013af8 <tcp_abandon+0x170>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	4a37      	ldr	r2, [pc, #220]	; (8013af8 <tcp_abandon+0x170>)
 8013a1a:	6013      	str	r3, [r2, #0]
 8013a1c:	e013      	b.n	8013a46 <tcp_abandon+0xbe>
 8013a1e:	4b36      	ldr	r3, [pc, #216]	; (8013af8 <tcp_abandon+0x170>)
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	61fb      	str	r3, [r7, #28]
 8013a24:	e00c      	b.n	8013a40 <tcp_abandon+0xb8>
 8013a26:	69fb      	ldr	r3, [r7, #28]
 8013a28:	68db      	ldr	r3, [r3, #12]
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d104      	bne.n	8013a3a <tcp_abandon+0xb2>
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	68da      	ldr	r2, [r3, #12]
 8013a34:	69fb      	ldr	r3, [r7, #28]
 8013a36:	60da      	str	r2, [r3, #12]
 8013a38:	e005      	b.n	8013a46 <tcp_abandon+0xbe>
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	61fb      	str	r3, [r7, #28]
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d1ef      	bne.n	8013a26 <tcp_abandon+0x9e>
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2200      	movs	r2, #0
 8013a4a:	60da      	str	r2, [r3, #12]
 8013a4c:	e00b      	b.n	8013a66 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	8adb      	ldrh	r3, [r3, #22]
 8013a56:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013a58:	6879      	ldr	r1, [r7, #4]
 8013a5a:	4828      	ldr	r0, [pc, #160]	; (8013afc <tcp_abandon+0x174>)
 8013a5c:	f001 fb04 	bl	8015068 <tcp_pcb_remove>
 8013a60:	4b27      	ldr	r3, [pc, #156]	; (8013b00 <tcp_abandon+0x178>)
 8013a62:	2201      	movs	r2, #1
 8013a64:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d004      	beq.n	8013a78 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a72:	4618      	mov	r0, r3
 8013a74:	f000 ffda 	bl	8014a2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d004      	beq.n	8013a8a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a84:	4618      	mov	r0, r3
 8013a86:	f000 ffd1 	bl	8014a2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d004      	beq.n	8013a9c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a96:	4618      	mov	r0, r3
 8013a98:	f000 ffc8 	bl	8014a2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d00e      	beq.n	8013ac0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013aa2:	6879      	ldr	r1, [r7, #4]
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	3304      	adds	r3, #4
 8013aa8:	687a      	ldr	r2, [r7, #4]
 8013aaa:	8b12      	ldrh	r2, [r2, #24]
 8013aac:	9202      	str	r2, [sp, #8]
 8013aae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013ab0:	9201      	str	r2, [sp, #4]
 8013ab2:	9300      	str	r3, [sp, #0]
 8013ab4:	460b      	mov	r3, r1
 8013ab6:	697a      	ldr	r2, [r7, #20]
 8013ab8:	69b9      	ldr	r1, [r7, #24]
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f005 fcd4 	bl	8019468 <tcp_rst>
    }
    last_state = pcb->state;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	7d1b      	ldrb	r3, [r3, #20]
 8013ac4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7ff fce2 	bl	8013490 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	2b00      	cmp	r3, #0
 8013ad0:	d004      	beq.n	8013adc <tcp_abandon+0x154>
 8013ad2:	693b      	ldr	r3, [r7, #16]
 8013ad4:	f06f 010c 	mvn.w	r1, #12
 8013ad8:	68f8      	ldr	r0, [r7, #12]
 8013ada:	4798      	blx	r3
  }
}
 8013adc:	3728      	adds	r7, #40	; 0x28
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	0801f128 	.word	0x0801f128
 8013ae8:	0801f26c 	.word	0x0801f26c
 8013aec:	0801f16c 	.word	0x0801f16c
 8013af0:	0801f288 	.word	0x0801f288
 8013af4:	2000bdc4 	.word	0x2000bdc4
 8013af8:	2000bdc0 	.word	0x2000bdc0
 8013afc:	2000bdb4 	.word	0x2000bdb4
 8013b00:	2000bdb0 	.word	0x2000bdb0

08013b04 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	b082      	sub	sp, #8
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013b0c:	2101      	movs	r1, #1
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7ff ff3a 	bl	8013988 <tcp_abandon>
}
 8013b14:	bf00      	nop
 8013b16:	3708      	adds	r7, #8
 8013b18:	46bd      	mov	sp, r7
 8013b1a:	bd80      	pop	{r7, pc}

08013b1c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b088      	sub	sp, #32
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	60f8      	str	r0, [r7, #12]
 8013b24:	60b9      	str	r1, [r7, #8]
 8013b26:	4613      	mov	r3, r2
 8013b28:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013b2a:	2304      	movs	r3, #4
 8013b2c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013b2e:	68bb      	ldr	r3, [r7, #8]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d101      	bne.n	8013b38 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013b34:	4b3e      	ldr	r3, [pc, #248]	; (8013c30 <tcp_bind+0x114>)
 8013b36:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d109      	bne.n	8013b52 <tcp_bind+0x36>
 8013b3e:	4b3d      	ldr	r3, [pc, #244]	; (8013c34 <tcp_bind+0x118>)
 8013b40:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013b44:	493c      	ldr	r1, [pc, #240]	; (8013c38 <tcp_bind+0x11c>)
 8013b46:	483d      	ldr	r0, [pc, #244]	; (8013c3c <tcp_bind+0x120>)
 8013b48:	f009 f83e 	bl	801cbc8 <iprintf>
 8013b4c:	f06f 030f 	mvn.w	r3, #15
 8013b50:	e06a      	b.n	8013c28 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	7d1b      	ldrb	r3, [r3, #20]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d009      	beq.n	8013b6e <tcp_bind+0x52>
 8013b5a:	4b36      	ldr	r3, [pc, #216]	; (8013c34 <tcp_bind+0x118>)
 8013b5c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013b60:	4937      	ldr	r1, [pc, #220]	; (8013c40 <tcp_bind+0x124>)
 8013b62:	4836      	ldr	r0, [pc, #216]	; (8013c3c <tcp_bind+0x120>)
 8013b64:	f009 f830 	bl	801cbc8 <iprintf>
 8013b68:	f06f 0305 	mvn.w	r3, #5
 8013b6c:	e05c      	b.n	8013c28 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013b6e:	88fb      	ldrh	r3, [r7, #6]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d109      	bne.n	8013b88 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013b74:	f000 f9de 	bl	8013f34 <tcp_new_port>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013b7c:	88fb      	ldrh	r3, [r7, #6]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d135      	bne.n	8013bee <tcp_bind+0xd2>
      return ERR_BUF;
 8013b82:	f06f 0301 	mvn.w	r3, #1
 8013b86:	e04f      	b.n	8013c28 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013b88:	2300      	movs	r3, #0
 8013b8a:	61fb      	str	r3, [r7, #28]
 8013b8c:	e02b      	b.n	8013be6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013b8e:	4a2d      	ldr	r2, [pc, #180]	; (8013c44 <tcp_bind+0x128>)
 8013b90:	69fb      	ldr	r3, [r7, #28]
 8013b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	61bb      	str	r3, [r7, #24]
 8013b9a:	e01e      	b.n	8013bda <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013b9c:	69bb      	ldr	r3, [r7, #24]
 8013b9e:	8adb      	ldrh	r3, [r3, #22]
 8013ba0:	88fa      	ldrh	r2, [r7, #6]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d116      	bne.n	8013bd4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013ba6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d010      	beq.n	8013bce <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013bac:	69bb      	ldr	r3, [r7, #24]
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d00c      	beq.n	8013bce <tcp_bind+0xb2>
 8013bb4:	68bb      	ldr	r3, [r7, #8]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d009      	beq.n	8013bce <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d005      	beq.n	8013bce <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013bc2:	69bb      	ldr	r3, [r7, #24]
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013bca:	429a      	cmp	r2, r3
 8013bcc:	d102      	bne.n	8013bd4 <tcp_bind+0xb8>
              return ERR_USE;
 8013bce:	f06f 0307 	mvn.w	r3, #7
 8013bd2:	e029      	b.n	8013c28 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	68db      	ldr	r3, [r3, #12]
 8013bd8:	61bb      	str	r3, [r7, #24]
 8013bda:	69bb      	ldr	r3, [r7, #24]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d1dd      	bne.n	8013b9c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	3301      	adds	r3, #1
 8013be4:	61fb      	str	r3, [r7, #28]
 8013be6:	69fa      	ldr	r2, [r7, #28]
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	429a      	cmp	r2, r3
 8013bec:	dbcf      	blt.n	8013b8e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00c      	beq.n	8013c0e <tcp_bind+0xf2>
 8013bf4:	68bb      	ldr	r3, [r7, #8]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d008      	beq.n	8013c0e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013bfc:	68bb      	ldr	r3, [r7, #8]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d002      	beq.n	8013c08 <tcp_bind+0xec>
 8013c02:	68bb      	ldr	r3, [r7, #8]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	e000      	b.n	8013c0a <tcp_bind+0xee>
 8013c08:	2300      	movs	r3, #0
 8013c0a:	68fa      	ldr	r2, [r7, #12]
 8013c0c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	88fa      	ldrh	r2, [r7, #6]
 8013c12:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013c14:	4b0c      	ldr	r3, [pc, #48]	; (8013c48 <tcp_bind+0x12c>)
 8013c16:	681a      	ldr	r2, [r3, #0]
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	60da      	str	r2, [r3, #12]
 8013c1c:	4a0a      	ldr	r2, [pc, #40]	; (8013c48 <tcp_bind+0x12c>)
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	6013      	str	r3, [r2, #0]
 8013c22:	f005 fde3 	bl	80197ec <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013c26:	2300      	movs	r3, #0
}
 8013c28:	4618      	mov	r0, r3
 8013c2a:	3720      	adds	r7, #32
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bd80      	pop	{r7, pc}
 8013c30:	0802118c 	.word	0x0802118c
 8013c34:	0801f128 	.word	0x0801f128
 8013c38:	0801f2bc 	.word	0x0801f2bc
 8013c3c:	0801f16c 	.word	0x0801f16c
 8013c40:	0801f2d4 	.word	0x0801f2d4
 8013c44:	08021164 	.word	0x08021164
 8013c48:	2000bdc0 	.word	0x2000bdc0

08013c4c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	60f8      	str	r0, [r7, #12]
 8013c54:	60b9      	str	r1, [r7, #8]
 8013c56:	4613      	mov	r3, r2
 8013c58:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8013c5a:	68bb      	ldr	r3, [r7, #8]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d106      	bne.n	8013c6e <tcp_accept_null+0x22>
 8013c60:	4b07      	ldr	r3, [pc, #28]	; (8013c80 <tcp_accept_null+0x34>)
 8013c62:	f240 320f 	movw	r2, #783	; 0x30f
 8013c66:	4907      	ldr	r1, [pc, #28]	; (8013c84 <tcp_accept_null+0x38>)
 8013c68:	4807      	ldr	r0, [pc, #28]	; (8013c88 <tcp_accept_null+0x3c>)
 8013c6a:	f008 ffad 	bl	801cbc8 <iprintf>

  tcp_abort(pcb);
 8013c6e:	68b8      	ldr	r0, [r7, #8]
 8013c70:	f7ff ff48 	bl	8013b04 <tcp_abort>

  return ERR_ABRT;
 8013c74:	f06f 030c 	mvn.w	r3, #12
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}
 8013c80:	0801f128 	.word	0x0801f128
 8013c84:	0801f2fc 	.word	0x0801f2fc
 8013c88:	0801f16c 	.word	0x0801f16c

08013c8c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b088      	sub	sp, #32
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	60f8      	str	r0, [r7, #12]
 8013c94:	460b      	mov	r3, r1
 8013c96:	607a      	str	r2, [r7, #4]
 8013c98:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d109      	bne.n	8013cb8 <tcp_listen_with_backlog_and_err+0x2c>
 8013ca4:	4b47      	ldr	r3, [pc, #284]	; (8013dc4 <tcp_listen_with_backlog_and_err+0x138>)
 8013ca6:	f240 3259 	movw	r2, #857	; 0x359
 8013caa:	4947      	ldr	r1, [pc, #284]	; (8013dc8 <tcp_listen_with_backlog_and_err+0x13c>)
 8013cac:	4847      	ldr	r0, [pc, #284]	; (8013dcc <tcp_listen_with_backlog_and_err+0x140>)
 8013cae:	f008 ff8b 	bl	801cbc8 <iprintf>
 8013cb2:	23f0      	movs	r3, #240	; 0xf0
 8013cb4:	76fb      	strb	r3, [r7, #27]
 8013cb6:	e079      	b.n	8013dac <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	7d1b      	ldrb	r3, [r3, #20]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d009      	beq.n	8013cd4 <tcp_listen_with_backlog_and_err+0x48>
 8013cc0:	4b40      	ldr	r3, [pc, #256]	; (8013dc4 <tcp_listen_with_backlog_and_err+0x138>)
 8013cc2:	f240 325a 	movw	r2, #858	; 0x35a
 8013cc6:	4942      	ldr	r1, [pc, #264]	; (8013dd0 <tcp_listen_with_backlog_and_err+0x144>)
 8013cc8:	4840      	ldr	r0, [pc, #256]	; (8013dcc <tcp_listen_with_backlog_and_err+0x140>)
 8013cca:	f008 ff7d 	bl	801cbc8 <iprintf>
 8013cce:	23f1      	movs	r3, #241	; 0xf1
 8013cd0:	76fb      	strb	r3, [r7, #27]
 8013cd2:	e06b      	b.n	8013dac <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	7d1b      	ldrb	r3, [r3, #20]
 8013cd8:	2b01      	cmp	r3, #1
 8013cda:	d104      	bne.n	8013ce6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8013ce0:	23f7      	movs	r3, #247	; 0xf7
 8013ce2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013ce4:	e062      	b.n	8013dac <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8013ce6:	2002      	movs	r0, #2
 8013ce8:	f7fe fa10 	bl	801210c <memp_malloc>
 8013cec:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8013cee:	69fb      	ldr	r3, [r7, #28]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d102      	bne.n	8013cfa <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8013cf4:	23ff      	movs	r3, #255	; 0xff
 8013cf6:	76fb      	strb	r3, [r7, #27]
    goto done;
 8013cf8:	e058      	b.n	8013dac <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	691a      	ldr	r2, [r3, #16]
 8013cfe:	69fb      	ldr	r3, [r7, #28]
 8013d00:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	8ada      	ldrh	r2, [r3, #22]
 8013d06:	69fb      	ldr	r3, [r7, #28]
 8013d08:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	7d5a      	ldrb	r2, [r3, #21]
 8013d14:	69fb      	ldr	r3, [r7, #28]
 8013d16:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	7a5a      	ldrb	r2, [r3, #9]
 8013d1c:	69fb      	ldr	r3, [r7, #28]
 8013d1e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	2200      	movs	r2, #0
 8013d24:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	7ada      	ldrb	r2, [r3, #11]
 8013d2a:	69fb      	ldr	r3, [r7, #28]
 8013d2c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	7a9a      	ldrb	r2, [r3, #10]
 8013d32:	69fb      	ldr	r3, [r7, #28]
 8013d34:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	681a      	ldr	r2, [r3, #0]
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	8adb      	ldrh	r3, [r3, #22]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d021      	beq.n	8013d8a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8013d46:	4b23      	ldr	r3, [pc, #140]	; (8013dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	68fa      	ldr	r2, [r7, #12]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d105      	bne.n	8013d5c <tcp_listen_with_backlog_and_err+0xd0>
 8013d50:	4b20      	ldr	r3, [pc, #128]	; (8013dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	68db      	ldr	r3, [r3, #12]
 8013d56:	4a1f      	ldr	r2, [pc, #124]	; (8013dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8013d58:	6013      	str	r3, [r2, #0]
 8013d5a:	e013      	b.n	8013d84 <tcp_listen_with_backlog_and_err+0xf8>
 8013d5c:	4b1d      	ldr	r3, [pc, #116]	; (8013dd4 <tcp_listen_with_backlog_and_err+0x148>)
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	617b      	str	r3, [r7, #20]
 8013d62:	e00c      	b.n	8013d7e <tcp_listen_with_backlog_and_err+0xf2>
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	68fa      	ldr	r2, [r7, #12]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d104      	bne.n	8013d78 <tcp_listen_with_backlog_and_err+0xec>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	68da      	ldr	r2, [r3, #12]
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	60da      	str	r2, [r3, #12]
 8013d76:	e005      	b.n	8013d84 <tcp_listen_with_backlog_and_err+0xf8>
 8013d78:	697b      	ldr	r3, [r7, #20]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	617b      	str	r3, [r7, #20]
 8013d7e:	697b      	ldr	r3, [r7, #20]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d1ef      	bne.n	8013d64 <tcp_listen_with_backlog_and_err+0xd8>
 8013d84:	68fb      	ldr	r3, [r7, #12]
 8013d86:	2200      	movs	r2, #0
 8013d88:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8013d8a:	68f8      	ldr	r0, [r7, #12]
 8013d8c:	f7ff fb80 	bl	8013490 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	4a11      	ldr	r2, [pc, #68]	; (8013dd8 <tcp_listen_with_backlog_and_err+0x14c>)
 8013d94:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8013d96:	4b11      	ldr	r3, [pc, #68]	; (8013ddc <tcp_listen_with_backlog_and_err+0x150>)
 8013d98:	681a      	ldr	r2, [r3, #0]
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	60da      	str	r2, [r3, #12]
 8013d9e:	4a0f      	ldr	r2, [pc, #60]	; (8013ddc <tcp_listen_with_backlog_and_err+0x150>)
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	6013      	str	r3, [r2, #0]
 8013da4:	f005 fd22 	bl	80197ec <tcp_timer_needed>
  res = ERR_OK;
 8013da8:	2300      	movs	r3, #0
 8013daa:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d002      	beq.n	8013db8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	7efa      	ldrb	r2, [r7, #27]
 8013db6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8013db8:	69fb      	ldr	r3, [r7, #28]
}
 8013dba:	4618      	mov	r0, r3
 8013dbc:	3720      	adds	r7, #32
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	0801f128 	.word	0x0801f128
 8013dc8:	0801f31c 	.word	0x0801f31c
 8013dcc:	0801f16c 	.word	0x0801f16c
 8013dd0:	0801f34c 	.word	0x0801f34c
 8013dd4:	2000bdc0 	.word	0x2000bdc0
 8013dd8:	08013c4d 	.word	0x08013c4d
 8013ddc:	2000bdbc 	.word	0x2000bdbc

08013de0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d106      	bne.n	8013dfc <tcp_update_rcv_ann_wnd+0x1c>
 8013dee:	4b25      	ldr	r3, [pc, #148]	; (8013e84 <tcp_update_rcv_ann_wnd+0xa4>)
 8013df0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013df4:	4924      	ldr	r1, [pc, #144]	; (8013e88 <tcp_update_rcv_ann_wnd+0xa8>)
 8013df6:	4825      	ldr	r0, [pc, #148]	; (8013e8c <tcp_update_rcv_ann_wnd+0xac>)
 8013df8:	f008 fee6 	bl	801cbc8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e00:	687a      	ldr	r2, [r7, #4]
 8013e02:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013e04:	4413      	add	r3, r2
 8013e06:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013e10:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013e14:	bf28      	it	cs
 8013e16:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013e1a:	b292      	uxth	r2, r2
 8013e1c:	4413      	add	r3, r2
 8013e1e:	68fa      	ldr	r2, [r7, #12]
 8013e20:	1ad3      	subs	r3, r2, r3
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	db08      	blt.n	8013e38 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	1ad3      	subs	r3, r2, r3
 8013e36:	e020      	b.n	8013e7a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e40:	1ad3      	subs	r3, r2, r3
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	dd03      	ble.n	8013e4e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013e4c:	e014      	b.n	8013e78 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e56:	1ad3      	subs	r3, r2, r3
 8013e58:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013e5a:	68bb      	ldr	r3, [r7, #8]
 8013e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e60:	d306      	bcc.n	8013e70 <tcp_update_rcv_ann_wnd+0x90>
 8013e62:	4b08      	ldr	r3, [pc, #32]	; (8013e84 <tcp_update_rcv_ann_wnd+0xa4>)
 8013e64:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013e68:	4909      	ldr	r1, [pc, #36]	; (8013e90 <tcp_update_rcv_ann_wnd+0xb0>)
 8013e6a:	4808      	ldr	r0, [pc, #32]	; (8013e8c <tcp_update_rcv_ann_wnd+0xac>)
 8013e6c:	f008 feac 	bl	801cbc8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013e78:	2300      	movs	r3, #0
  }
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3710      	adds	r7, #16
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}
 8013e82:	bf00      	nop
 8013e84:	0801f128 	.word	0x0801f128
 8013e88:	0801f384 	.word	0x0801f384
 8013e8c:	0801f16c 	.word	0x0801f16c
 8013e90:	0801f3a8 	.word	0x0801f3a8

08013e94 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d107      	bne.n	8013eb6 <tcp_recved+0x22>
 8013ea6:	4b1f      	ldr	r3, [pc, #124]	; (8013f24 <tcp_recved+0x90>)
 8013ea8:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013eac:	491e      	ldr	r1, [pc, #120]	; (8013f28 <tcp_recved+0x94>)
 8013eae:	481f      	ldr	r0, [pc, #124]	; (8013f2c <tcp_recved+0x98>)
 8013eb0:	f008 fe8a 	bl	801cbc8 <iprintf>
 8013eb4:	e032      	b.n	8013f1c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	7d1b      	ldrb	r3, [r3, #20]
 8013eba:	2b01      	cmp	r3, #1
 8013ebc:	d106      	bne.n	8013ecc <tcp_recved+0x38>
 8013ebe:	4b19      	ldr	r3, [pc, #100]	; (8013f24 <tcp_recved+0x90>)
 8013ec0:	f240 32d3 	movw	r2, #979	; 0x3d3
 8013ec4:	491a      	ldr	r1, [pc, #104]	; (8013f30 <tcp_recved+0x9c>)
 8013ec6:	4819      	ldr	r0, [pc, #100]	; (8013f2c <tcp_recved+0x98>)
 8013ec8:	f008 fe7e 	bl	801cbc8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ed0:	887b      	ldrh	r3, [r7, #2]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013ed6:	89fb      	ldrh	r3, [r7, #14]
 8013ed8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013edc:	d804      	bhi.n	8013ee8 <tcp_recved+0x54>
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013ee2:	89fa      	ldrh	r2, [r7, #14]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d204      	bcs.n	8013ef2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013eee:	851a      	strh	r2, [r3, #40]	; 0x28
 8013ef0:	e002      	b.n	8013ef8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	89fa      	ldrh	r2, [r7, #14]
 8013ef6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013ef8:	6878      	ldr	r0, [r7, #4]
 8013efa:	f7ff ff71 	bl	8013de0 <tcp_update_rcv_ann_wnd>
 8013efe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013f06:	d309      	bcc.n	8013f1c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	8b5b      	ldrh	r3, [r3, #26]
 8013f0c:	f043 0302 	orr.w	r3, r3, #2
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f004 fcbe 	bl	8018898 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013f1c:	3710      	adds	r7, #16
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
 8013f22:	bf00      	nop
 8013f24:	0801f128 	.word	0x0801f128
 8013f28:	0801f3c4 	.word	0x0801f3c4
 8013f2c:	0801f16c 	.word	0x0801f16c
 8013f30:	0801f3dc 	.word	0x0801f3dc

08013f34 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013f34:	b480      	push	{r7}
 8013f36:	b083      	sub	sp, #12
 8013f38:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013f3a:	2300      	movs	r3, #0
 8013f3c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013f3e:	4b1e      	ldr	r3, [pc, #120]	; (8013fb8 <tcp_new_port+0x84>)
 8013f40:	881b      	ldrh	r3, [r3, #0]
 8013f42:	3301      	adds	r3, #1
 8013f44:	b29a      	uxth	r2, r3
 8013f46:	4b1c      	ldr	r3, [pc, #112]	; (8013fb8 <tcp_new_port+0x84>)
 8013f48:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013f4a:	4b1b      	ldr	r3, [pc, #108]	; (8013fb8 <tcp_new_port+0x84>)
 8013f4c:	881b      	ldrh	r3, [r3, #0]
 8013f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f52:	4293      	cmp	r3, r2
 8013f54:	d103      	bne.n	8013f5e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8013f56:	4b18      	ldr	r3, [pc, #96]	; (8013fb8 <tcp_new_port+0x84>)
 8013f58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013f5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013f5e:	2300      	movs	r3, #0
 8013f60:	71fb      	strb	r3, [r7, #7]
 8013f62:	e01e      	b.n	8013fa2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013f64:	79fb      	ldrb	r3, [r7, #7]
 8013f66:	4a15      	ldr	r2, [pc, #84]	; (8013fbc <tcp_new_port+0x88>)
 8013f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	603b      	str	r3, [r7, #0]
 8013f70:	e011      	b.n	8013f96 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	8ada      	ldrh	r2, [r3, #22]
 8013f76:	4b10      	ldr	r3, [pc, #64]	; (8013fb8 <tcp_new_port+0x84>)
 8013f78:	881b      	ldrh	r3, [r3, #0]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d108      	bne.n	8013f90 <tcp_new_port+0x5c>
        n++;
 8013f7e:	88bb      	ldrh	r3, [r7, #4]
 8013f80:	3301      	adds	r3, #1
 8013f82:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8013f84:	88bb      	ldrh	r3, [r7, #4]
 8013f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013f8a:	d3d8      	bcc.n	8013f3e <tcp_new_port+0xa>
          return 0;
 8013f8c:	2300      	movs	r3, #0
 8013f8e:	e00d      	b.n	8013fac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8013f90:	683b      	ldr	r3, [r7, #0]
 8013f92:	68db      	ldr	r3, [r3, #12]
 8013f94:	603b      	str	r3, [r7, #0]
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d1ea      	bne.n	8013f72 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8013f9c:	79fb      	ldrb	r3, [r7, #7]
 8013f9e:	3301      	adds	r3, #1
 8013fa0:	71fb      	strb	r3, [r7, #7]
 8013fa2:	79fb      	ldrb	r3, [r7, #7]
 8013fa4:	2b03      	cmp	r3, #3
 8013fa6:	d9dd      	bls.n	8013f64 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8013fa8:	4b03      	ldr	r3, [pc, #12]	; (8013fb8 <tcp_new_port+0x84>)
 8013faa:	881b      	ldrh	r3, [r3, #0]
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	370c      	adds	r7, #12
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr
 8013fb8:	20000028 	.word	0x20000028
 8013fbc:	08021164 	.word	0x08021164

08013fc0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b08a      	sub	sp, #40	; 0x28
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	60f8      	str	r0, [r7, #12]
 8013fc8:	60b9      	str	r1, [r7, #8]
 8013fca:	603b      	str	r3, [r7, #0]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d109      	bne.n	8013fee <tcp_connect+0x2e>
 8013fda:	4b7d      	ldr	r3, [pc, #500]	; (80141d0 <tcp_connect+0x210>)
 8013fdc:	f240 4235 	movw	r2, #1077	; 0x435
 8013fe0:	497c      	ldr	r1, [pc, #496]	; (80141d4 <tcp_connect+0x214>)
 8013fe2:	487d      	ldr	r0, [pc, #500]	; (80141d8 <tcp_connect+0x218>)
 8013fe4:	f008 fdf0 	bl	801cbc8 <iprintf>
 8013fe8:	f06f 030f 	mvn.w	r3, #15
 8013fec:	e0ec      	b.n	80141c8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013fee:	68bb      	ldr	r3, [r7, #8]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d109      	bne.n	8014008 <tcp_connect+0x48>
 8013ff4:	4b76      	ldr	r3, [pc, #472]	; (80141d0 <tcp_connect+0x210>)
 8013ff6:	f240 4236 	movw	r2, #1078	; 0x436
 8013ffa:	4978      	ldr	r1, [pc, #480]	; (80141dc <tcp_connect+0x21c>)
 8013ffc:	4876      	ldr	r0, [pc, #472]	; (80141d8 <tcp_connect+0x218>)
 8013ffe:	f008 fde3 	bl	801cbc8 <iprintf>
 8014002:	f06f 030f 	mvn.w	r3, #15
 8014006:	e0df      	b.n	80141c8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8014008:	68fb      	ldr	r3, [r7, #12]
 801400a:	7d1b      	ldrb	r3, [r3, #20]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d009      	beq.n	8014024 <tcp_connect+0x64>
 8014010:	4b6f      	ldr	r3, [pc, #444]	; (80141d0 <tcp_connect+0x210>)
 8014012:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8014016:	4972      	ldr	r1, [pc, #456]	; (80141e0 <tcp_connect+0x220>)
 8014018:	486f      	ldr	r0, [pc, #444]	; (80141d8 <tcp_connect+0x218>)
 801401a:	f008 fdd5 	bl	801cbc8 <iprintf>
 801401e:	f06f 0309 	mvn.w	r3, #9
 8014022:	e0d1      	b.n	80141c8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d002      	beq.n	8014030 <tcp_connect+0x70>
 801402a:	68bb      	ldr	r3, [r7, #8]
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	e000      	b.n	8014032 <tcp_connect+0x72>
 8014030:	2300      	movs	r3, #0
 8014032:	68fa      	ldr	r2, [r7, #12]
 8014034:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	88fa      	ldrh	r2, [r7, #6]
 801403a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	7a1b      	ldrb	r3, [r3, #8]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d006      	beq.n	8014052 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	7a1b      	ldrb	r3, [r3, #8]
 8014048:	4618      	mov	r0, r3
 801404a:	f7fe fbeb 	bl	8012824 <netif_get_by_index>
 801404e:	6278      	str	r0, [r7, #36]	; 0x24
 8014050:	e005      	b.n	801405e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8014052:	68fb      	ldr	r3, [r7, #12]
 8014054:	3304      	adds	r3, #4
 8014056:	4618      	mov	r0, r3
 8014058:	f007 f9ae 	bl	801b3b8 <ip4_route>
 801405c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	2b00      	cmp	r3, #0
 8014062:	d102      	bne.n	801406a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8014064:	f06f 0303 	mvn.w	r3, #3
 8014068:	e0ae      	b.n	80141c8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d003      	beq.n	8014078 <tcp_connect+0xb8>
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d111      	bne.n	801409c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8014078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407a:	2b00      	cmp	r3, #0
 801407c:	d002      	beq.n	8014084 <tcp_connect+0xc4>
 801407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014080:	3304      	adds	r3, #4
 8014082:	e000      	b.n	8014086 <tcp_connect+0xc6>
 8014084:	2300      	movs	r3, #0
 8014086:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8014088:	69fb      	ldr	r3, [r7, #28]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d102      	bne.n	8014094 <tcp_connect+0xd4>
      return ERR_RTE;
 801408e:	f06f 0303 	mvn.w	r3, #3
 8014092:	e099      	b.n	80141c8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014094:	69fb      	ldr	r3, [r7, #28]
 8014096:	681a      	ldr	r2, [r3, #0]
 8014098:	68fb      	ldr	r3, [r7, #12]
 801409a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	8adb      	ldrh	r3, [r3, #22]
 80140a0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	8adb      	ldrh	r3, [r3, #22]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d10c      	bne.n	80140c4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80140aa:	f7ff ff43 	bl	8013f34 <tcp_new_port>
 80140ae:	4603      	mov	r3, r0
 80140b0:	461a      	mov	r2, r3
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80140b6:	68fb      	ldr	r3, [r7, #12]
 80140b8:	8adb      	ldrh	r3, [r3, #22]
 80140ba:	2b00      	cmp	r3, #0
 80140bc:	d102      	bne.n	80140c4 <tcp_connect+0x104>
      return ERR_BUF;
 80140be:	f06f 0301 	mvn.w	r3, #1
 80140c2:	e081      	b.n	80141c8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	f001 f863 	bl	8015190 <tcp_next_iss>
 80140ca:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	2200      	movs	r2, #0
 80140d0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	697a      	ldr	r2, [r7, #20]
 80140d6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	1e5a      	subs	r2, r3, #1
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	1e5a      	subs	r2, r3, #1
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	1e5a      	subs	r2, r3, #1
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80140f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801410e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014118:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	3304      	adds	r3, #4
 8014122:	461a      	mov	r2, r3
 8014124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014126:	f001 f859 	bl	80151dc <tcp_eff_send_mss_netif>
 801412a:	4603      	mov	r3, r0
 801412c:	461a      	mov	r2, r3
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	2201      	movs	r2, #1
 8014136:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	683a      	ldr	r2, [r7, #0]
 801413e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8014142:	2102      	movs	r1, #2
 8014144:	68f8      	ldr	r0, [r7, #12]
 8014146:	f004 fab9 	bl	80186bc <tcp_enqueue_flags>
 801414a:	4603      	mov	r3, r0
 801414c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801414e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d136      	bne.n	80141c4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2202      	movs	r2, #2
 801415a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801415c:	8b7b      	ldrh	r3, [r7, #26]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d021      	beq.n	80141a6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8014162:	4b20      	ldr	r3, [pc, #128]	; (80141e4 <tcp_connect+0x224>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	68fa      	ldr	r2, [r7, #12]
 8014168:	429a      	cmp	r2, r3
 801416a:	d105      	bne.n	8014178 <tcp_connect+0x1b8>
 801416c:	4b1d      	ldr	r3, [pc, #116]	; (80141e4 <tcp_connect+0x224>)
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	4a1c      	ldr	r2, [pc, #112]	; (80141e4 <tcp_connect+0x224>)
 8014174:	6013      	str	r3, [r2, #0]
 8014176:	e013      	b.n	80141a0 <tcp_connect+0x1e0>
 8014178:	4b1a      	ldr	r3, [pc, #104]	; (80141e4 <tcp_connect+0x224>)
 801417a:	681b      	ldr	r3, [r3, #0]
 801417c:	623b      	str	r3, [r7, #32]
 801417e:	e00c      	b.n	801419a <tcp_connect+0x1da>
 8014180:	6a3b      	ldr	r3, [r7, #32]
 8014182:	68db      	ldr	r3, [r3, #12]
 8014184:	68fa      	ldr	r2, [r7, #12]
 8014186:	429a      	cmp	r2, r3
 8014188:	d104      	bne.n	8014194 <tcp_connect+0x1d4>
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	68da      	ldr	r2, [r3, #12]
 801418e:	6a3b      	ldr	r3, [r7, #32]
 8014190:	60da      	str	r2, [r3, #12]
 8014192:	e005      	b.n	80141a0 <tcp_connect+0x1e0>
 8014194:	6a3b      	ldr	r3, [r7, #32]
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	623b      	str	r3, [r7, #32]
 801419a:	6a3b      	ldr	r3, [r7, #32]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d1ef      	bne.n	8014180 <tcp_connect+0x1c0>
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2200      	movs	r2, #0
 80141a4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80141a6:	4b10      	ldr	r3, [pc, #64]	; (80141e8 <tcp_connect+0x228>)
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	60da      	str	r2, [r3, #12]
 80141ae:	4a0e      	ldr	r2, [pc, #56]	; (80141e8 <tcp_connect+0x228>)
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	6013      	str	r3, [r2, #0]
 80141b4:	f005 fb1a 	bl	80197ec <tcp_timer_needed>
 80141b8:	4b0c      	ldr	r3, [pc, #48]	; (80141ec <tcp_connect+0x22c>)
 80141ba:	2201      	movs	r2, #1
 80141bc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80141be:	68f8      	ldr	r0, [r7, #12]
 80141c0:	f004 fb6a 	bl	8018898 <tcp_output>
  }
  return ret;
 80141c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3728      	adds	r7, #40	; 0x28
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	0801f128 	.word	0x0801f128
 80141d4:	0801f404 	.word	0x0801f404
 80141d8:	0801f16c 	.word	0x0801f16c
 80141dc:	0801f420 	.word	0x0801f420
 80141e0:	0801f43c 	.word	0x0801f43c
 80141e4:	2000bdc0 	.word	0x2000bdc0
 80141e8:	2000bdb4 	.word	0x2000bdb4
 80141ec:	2000bdb0 	.word	0x2000bdb0

080141f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80141f0:	b5b0      	push	{r4, r5, r7, lr}
 80141f2:	b090      	sub	sp, #64	; 0x40
 80141f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80141f6:	2300      	movs	r3, #0
 80141f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80141fc:	4b94      	ldr	r3, [pc, #592]	; (8014450 <tcp_slowtmr+0x260>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	3301      	adds	r3, #1
 8014202:	4a93      	ldr	r2, [pc, #588]	; (8014450 <tcp_slowtmr+0x260>)
 8014204:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014206:	4b93      	ldr	r3, [pc, #588]	; (8014454 <tcp_slowtmr+0x264>)
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	3301      	adds	r3, #1
 801420c:	b2da      	uxtb	r2, r3
 801420e:	4b91      	ldr	r3, [pc, #580]	; (8014454 <tcp_slowtmr+0x264>)
 8014210:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8014212:	2300      	movs	r3, #0
 8014214:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8014216:	4b90      	ldr	r3, [pc, #576]	; (8014458 <tcp_slowtmr+0x268>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801421c:	e29d      	b.n	801475a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014220:	7d1b      	ldrb	r3, [r3, #20]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d106      	bne.n	8014234 <tcp_slowtmr+0x44>
 8014226:	4b8d      	ldr	r3, [pc, #564]	; (801445c <tcp_slowtmr+0x26c>)
 8014228:	f240 42be 	movw	r2, #1214	; 0x4be
 801422c:	498c      	ldr	r1, [pc, #560]	; (8014460 <tcp_slowtmr+0x270>)
 801422e:	488d      	ldr	r0, [pc, #564]	; (8014464 <tcp_slowtmr+0x274>)
 8014230:	f008 fcca 	bl	801cbc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8014234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014236:	7d1b      	ldrb	r3, [r3, #20]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d106      	bne.n	801424a <tcp_slowtmr+0x5a>
 801423c:	4b87      	ldr	r3, [pc, #540]	; (801445c <tcp_slowtmr+0x26c>)
 801423e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8014242:	4989      	ldr	r1, [pc, #548]	; (8014468 <tcp_slowtmr+0x278>)
 8014244:	4887      	ldr	r0, [pc, #540]	; (8014464 <tcp_slowtmr+0x274>)
 8014246:	f008 fcbf 	bl	801cbc8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801424a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424c:	7d1b      	ldrb	r3, [r3, #20]
 801424e:	2b0a      	cmp	r3, #10
 8014250:	d106      	bne.n	8014260 <tcp_slowtmr+0x70>
 8014252:	4b82      	ldr	r3, [pc, #520]	; (801445c <tcp_slowtmr+0x26c>)
 8014254:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8014258:	4984      	ldr	r1, [pc, #528]	; (801446c <tcp_slowtmr+0x27c>)
 801425a:	4882      	ldr	r0, [pc, #520]	; (8014464 <tcp_slowtmr+0x274>)
 801425c:	f008 fcb4 	bl	801cbc8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8014260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014262:	7f9a      	ldrb	r2, [r3, #30]
 8014264:	4b7b      	ldr	r3, [pc, #492]	; (8014454 <tcp_slowtmr+0x264>)
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	429a      	cmp	r2, r3
 801426a:	d105      	bne.n	8014278 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014272:	68db      	ldr	r3, [r3, #12]
 8014274:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8014276:	e270      	b.n	801475a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8014278:	4b76      	ldr	r3, [pc, #472]	; (8014454 <tcp_slowtmr+0x264>)
 801427a:	781a      	ldrb	r2, [r3, #0]
 801427c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801427e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014280:	2300      	movs	r3, #0
 8014282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8014286:	2300      	movs	r3, #0
 8014288:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428e:	7d1b      	ldrb	r3, [r3, #20]
 8014290:	2b02      	cmp	r3, #2
 8014292:	d10a      	bne.n	80142aa <tcp_slowtmr+0xba>
 8014294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014296:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801429a:	2b05      	cmp	r3, #5
 801429c:	d905      	bls.n	80142aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 801429e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142a2:	3301      	adds	r3, #1
 80142a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142a8:	e11e      	b.n	80144e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80142aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80142b0:	2b0b      	cmp	r3, #11
 80142b2:	d905      	bls.n	80142c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80142b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142b8:	3301      	adds	r3, #1
 80142ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80142be:	e113      	b.n	80144e8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80142c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d075      	beq.n	80143b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80142ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d006      	beq.n	80142e0 <tcp_slowtmr+0xf0>
 80142d2:	4b62      	ldr	r3, [pc, #392]	; (801445c <tcp_slowtmr+0x26c>)
 80142d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80142d8:	4965      	ldr	r1, [pc, #404]	; (8014470 <tcp_slowtmr+0x280>)
 80142da:	4862      	ldr	r0, [pc, #392]	; (8014464 <tcp_slowtmr+0x274>)
 80142dc:	f008 fc74 	bl	801cbc8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80142e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d106      	bne.n	80142f6 <tcp_slowtmr+0x106>
 80142e8:	4b5c      	ldr	r3, [pc, #368]	; (801445c <tcp_slowtmr+0x26c>)
 80142ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80142ee:	4961      	ldr	r1, [pc, #388]	; (8014474 <tcp_slowtmr+0x284>)
 80142f0:	485c      	ldr	r0, [pc, #368]	; (8014464 <tcp_slowtmr+0x274>)
 80142f2:	f008 fc69 	bl	801cbc8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80142f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80142fc:	2b0b      	cmp	r3, #11
 80142fe:	d905      	bls.n	801430c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8014300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014304:	3301      	adds	r3, #1
 8014306:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801430a:	e0ed      	b.n	80144e8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014312:	3b01      	subs	r3, #1
 8014314:	4a58      	ldr	r2, [pc, #352]	; (8014478 <tcp_slowtmr+0x288>)
 8014316:	5cd3      	ldrb	r3, [r2, r3]
 8014318:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014320:	7c7a      	ldrb	r2, [r7, #17]
 8014322:	429a      	cmp	r2, r3
 8014324:	d907      	bls.n	8014336 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8014326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014328:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801432c:	3301      	adds	r3, #1
 801432e:	b2da      	uxtb	r2, r3
 8014330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014332:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8014336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014338:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801433c:	7c7a      	ldrb	r2, [r7, #17]
 801433e:	429a      	cmp	r2, r3
 8014340:	f200 80d2 	bhi.w	80144e8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8014344:	2301      	movs	r3, #1
 8014346:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8014348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801434e:	2b00      	cmp	r3, #0
 8014350:	d108      	bne.n	8014364 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014354:	f005 f97c 	bl	8019650 <tcp_zero_window_probe>
 8014358:	4603      	mov	r3, r0
 801435a:	2b00      	cmp	r3, #0
 801435c:	d014      	beq.n	8014388 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801435e:	2300      	movs	r3, #0
 8014360:	623b      	str	r3, [r7, #32]
 8014362:	e011      	b.n	8014388 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014366:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801436a:	4619      	mov	r1, r3
 801436c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801436e:	f004 f80d 	bl	801838c <tcp_split_unsent_seg>
 8014372:	4603      	mov	r3, r0
 8014374:	2b00      	cmp	r3, #0
 8014376:	d107      	bne.n	8014388 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801437a:	f004 fa8d 	bl	8018898 <tcp_output>
 801437e:	4603      	mov	r3, r0
 8014380:	2b00      	cmp	r3, #0
 8014382:	d101      	bne.n	8014388 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014384:	2300      	movs	r3, #0
 8014386:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014388:	6a3b      	ldr	r3, [r7, #32]
 801438a:	2b00      	cmp	r3, #0
 801438c:	f000 80ac 	beq.w	80144e8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014392:	2200      	movs	r2, #0
 8014394:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801439e:	2b06      	cmp	r3, #6
 80143a0:	f200 80a2 	bhi.w	80144e8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80143a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80143aa:	3301      	adds	r3, #1
 80143ac:	b2da      	uxtb	r2, r3
 80143ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80143b4:	e098      	b.n	80144e8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80143b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143bc:	2b00      	cmp	r3, #0
 80143be:	db0f      	blt.n	80143e0 <tcp_slowtmr+0x1f0>
 80143c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80143ca:	4293      	cmp	r3, r2
 80143cc:	d008      	beq.n	80143e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80143ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	3301      	adds	r3, #1
 80143d8:	b29b      	uxth	r3, r3
 80143da:	b21a      	sxth	r2, r3
 80143dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80143e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80143e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80143ec:	429a      	cmp	r2, r3
 80143ee:	db7b      	blt.n	80144e8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80143f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80143f2:	f004 fd5b 	bl	8018eac <tcp_rexmit_rto_prepare>
 80143f6:	4603      	mov	r3, r0
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d007      	beq.n	801440c <tcp_slowtmr+0x21c>
 80143fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014400:	2b00      	cmp	r3, #0
 8014402:	d171      	bne.n	80144e8 <tcp_slowtmr+0x2f8>
 8014404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014408:	2b00      	cmp	r3, #0
 801440a:	d06d      	beq.n	80144e8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801440e:	7d1b      	ldrb	r3, [r3, #20]
 8014410:	2b02      	cmp	r3, #2
 8014412:	d03a      	beq.n	801448a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801441a:	2b0c      	cmp	r3, #12
 801441c:	bf28      	it	cs
 801441e:	230c      	movcs	r3, #12
 8014420:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8014422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014424:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014428:	10db      	asrs	r3, r3, #3
 801442a:	b21b      	sxth	r3, r3
 801442c:	461a      	mov	r2, r3
 801442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014430:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014434:	4413      	add	r3, r2
 8014436:	7efa      	ldrb	r2, [r7, #27]
 8014438:	4910      	ldr	r1, [pc, #64]	; (801447c <tcp_slowtmr+0x28c>)
 801443a:	5c8a      	ldrb	r2, [r1, r2]
 801443c:	4093      	lsls	r3, r2
 801443e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014440:	697b      	ldr	r3, [r7, #20]
 8014442:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014446:	4293      	cmp	r3, r2
 8014448:	dc1a      	bgt.n	8014480 <tcp_slowtmr+0x290>
 801444a:	697b      	ldr	r3, [r7, #20]
 801444c:	b21a      	sxth	r2, r3
 801444e:	e019      	b.n	8014484 <tcp_slowtmr+0x294>
 8014450:	2000bdb8 	.word	0x2000bdb8
 8014454:	20008716 	.word	0x20008716
 8014458:	2000bdb4 	.word	0x2000bdb4
 801445c:	0801f128 	.word	0x0801f128
 8014460:	0801f46c 	.word	0x0801f46c
 8014464:	0801f16c 	.word	0x0801f16c
 8014468:	0801f498 	.word	0x0801f498
 801446c:	0801f4c4 	.word	0x0801f4c4
 8014470:	0801f4f4 	.word	0x0801f4f4
 8014474:	0801f528 	.word	0x0801f528
 8014478:	0802115c 	.word	0x0802115c
 801447c:	0802114c 	.word	0x0802114c
 8014480:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014486:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448c:	2200      	movs	r2, #0
 801448e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014492:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014498:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801449c:	4293      	cmp	r3, r2
 801449e:	bf28      	it	cs
 80144a0:	4613      	movcs	r3, r2
 80144a2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80144a4:	8a7b      	ldrh	r3, [r7, #18]
 80144a6:	085b      	lsrs	r3, r3, #1
 80144a8:	b29a      	uxth	r2, r3
 80144aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80144b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80144b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144ba:	005b      	lsls	r3, r3, #1
 80144bc:	b29b      	uxth	r3, r3
 80144be:	429a      	cmp	r2, r3
 80144c0:	d206      	bcs.n	80144d0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80144c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144c6:	005b      	lsls	r3, r3, #1
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80144d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80144d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80144da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144dc:	2200      	movs	r2, #0
 80144de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80144e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144e4:	f004 fd52 	bl	8018f8c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80144e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ea:	7d1b      	ldrb	r3, [r3, #20]
 80144ec:	2b06      	cmp	r3, #6
 80144ee:	d111      	bne.n	8014514 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80144f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f2:	8b5b      	ldrh	r3, [r3, #26]
 80144f4:	f003 0310 	and.w	r3, r3, #16
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d00b      	beq.n	8014514 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144fc:	4b9c      	ldr	r3, [pc, #624]	; (8014770 <tcp_slowtmr+0x580>)
 80144fe:	681a      	ldr	r2, [r3, #0]
 8014500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014502:	6a1b      	ldr	r3, [r3, #32]
 8014504:	1ad3      	subs	r3, r2, r3
 8014506:	2b28      	cmp	r3, #40	; 0x28
 8014508:	d904      	bls.n	8014514 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801450a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801450e:	3301      	adds	r3, #1
 8014510:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014516:	7a5b      	ldrb	r3, [r3, #9]
 8014518:	f003 0308 	and.w	r3, r3, #8
 801451c:	2b00      	cmp	r3, #0
 801451e:	d04a      	beq.n	80145b6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8014520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014522:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014524:	2b04      	cmp	r3, #4
 8014526:	d003      	beq.n	8014530 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8014528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801452a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801452c:	2b07      	cmp	r3, #7
 801452e:	d142      	bne.n	80145b6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014530:	4b8f      	ldr	r3, [pc, #572]	; (8014770 <tcp_slowtmr+0x580>)
 8014532:	681a      	ldr	r2, [r3, #0]
 8014534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014536:	6a1b      	ldr	r3, [r3, #32]
 8014538:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801453a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014540:	4b8c      	ldr	r3, [pc, #560]	; (8014774 <tcp_slowtmr+0x584>)
 8014542:	440b      	add	r3, r1
 8014544:	498c      	ldr	r1, [pc, #560]	; (8014778 <tcp_slowtmr+0x588>)
 8014546:	fba1 1303 	umull	r1, r3, r1, r3
 801454a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801454c:	429a      	cmp	r2, r3
 801454e:	d90a      	bls.n	8014566 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014554:	3301      	adds	r3, #1
 8014556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801455a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801455e:	3301      	adds	r3, #1
 8014560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014564:	e027      	b.n	80145b6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014566:	4b82      	ldr	r3, [pc, #520]	; (8014770 <tcp_slowtmr+0x580>)
 8014568:	681a      	ldr	r2, [r3, #0]
 801456a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456c:	6a1b      	ldr	r3, [r3, #32]
 801456e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014572:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014578:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801457c:	4618      	mov	r0, r3
 801457e:	4b7f      	ldr	r3, [pc, #508]	; (801477c <tcp_slowtmr+0x58c>)
 8014580:	fb03 f300 	mul.w	r3, r3, r0
 8014584:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014586:	497c      	ldr	r1, [pc, #496]	; (8014778 <tcp_slowtmr+0x588>)
 8014588:	fba1 1303 	umull	r1, r3, r1, r3
 801458c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801458e:	429a      	cmp	r2, r3
 8014590:	d911      	bls.n	80145b6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8014592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014594:	f005 f81c 	bl	80195d0 <tcp_keepalive>
 8014598:	4603      	mov	r3, r0
 801459a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801459e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d107      	bne.n	80145b6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80145a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80145ac:	3301      	adds	r3, #1
 80145ae:	b2da      	uxtb	r2, r3
 80145b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80145b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d011      	beq.n	80145e2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80145be:	4b6c      	ldr	r3, [pc, #432]	; (8014770 <tcp_slowtmr+0x580>)
 80145c0:	681a      	ldr	r2, [r3, #0]
 80145c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145c4:	6a1b      	ldr	r3, [r3, #32]
 80145c6:	1ad2      	subs	r2, r2, r3
 80145c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80145ce:	4619      	mov	r1, r3
 80145d0:	460b      	mov	r3, r1
 80145d2:	005b      	lsls	r3, r3, #1
 80145d4:	440b      	add	r3, r1
 80145d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80145d8:	429a      	cmp	r2, r3
 80145da:	d302      	bcc.n	80145e2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80145dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145de:	f000 fea7 	bl	8015330 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80145e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e4:	7d1b      	ldrb	r3, [r3, #20]
 80145e6:	2b03      	cmp	r3, #3
 80145e8:	d10b      	bne.n	8014602 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80145ea:	4b61      	ldr	r3, [pc, #388]	; (8014770 <tcp_slowtmr+0x580>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145f0:	6a1b      	ldr	r3, [r3, #32]
 80145f2:	1ad3      	subs	r3, r2, r3
 80145f4:	2b28      	cmp	r3, #40	; 0x28
 80145f6:	d904      	bls.n	8014602 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80145f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145fc:	3301      	adds	r3, #1
 80145fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8014602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014604:	7d1b      	ldrb	r3, [r3, #20]
 8014606:	2b09      	cmp	r3, #9
 8014608:	d10b      	bne.n	8014622 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801460a:	4b59      	ldr	r3, [pc, #356]	; (8014770 <tcp_slowtmr+0x580>)
 801460c:	681a      	ldr	r2, [r3, #0]
 801460e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014610:	6a1b      	ldr	r3, [r3, #32]
 8014612:	1ad3      	subs	r3, r2, r3
 8014614:	2bf0      	cmp	r3, #240	; 0xf0
 8014616:	d904      	bls.n	8014622 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8014618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801461c:	3301      	adds	r3, #1
 801461e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014626:	2b00      	cmp	r3, #0
 8014628:	d060      	beq.n	80146ec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801462a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014630:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8014632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014634:	f000 fcc8 	bl	8014fc8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801463a:	2b00      	cmp	r3, #0
 801463c:	d010      	beq.n	8014660 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801463e:	4b50      	ldr	r3, [pc, #320]	; (8014780 <tcp_slowtmr+0x590>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014644:	429a      	cmp	r2, r3
 8014646:	d106      	bne.n	8014656 <tcp_slowtmr+0x466>
 8014648:	4b4e      	ldr	r3, [pc, #312]	; (8014784 <tcp_slowtmr+0x594>)
 801464a:	f240 526d 	movw	r2, #1389	; 0x56d
 801464e:	494e      	ldr	r1, [pc, #312]	; (8014788 <tcp_slowtmr+0x598>)
 8014650:	484e      	ldr	r0, [pc, #312]	; (801478c <tcp_slowtmr+0x59c>)
 8014652:	f008 fab9 	bl	801cbc8 <iprintf>
        prev->next = pcb->next;
 8014656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014658:	68da      	ldr	r2, [r3, #12]
 801465a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465c:	60da      	str	r2, [r3, #12]
 801465e:	e00f      	b.n	8014680 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014660:	4b47      	ldr	r3, [pc, #284]	; (8014780 <tcp_slowtmr+0x590>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014666:	429a      	cmp	r2, r3
 8014668:	d006      	beq.n	8014678 <tcp_slowtmr+0x488>
 801466a:	4b46      	ldr	r3, [pc, #280]	; (8014784 <tcp_slowtmr+0x594>)
 801466c:	f240 5271 	movw	r2, #1393	; 0x571
 8014670:	4947      	ldr	r1, [pc, #284]	; (8014790 <tcp_slowtmr+0x5a0>)
 8014672:	4846      	ldr	r0, [pc, #280]	; (801478c <tcp_slowtmr+0x59c>)
 8014674:	f008 faa8 	bl	801cbc8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	4a40      	ldr	r2, [pc, #256]	; (8014780 <tcp_slowtmr+0x590>)
 801467e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014684:	2b00      	cmp	r3, #0
 8014686:	d013      	beq.n	80146b0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801468c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801468e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014690:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014694:	3304      	adds	r3, #4
 8014696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014698:	8ad2      	ldrh	r2, [r2, #22]
 801469a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801469c:	8b09      	ldrh	r1, [r1, #24]
 801469e:	9102      	str	r1, [sp, #8]
 80146a0:	9201      	str	r2, [sp, #4]
 80146a2:	9300      	str	r3, [sp, #0]
 80146a4:	462b      	mov	r3, r5
 80146a6:	4622      	mov	r2, r4
 80146a8:	4601      	mov	r1, r0
 80146aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80146ac:	f004 fedc 	bl	8019468 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80146b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b2:	691b      	ldr	r3, [r3, #16]
 80146b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80146b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b8:	7d1b      	ldrb	r3, [r3, #20]
 80146ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80146bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80146c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80146c6:	6838      	ldr	r0, [r7, #0]
 80146c8:	f7fe fee2 	bl	8013490 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80146cc:	4b31      	ldr	r3, [pc, #196]	; (8014794 <tcp_slowtmr+0x5a4>)
 80146ce:	2200      	movs	r2, #0
 80146d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d004      	beq.n	80146e2 <tcp_slowtmr+0x4f2>
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	f06f 010c 	mvn.w	r1, #12
 80146de:	68b8      	ldr	r0, [r7, #8]
 80146e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80146e2:	4b2c      	ldr	r3, [pc, #176]	; (8014794 <tcp_slowtmr+0x5a4>)
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d037      	beq.n	801475a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80146ea:	e592      	b.n	8014212 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80146ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80146f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146f2:	68db      	ldr	r3, [r3, #12]
 80146f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80146f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146f8:	7f1b      	ldrb	r3, [r3, #28]
 80146fa:	3301      	adds	r3, #1
 80146fc:	b2da      	uxtb	r2, r3
 80146fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014700:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014704:	7f1a      	ldrb	r2, [r3, #28]
 8014706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014708:	7f5b      	ldrb	r3, [r3, #29]
 801470a:	429a      	cmp	r2, r3
 801470c:	d325      	bcc.n	801475a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801470e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014710:	2200      	movs	r2, #0
 8014712:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014714:	4b1f      	ldr	r3, [pc, #124]	; (8014794 <tcp_slowtmr+0x5a4>)
 8014716:	2200      	movs	r2, #0
 8014718:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801471a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014720:	2b00      	cmp	r3, #0
 8014722:	d00b      	beq.n	801473c <tcp_slowtmr+0x54c>
 8014724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801472a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801472c:	6912      	ldr	r2, [r2, #16]
 801472e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014730:	4610      	mov	r0, r2
 8014732:	4798      	blx	r3
 8014734:	4603      	mov	r3, r0
 8014736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801473a:	e002      	b.n	8014742 <tcp_slowtmr+0x552>
 801473c:	2300      	movs	r3, #0
 801473e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014742:	4b14      	ldr	r3, [pc, #80]	; (8014794 <tcp_slowtmr+0x5a4>)
 8014744:	781b      	ldrb	r3, [r3, #0]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d000      	beq.n	801474c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801474a:	e562      	b.n	8014212 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801474c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014750:	2b00      	cmp	r3, #0
 8014752:	d102      	bne.n	801475a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8014754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014756:	f004 f89f 	bl	8018898 <tcp_output>
  while (pcb != NULL) {
 801475a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801475c:	2b00      	cmp	r3, #0
 801475e:	f47f ad5e 	bne.w	801421e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014762:	2300      	movs	r3, #0
 8014764:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014766:	4b0c      	ldr	r3, [pc, #48]	; (8014798 <tcp_slowtmr+0x5a8>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801476c:	e069      	b.n	8014842 <tcp_slowtmr+0x652>
 801476e:	bf00      	nop
 8014770:	2000bdb8 	.word	0x2000bdb8
 8014774:	000a4cb8 	.word	0x000a4cb8
 8014778:	10624dd3 	.word	0x10624dd3
 801477c:	000124f8 	.word	0x000124f8
 8014780:	2000bdb4 	.word	0x2000bdb4
 8014784:	0801f128 	.word	0x0801f128
 8014788:	0801f560 	.word	0x0801f560
 801478c:	0801f16c 	.word	0x0801f16c
 8014790:	0801f58c 	.word	0x0801f58c
 8014794:	2000bdb0 	.word	0x2000bdb0
 8014798:	2000bdc4 	.word	0x2000bdc4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801479e:	7d1b      	ldrb	r3, [r3, #20]
 80147a0:	2b0a      	cmp	r3, #10
 80147a2:	d006      	beq.n	80147b2 <tcp_slowtmr+0x5c2>
 80147a4:	4b2a      	ldr	r3, [pc, #168]	; (8014850 <tcp_slowtmr+0x660>)
 80147a6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80147aa:	492a      	ldr	r1, [pc, #168]	; (8014854 <tcp_slowtmr+0x664>)
 80147ac:	482a      	ldr	r0, [pc, #168]	; (8014858 <tcp_slowtmr+0x668>)
 80147ae:	f008 fa0b 	bl	801cbc8 <iprintf>
    pcb_remove = 0;
 80147b2:	2300      	movs	r3, #0
 80147b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80147b8:	4b28      	ldr	r3, [pc, #160]	; (801485c <tcp_slowtmr+0x66c>)
 80147ba:	681a      	ldr	r2, [r3, #0]
 80147bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147be:	6a1b      	ldr	r3, [r3, #32]
 80147c0:	1ad3      	subs	r3, r2, r3
 80147c2:	2bf0      	cmp	r3, #240	; 0xf0
 80147c4:	d904      	bls.n	80147d0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80147c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147ca:	3301      	adds	r3, #1
 80147cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80147d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d02f      	beq.n	8014838 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80147d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80147da:	f000 fbf5 	bl	8014fc8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80147de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d010      	beq.n	8014806 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80147e4:	4b1e      	ldr	r3, [pc, #120]	; (8014860 <tcp_slowtmr+0x670>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80147ea:	429a      	cmp	r2, r3
 80147ec:	d106      	bne.n	80147fc <tcp_slowtmr+0x60c>
 80147ee:	4b18      	ldr	r3, [pc, #96]	; (8014850 <tcp_slowtmr+0x660>)
 80147f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80147f4:	491b      	ldr	r1, [pc, #108]	; (8014864 <tcp_slowtmr+0x674>)
 80147f6:	4818      	ldr	r0, [pc, #96]	; (8014858 <tcp_slowtmr+0x668>)
 80147f8:	f008 f9e6 	bl	801cbc8 <iprintf>
        prev->next = pcb->next;
 80147fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147fe:	68da      	ldr	r2, [r3, #12]
 8014800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014802:	60da      	str	r2, [r3, #12]
 8014804:	e00f      	b.n	8014826 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014806:	4b16      	ldr	r3, [pc, #88]	; (8014860 <tcp_slowtmr+0x670>)
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801480c:	429a      	cmp	r2, r3
 801480e:	d006      	beq.n	801481e <tcp_slowtmr+0x62e>
 8014810:	4b0f      	ldr	r3, [pc, #60]	; (8014850 <tcp_slowtmr+0x660>)
 8014812:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014816:	4914      	ldr	r1, [pc, #80]	; (8014868 <tcp_slowtmr+0x678>)
 8014818:	480f      	ldr	r0, [pc, #60]	; (8014858 <tcp_slowtmr+0x668>)
 801481a:	f008 f9d5 	bl	801cbc8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	4a0f      	ldr	r2, [pc, #60]	; (8014860 <tcp_slowtmr+0x670>)
 8014824:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014828:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801482a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801482c:	68db      	ldr	r3, [r3, #12]
 801482e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014830:	69f8      	ldr	r0, [r7, #28]
 8014832:	f7fe fe2d 	bl	8013490 <tcp_free>
 8014836:	e004      	b.n	8014842 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801483c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014844:	2b00      	cmp	r3, #0
 8014846:	d1a9      	bne.n	801479c <tcp_slowtmr+0x5ac>
    }
  }
}
 8014848:	bf00      	nop
 801484a:	3730      	adds	r7, #48	; 0x30
 801484c:	46bd      	mov	sp, r7
 801484e:	bdb0      	pop	{r4, r5, r7, pc}
 8014850:	0801f128 	.word	0x0801f128
 8014854:	0801f5b8 	.word	0x0801f5b8
 8014858:	0801f16c 	.word	0x0801f16c
 801485c:	2000bdb8 	.word	0x2000bdb8
 8014860:	2000bdc4 	.word	0x2000bdc4
 8014864:	0801f5e8 	.word	0x0801f5e8
 8014868:	0801f610 	.word	0x0801f610

0801486c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014872:	4b2d      	ldr	r3, [pc, #180]	; (8014928 <tcp_fasttmr+0xbc>)
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	3301      	adds	r3, #1
 8014878:	b2da      	uxtb	r2, r3
 801487a:	4b2b      	ldr	r3, [pc, #172]	; (8014928 <tcp_fasttmr+0xbc>)
 801487c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801487e:	4b2b      	ldr	r3, [pc, #172]	; (801492c <tcp_fasttmr+0xc0>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014884:	e048      	b.n	8014918 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	7f9a      	ldrb	r2, [r3, #30]
 801488a:	4b27      	ldr	r3, [pc, #156]	; (8014928 <tcp_fasttmr+0xbc>)
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	429a      	cmp	r2, r3
 8014890:	d03f      	beq.n	8014912 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014892:	4b25      	ldr	r3, [pc, #148]	; (8014928 <tcp_fasttmr+0xbc>)
 8014894:	781a      	ldrb	r2, [r3, #0]
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	8b5b      	ldrh	r3, [r3, #26]
 801489e:	f003 0301 	and.w	r3, r3, #1
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d010      	beq.n	80148c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	8b5b      	ldrh	r3, [r3, #26]
 80148aa:	f043 0302 	orr.w	r3, r3, #2
 80148ae:	b29a      	uxth	r2, r3
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80148b4:	6878      	ldr	r0, [r7, #4]
 80148b6:	f003 ffef 	bl	8018898 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	8b5b      	ldrh	r3, [r3, #26]
 80148be:	f023 0303 	bic.w	r3, r3, #3
 80148c2:	b29a      	uxth	r2, r3
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	8b5b      	ldrh	r3, [r3, #26]
 80148cc:	f003 0308 	and.w	r3, r3, #8
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d009      	beq.n	80148e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	8b5b      	ldrh	r3, [r3, #26]
 80148d8:	f023 0308 	bic.w	r3, r3, #8
 80148dc:	b29a      	uxth	r2, r3
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f7fe ff64 	bl	80137b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d00a      	beq.n	801490c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80148f6:	4b0e      	ldr	r3, [pc, #56]	; (8014930 <tcp_fasttmr+0xc4>)
 80148f8:	2200      	movs	r2, #0
 80148fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80148fc:	6878      	ldr	r0, [r7, #4]
 80148fe:	f000 f819 	bl	8014934 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014902:	4b0b      	ldr	r3, [pc, #44]	; (8014930 <tcp_fasttmr+0xc4>)
 8014904:	781b      	ldrb	r3, [r3, #0]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d000      	beq.n	801490c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801490a:	e7b8      	b.n	801487e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801490c:	683b      	ldr	r3, [r7, #0]
 801490e:	607b      	str	r3, [r7, #4]
 8014910:	e002      	b.n	8014918 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	68db      	ldr	r3, [r3, #12]
 8014916:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d1b3      	bne.n	8014886 <tcp_fasttmr+0x1a>
    }
  }
}
 801491e:	bf00      	nop
 8014920:	3708      	adds	r7, #8
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	20008716 	.word	0x20008716
 801492c:	2000bdb4 	.word	0x2000bdb4
 8014930:	2000bdb0 	.word	0x2000bdb0

08014934 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8014934:	b590      	push	{r4, r7, lr}
 8014936:	b085      	sub	sp, #20
 8014938:	af00      	add	r7, sp, #0
 801493a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d109      	bne.n	8014956 <tcp_process_refused_data+0x22>
 8014942:	4b37      	ldr	r3, [pc, #220]	; (8014a20 <tcp_process_refused_data+0xec>)
 8014944:	f240 6209 	movw	r2, #1545	; 0x609
 8014948:	4936      	ldr	r1, [pc, #216]	; (8014a24 <tcp_process_refused_data+0xf0>)
 801494a:	4837      	ldr	r0, [pc, #220]	; (8014a28 <tcp_process_refused_data+0xf4>)
 801494c:	f008 f93c 	bl	801cbc8 <iprintf>
 8014950:	f06f 030f 	mvn.w	r3, #15
 8014954:	e060      	b.n	8014a18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801495a:	7b5b      	ldrb	r3, [r3, #13]
 801495c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014962:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2200      	movs	r2, #0
 8014968:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014970:	2b00      	cmp	r3, #0
 8014972:	d00b      	beq.n	801498c <tcp_process_refused_data+0x58>
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	6918      	ldr	r0, [r3, #16]
 801497e:	2300      	movs	r3, #0
 8014980:	68ba      	ldr	r2, [r7, #8]
 8014982:	6879      	ldr	r1, [r7, #4]
 8014984:	47a0      	blx	r4
 8014986:	4603      	mov	r3, r0
 8014988:	73fb      	strb	r3, [r7, #15]
 801498a:	e007      	b.n	801499c <tcp_process_refused_data+0x68>
 801498c:	2300      	movs	r3, #0
 801498e:	68ba      	ldr	r2, [r7, #8]
 8014990:	6879      	ldr	r1, [r7, #4]
 8014992:	2000      	movs	r0, #0
 8014994:	f000 f8a2 	bl	8014adc <tcp_recv_null>
 8014998:	4603      	mov	r3, r0
 801499a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801499c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d12a      	bne.n	80149fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80149a4:	7bbb      	ldrb	r3, [r7, #14]
 80149a6:	f003 0320 	and.w	r3, r3, #32
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d033      	beq.n	8014a16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80149b6:	d005      	beq.n	80149c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80149bc:	3301      	adds	r3, #1
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	d00b      	beq.n	80149e6 <tcp_process_refused_data+0xb2>
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6918      	ldr	r0, [r3, #16]
 80149d8:	2300      	movs	r3, #0
 80149da:	2200      	movs	r2, #0
 80149dc:	6879      	ldr	r1, [r7, #4]
 80149de:	47a0      	blx	r4
 80149e0:	4603      	mov	r3, r0
 80149e2:	73fb      	strb	r3, [r7, #15]
 80149e4:	e001      	b.n	80149ea <tcp_process_refused_data+0xb6>
 80149e6:	2300      	movs	r3, #0
 80149e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80149ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149ee:	f113 0f0d 	cmn.w	r3, #13
 80149f2:	d110      	bne.n	8014a16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80149f4:	f06f 030c 	mvn.w	r3, #12
 80149f8:	e00e      	b.n	8014a18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80149fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149fe:	f113 0f0d 	cmn.w	r3, #13
 8014a02:	d102      	bne.n	8014a0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014a04:	f06f 030c 	mvn.w	r3, #12
 8014a08:	e006      	b.n	8014a18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	68ba      	ldr	r2, [r7, #8]
 8014a0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014a10:	f06f 0304 	mvn.w	r3, #4
 8014a14:	e000      	b.n	8014a18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8014a16:	2300      	movs	r3, #0
}
 8014a18:	4618      	mov	r0, r3
 8014a1a:	3714      	adds	r7, #20
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	bd90      	pop	{r4, r7, pc}
 8014a20:	0801f128 	.word	0x0801f128
 8014a24:	0801f638 	.word	0x0801f638
 8014a28:	0801f16c 	.word	0x0801f16c

08014a2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b084      	sub	sp, #16
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8014a34:	e007      	b.n	8014a46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f000 f809 	bl	8014a54 <tcp_seg_free>
    seg = next;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d1f4      	bne.n	8014a36 <tcp_segs_free+0xa>
  }
}
 8014a4c:	bf00      	nop
 8014a4e:	3710      	adds	r7, #16
 8014a50:	46bd      	mov	sp, r7
 8014a52:	bd80      	pop	{r7, pc}

08014a54 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b082      	sub	sp, #8
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d00c      	beq.n	8014a7c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d004      	beq.n	8014a74 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	685b      	ldr	r3, [r3, #4]
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f7fe fa62 	bl	8012f38 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014a74:	6879      	ldr	r1, [r7, #4]
 8014a76:	2003      	movs	r0, #3
 8014a78:	f7fd fbbe 	bl	80121f8 <memp_free>
  }
}
 8014a7c:	bf00      	nop
 8014a7e:	3708      	adds	r7, #8
 8014a80:	46bd      	mov	sp, r7
 8014a82:	bd80      	pop	{r7, pc}

08014a84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014a84:	b580      	push	{r7, lr}
 8014a86:	b084      	sub	sp, #16
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d106      	bne.n	8014aa0 <tcp_seg_copy+0x1c>
 8014a92:	4b0f      	ldr	r3, [pc, #60]	; (8014ad0 <tcp_seg_copy+0x4c>)
 8014a94:	f240 6282 	movw	r2, #1666	; 0x682
 8014a98:	490e      	ldr	r1, [pc, #56]	; (8014ad4 <tcp_seg_copy+0x50>)
 8014a9a:	480f      	ldr	r0, [pc, #60]	; (8014ad8 <tcp_seg_copy+0x54>)
 8014a9c:	f008 f894 	bl	801cbc8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014aa0:	2003      	movs	r0, #3
 8014aa2:	f7fd fb33 	bl	801210c <memp_malloc>
 8014aa6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d101      	bne.n	8014ab2 <tcp_seg_copy+0x2e>
    return NULL;
 8014aae:	2300      	movs	r3, #0
 8014ab0:	e00a      	b.n	8014ac8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014ab2:	2210      	movs	r2, #16
 8014ab4:	6879      	ldr	r1, [r7, #4]
 8014ab6:	68f8      	ldr	r0, [r7, #12]
 8014ab8:	f008 f873 	bl	801cba2 <memcpy>
  pbuf_ref(cseg->p);
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	685b      	ldr	r3, [r3, #4]
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fe fadf 	bl	8013084 <pbuf_ref>
  return cseg;
 8014ac6:	68fb      	ldr	r3, [r7, #12]
}
 8014ac8:	4618      	mov	r0, r3
 8014aca:	3710      	adds	r7, #16
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}
 8014ad0:	0801f128 	.word	0x0801f128
 8014ad4:	0801f67c 	.word	0x0801f67c
 8014ad8:	0801f16c 	.word	0x0801f16c

08014adc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b084      	sub	sp, #16
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	60f8      	str	r0, [r7, #12]
 8014ae4:	60b9      	str	r1, [r7, #8]
 8014ae6:	607a      	str	r2, [r7, #4]
 8014ae8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014aea:	68bb      	ldr	r3, [r7, #8]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d109      	bne.n	8014b04 <tcp_recv_null+0x28>
 8014af0:	4b12      	ldr	r3, [pc, #72]	; (8014b3c <tcp_recv_null+0x60>)
 8014af2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014af6:	4912      	ldr	r1, [pc, #72]	; (8014b40 <tcp_recv_null+0x64>)
 8014af8:	4812      	ldr	r0, [pc, #72]	; (8014b44 <tcp_recv_null+0x68>)
 8014afa:	f008 f865 	bl	801cbc8 <iprintf>
 8014afe:	f06f 030f 	mvn.w	r3, #15
 8014b02:	e016      	b.n	8014b32 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d009      	beq.n	8014b1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	891b      	ldrh	r3, [r3, #8]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	68b8      	ldr	r0, [r7, #8]
 8014b12:	f7ff f9bf 	bl	8013e94 <tcp_recved>
    pbuf_free(p);
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f7fe fa0e 	bl	8012f38 <pbuf_free>
 8014b1c:	e008      	b.n	8014b30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d104      	bne.n	8014b30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014b26:	68b8      	ldr	r0, [r7, #8]
 8014b28:	f7fe fea8 	bl	801387c <tcp_close>
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	e000      	b.n	8014b32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014b30:	2300      	movs	r3, #0
}
 8014b32:	4618      	mov	r0, r3
 8014b34:	3710      	adds	r7, #16
 8014b36:	46bd      	mov	sp, r7
 8014b38:	bd80      	pop	{r7, pc}
 8014b3a:	bf00      	nop
 8014b3c:	0801f128 	.word	0x0801f128
 8014b40:	0801f698 	.word	0x0801f698
 8014b44:	0801f16c 	.word	0x0801f16c

08014b48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b086      	sub	sp, #24
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	4603      	mov	r3, r0
 8014b50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	db01      	blt.n	8014b5e <tcp_kill_prio+0x16>
 8014b5a:	79fb      	ldrb	r3, [r7, #7]
 8014b5c:	e000      	b.n	8014b60 <tcp_kill_prio+0x18>
 8014b5e:	237f      	movs	r3, #127	; 0x7f
 8014b60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014b62:	7afb      	ldrb	r3, [r7, #11]
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d034      	beq.n	8014bd2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014b68:	7afb      	ldrb	r3, [r7, #11]
 8014b6a:	3b01      	subs	r3, #1
 8014b6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014b72:	2300      	movs	r3, #0
 8014b74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b76:	4b19      	ldr	r3, [pc, #100]	; (8014bdc <tcp_kill_prio+0x94>)
 8014b78:	681b      	ldr	r3, [r3, #0]
 8014b7a:	617b      	str	r3, [r7, #20]
 8014b7c:	e01f      	b.n	8014bbe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014b7e:	697b      	ldr	r3, [r7, #20]
 8014b80:	7d5b      	ldrb	r3, [r3, #21]
 8014b82:	7afa      	ldrb	r2, [r7, #11]
 8014b84:	429a      	cmp	r2, r3
 8014b86:	d80c      	bhi.n	8014ba2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b88:	697b      	ldr	r3, [r7, #20]
 8014b8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014b8c:	7afa      	ldrb	r2, [r7, #11]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d112      	bne.n	8014bb8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b92:	4b13      	ldr	r3, [pc, #76]	; (8014be0 <tcp_kill_prio+0x98>)
 8014b94:	681a      	ldr	r2, [r3, #0]
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	6a1b      	ldr	r3, [r3, #32]
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d80a      	bhi.n	8014bb8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014ba2:	4b0f      	ldr	r3, [pc, #60]	; (8014be0 <tcp_kill_prio+0x98>)
 8014ba4:	681a      	ldr	r2, [r3, #0]
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	6a1b      	ldr	r3, [r3, #32]
 8014baa:	1ad3      	subs	r3, r2, r3
 8014bac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014bb2:	697b      	ldr	r3, [r7, #20]
 8014bb4:	7d5b      	ldrb	r3, [r3, #21]
 8014bb6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	617b      	str	r3, [r7, #20]
 8014bbe:	697b      	ldr	r3, [r7, #20]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d1dc      	bne.n	8014b7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d004      	beq.n	8014bd4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014bca:	6938      	ldr	r0, [r7, #16]
 8014bcc:	f7fe ff9a 	bl	8013b04 <tcp_abort>
 8014bd0:	e000      	b.n	8014bd4 <tcp_kill_prio+0x8c>
    return;
 8014bd2:	bf00      	nop
  }
}
 8014bd4:	3718      	adds	r7, #24
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}
 8014bda:	bf00      	nop
 8014bdc:	2000bdb4 	.word	0x2000bdb4
 8014be0:	2000bdb8 	.word	0x2000bdb8

08014be4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b086      	sub	sp, #24
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	4603      	mov	r3, r0
 8014bec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014bee:	79fb      	ldrb	r3, [r7, #7]
 8014bf0:	2b08      	cmp	r3, #8
 8014bf2:	d009      	beq.n	8014c08 <tcp_kill_state+0x24>
 8014bf4:	79fb      	ldrb	r3, [r7, #7]
 8014bf6:	2b09      	cmp	r3, #9
 8014bf8:	d006      	beq.n	8014c08 <tcp_kill_state+0x24>
 8014bfa:	4b1a      	ldr	r3, [pc, #104]	; (8014c64 <tcp_kill_state+0x80>)
 8014bfc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014c00:	4919      	ldr	r1, [pc, #100]	; (8014c68 <tcp_kill_state+0x84>)
 8014c02:	481a      	ldr	r0, [pc, #104]	; (8014c6c <tcp_kill_state+0x88>)
 8014c04:	f007 ffe0 	bl	801cbc8 <iprintf>

  inactivity = 0;
 8014c08:	2300      	movs	r3, #0
 8014c0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c10:	4b17      	ldr	r3, [pc, #92]	; (8014c70 <tcp_kill_state+0x8c>)
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	617b      	str	r3, [r7, #20]
 8014c16:	e017      	b.n	8014c48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	7d1b      	ldrb	r3, [r3, #20]
 8014c1c:	79fa      	ldrb	r2, [r7, #7]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	d10f      	bne.n	8014c42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c22:	4b14      	ldr	r3, [pc, #80]	; (8014c74 <tcp_kill_state+0x90>)
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	6a1b      	ldr	r3, [r3, #32]
 8014c2a:	1ad3      	subs	r3, r2, r3
 8014c2c:	68fa      	ldr	r2, [r7, #12]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d807      	bhi.n	8014c42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014c32:	4b10      	ldr	r3, [pc, #64]	; (8014c74 <tcp_kill_state+0x90>)
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	6a1b      	ldr	r3, [r3, #32]
 8014c3a:	1ad3      	subs	r3, r2, r3
 8014c3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c42:	697b      	ldr	r3, [r7, #20]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	617b      	str	r3, [r7, #20]
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1e4      	bne.n	8014c18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014c4e:	693b      	ldr	r3, [r7, #16]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d003      	beq.n	8014c5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014c54:	2100      	movs	r1, #0
 8014c56:	6938      	ldr	r0, [r7, #16]
 8014c58:	f7fe fe96 	bl	8013988 <tcp_abandon>
  }
}
 8014c5c:	bf00      	nop
 8014c5e:	3718      	adds	r7, #24
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bd80      	pop	{r7, pc}
 8014c64:	0801f128 	.word	0x0801f128
 8014c68:	0801f6b4 	.word	0x0801f6b4
 8014c6c:	0801f16c 	.word	0x0801f16c
 8014c70:	2000bdb4 	.word	0x2000bdb4
 8014c74:	2000bdb8 	.word	0x2000bdb8

08014c78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b084      	sub	sp, #16
 8014c7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014c82:	2300      	movs	r3, #0
 8014c84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c86:	4b12      	ldr	r3, [pc, #72]	; (8014cd0 <tcp_kill_timewait+0x58>)
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	60fb      	str	r3, [r7, #12]
 8014c8c:	e012      	b.n	8014cb4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c8e:	4b11      	ldr	r3, [pc, #68]	; (8014cd4 <tcp_kill_timewait+0x5c>)
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6a1b      	ldr	r3, [r3, #32]
 8014c96:	1ad3      	subs	r3, r2, r3
 8014c98:	687a      	ldr	r2, [r7, #4]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d807      	bhi.n	8014cae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014c9e:	4b0d      	ldr	r3, [pc, #52]	; (8014cd4 <tcp_kill_timewait+0x5c>)
 8014ca0:	681a      	ldr	r2, [r3, #0]
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	6a1b      	ldr	r3, [r3, #32]
 8014ca6:	1ad3      	subs	r3, r2, r3
 8014ca8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	68db      	ldr	r3, [r3, #12]
 8014cb2:	60fb      	str	r3, [r7, #12]
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d1e9      	bne.n	8014c8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014cba:	68bb      	ldr	r3, [r7, #8]
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d002      	beq.n	8014cc6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014cc0:	68b8      	ldr	r0, [r7, #8]
 8014cc2:	f7fe ff1f 	bl	8013b04 <tcp_abort>
  }
}
 8014cc6:	bf00      	nop
 8014cc8:	3710      	adds	r7, #16
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	2000bdc4 	.word	0x2000bdc4
 8014cd4:	2000bdb8 	.word	0x2000bdb8

08014cd8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014cd8:	b580      	push	{r7, lr}
 8014cda:	b082      	sub	sp, #8
 8014cdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014cde:	4b10      	ldr	r3, [pc, #64]	; (8014d20 <tcp_handle_closepend+0x48>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014ce4:	e014      	b.n	8014d10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68db      	ldr	r3, [r3, #12]
 8014cea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	8b5b      	ldrh	r3, [r3, #26]
 8014cf0:	f003 0308 	and.w	r3, r3, #8
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d009      	beq.n	8014d0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8b5b      	ldrh	r3, [r3, #26]
 8014cfc:	f023 0308 	bic.w	r3, r3, #8
 8014d00:	b29a      	uxth	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	f7fe fd52 	bl	80137b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d1e7      	bne.n	8014ce6 <tcp_handle_closepend+0xe>
  }
}
 8014d16:	bf00      	nop
 8014d18:	3708      	adds	r7, #8
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	2000bdb4 	.word	0x2000bdb4

08014d24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b084      	sub	sp, #16
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d2e:	2001      	movs	r0, #1
 8014d30:	f7fd f9ec 	bl	801210c <memp_malloc>
 8014d34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014d36:	68fb      	ldr	r3, [r7, #12]
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	d126      	bne.n	8014d8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014d3c:	f7ff ffcc 	bl	8014cd8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014d40:	f7ff ff9a 	bl	8014c78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d44:	2001      	movs	r0, #1
 8014d46:	f7fd f9e1 	bl	801210c <memp_malloc>
 8014d4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d11b      	bne.n	8014d8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014d52:	2009      	movs	r0, #9
 8014d54:	f7ff ff46 	bl	8014be4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d58:	2001      	movs	r0, #1
 8014d5a:	f7fd f9d7 	bl	801210c <memp_malloc>
 8014d5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d111      	bne.n	8014d8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014d66:	2008      	movs	r0, #8
 8014d68:	f7ff ff3c 	bl	8014be4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d6c:	2001      	movs	r0, #1
 8014d6e:	f7fd f9cd 	bl	801210c <memp_malloc>
 8014d72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d107      	bne.n	8014d8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014d7a:	79fb      	ldrb	r3, [r7, #7]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	f7ff fee3 	bl	8014b48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d82:	2001      	movs	r0, #1
 8014d84:	f7fd f9c2 	bl	801210c <memp_malloc>
 8014d88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d03f      	beq.n	8014e10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014d90:	229c      	movs	r2, #156	; 0x9c
 8014d92:	2100      	movs	r1, #0
 8014d94:	68f8      	ldr	r0, [r7, #12]
 8014d96:	f007 ff0f 	bl	801cbb8 <memset>
    pcb->prio = prio;
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	79fa      	ldrb	r2, [r7, #7]
 8014d9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014da6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014db0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	22ff      	movs	r2, #255	; 0xff
 8014dbe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014dc6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	2206      	movs	r2, #6
 8014dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	2206      	movs	r2, #6
 8014dd4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ddc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014dde:	68fb      	ldr	r3, [r7, #12]
 8014de0:	2201      	movs	r2, #1
 8014de2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014de6:	4b0d      	ldr	r3, [pc, #52]	; (8014e1c <tcp_alloc+0xf8>)
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014dee:	4b0c      	ldr	r3, [pc, #48]	; (8014e20 <tcp_alloc+0xfc>)
 8014df0:	781a      	ldrb	r2, [r3, #0]
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014dfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	4a08      	ldr	r2, [pc, #32]	; (8014e24 <tcp_alloc+0x100>)
 8014e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	4a07      	ldr	r2, [pc, #28]	; (8014e28 <tcp_alloc+0x104>)
 8014e0c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014e10:	68fb      	ldr	r3, [r7, #12]
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	2000bdb8 	.word	0x2000bdb8
 8014e20:	20008716 	.word	0x20008716
 8014e24:	08014add 	.word	0x08014add
 8014e28:	006ddd00 	.word	0x006ddd00

08014e2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	b084      	sub	sp, #16
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	4603      	mov	r3, r0
 8014e34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014e36:	2040      	movs	r0, #64	; 0x40
 8014e38:	f7ff ff74 	bl	8014d24 <tcp_alloc>
 8014e3c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
}
 8014e40:	4618      	mov	r0, r3
 8014e42:	3710      	adds	r7, #16
 8014e44:	46bd      	mov	sp, r7
 8014e46:	bd80      	pop	{r7, pc}

08014e48 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b083      	sub	sp, #12
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
 8014e50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d002      	beq.n	8014e5e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	683a      	ldr	r2, [r7, #0]
 8014e5c:	611a      	str	r2, [r3, #16]
  }
}
 8014e5e:	bf00      	nop
 8014e60:	370c      	adds	r7, #12
 8014e62:	46bd      	mov	sp, r7
 8014e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e68:	4770      	bx	lr
	...

08014e6c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
 8014e74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d00e      	beq.n	8014e9a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	7d1b      	ldrb	r3, [r3, #20]
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d106      	bne.n	8014e92 <tcp_recv+0x26>
 8014e84:	4b07      	ldr	r3, [pc, #28]	; (8014ea4 <tcp_recv+0x38>)
 8014e86:	f240 72df 	movw	r2, #2015	; 0x7df
 8014e8a:	4907      	ldr	r1, [pc, #28]	; (8014ea8 <tcp_recv+0x3c>)
 8014e8c:	4807      	ldr	r0, [pc, #28]	; (8014eac <tcp_recv+0x40>)
 8014e8e:	f007 fe9b 	bl	801cbc8 <iprintf>
    pcb->recv = recv;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	683a      	ldr	r2, [r7, #0]
 8014e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014e9a:	bf00      	nop
 8014e9c:	3708      	adds	r7, #8
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	0801f128 	.word	0x0801f128
 8014ea8:	0801f6c4 	.word	0x0801f6c4
 8014eac:	0801f16c 	.word	0x0801f16c

08014eb0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00e      	beq.n	8014ede <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	7d1b      	ldrb	r3, [r3, #20]
 8014ec4:	2b01      	cmp	r3, #1
 8014ec6:	d106      	bne.n	8014ed6 <tcp_sent+0x26>
 8014ec8:	4b07      	ldr	r3, [pc, #28]	; (8014ee8 <tcp_sent+0x38>)
 8014eca:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014ece:	4907      	ldr	r1, [pc, #28]	; (8014eec <tcp_sent+0x3c>)
 8014ed0:	4807      	ldr	r0, [pc, #28]	; (8014ef0 <tcp_sent+0x40>)
 8014ed2:	f007 fe79 	bl	801cbc8 <iprintf>
    pcb->sent = sent;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	683a      	ldr	r2, [r7, #0]
 8014eda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014ede:	bf00      	nop
 8014ee0:	3708      	adds	r7, #8
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	0801f128 	.word	0x0801f128
 8014eec:	0801f6ec 	.word	0x0801f6ec
 8014ef0:	0801f16c 	.word	0x0801f16c

08014ef4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d00e      	beq.n	8014f22 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	7d1b      	ldrb	r3, [r3, #20]
 8014f08:	2b01      	cmp	r3, #1
 8014f0a:	d106      	bne.n	8014f1a <tcp_err+0x26>
 8014f0c:	4b07      	ldr	r3, [pc, #28]	; (8014f2c <tcp_err+0x38>)
 8014f0e:	f640 020d 	movw	r2, #2061	; 0x80d
 8014f12:	4907      	ldr	r1, [pc, #28]	; (8014f30 <tcp_err+0x3c>)
 8014f14:	4807      	ldr	r0, [pc, #28]	; (8014f34 <tcp_err+0x40>)
 8014f16:	f007 fe57 	bl	801cbc8 <iprintf>
    pcb->errf = err;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	683a      	ldr	r2, [r7, #0]
 8014f1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014f22:	bf00      	nop
 8014f24:	3708      	adds	r7, #8
 8014f26:	46bd      	mov	sp, r7
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	0801f128 	.word	0x0801f128
 8014f30:	0801f714 	.word	0x0801f714
 8014f34:	0801f16c 	.word	0x0801f16c

08014f38 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014f38:	b480      	push	{r7}
 8014f3a:	b085      	sub	sp, #20
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
 8014f40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d008      	beq.n	8014f5a <tcp_accept+0x22>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	7d1b      	ldrb	r3, [r3, #20]
 8014f4c:	2b01      	cmp	r3, #1
 8014f4e:	d104      	bne.n	8014f5a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	683a      	ldr	r2, [r7, #0]
 8014f58:	619a      	str	r2, [r3, #24]
  }
}
 8014f5a:	bf00      	nop
 8014f5c:	3714      	adds	r7, #20
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f64:	4770      	bx	lr
	...

08014f68 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b084      	sub	sp, #16
 8014f6c:	af00      	add	r7, sp, #0
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	60b9      	str	r1, [r7, #8]
 8014f72:	4613      	mov	r3, r2
 8014f74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d107      	bne.n	8014f8c <tcp_poll+0x24>
 8014f7c:	4b0e      	ldr	r3, [pc, #56]	; (8014fb8 <tcp_poll+0x50>)
 8014f7e:	f640 023d 	movw	r2, #2109	; 0x83d
 8014f82:	490e      	ldr	r1, [pc, #56]	; (8014fbc <tcp_poll+0x54>)
 8014f84:	480e      	ldr	r0, [pc, #56]	; (8014fc0 <tcp_poll+0x58>)
 8014f86:	f007 fe1f 	bl	801cbc8 <iprintf>
 8014f8a:	e011      	b.n	8014fb0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	7d1b      	ldrb	r3, [r3, #20]
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d106      	bne.n	8014fa2 <tcp_poll+0x3a>
 8014f94:	4b08      	ldr	r3, [pc, #32]	; (8014fb8 <tcp_poll+0x50>)
 8014f96:	f640 023e 	movw	r2, #2110	; 0x83e
 8014f9a:	490a      	ldr	r1, [pc, #40]	; (8014fc4 <tcp_poll+0x5c>)
 8014f9c:	4808      	ldr	r0, [pc, #32]	; (8014fc0 <tcp_poll+0x58>)
 8014f9e:	f007 fe13 	bl	801cbc8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	68ba      	ldr	r2, [r7, #8]
 8014fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	79fa      	ldrb	r2, [r7, #7]
 8014fae:	775a      	strb	r2, [r3, #29]
}
 8014fb0:	3710      	adds	r7, #16
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	0801f128 	.word	0x0801f128
 8014fbc:	0801f73c 	.word	0x0801f73c
 8014fc0:	0801f16c 	.word	0x0801f16c
 8014fc4:	0801f754 	.word	0x0801f754

08014fc8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d107      	bne.n	8014fe6 <tcp_pcb_purge+0x1e>
 8014fd6:	4b21      	ldr	r3, [pc, #132]	; (801505c <tcp_pcb_purge+0x94>)
 8014fd8:	f640 0251 	movw	r2, #2129	; 0x851
 8014fdc:	4920      	ldr	r1, [pc, #128]	; (8015060 <tcp_pcb_purge+0x98>)
 8014fde:	4821      	ldr	r0, [pc, #132]	; (8015064 <tcp_pcb_purge+0x9c>)
 8014fe0:	f007 fdf2 	bl	801cbc8 <iprintf>
 8014fe4:	e037      	b.n	8015056 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	7d1b      	ldrb	r3, [r3, #20]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d033      	beq.n	8015056 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014ff2:	2b0a      	cmp	r3, #10
 8014ff4:	d02f      	beq.n	8015056 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014ffa:	2b01      	cmp	r3, #1
 8014ffc:	d02b      	beq.n	8015056 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015002:	2b00      	cmp	r3, #0
 8015004:	d007      	beq.n	8015016 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801500a:	4618      	mov	r0, r3
 801500c:	f7fd ff94 	bl	8012f38 <pbuf_free>
      pcb->refused_data = NULL;
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	2200      	movs	r2, #0
 8015014:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801501a:	2b00      	cmp	r3, #0
 801501c:	d002      	beq.n	8015024 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f000 f986 	bl	8015330 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801502a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015030:	4618      	mov	r0, r3
 8015032:	f7ff fcfb 	bl	8014a2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801503a:	4618      	mov	r0, r3
 801503c:	f7ff fcf6 	bl	8014a2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	2200      	movs	r2, #0
 8015044:	66da      	str	r2, [r3, #108]	; 0x6c
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	2200      	movs	r2, #0
 8015052:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8015056:	3708      	adds	r7, #8
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	0801f128 	.word	0x0801f128
 8015060:	0801f774 	.word	0x0801f774
 8015064:	0801f16c 	.word	0x0801f16c

08015068 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b084      	sub	sp, #16
 801506c:	af00      	add	r7, sp, #0
 801506e:	6078      	str	r0, [r7, #4]
 8015070:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d106      	bne.n	8015086 <tcp_pcb_remove+0x1e>
 8015078:	4b3e      	ldr	r3, [pc, #248]	; (8015174 <tcp_pcb_remove+0x10c>)
 801507a:	f640 0283 	movw	r2, #2179	; 0x883
 801507e:	493e      	ldr	r1, [pc, #248]	; (8015178 <tcp_pcb_remove+0x110>)
 8015080:	483e      	ldr	r0, [pc, #248]	; (801517c <tcp_pcb_remove+0x114>)
 8015082:	f007 fda1 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d106      	bne.n	801509a <tcp_pcb_remove+0x32>
 801508c:	4b39      	ldr	r3, [pc, #228]	; (8015174 <tcp_pcb_remove+0x10c>)
 801508e:	f640 0284 	movw	r2, #2180	; 0x884
 8015092:	493b      	ldr	r1, [pc, #236]	; (8015180 <tcp_pcb_remove+0x118>)
 8015094:	4839      	ldr	r0, [pc, #228]	; (801517c <tcp_pcb_remove+0x114>)
 8015096:	f007 fd97 	bl	801cbc8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	683a      	ldr	r2, [r7, #0]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d105      	bne.n	80150b0 <tcp_pcb_remove+0x48>
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	681b      	ldr	r3, [r3, #0]
 80150a8:	68da      	ldr	r2, [r3, #12]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	601a      	str	r2, [r3, #0]
 80150ae:	e013      	b.n	80150d8 <tcp_pcb_remove+0x70>
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	60fb      	str	r3, [r7, #12]
 80150b6:	e00c      	b.n	80150d2 <tcp_pcb_remove+0x6a>
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	683a      	ldr	r2, [r7, #0]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d104      	bne.n	80150cc <tcp_pcb_remove+0x64>
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	68da      	ldr	r2, [r3, #12]
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	60da      	str	r2, [r3, #12]
 80150ca:	e005      	b.n	80150d8 <tcp_pcb_remove+0x70>
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	60fb      	str	r3, [r7, #12]
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d1ef      	bne.n	80150b8 <tcp_pcb_remove+0x50>
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	2200      	movs	r2, #0
 80150dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80150de:	6838      	ldr	r0, [r7, #0]
 80150e0:	f7ff ff72 	bl	8014fc8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80150e4:	683b      	ldr	r3, [r7, #0]
 80150e6:	7d1b      	ldrb	r3, [r3, #20]
 80150e8:	2b0a      	cmp	r3, #10
 80150ea:	d013      	beq.n	8015114 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d00f      	beq.n	8015114 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80150f4:	683b      	ldr	r3, [r7, #0]
 80150f6:	8b5b      	ldrh	r3, [r3, #26]
 80150f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d009      	beq.n	8015114 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015100:	683b      	ldr	r3, [r7, #0]
 8015102:	8b5b      	ldrh	r3, [r3, #26]
 8015104:	f043 0302 	orr.w	r3, r3, #2
 8015108:	b29a      	uxth	r2, r3
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801510e:	6838      	ldr	r0, [r7, #0]
 8015110:	f003 fbc2 	bl	8018898 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8015114:	683b      	ldr	r3, [r7, #0]
 8015116:	7d1b      	ldrb	r3, [r3, #20]
 8015118:	2b01      	cmp	r3, #1
 801511a:	d020      	beq.n	801515e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015120:	2b00      	cmp	r3, #0
 8015122:	d006      	beq.n	8015132 <tcp_pcb_remove+0xca>
 8015124:	4b13      	ldr	r3, [pc, #76]	; (8015174 <tcp_pcb_remove+0x10c>)
 8015126:	f640 0293 	movw	r2, #2195	; 0x893
 801512a:	4916      	ldr	r1, [pc, #88]	; (8015184 <tcp_pcb_remove+0x11c>)
 801512c:	4813      	ldr	r0, [pc, #76]	; (801517c <tcp_pcb_remove+0x114>)
 801512e:	f007 fd4b 	bl	801cbc8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8015132:	683b      	ldr	r3, [r7, #0]
 8015134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015136:	2b00      	cmp	r3, #0
 8015138:	d006      	beq.n	8015148 <tcp_pcb_remove+0xe0>
 801513a:	4b0e      	ldr	r3, [pc, #56]	; (8015174 <tcp_pcb_remove+0x10c>)
 801513c:	f640 0294 	movw	r2, #2196	; 0x894
 8015140:	4911      	ldr	r1, [pc, #68]	; (8015188 <tcp_pcb_remove+0x120>)
 8015142:	480e      	ldr	r0, [pc, #56]	; (801517c <tcp_pcb_remove+0x114>)
 8015144:	f007 fd40 	bl	801cbc8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015148:	683b      	ldr	r3, [r7, #0]
 801514a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801514c:	2b00      	cmp	r3, #0
 801514e:	d006      	beq.n	801515e <tcp_pcb_remove+0xf6>
 8015150:	4b08      	ldr	r3, [pc, #32]	; (8015174 <tcp_pcb_remove+0x10c>)
 8015152:	f640 0296 	movw	r2, #2198	; 0x896
 8015156:	490d      	ldr	r1, [pc, #52]	; (801518c <tcp_pcb_remove+0x124>)
 8015158:	4808      	ldr	r0, [pc, #32]	; (801517c <tcp_pcb_remove+0x114>)
 801515a:	f007 fd35 	bl	801cbc8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	2200      	movs	r2, #0
 8015162:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	2200      	movs	r2, #0
 8015168:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801516a:	bf00      	nop
 801516c:	3710      	adds	r7, #16
 801516e:	46bd      	mov	sp, r7
 8015170:	bd80      	pop	{r7, pc}
 8015172:	bf00      	nop
 8015174:	0801f128 	.word	0x0801f128
 8015178:	0801f790 	.word	0x0801f790
 801517c:	0801f16c 	.word	0x0801f16c
 8015180:	0801f7ac 	.word	0x0801f7ac
 8015184:	0801f7cc 	.word	0x0801f7cc
 8015188:	0801f7e4 	.word	0x0801f7e4
 801518c:	0801f800 	.word	0x0801f800

08015190 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d106      	bne.n	80151ac <tcp_next_iss+0x1c>
 801519e:	4b0a      	ldr	r3, [pc, #40]	; (80151c8 <tcp_next_iss+0x38>)
 80151a0:	f640 02af 	movw	r2, #2223	; 0x8af
 80151a4:	4909      	ldr	r1, [pc, #36]	; (80151cc <tcp_next_iss+0x3c>)
 80151a6:	480a      	ldr	r0, [pc, #40]	; (80151d0 <tcp_next_iss+0x40>)
 80151a8:	f007 fd0e 	bl	801cbc8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80151ac:	4b09      	ldr	r3, [pc, #36]	; (80151d4 <tcp_next_iss+0x44>)
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	4b09      	ldr	r3, [pc, #36]	; (80151d8 <tcp_next_iss+0x48>)
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	4413      	add	r3, r2
 80151b6:	4a07      	ldr	r2, [pc, #28]	; (80151d4 <tcp_next_iss+0x44>)
 80151b8:	6013      	str	r3, [r2, #0]
  return iss;
 80151ba:	4b06      	ldr	r3, [pc, #24]	; (80151d4 <tcp_next_iss+0x44>)
 80151bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	0801f128 	.word	0x0801f128
 80151cc:	0801f818 	.word	0x0801f818
 80151d0:	0801f16c 	.word	0x0801f16c
 80151d4:	2000002c 	.word	0x2000002c
 80151d8:	2000bdb8 	.word	0x2000bdb8

080151dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b086      	sub	sp, #24
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	4603      	mov	r3, r0
 80151e4:	60b9      	str	r1, [r7, #8]
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d106      	bne.n	80151fe <tcp_eff_send_mss_netif+0x22>
 80151f0:	4b14      	ldr	r3, [pc, #80]	; (8015244 <tcp_eff_send_mss_netif+0x68>)
 80151f2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80151f6:	4914      	ldr	r1, [pc, #80]	; (8015248 <tcp_eff_send_mss_netif+0x6c>)
 80151f8:	4814      	ldr	r0, [pc, #80]	; (801524c <tcp_eff_send_mss_netif+0x70>)
 80151fa:	f007 fce5 	bl	801cbc8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d101      	bne.n	8015208 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015204:	89fb      	ldrh	r3, [r7, #14]
 8015206:	e019      	b.n	801523c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801520c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801520e:	8afb      	ldrh	r3, [r7, #22]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d012      	beq.n	801523a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8015214:	2328      	movs	r3, #40	; 0x28
 8015216:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015218:	8afa      	ldrh	r2, [r7, #22]
 801521a:	8abb      	ldrh	r3, [r7, #20]
 801521c:	429a      	cmp	r2, r3
 801521e:	d904      	bls.n	801522a <tcp_eff_send_mss_netif+0x4e>
 8015220:	8afa      	ldrh	r2, [r7, #22]
 8015222:	8abb      	ldrh	r3, [r7, #20]
 8015224:	1ad3      	subs	r3, r2, r3
 8015226:	b29b      	uxth	r3, r3
 8015228:	e000      	b.n	801522c <tcp_eff_send_mss_netif+0x50>
 801522a:	2300      	movs	r3, #0
 801522c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801522e:	8a7a      	ldrh	r2, [r7, #18]
 8015230:	89fb      	ldrh	r3, [r7, #14]
 8015232:	4293      	cmp	r3, r2
 8015234:	bf28      	it	cs
 8015236:	4613      	movcs	r3, r2
 8015238:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801523a:	89fb      	ldrh	r3, [r7, #14]
}
 801523c:	4618      	mov	r0, r3
 801523e:	3718      	adds	r7, #24
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	0801f128 	.word	0x0801f128
 8015248:	0801f834 	.word	0x0801f834
 801524c:	0801f16c 	.word	0x0801f16c

08015250 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
 8015258:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801525a:	683b      	ldr	r3, [r7, #0]
 801525c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d119      	bne.n	8015298 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8015264:	4b10      	ldr	r3, [pc, #64]	; (80152a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8015266:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801526a:	4910      	ldr	r1, [pc, #64]	; (80152ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801526c:	4810      	ldr	r0, [pc, #64]	; (80152b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801526e:	f007 fcab 	bl	801cbc8 <iprintf>

  while (pcb != NULL) {
 8015272:	e011      	b.n	8015298 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	681a      	ldr	r2, [r3, #0]
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	429a      	cmp	r2, r3
 801527e:	d108      	bne.n	8015292 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f7fe fc3c 	bl	8013b04 <tcp_abort>
      pcb = next;
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	60fb      	str	r3, [r7, #12]
 8015290:	e002      	b.n	8015298 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015298:	68fb      	ldr	r3, [r7, #12]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d1ea      	bne.n	8015274 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801529e:	bf00      	nop
 80152a0:	3710      	adds	r7, #16
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}
 80152a6:	bf00      	nop
 80152a8:	0801f128 	.word	0x0801f128
 80152ac:	0801f85c 	.word	0x0801f85c
 80152b0:	0801f16c 	.word	0x0801f16c

080152b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b084      	sub	sp, #16
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
 80152bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d02a      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d026      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80152cc:	4b15      	ldr	r3, [pc, #84]	; (8015324 <tcp_netif_ip_addr_changed+0x70>)
 80152ce:	681b      	ldr	r3, [r3, #0]
 80152d0:	4619      	mov	r1, r3
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7ff ffbc 	bl	8015250 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80152d8:	4b13      	ldr	r3, [pc, #76]	; (8015328 <tcp_netif_ip_addr_changed+0x74>)
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	4619      	mov	r1, r3
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f7ff ffb6 	bl	8015250 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d017      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d013      	beq.n	801531a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80152f2:	4b0e      	ldr	r3, [pc, #56]	; (801532c <tcp_netif_ip_addr_changed+0x78>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	60fb      	str	r3, [r7, #12]
 80152f8:	e00c      	b.n	8015314 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	681a      	ldr	r2, [r3, #0]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	681b      	ldr	r3, [r3, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	d103      	bne.n	801530e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	681a      	ldr	r2, [r3, #0]
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	68db      	ldr	r3, [r3, #12]
 8015312:	60fb      	str	r3, [r7, #12]
 8015314:	68fb      	ldr	r3, [r7, #12]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d1ef      	bne.n	80152fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801531a:	bf00      	nop
 801531c:	3710      	adds	r7, #16
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}
 8015322:	bf00      	nop
 8015324:	2000bdb4 	.word	0x2000bdb4
 8015328:	2000bdc0 	.word	0x2000bdc0
 801532c:	2000bdbc 	.word	0x2000bdbc

08015330 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015330:	b580      	push	{r7, lr}
 8015332:	b082      	sub	sp, #8
 8015334:	af00      	add	r7, sp, #0
 8015336:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801533c:	2b00      	cmp	r3, #0
 801533e:	d007      	beq.n	8015350 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015344:	4618      	mov	r0, r3
 8015346:	f7ff fb71 	bl	8014a2c <tcp_segs_free>
    pcb->ooseq = NULL;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	2200      	movs	r2, #0
 801534e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015350:	bf00      	nop
 8015352:	3708      	adds	r7, #8
 8015354:	46bd      	mov	sp, r7
 8015356:	bd80      	pop	{r7, pc}

08015358 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015358:	b590      	push	{r4, r7, lr}
 801535a:	b08d      	sub	sp, #52	; 0x34
 801535c:	af04      	add	r7, sp, #16
 801535e:	6078      	str	r0, [r7, #4]
 8015360:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d105      	bne.n	8015374 <tcp_input+0x1c>
 8015368:	4b9b      	ldr	r3, [pc, #620]	; (80155d8 <tcp_input+0x280>)
 801536a:	2283      	movs	r2, #131	; 0x83
 801536c:	499b      	ldr	r1, [pc, #620]	; (80155dc <tcp_input+0x284>)
 801536e:	489c      	ldr	r0, [pc, #624]	; (80155e0 <tcp_input+0x288>)
 8015370:	f007 fc2a 	bl	801cbc8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	4a9a      	ldr	r2, [pc, #616]	; (80155e4 <tcp_input+0x28c>)
 801537a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	895b      	ldrh	r3, [r3, #10]
 8015380:	2b13      	cmp	r3, #19
 8015382:	f240 83c4 	bls.w	8015b0e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015386:	4b98      	ldr	r3, [pc, #608]	; (80155e8 <tcp_input+0x290>)
 8015388:	695a      	ldr	r2, [r3, #20]
 801538a:	4b97      	ldr	r3, [pc, #604]	; (80155e8 <tcp_input+0x290>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4619      	mov	r1, r3
 8015390:	4610      	mov	r0, r2
 8015392:	f006 faa5 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	f040 83ba 	bne.w	8015b12 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801539e:	4b92      	ldr	r3, [pc, #584]	; (80155e8 <tcp_input+0x290>)
 80153a0:	695b      	ldr	r3, [r3, #20]
 80153a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80153a6:	2be0      	cmp	r3, #224	; 0xe0
 80153a8:	f000 83b3 	beq.w	8015b12 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80153ac:	4b8d      	ldr	r3, [pc, #564]	; (80155e4 <tcp_input+0x28c>)
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	899b      	ldrh	r3, [r3, #12]
 80153b2:	b29b      	uxth	r3, r3
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7fc f85d 	bl	8011474 <lwip_htons>
 80153ba:	4603      	mov	r3, r0
 80153bc:	0b1b      	lsrs	r3, r3, #12
 80153be:	b29b      	uxth	r3, r3
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	009b      	lsls	r3, r3, #2
 80153c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80153c6:	7cbb      	ldrb	r3, [r7, #18]
 80153c8:	2b13      	cmp	r3, #19
 80153ca:	f240 83a2 	bls.w	8015b12 <tcp_input+0x7ba>
 80153ce:	7cbb      	ldrb	r3, [r7, #18]
 80153d0:	b29a      	uxth	r2, r3
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	891b      	ldrh	r3, [r3, #8]
 80153d6:	429a      	cmp	r2, r3
 80153d8:	f200 839b 	bhi.w	8015b12 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80153dc:	7cbb      	ldrb	r3, [r7, #18]
 80153de:	b29b      	uxth	r3, r3
 80153e0:	3b14      	subs	r3, #20
 80153e2:	b29a      	uxth	r2, r3
 80153e4:	4b81      	ldr	r3, [pc, #516]	; (80155ec <tcp_input+0x294>)
 80153e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80153e8:	4b81      	ldr	r3, [pc, #516]	; (80155f0 <tcp_input+0x298>)
 80153ea:	2200      	movs	r2, #0
 80153ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	895a      	ldrh	r2, [r3, #10]
 80153f2:	7cbb      	ldrb	r3, [r7, #18]
 80153f4:	b29b      	uxth	r3, r3
 80153f6:	429a      	cmp	r2, r3
 80153f8:	d309      	bcc.n	801540e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80153fa:	4b7c      	ldr	r3, [pc, #496]	; (80155ec <tcp_input+0x294>)
 80153fc:	881a      	ldrh	r2, [r3, #0]
 80153fe:	4b7d      	ldr	r3, [pc, #500]	; (80155f4 <tcp_input+0x29c>)
 8015400:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015402:	7cbb      	ldrb	r3, [r7, #18]
 8015404:	4619      	mov	r1, r3
 8015406:	6878      	ldr	r0, [r7, #4]
 8015408:	f7fd fd10 	bl	8012e2c <pbuf_remove_header>
 801540c:	e04e      	b.n	80154ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d105      	bne.n	8015422 <tcp_input+0xca>
 8015416:	4b70      	ldr	r3, [pc, #448]	; (80155d8 <tcp_input+0x280>)
 8015418:	22c2      	movs	r2, #194	; 0xc2
 801541a:	4977      	ldr	r1, [pc, #476]	; (80155f8 <tcp_input+0x2a0>)
 801541c:	4870      	ldr	r0, [pc, #448]	; (80155e0 <tcp_input+0x288>)
 801541e:	f007 fbd3 	bl	801cbc8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015422:	2114      	movs	r1, #20
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f7fd fd01 	bl	8012e2c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	895a      	ldrh	r2, [r3, #10]
 801542e:	4b71      	ldr	r3, [pc, #452]	; (80155f4 <tcp_input+0x29c>)
 8015430:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015432:	4b6e      	ldr	r3, [pc, #440]	; (80155ec <tcp_input+0x294>)
 8015434:	881a      	ldrh	r2, [r3, #0]
 8015436:	4b6f      	ldr	r3, [pc, #444]	; (80155f4 <tcp_input+0x29c>)
 8015438:	881b      	ldrh	r3, [r3, #0]
 801543a:	1ad3      	subs	r3, r2, r3
 801543c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801543e:	4b6d      	ldr	r3, [pc, #436]	; (80155f4 <tcp_input+0x29c>)
 8015440:	881b      	ldrh	r3, [r3, #0]
 8015442:	4619      	mov	r1, r3
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7fd fcf1 	bl	8012e2c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	895b      	ldrh	r3, [r3, #10]
 8015450:	8a3a      	ldrh	r2, [r7, #16]
 8015452:	429a      	cmp	r2, r3
 8015454:	f200 835f 	bhi.w	8015b16 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	4a64      	ldr	r2, [pc, #400]	; (80155f0 <tcp_input+0x298>)
 8015460:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	8a3a      	ldrh	r2, [r7, #16]
 8015468:	4611      	mov	r1, r2
 801546a:	4618      	mov	r0, r3
 801546c:	f7fd fcde 	bl	8012e2c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	891a      	ldrh	r2, [r3, #8]
 8015474:	8a3b      	ldrh	r3, [r7, #16]
 8015476:	1ad3      	subs	r3, r2, r3
 8015478:	b29a      	uxth	r2, r3
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	895b      	ldrh	r3, [r3, #10]
 8015482:	2b00      	cmp	r3, #0
 8015484:	d005      	beq.n	8015492 <tcp_input+0x13a>
 8015486:	4b54      	ldr	r3, [pc, #336]	; (80155d8 <tcp_input+0x280>)
 8015488:	22df      	movs	r2, #223	; 0xdf
 801548a:	495c      	ldr	r1, [pc, #368]	; (80155fc <tcp_input+0x2a4>)
 801548c:	4854      	ldr	r0, [pc, #336]	; (80155e0 <tcp_input+0x288>)
 801548e:	f007 fb9b 	bl	801cbc8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	891a      	ldrh	r2, [r3, #8]
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	891b      	ldrh	r3, [r3, #8]
 801549c:	429a      	cmp	r2, r3
 801549e:	d005      	beq.n	80154ac <tcp_input+0x154>
 80154a0:	4b4d      	ldr	r3, [pc, #308]	; (80155d8 <tcp_input+0x280>)
 80154a2:	22e0      	movs	r2, #224	; 0xe0
 80154a4:	4956      	ldr	r1, [pc, #344]	; (8015600 <tcp_input+0x2a8>)
 80154a6:	484e      	ldr	r0, [pc, #312]	; (80155e0 <tcp_input+0x288>)
 80154a8:	f007 fb8e 	bl	801cbc8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80154ac:	4b4d      	ldr	r3, [pc, #308]	; (80155e4 <tcp_input+0x28c>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	881b      	ldrh	r3, [r3, #0]
 80154b2:	b29a      	uxth	r2, r3
 80154b4:	4b4b      	ldr	r3, [pc, #300]	; (80155e4 <tcp_input+0x28c>)
 80154b6:	681c      	ldr	r4, [r3, #0]
 80154b8:	4610      	mov	r0, r2
 80154ba:	f7fb ffdb 	bl	8011474 <lwip_htons>
 80154be:	4603      	mov	r3, r0
 80154c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80154c2:	4b48      	ldr	r3, [pc, #288]	; (80155e4 <tcp_input+0x28c>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	885b      	ldrh	r3, [r3, #2]
 80154c8:	b29a      	uxth	r2, r3
 80154ca:	4b46      	ldr	r3, [pc, #280]	; (80155e4 <tcp_input+0x28c>)
 80154cc:	681c      	ldr	r4, [r3, #0]
 80154ce:	4610      	mov	r0, r2
 80154d0:	f7fb ffd0 	bl	8011474 <lwip_htons>
 80154d4:	4603      	mov	r3, r0
 80154d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80154d8:	4b42      	ldr	r3, [pc, #264]	; (80155e4 <tcp_input+0x28c>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	685a      	ldr	r2, [r3, #4]
 80154de:	4b41      	ldr	r3, [pc, #260]	; (80155e4 <tcp_input+0x28c>)
 80154e0:	681c      	ldr	r4, [r3, #0]
 80154e2:	4610      	mov	r0, r2
 80154e4:	f7fb ffdb 	bl	801149e <lwip_htonl>
 80154e8:	4603      	mov	r3, r0
 80154ea:	6063      	str	r3, [r4, #4]
 80154ec:	6863      	ldr	r3, [r4, #4]
 80154ee:	4a45      	ldr	r2, [pc, #276]	; (8015604 <tcp_input+0x2ac>)
 80154f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80154f2:	4b3c      	ldr	r3, [pc, #240]	; (80155e4 <tcp_input+0x28c>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	689a      	ldr	r2, [r3, #8]
 80154f8:	4b3a      	ldr	r3, [pc, #232]	; (80155e4 <tcp_input+0x28c>)
 80154fa:	681c      	ldr	r4, [r3, #0]
 80154fc:	4610      	mov	r0, r2
 80154fe:	f7fb ffce 	bl	801149e <lwip_htonl>
 8015502:	4603      	mov	r3, r0
 8015504:	60a3      	str	r3, [r4, #8]
 8015506:	68a3      	ldr	r3, [r4, #8]
 8015508:	4a3f      	ldr	r2, [pc, #252]	; (8015608 <tcp_input+0x2b0>)
 801550a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801550c:	4b35      	ldr	r3, [pc, #212]	; (80155e4 <tcp_input+0x28c>)
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	89db      	ldrh	r3, [r3, #14]
 8015512:	b29a      	uxth	r2, r3
 8015514:	4b33      	ldr	r3, [pc, #204]	; (80155e4 <tcp_input+0x28c>)
 8015516:	681c      	ldr	r4, [r3, #0]
 8015518:	4610      	mov	r0, r2
 801551a:	f7fb ffab 	bl	8011474 <lwip_htons>
 801551e:	4603      	mov	r3, r0
 8015520:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015522:	4b30      	ldr	r3, [pc, #192]	; (80155e4 <tcp_input+0x28c>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	899b      	ldrh	r3, [r3, #12]
 8015528:	b29b      	uxth	r3, r3
 801552a:	4618      	mov	r0, r3
 801552c:	f7fb ffa2 	bl	8011474 <lwip_htons>
 8015530:	4603      	mov	r3, r0
 8015532:	b2db      	uxtb	r3, r3
 8015534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015538:	b2da      	uxtb	r2, r3
 801553a:	4b34      	ldr	r3, [pc, #208]	; (801560c <tcp_input+0x2b4>)
 801553c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	891a      	ldrh	r2, [r3, #8]
 8015542:	4b33      	ldr	r3, [pc, #204]	; (8015610 <tcp_input+0x2b8>)
 8015544:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015546:	4b31      	ldr	r3, [pc, #196]	; (801560c <tcp_input+0x2b4>)
 8015548:	781b      	ldrb	r3, [r3, #0]
 801554a:	f003 0303 	and.w	r3, r3, #3
 801554e:	2b00      	cmp	r3, #0
 8015550:	d00c      	beq.n	801556c <tcp_input+0x214>
    tcplen++;
 8015552:	4b2f      	ldr	r3, [pc, #188]	; (8015610 <tcp_input+0x2b8>)
 8015554:	881b      	ldrh	r3, [r3, #0]
 8015556:	3301      	adds	r3, #1
 8015558:	b29a      	uxth	r2, r3
 801555a:	4b2d      	ldr	r3, [pc, #180]	; (8015610 <tcp_input+0x2b8>)
 801555c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	891a      	ldrh	r2, [r3, #8]
 8015562:	4b2b      	ldr	r3, [pc, #172]	; (8015610 <tcp_input+0x2b8>)
 8015564:	881b      	ldrh	r3, [r3, #0]
 8015566:	429a      	cmp	r2, r3
 8015568:	f200 82d7 	bhi.w	8015b1a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801556c:	2300      	movs	r3, #0
 801556e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015570:	4b28      	ldr	r3, [pc, #160]	; (8015614 <tcp_input+0x2bc>)
 8015572:	681b      	ldr	r3, [r3, #0]
 8015574:	61fb      	str	r3, [r7, #28]
 8015576:	e09d      	b.n	80156b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015578:	69fb      	ldr	r3, [r7, #28]
 801557a:	7d1b      	ldrb	r3, [r3, #20]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d105      	bne.n	801558c <tcp_input+0x234>
 8015580:	4b15      	ldr	r3, [pc, #84]	; (80155d8 <tcp_input+0x280>)
 8015582:	22fb      	movs	r2, #251	; 0xfb
 8015584:	4924      	ldr	r1, [pc, #144]	; (8015618 <tcp_input+0x2c0>)
 8015586:	4816      	ldr	r0, [pc, #88]	; (80155e0 <tcp_input+0x288>)
 8015588:	f007 fb1e 	bl	801cbc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801558c:	69fb      	ldr	r3, [r7, #28]
 801558e:	7d1b      	ldrb	r3, [r3, #20]
 8015590:	2b0a      	cmp	r3, #10
 8015592:	d105      	bne.n	80155a0 <tcp_input+0x248>
 8015594:	4b10      	ldr	r3, [pc, #64]	; (80155d8 <tcp_input+0x280>)
 8015596:	22fc      	movs	r2, #252	; 0xfc
 8015598:	4920      	ldr	r1, [pc, #128]	; (801561c <tcp_input+0x2c4>)
 801559a:	4811      	ldr	r0, [pc, #68]	; (80155e0 <tcp_input+0x288>)
 801559c:	f007 fb14 	bl	801cbc8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80155a0:	69fb      	ldr	r3, [r7, #28]
 80155a2:	7d1b      	ldrb	r3, [r3, #20]
 80155a4:	2b01      	cmp	r3, #1
 80155a6:	d105      	bne.n	80155b4 <tcp_input+0x25c>
 80155a8:	4b0b      	ldr	r3, [pc, #44]	; (80155d8 <tcp_input+0x280>)
 80155aa:	22fd      	movs	r2, #253	; 0xfd
 80155ac:	491c      	ldr	r1, [pc, #112]	; (8015620 <tcp_input+0x2c8>)
 80155ae:	480c      	ldr	r0, [pc, #48]	; (80155e0 <tcp_input+0x288>)
 80155b0:	f007 fb0a 	bl	801cbc8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80155b4:	69fb      	ldr	r3, [r7, #28]
 80155b6:	7a1b      	ldrb	r3, [r3, #8]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	d033      	beq.n	8015624 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80155bc:	69fb      	ldr	r3, [r7, #28]
 80155be:	7a1a      	ldrb	r2, [r3, #8]
 80155c0:	4b09      	ldr	r3, [pc, #36]	; (80155e8 <tcp_input+0x290>)
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80155c8:	3301      	adds	r3, #1
 80155ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80155cc:	429a      	cmp	r2, r3
 80155ce:	d029      	beq.n	8015624 <tcp_input+0x2cc>
      prev = pcb;
 80155d0:	69fb      	ldr	r3, [r7, #28]
 80155d2:	61bb      	str	r3, [r7, #24]
      continue;
 80155d4:	e06b      	b.n	80156ae <tcp_input+0x356>
 80155d6:	bf00      	nop
 80155d8:	0801f890 	.word	0x0801f890
 80155dc:	0801f8c4 	.word	0x0801f8c4
 80155e0:	0801f8dc 	.word	0x0801f8dc
 80155e4:	20008728 	.word	0x20008728
 80155e8:	20008cf4 	.word	0x20008cf4
 80155ec:	2000872c 	.word	0x2000872c
 80155f0:	20008730 	.word	0x20008730
 80155f4:	2000872e 	.word	0x2000872e
 80155f8:	0801f904 	.word	0x0801f904
 80155fc:	0801f914 	.word	0x0801f914
 8015600:	0801f920 	.word	0x0801f920
 8015604:	20008738 	.word	0x20008738
 8015608:	2000873c 	.word	0x2000873c
 801560c:	20008744 	.word	0x20008744
 8015610:	20008742 	.word	0x20008742
 8015614:	2000bdb4 	.word	0x2000bdb4
 8015618:	0801f940 	.word	0x0801f940
 801561c:	0801f968 	.word	0x0801f968
 8015620:	0801f994 	.word	0x0801f994
    }

    if (pcb->remote_port == tcphdr->src &&
 8015624:	69fb      	ldr	r3, [r7, #28]
 8015626:	8b1a      	ldrh	r2, [r3, #24]
 8015628:	4b94      	ldr	r3, [pc, #592]	; (801587c <tcp_input+0x524>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	881b      	ldrh	r3, [r3, #0]
 801562e:	b29b      	uxth	r3, r3
 8015630:	429a      	cmp	r2, r3
 8015632:	d13a      	bne.n	80156aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	8ada      	ldrh	r2, [r3, #22]
 8015638:	4b90      	ldr	r3, [pc, #576]	; (801587c <tcp_input+0x524>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	885b      	ldrh	r3, [r3, #2]
 801563e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015640:	429a      	cmp	r2, r3
 8015642:	d132      	bne.n	80156aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015644:	69fb      	ldr	r3, [r7, #28]
 8015646:	685a      	ldr	r2, [r3, #4]
 8015648:	4b8d      	ldr	r3, [pc, #564]	; (8015880 <tcp_input+0x528>)
 801564a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801564c:	429a      	cmp	r2, r3
 801564e:	d12c      	bne.n	80156aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015650:	69fb      	ldr	r3, [r7, #28]
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	4b8a      	ldr	r3, [pc, #552]	; (8015880 <tcp_input+0x528>)
 8015656:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015658:	429a      	cmp	r2, r3
 801565a:	d126      	bne.n	80156aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801565c:	69fb      	ldr	r3, [r7, #28]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	69fa      	ldr	r2, [r7, #28]
 8015662:	429a      	cmp	r2, r3
 8015664:	d106      	bne.n	8015674 <tcp_input+0x31c>
 8015666:	4b87      	ldr	r3, [pc, #540]	; (8015884 <tcp_input+0x52c>)
 8015668:	f240 120d 	movw	r2, #269	; 0x10d
 801566c:	4986      	ldr	r1, [pc, #536]	; (8015888 <tcp_input+0x530>)
 801566e:	4887      	ldr	r0, [pc, #540]	; (801588c <tcp_input+0x534>)
 8015670:	f007 faaa 	bl	801cbc8 <iprintf>
      if (prev != NULL) {
 8015674:	69bb      	ldr	r3, [r7, #24]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d00a      	beq.n	8015690 <tcp_input+0x338>
        prev->next = pcb->next;
 801567a:	69fb      	ldr	r3, [r7, #28]
 801567c:	68da      	ldr	r2, [r3, #12]
 801567e:	69bb      	ldr	r3, [r7, #24]
 8015680:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015682:	4b83      	ldr	r3, [pc, #524]	; (8015890 <tcp_input+0x538>)
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	69fb      	ldr	r3, [r7, #28]
 8015688:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801568a:	4a81      	ldr	r2, [pc, #516]	; (8015890 <tcp_input+0x538>)
 801568c:	69fb      	ldr	r3, [r7, #28]
 801568e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	68db      	ldr	r3, [r3, #12]
 8015694:	69fa      	ldr	r2, [r7, #28]
 8015696:	429a      	cmp	r2, r3
 8015698:	d111      	bne.n	80156be <tcp_input+0x366>
 801569a:	4b7a      	ldr	r3, [pc, #488]	; (8015884 <tcp_input+0x52c>)
 801569c:	f240 1215 	movw	r2, #277	; 0x115
 80156a0:	497c      	ldr	r1, [pc, #496]	; (8015894 <tcp_input+0x53c>)
 80156a2:	487a      	ldr	r0, [pc, #488]	; (801588c <tcp_input+0x534>)
 80156a4:	f007 fa90 	bl	801cbc8 <iprintf>
      break;
 80156a8:	e009      	b.n	80156be <tcp_input+0x366>
    }
    prev = pcb;
 80156aa:	69fb      	ldr	r3, [r7, #28]
 80156ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	68db      	ldr	r3, [r3, #12]
 80156b2:	61fb      	str	r3, [r7, #28]
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	f47f af5e 	bne.w	8015578 <tcp_input+0x220>
 80156bc:	e000      	b.n	80156c0 <tcp_input+0x368>
      break;
 80156be:	bf00      	nop
  }

  if (pcb == NULL) {
 80156c0:	69fb      	ldr	r3, [r7, #28]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	f040 8095 	bne.w	80157f2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80156c8:	4b73      	ldr	r3, [pc, #460]	; (8015898 <tcp_input+0x540>)
 80156ca:	681b      	ldr	r3, [r3, #0]
 80156cc:	61fb      	str	r3, [r7, #28]
 80156ce:	e03f      	b.n	8015750 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80156d0:	69fb      	ldr	r3, [r7, #28]
 80156d2:	7d1b      	ldrb	r3, [r3, #20]
 80156d4:	2b0a      	cmp	r3, #10
 80156d6:	d006      	beq.n	80156e6 <tcp_input+0x38e>
 80156d8:	4b6a      	ldr	r3, [pc, #424]	; (8015884 <tcp_input+0x52c>)
 80156da:	f240 121f 	movw	r2, #287	; 0x11f
 80156de:	496f      	ldr	r1, [pc, #444]	; (801589c <tcp_input+0x544>)
 80156e0:	486a      	ldr	r0, [pc, #424]	; (801588c <tcp_input+0x534>)
 80156e2:	f007 fa71 	bl	801cbc8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	7a1b      	ldrb	r3, [r3, #8]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d009      	beq.n	8015702 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80156ee:	69fb      	ldr	r3, [r7, #28]
 80156f0:	7a1a      	ldrb	r2, [r3, #8]
 80156f2:	4b63      	ldr	r3, [pc, #396]	; (8015880 <tcp_input+0x528>)
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156fa:	3301      	adds	r3, #1
 80156fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156fe:	429a      	cmp	r2, r3
 8015700:	d122      	bne.n	8015748 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	8b1a      	ldrh	r2, [r3, #24]
 8015706:	4b5d      	ldr	r3, [pc, #372]	; (801587c <tcp_input+0x524>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	881b      	ldrh	r3, [r3, #0]
 801570c:	b29b      	uxth	r3, r3
 801570e:	429a      	cmp	r2, r3
 8015710:	d11b      	bne.n	801574a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015712:	69fb      	ldr	r3, [r7, #28]
 8015714:	8ada      	ldrh	r2, [r3, #22]
 8015716:	4b59      	ldr	r3, [pc, #356]	; (801587c <tcp_input+0x524>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	885b      	ldrh	r3, [r3, #2]
 801571c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801571e:	429a      	cmp	r2, r3
 8015720:	d113      	bne.n	801574a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015722:	69fb      	ldr	r3, [r7, #28]
 8015724:	685a      	ldr	r2, [r3, #4]
 8015726:	4b56      	ldr	r3, [pc, #344]	; (8015880 <tcp_input+0x528>)
 8015728:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801572a:	429a      	cmp	r2, r3
 801572c:	d10d      	bne.n	801574a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	681a      	ldr	r2, [r3, #0]
 8015732:	4b53      	ldr	r3, [pc, #332]	; (8015880 <tcp_input+0x528>)
 8015734:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015736:	429a      	cmp	r2, r3
 8015738:	d107      	bne.n	801574a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801573a:	69f8      	ldr	r0, [r7, #28]
 801573c:	f000 fb52 	bl	8015de4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	f7fd fbf9 	bl	8012f38 <pbuf_free>
        return;
 8015746:	e1ee      	b.n	8015b26 <tcp_input+0x7ce>
        continue;
 8015748:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801574a:	69fb      	ldr	r3, [r7, #28]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	61fb      	str	r3, [r7, #28]
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d1bc      	bne.n	80156d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015756:	2300      	movs	r3, #0
 8015758:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801575a:	4b51      	ldr	r3, [pc, #324]	; (80158a0 <tcp_input+0x548>)
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	617b      	str	r3, [r7, #20]
 8015760:	e02a      	b.n	80157b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	7a1b      	ldrb	r3, [r3, #8]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d00c      	beq.n	8015784 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801576a:	697b      	ldr	r3, [r7, #20]
 801576c:	7a1a      	ldrb	r2, [r3, #8]
 801576e:	4b44      	ldr	r3, [pc, #272]	; (8015880 <tcp_input+0x528>)
 8015770:	685b      	ldr	r3, [r3, #4]
 8015772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015776:	3301      	adds	r3, #1
 8015778:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801577a:	429a      	cmp	r2, r3
 801577c:	d002      	beq.n	8015784 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801577e:	697b      	ldr	r3, [r7, #20]
 8015780:	61bb      	str	r3, [r7, #24]
        continue;
 8015782:	e016      	b.n	80157b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	8ada      	ldrh	r2, [r3, #22]
 8015788:	4b3c      	ldr	r3, [pc, #240]	; (801587c <tcp_input+0x524>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	885b      	ldrh	r3, [r3, #2]
 801578e:	b29b      	uxth	r3, r3
 8015790:	429a      	cmp	r2, r3
 8015792:	d10c      	bne.n	80157ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	681a      	ldr	r2, [r3, #0]
 8015798:	4b39      	ldr	r3, [pc, #228]	; (8015880 <tcp_input+0x528>)
 801579a:	695b      	ldr	r3, [r3, #20]
 801579c:	429a      	cmp	r2, r3
 801579e:	d00f      	beq.n	80157c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d00d      	beq.n	80157c2 <tcp_input+0x46a>
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	681b      	ldr	r3, [r3, #0]
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d009      	beq.n	80157c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80157ae:	697b      	ldr	r3, [r7, #20]
 80157b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80157b2:	697b      	ldr	r3, [r7, #20]
 80157b4:	68db      	ldr	r3, [r3, #12]
 80157b6:	617b      	str	r3, [r7, #20]
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d1d1      	bne.n	8015762 <tcp_input+0x40a>
 80157be:	e000      	b.n	80157c2 <tcp_input+0x46a>
            break;
 80157c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80157c2:	697b      	ldr	r3, [r7, #20]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d014      	beq.n	80157f2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80157c8:	69bb      	ldr	r3, [r7, #24]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d00a      	beq.n	80157e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80157ce:	697b      	ldr	r3, [r7, #20]
 80157d0:	68da      	ldr	r2, [r3, #12]
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80157d6:	4b32      	ldr	r3, [pc, #200]	; (80158a0 <tcp_input+0x548>)
 80157d8:	681a      	ldr	r2, [r3, #0]
 80157da:	697b      	ldr	r3, [r7, #20]
 80157dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80157de:	4a30      	ldr	r2, [pc, #192]	; (80158a0 <tcp_input+0x548>)
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80157e4:	6978      	ldr	r0, [r7, #20]
 80157e6:	f000 f9ff 	bl	8015be8 <tcp_listen_input>
      }
      pbuf_free(p);
 80157ea:	6878      	ldr	r0, [r7, #4]
 80157ec:	f7fd fba4 	bl	8012f38 <pbuf_free>
      return;
 80157f0:	e199      	b.n	8015b26 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f000 8160 	beq.w	8015aba <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80157fa:	4b2a      	ldr	r3, [pc, #168]	; (80158a4 <tcp_input+0x54c>)
 80157fc:	2200      	movs	r2, #0
 80157fe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	891a      	ldrh	r2, [r3, #8]
 8015804:	4b27      	ldr	r3, [pc, #156]	; (80158a4 <tcp_input+0x54c>)
 8015806:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015808:	4a26      	ldr	r2, [pc, #152]	; (80158a4 <tcp_input+0x54c>)
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801580e:	4b1b      	ldr	r3, [pc, #108]	; (801587c <tcp_input+0x524>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	4a24      	ldr	r2, [pc, #144]	; (80158a4 <tcp_input+0x54c>)
 8015814:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015816:	4b24      	ldr	r3, [pc, #144]	; (80158a8 <tcp_input+0x550>)
 8015818:	2200      	movs	r2, #0
 801581a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801581c:	4b23      	ldr	r3, [pc, #140]	; (80158ac <tcp_input+0x554>)
 801581e:	2200      	movs	r2, #0
 8015820:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015822:	4b23      	ldr	r3, [pc, #140]	; (80158b0 <tcp_input+0x558>)
 8015824:	2200      	movs	r2, #0
 8015826:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015828:	4b22      	ldr	r3, [pc, #136]	; (80158b4 <tcp_input+0x55c>)
 801582a:	781b      	ldrb	r3, [r3, #0]
 801582c:	f003 0308 	and.w	r3, r3, #8
 8015830:	2b00      	cmp	r3, #0
 8015832:	d006      	beq.n	8015842 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	7b5b      	ldrb	r3, [r3, #13]
 8015838:	f043 0301 	orr.w	r3, r3, #1
 801583c:	b2da      	uxtb	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015842:	69fb      	ldr	r3, [r7, #28]
 8015844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015846:	2b00      	cmp	r3, #0
 8015848:	d038      	beq.n	80158bc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801584a:	69f8      	ldr	r0, [r7, #28]
 801584c:	f7ff f872 	bl	8014934 <tcp_process_refused_data>
 8015850:	4603      	mov	r3, r0
 8015852:	f113 0f0d 	cmn.w	r3, #13
 8015856:	d007      	beq.n	8015868 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801585c:	2b00      	cmp	r3, #0
 801585e:	d02d      	beq.n	80158bc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015860:	4b15      	ldr	r3, [pc, #84]	; (80158b8 <tcp_input+0x560>)
 8015862:	881b      	ldrh	r3, [r3, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d029      	beq.n	80158bc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015868:	69fb      	ldr	r3, [r7, #28]
 801586a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801586c:	2b00      	cmp	r3, #0
 801586e:	f040 8104 	bne.w	8015a7a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015872:	69f8      	ldr	r0, [r7, #28]
 8015874:	f003 fe4a 	bl	801950c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015878:	e0ff      	b.n	8015a7a <tcp_input+0x722>
 801587a:	bf00      	nop
 801587c:	20008728 	.word	0x20008728
 8015880:	20008cf4 	.word	0x20008cf4
 8015884:	0801f890 	.word	0x0801f890
 8015888:	0801f9bc 	.word	0x0801f9bc
 801588c:	0801f8dc 	.word	0x0801f8dc
 8015890:	2000bdb4 	.word	0x2000bdb4
 8015894:	0801f9e8 	.word	0x0801f9e8
 8015898:	2000bdc4 	.word	0x2000bdc4
 801589c:	0801fa14 	.word	0x0801fa14
 80158a0:	2000bdbc 	.word	0x2000bdbc
 80158a4:	20008718 	.word	0x20008718
 80158a8:	20008748 	.word	0x20008748
 80158ac:	20008745 	.word	0x20008745
 80158b0:	20008740 	.word	0x20008740
 80158b4:	20008744 	.word	0x20008744
 80158b8:	20008742 	.word	0x20008742
      }
    }
    tcp_input_pcb = pcb;
 80158bc:	4a9b      	ldr	r2, [pc, #620]	; (8015b2c <tcp_input+0x7d4>)
 80158be:	69fb      	ldr	r3, [r7, #28]
 80158c0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80158c2:	69f8      	ldr	r0, [r7, #28]
 80158c4:	f000 fb0a 	bl	8015edc <tcp_process>
 80158c8:	4603      	mov	r3, r0
 80158ca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80158cc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158d0:	f113 0f0d 	cmn.w	r3, #13
 80158d4:	f000 80d3 	beq.w	8015a7e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80158d8:	4b95      	ldr	r3, [pc, #596]	; (8015b30 <tcp_input+0x7d8>)
 80158da:	781b      	ldrb	r3, [r3, #0]
 80158dc:	f003 0308 	and.w	r3, r3, #8
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d015      	beq.n	8015910 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80158e4:	69fb      	ldr	r3, [r7, #28]
 80158e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d008      	beq.n	8015900 <tcp_input+0x5a8>
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80158f4:	69fa      	ldr	r2, [r7, #28]
 80158f6:	6912      	ldr	r2, [r2, #16]
 80158f8:	f06f 010d 	mvn.w	r1, #13
 80158fc:	4610      	mov	r0, r2
 80158fe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015900:	69f9      	ldr	r1, [r7, #28]
 8015902:	488c      	ldr	r0, [pc, #560]	; (8015b34 <tcp_input+0x7dc>)
 8015904:	f7ff fbb0 	bl	8015068 <tcp_pcb_remove>
        tcp_free(pcb);
 8015908:	69f8      	ldr	r0, [r7, #28]
 801590a:	f7fd fdc1 	bl	8013490 <tcp_free>
 801590e:	e0c1      	b.n	8015a94 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8015910:	2300      	movs	r3, #0
 8015912:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015914:	4b88      	ldr	r3, [pc, #544]	; (8015b38 <tcp_input+0x7e0>)
 8015916:	881b      	ldrh	r3, [r3, #0]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d01d      	beq.n	8015958 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801591c:	4b86      	ldr	r3, [pc, #536]	; (8015b38 <tcp_input+0x7e0>)
 801591e:	881b      	ldrh	r3, [r3, #0]
 8015920:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015928:	2b00      	cmp	r3, #0
 801592a:	d00a      	beq.n	8015942 <tcp_input+0x5ea>
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015932:	69fa      	ldr	r2, [r7, #28]
 8015934:	6910      	ldr	r0, [r2, #16]
 8015936:	89fa      	ldrh	r2, [r7, #14]
 8015938:	69f9      	ldr	r1, [r7, #28]
 801593a:	4798      	blx	r3
 801593c:	4603      	mov	r3, r0
 801593e:	74fb      	strb	r3, [r7, #19]
 8015940:	e001      	b.n	8015946 <tcp_input+0x5ee>
 8015942:	2300      	movs	r3, #0
 8015944:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015946:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801594a:	f113 0f0d 	cmn.w	r3, #13
 801594e:	f000 8098 	beq.w	8015a82 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015952:	4b79      	ldr	r3, [pc, #484]	; (8015b38 <tcp_input+0x7e0>)
 8015954:	2200      	movs	r2, #0
 8015956:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015958:	69f8      	ldr	r0, [r7, #28]
 801595a:	f000 f905 	bl	8015b68 <tcp_input_delayed_close>
 801595e:	4603      	mov	r3, r0
 8015960:	2b00      	cmp	r3, #0
 8015962:	f040 8090 	bne.w	8015a86 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015966:	4b75      	ldr	r3, [pc, #468]	; (8015b3c <tcp_input+0x7e4>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d041      	beq.n	80159f2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801596e:	69fb      	ldr	r3, [r7, #28]
 8015970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015972:	2b00      	cmp	r3, #0
 8015974:	d006      	beq.n	8015984 <tcp_input+0x62c>
 8015976:	4b72      	ldr	r3, [pc, #456]	; (8015b40 <tcp_input+0x7e8>)
 8015978:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801597c:	4971      	ldr	r1, [pc, #452]	; (8015b44 <tcp_input+0x7ec>)
 801597e:	4872      	ldr	r0, [pc, #456]	; (8015b48 <tcp_input+0x7f0>)
 8015980:	f007 f922 	bl	801cbc8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	8b5b      	ldrh	r3, [r3, #26]
 8015988:	f003 0310 	and.w	r3, r3, #16
 801598c:	2b00      	cmp	r3, #0
 801598e:	d008      	beq.n	80159a2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015990:	4b6a      	ldr	r3, [pc, #424]	; (8015b3c <tcp_input+0x7e4>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	4618      	mov	r0, r3
 8015996:	f7fd facf 	bl	8012f38 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801599a:	69f8      	ldr	r0, [r7, #28]
 801599c:	f7fe f8b2 	bl	8013b04 <tcp_abort>
            goto aborted;
 80159a0:	e078      	b.n	8015a94 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00c      	beq.n	80159c6 <tcp_input+0x66e>
 80159ac:	69fb      	ldr	r3, [r7, #28]
 80159ae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80159b2:	69fb      	ldr	r3, [r7, #28]
 80159b4:	6918      	ldr	r0, [r3, #16]
 80159b6:	4b61      	ldr	r3, [pc, #388]	; (8015b3c <tcp_input+0x7e4>)
 80159b8:	681a      	ldr	r2, [r3, #0]
 80159ba:	2300      	movs	r3, #0
 80159bc:	69f9      	ldr	r1, [r7, #28]
 80159be:	47a0      	blx	r4
 80159c0:	4603      	mov	r3, r0
 80159c2:	74fb      	strb	r3, [r7, #19]
 80159c4:	e008      	b.n	80159d8 <tcp_input+0x680>
 80159c6:	4b5d      	ldr	r3, [pc, #372]	; (8015b3c <tcp_input+0x7e4>)
 80159c8:	681a      	ldr	r2, [r3, #0]
 80159ca:	2300      	movs	r3, #0
 80159cc:	69f9      	ldr	r1, [r7, #28]
 80159ce:	2000      	movs	r0, #0
 80159d0:	f7ff f884 	bl	8014adc <tcp_recv_null>
 80159d4:	4603      	mov	r3, r0
 80159d6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80159d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80159dc:	f113 0f0d 	cmn.w	r3, #13
 80159e0:	d053      	beq.n	8015a8a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80159e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80159ea:	4b54      	ldr	r3, [pc, #336]	; (8015b3c <tcp_input+0x7e4>)
 80159ec:	681a      	ldr	r2, [r3, #0]
 80159ee:	69fb      	ldr	r3, [r7, #28]
 80159f0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80159f2:	4b4f      	ldr	r3, [pc, #316]	; (8015b30 <tcp_input+0x7d8>)
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	f003 0320 	and.w	r3, r3, #32
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d030      	beq.n	8015a60 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80159fe:	69fb      	ldr	r3, [r7, #28]
 8015a00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d009      	beq.n	8015a1a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015a06:	69fb      	ldr	r3, [r7, #28]
 8015a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a0a:	7b5a      	ldrb	r2, [r3, #13]
 8015a0c:	69fb      	ldr	r3, [r7, #28]
 8015a0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015a10:	f042 0220 	orr.w	r2, r2, #32
 8015a14:	b2d2      	uxtb	r2, r2
 8015a16:	735a      	strb	r2, [r3, #13]
 8015a18:	e022      	b.n	8015a60 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015a1a:	69fb      	ldr	r3, [r7, #28]
 8015a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015a22:	d005      	beq.n	8015a30 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8015a24:	69fb      	ldr	r3, [r7, #28]
 8015a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a28:	3301      	adds	r3, #1
 8015a2a:	b29a      	uxth	r2, r3
 8015a2c:	69fb      	ldr	r3, [r7, #28]
 8015a2e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015a30:	69fb      	ldr	r3, [r7, #28]
 8015a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00b      	beq.n	8015a52 <tcp_input+0x6fa>
 8015a3a:	69fb      	ldr	r3, [r7, #28]
 8015a3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015a40:	69fb      	ldr	r3, [r7, #28]
 8015a42:	6918      	ldr	r0, [r3, #16]
 8015a44:	2300      	movs	r3, #0
 8015a46:	2200      	movs	r2, #0
 8015a48:	69f9      	ldr	r1, [r7, #28]
 8015a4a:	47a0      	blx	r4
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	74fb      	strb	r3, [r7, #19]
 8015a50:	e001      	b.n	8015a56 <tcp_input+0x6fe>
 8015a52:	2300      	movs	r3, #0
 8015a54:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015a56:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015a5a:	f113 0f0d 	cmn.w	r3, #13
 8015a5e:	d016      	beq.n	8015a8e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015a60:	4b32      	ldr	r3, [pc, #200]	; (8015b2c <tcp_input+0x7d4>)
 8015a62:	2200      	movs	r2, #0
 8015a64:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015a66:	69f8      	ldr	r0, [r7, #28]
 8015a68:	f000 f87e 	bl	8015b68 <tcp_input_delayed_close>
 8015a6c:	4603      	mov	r3, r0
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d10f      	bne.n	8015a92 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015a72:	69f8      	ldr	r0, [r7, #28]
 8015a74:	f002 ff10 	bl	8018898 <tcp_output>
 8015a78:	e00c      	b.n	8015a94 <tcp_input+0x73c>
        goto aborted;
 8015a7a:	bf00      	nop
 8015a7c:	e00a      	b.n	8015a94 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8015a7e:	bf00      	nop
 8015a80:	e008      	b.n	8015a94 <tcp_input+0x73c>
              goto aborted;
 8015a82:	bf00      	nop
 8015a84:	e006      	b.n	8015a94 <tcp_input+0x73c>
          goto aborted;
 8015a86:	bf00      	nop
 8015a88:	e004      	b.n	8015a94 <tcp_input+0x73c>
            goto aborted;
 8015a8a:	bf00      	nop
 8015a8c:	e002      	b.n	8015a94 <tcp_input+0x73c>
              goto aborted;
 8015a8e:	bf00      	nop
 8015a90:	e000      	b.n	8015a94 <tcp_input+0x73c>
          goto aborted;
 8015a92:	bf00      	nop
    tcp_input_pcb = NULL;
 8015a94:	4b25      	ldr	r3, [pc, #148]	; (8015b2c <tcp_input+0x7d4>)
 8015a96:	2200      	movs	r2, #0
 8015a98:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015a9a:	4b28      	ldr	r3, [pc, #160]	; (8015b3c <tcp_input+0x7e4>)
 8015a9c:	2200      	movs	r2, #0
 8015a9e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015aa0:	4b2a      	ldr	r3, [pc, #168]	; (8015b4c <tcp_input+0x7f4>)
 8015aa2:	685b      	ldr	r3, [r3, #4]
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d03d      	beq.n	8015b24 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8015aa8:	4b28      	ldr	r3, [pc, #160]	; (8015b4c <tcp_input+0x7f4>)
 8015aaa:	685b      	ldr	r3, [r3, #4]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7fd fa43 	bl	8012f38 <pbuf_free>
      inseg.p = NULL;
 8015ab2:	4b26      	ldr	r3, [pc, #152]	; (8015b4c <tcp_input+0x7f4>)
 8015ab4:	2200      	movs	r2, #0
 8015ab6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8015ab8:	e034      	b.n	8015b24 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015aba:	4b25      	ldr	r3, [pc, #148]	; (8015b50 <tcp_input+0x7f8>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	899b      	ldrh	r3, [r3, #12]
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	f7fb fcd6 	bl	8011474 <lwip_htons>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	f003 0304 	and.w	r3, r3, #4
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d118      	bne.n	8015b06 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ad4:	4b1f      	ldr	r3, [pc, #124]	; (8015b54 <tcp_input+0x7fc>)
 8015ad6:	6819      	ldr	r1, [r3, #0]
 8015ad8:	4b1f      	ldr	r3, [pc, #124]	; (8015b58 <tcp_input+0x800>)
 8015ada:	881b      	ldrh	r3, [r3, #0]
 8015adc:	461a      	mov	r2, r3
 8015ade:	4b1f      	ldr	r3, [pc, #124]	; (8015b5c <tcp_input+0x804>)
 8015ae0:	681b      	ldr	r3, [r3, #0]
 8015ae2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ae4:	4b1a      	ldr	r3, [pc, #104]	; (8015b50 <tcp_input+0x7f8>)
 8015ae6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ae8:	885b      	ldrh	r3, [r3, #2]
 8015aea:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015aec:	4a18      	ldr	r2, [pc, #96]	; (8015b50 <tcp_input+0x7f8>)
 8015aee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015af0:	8812      	ldrh	r2, [r2, #0]
 8015af2:	b292      	uxth	r2, r2
 8015af4:	9202      	str	r2, [sp, #8]
 8015af6:	9301      	str	r3, [sp, #4]
 8015af8:	4b19      	ldr	r3, [pc, #100]	; (8015b60 <tcp_input+0x808>)
 8015afa:	9300      	str	r3, [sp, #0]
 8015afc:	4b19      	ldr	r3, [pc, #100]	; (8015b64 <tcp_input+0x80c>)
 8015afe:	4602      	mov	r2, r0
 8015b00:	2000      	movs	r0, #0
 8015b02:	f003 fcb1 	bl	8019468 <tcp_rst>
    pbuf_free(p);
 8015b06:	6878      	ldr	r0, [r7, #4]
 8015b08:	f7fd fa16 	bl	8012f38 <pbuf_free>
  return;
 8015b0c:	e00a      	b.n	8015b24 <tcp_input+0x7cc>
    goto dropped;
 8015b0e:	bf00      	nop
 8015b10:	e004      	b.n	8015b1c <tcp_input+0x7c4>
dropped:
 8015b12:	bf00      	nop
 8015b14:	e002      	b.n	8015b1c <tcp_input+0x7c4>
      goto dropped;
 8015b16:	bf00      	nop
 8015b18:	e000      	b.n	8015b1c <tcp_input+0x7c4>
      goto dropped;
 8015b1a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f7fd fa0b 	bl	8012f38 <pbuf_free>
 8015b22:	e000      	b.n	8015b26 <tcp_input+0x7ce>
  return;
 8015b24:	bf00      	nop
}
 8015b26:	3724      	adds	r7, #36	; 0x24
 8015b28:	46bd      	mov	sp, r7
 8015b2a:	bd90      	pop	{r4, r7, pc}
 8015b2c:	2000bdc8 	.word	0x2000bdc8
 8015b30:	20008745 	.word	0x20008745
 8015b34:	2000bdb4 	.word	0x2000bdb4
 8015b38:	20008740 	.word	0x20008740
 8015b3c:	20008748 	.word	0x20008748
 8015b40:	0801f890 	.word	0x0801f890
 8015b44:	0801fa44 	.word	0x0801fa44
 8015b48:	0801f8dc 	.word	0x0801f8dc
 8015b4c:	20008718 	.word	0x20008718
 8015b50:	20008728 	.word	0x20008728
 8015b54:	2000873c 	.word	0x2000873c
 8015b58:	20008742 	.word	0x20008742
 8015b5c:	20008738 	.word	0x20008738
 8015b60:	20008d04 	.word	0x20008d04
 8015b64:	20008d08 	.word	0x20008d08

08015b68 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d106      	bne.n	8015b84 <tcp_input_delayed_close+0x1c>
 8015b76:	4b17      	ldr	r3, [pc, #92]	; (8015bd4 <tcp_input_delayed_close+0x6c>)
 8015b78:	f240 225a 	movw	r2, #602	; 0x25a
 8015b7c:	4916      	ldr	r1, [pc, #88]	; (8015bd8 <tcp_input_delayed_close+0x70>)
 8015b7e:	4817      	ldr	r0, [pc, #92]	; (8015bdc <tcp_input_delayed_close+0x74>)
 8015b80:	f007 f822 	bl	801cbc8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015b84:	4b16      	ldr	r3, [pc, #88]	; (8015be0 <tcp_input_delayed_close+0x78>)
 8015b86:	781b      	ldrb	r3, [r3, #0]
 8015b88:	f003 0310 	and.w	r3, r3, #16
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d01c      	beq.n	8015bca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	8b5b      	ldrh	r3, [r3, #26]
 8015b94:	f003 0310 	and.w	r3, r3, #16
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d10d      	bne.n	8015bb8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d008      	beq.n	8015bb8 <tcp_input_delayed_close+0x50>
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bac:	687a      	ldr	r2, [r7, #4]
 8015bae:	6912      	ldr	r2, [r2, #16]
 8015bb0:	f06f 010e 	mvn.w	r1, #14
 8015bb4:	4610      	mov	r0, r2
 8015bb6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015bb8:	6879      	ldr	r1, [r7, #4]
 8015bba:	480a      	ldr	r0, [pc, #40]	; (8015be4 <tcp_input_delayed_close+0x7c>)
 8015bbc:	f7ff fa54 	bl	8015068 <tcp_pcb_remove>
    tcp_free(pcb);
 8015bc0:	6878      	ldr	r0, [r7, #4]
 8015bc2:	f7fd fc65 	bl	8013490 <tcp_free>
    return 1;
 8015bc6:	2301      	movs	r3, #1
 8015bc8:	e000      	b.n	8015bcc <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015bca:	2300      	movs	r3, #0
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3708      	adds	r7, #8
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd80      	pop	{r7, pc}
 8015bd4:	0801f890 	.word	0x0801f890
 8015bd8:	0801fa60 	.word	0x0801fa60
 8015bdc:	0801f8dc 	.word	0x0801f8dc
 8015be0:	20008745 	.word	0x20008745
 8015be4:	2000bdb4 	.word	0x2000bdb4

08015be8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015be8:	b590      	push	{r4, r7, lr}
 8015bea:	b08b      	sub	sp, #44	; 0x2c
 8015bec:	af04      	add	r7, sp, #16
 8015bee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015bf0:	4b6f      	ldr	r3, [pc, #444]	; (8015db0 <tcp_listen_input+0x1c8>)
 8015bf2:	781b      	ldrb	r3, [r3, #0]
 8015bf4:	f003 0304 	and.w	r3, r3, #4
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	f040 80d3 	bne.w	8015da4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d106      	bne.n	8015c12 <tcp_listen_input+0x2a>
 8015c04:	4b6b      	ldr	r3, [pc, #428]	; (8015db4 <tcp_listen_input+0x1cc>)
 8015c06:	f240 2281 	movw	r2, #641	; 0x281
 8015c0a:	496b      	ldr	r1, [pc, #428]	; (8015db8 <tcp_listen_input+0x1d0>)
 8015c0c:	486b      	ldr	r0, [pc, #428]	; (8015dbc <tcp_listen_input+0x1d4>)
 8015c0e:	f006 ffdb 	bl	801cbc8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015c12:	4b67      	ldr	r3, [pc, #412]	; (8015db0 <tcp_listen_input+0x1c8>)
 8015c14:	781b      	ldrb	r3, [r3, #0]
 8015c16:	f003 0310 	and.w	r3, r3, #16
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d019      	beq.n	8015c52 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c1e:	4b68      	ldr	r3, [pc, #416]	; (8015dc0 <tcp_listen_input+0x1d8>)
 8015c20:	6819      	ldr	r1, [r3, #0]
 8015c22:	4b68      	ldr	r3, [pc, #416]	; (8015dc4 <tcp_listen_input+0x1dc>)
 8015c24:	881b      	ldrh	r3, [r3, #0]
 8015c26:	461a      	mov	r2, r3
 8015c28:	4b67      	ldr	r3, [pc, #412]	; (8015dc8 <tcp_listen_input+0x1e0>)
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c2e:	4b67      	ldr	r3, [pc, #412]	; (8015dcc <tcp_listen_input+0x1e4>)
 8015c30:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c32:	885b      	ldrh	r3, [r3, #2]
 8015c34:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c36:	4a65      	ldr	r2, [pc, #404]	; (8015dcc <tcp_listen_input+0x1e4>)
 8015c38:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c3a:	8812      	ldrh	r2, [r2, #0]
 8015c3c:	b292      	uxth	r2, r2
 8015c3e:	9202      	str	r2, [sp, #8]
 8015c40:	9301      	str	r3, [sp, #4]
 8015c42:	4b63      	ldr	r3, [pc, #396]	; (8015dd0 <tcp_listen_input+0x1e8>)
 8015c44:	9300      	str	r3, [sp, #0]
 8015c46:	4b63      	ldr	r3, [pc, #396]	; (8015dd4 <tcp_listen_input+0x1ec>)
 8015c48:	4602      	mov	r2, r0
 8015c4a:	6878      	ldr	r0, [r7, #4]
 8015c4c:	f003 fc0c 	bl	8019468 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015c50:	e0aa      	b.n	8015da8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 8015c52:	4b57      	ldr	r3, [pc, #348]	; (8015db0 <tcp_listen_input+0x1c8>)
 8015c54:	781b      	ldrb	r3, [r3, #0]
 8015c56:	f003 0302 	and.w	r3, r3, #2
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	f000 80a4 	beq.w	8015da8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	7d5b      	ldrb	r3, [r3, #21]
 8015c64:	4618      	mov	r0, r3
 8015c66:	f7ff f85d 	bl	8014d24 <tcp_alloc>
 8015c6a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015c6c:	697b      	ldr	r3, [r7, #20]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d111      	bne.n	8015c96 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	699b      	ldr	r3, [r3, #24]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d00a      	beq.n	8015c90 <tcp_listen_input+0xa8>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	699b      	ldr	r3, [r3, #24]
 8015c7e:	687a      	ldr	r2, [r7, #4]
 8015c80:	6910      	ldr	r0, [r2, #16]
 8015c82:	f04f 32ff 	mov.w	r2, #4294967295
 8015c86:	2100      	movs	r1, #0
 8015c88:	4798      	blx	r3
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	73bb      	strb	r3, [r7, #14]
      return;
 8015c8e:	e08c      	b.n	8015daa <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015c90:	23f0      	movs	r3, #240	; 0xf0
 8015c92:	73bb      	strb	r3, [r7, #14]
      return;
 8015c94:	e089      	b.n	8015daa <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015c96:	4b50      	ldr	r3, [pc, #320]	; (8015dd8 <tcp_listen_input+0x1f0>)
 8015c98:	695a      	ldr	r2, [r3, #20]
 8015c9a:	697b      	ldr	r3, [r7, #20]
 8015c9c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015c9e:	4b4e      	ldr	r3, [pc, #312]	; (8015dd8 <tcp_listen_input+0x1f0>)
 8015ca0:	691a      	ldr	r2, [r3, #16]
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	8ada      	ldrh	r2, [r3, #22]
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015cae:	4b47      	ldr	r3, [pc, #284]	; (8015dcc <tcp_listen_input+0x1e4>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	881b      	ldrh	r3, [r3, #0]
 8015cb4:	b29a      	uxth	r2, r3
 8015cb6:	697b      	ldr	r3, [r7, #20]
 8015cb8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	2203      	movs	r2, #3
 8015cbe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015cc0:	4b41      	ldr	r3, [pc, #260]	; (8015dc8 <tcp_listen_input+0x1e0>)
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	1c5a      	adds	r2, r3, #1
 8015cc6:	697b      	ldr	r3, [r7, #20]
 8015cc8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015cd2:	6978      	ldr	r0, [r7, #20]
 8015cd4:	f7ff fa5c 	bl	8015190 <tcp_next_iss>
 8015cd8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015cda:	697b      	ldr	r3, [r7, #20]
 8015cdc:	693a      	ldr	r2, [r7, #16]
 8015cde:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015ce0:	697b      	ldr	r3, [r7, #20]
 8015ce2:	693a      	ldr	r2, [r7, #16]
 8015ce4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015ce6:	697b      	ldr	r3, [r7, #20]
 8015ce8:	693a      	ldr	r2, [r7, #16]
 8015cea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	693a      	ldr	r2, [r7, #16]
 8015cf0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015cf2:	4b35      	ldr	r3, [pc, #212]	; (8015dc8 <tcp_listen_input+0x1e0>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	1e5a      	subs	r2, r3, #1
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	691a      	ldr	r2, [r3, #16]
 8015d00:	697b      	ldr	r3, [r7, #20]
 8015d02:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015d04:	697b      	ldr	r3, [r7, #20]
 8015d06:	687a      	ldr	r2, [r7, #4]
 8015d08:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	7a5b      	ldrb	r3, [r3, #9]
 8015d0e:	f003 030c 	and.w	r3, r3, #12
 8015d12:	b2da      	uxtb	r2, r3
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	7a1a      	ldrb	r2, [r3, #8]
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015d20:	4b2e      	ldr	r3, [pc, #184]	; (8015ddc <tcp_listen_input+0x1f4>)
 8015d22:	681a      	ldr	r2, [r3, #0]
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	60da      	str	r2, [r3, #12]
 8015d28:	4a2c      	ldr	r2, [pc, #176]	; (8015ddc <tcp_listen_input+0x1f4>)
 8015d2a:	697b      	ldr	r3, [r7, #20]
 8015d2c:	6013      	str	r3, [r2, #0]
 8015d2e:	f003 fd5d 	bl	80197ec <tcp_timer_needed>
 8015d32:	4b2b      	ldr	r3, [pc, #172]	; (8015de0 <tcp_listen_input+0x1f8>)
 8015d34:	2201      	movs	r2, #1
 8015d36:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015d38:	6978      	ldr	r0, [r7, #20]
 8015d3a:	f001 fd8f 	bl	801785c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015d3e:	4b23      	ldr	r3, [pc, #140]	; (8015dcc <tcp_listen_input+0x1e4>)
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	89db      	ldrh	r3, [r3, #14]
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015d4c:	697b      	ldr	r3, [r7, #20]
 8015d4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015d58:	697b      	ldr	r3, [r7, #20]
 8015d5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	3304      	adds	r3, #4
 8015d60:	4618      	mov	r0, r3
 8015d62:	f005 fb29 	bl	801b3b8 <ip4_route>
 8015d66:	4601      	mov	r1, r0
 8015d68:	697b      	ldr	r3, [r7, #20]
 8015d6a:	3304      	adds	r3, #4
 8015d6c:	461a      	mov	r2, r3
 8015d6e:	4620      	mov	r0, r4
 8015d70:	f7ff fa34 	bl	80151dc <tcp_eff_send_mss_netif>
 8015d74:	4603      	mov	r3, r0
 8015d76:	461a      	mov	r2, r3
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015d7c:	2112      	movs	r1, #18
 8015d7e:	6978      	ldr	r0, [r7, #20]
 8015d80:	f002 fc9c 	bl	80186bc <tcp_enqueue_flags>
 8015d84:	4603      	mov	r3, r0
 8015d86:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d004      	beq.n	8015d9a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015d90:	2100      	movs	r1, #0
 8015d92:	6978      	ldr	r0, [r7, #20]
 8015d94:	f7fd fdf8 	bl	8013988 <tcp_abandon>
      return;
 8015d98:	e007      	b.n	8015daa <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8015d9a:	6978      	ldr	r0, [r7, #20]
 8015d9c:	f002 fd7c 	bl	8018898 <tcp_output>
  return;
 8015da0:	bf00      	nop
 8015da2:	e001      	b.n	8015da8 <tcp_listen_input+0x1c0>
    return;
 8015da4:	bf00      	nop
 8015da6:	e000      	b.n	8015daa <tcp_listen_input+0x1c2>
  return;
 8015da8:	bf00      	nop
}
 8015daa:	371c      	adds	r7, #28
 8015dac:	46bd      	mov	sp, r7
 8015dae:	bd90      	pop	{r4, r7, pc}
 8015db0:	20008744 	.word	0x20008744
 8015db4:	0801f890 	.word	0x0801f890
 8015db8:	0801fa88 	.word	0x0801fa88
 8015dbc:	0801f8dc 	.word	0x0801f8dc
 8015dc0:	2000873c 	.word	0x2000873c
 8015dc4:	20008742 	.word	0x20008742
 8015dc8:	20008738 	.word	0x20008738
 8015dcc:	20008728 	.word	0x20008728
 8015dd0:	20008d04 	.word	0x20008d04
 8015dd4:	20008d08 	.word	0x20008d08
 8015dd8:	20008cf4 	.word	0x20008cf4
 8015ddc:	2000bdb4 	.word	0x2000bdb4
 8015de0:	2000bdb0 	.word	0x2000bdb0

08015de4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b086      	sub	sp, #24
 8015de8:	af04      	add	r7, sp, #16
 8015dea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015dec:	4b30      	ldr	r3, [pc, #192]	; (8015eb0 <tcp_timewait_input+0xcc>)
 8015dee:	781b      	ldrb	r3, [r3, #0]
 8015df0:	f003 0304 	and.w	r3, r3, #4
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d154      	bne.n	8015ea2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d106      	bne.n	8015e0c <tcp_timewait_input+0x28>
 8015dfe:	4b2d      	ldr	r3, [pc, #180]	; (8015eb4 <tcp_timewait_input+0xd0>)
 8015e00:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015e04:	492c      	ldr	r1, [pc, #176]	; (8015eb8 <tcp_timewait_input+0xd4>)
 8015e06:	482d      	ldr	r0, [pc, #180]	; (8015ebc <tcp_timewait_input+0xd8>)
 8015e08:	f006 fede 	bl	801cbc8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015e0c:	4b28      	ldr	r3, [pc, #160]	; (8015eb0 <tcp_timewait_input+0xcc>)
 8015e0e:	781b      	ldrb	r3, [r3, #0]
 8015e10:	f003 0302 	and.w	r3, r3, #2
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d02a      	beq.n	8015e6e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015e18:	4b29      	ldr	r3, [pc, #164]	; (8015ec0 <tcp_timewait_input+0xdc>)
 8015e1a:	681a      	ldr	r2, [r3, #0]
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e20:	1ad3      	subs	r3, r2, r3
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	db2d      	blt.n	8015e82 <tcp_timewait_input+0x9e>
 8015e26:	4b26      	ldr	r3, [pc, #152]	; (8015ec0 <tcp_timewait_input+0xdc>)
 8015e28:	681a      	ldr	r2, [r3, #0]
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e2e:	6879      	ldr	r1, [r7, #4]
 8015e30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015e32:	440b      	add	r3, r1
 8015e34:	1ad3      	subs	r3, r2, r3
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	dc23      	bgt.n	8015e82 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e3a:	4b22      	ldr	r3, [pc, #136]	; (8015ec4 <tcp_timewait_input+0xe0>)
 8015e3c:	6819      	ldr	r1, [r3, #0]
 8015e3e:	4b22      	ldr	r3, [pc, #136]	; (8015ec8 <tcp_timewait_input+0xe4>)
 8015e40:	881b      	ldrh	r3, [r3, #0]
 8015e42:	461a      	mov	r2, r3
 8015e44:	4b1e      	ldr	r3, [pc, #120]	; (8015ec0 <tcp_timewait_input+0xdc>)
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e4a:	4b20      	ldr	r3, [pc, #128]	; (8015ecc <tcp_timewait_input+0xe8>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e4e:	885b      	ldrh	r3, [r3, #2]
 8015e50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015e52:	4a1e      	ldr	r2, [pc, #120]	; (8015ecc <tcp_timewait_input+0xe8>)
 8015e54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015e56:	8812      	ldrh	r2, [r2, #0]
 8015e58:	b292      	uxth	r2, r2
 8015e5a:	9202      	str	r2, [sp, #8]
 8015e5c:	9301      	str	r3, [sp, #4]
 8015e5e:	4b1c      	ldr	r3, [pc, #112]	; (8015ed0 <tcp_timewait_input+0xec>)
 8015e60:	9300      	str	r3, [sp, #0]
 8015e62:	4b1c      	ldr	r3, [pc, #112]	; (8015ed4 <tcp_timewait_input+0xf0>)
 8015e64:	4602      	mov	r2, r0
 8015e66:	6878      	ldr	r0, [r7, #4]
 8015e68:	f003 fafe 	bl	8019468 <tcp_rst>
      return;
 8015e6c:	e01c      	b.n	8015ea8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8015e6e:	4b10      	ldr	r3, [pc, #64]	; (8015eb0 <tcp_timewait_input+0xcc>)
 8015e70:	781b      	ldrb	r3, [r3, #0]
 8015e72:	f003 0301 	and.w	r3, r3, #1
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d003      	beq.n	8015e82 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015e7a:	4b17      	ldr	r3, [pc, #92]	; (8015ed8 <tcp_timewait_input+0xf4>)
 8015e7c:	681a      	ldr	r2, [r3, #0]
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015e82:	4b11      	ldr	r3, [pc, #68]	; (8015ec8 <tcp_timewait_input+0xe4>)
 8015e84:	881b      	ldrh	r3, [r3, #0]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d00d      	beq.n	8015ea6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	8b5b      	ldrh	r3, [r3, #26]
 8015e8e:	f043 0302 	orr.w	r3, r3, #2
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015e98:	6878      	ldr	r0, [r7, #4]
 8015e9a:	f002 fcfd 	bl	8018898 <tcp_output>
  }
  return;
 8015e9e:	bf00      	nop
 8015ea0:	e001      	b.n	8015ea6 <tcp_timewait_input+0xc2>
    return;
 8015ea2:	bf00      	nop
 8015ea4:	e000      	b.n	8015ea8 <tcp_timewait_input+0xc4>
  return;
 8015ea6:	bf00      	nop
}
 8015ea8:	3708      	adds	r7, #8
 8015eaa:	46bd      	mov	sp, r7
 8015eac:	bd80      	pop	{r7, pc}
 8015eae:	bf00      	nop
 8015eb0:	20008744 	.word	0x20008744
 8015eb4:	0801f890 	.word	0x0801f890
 8015eb8:	0801faa8 	.word	0x0801faa8
 8015ebc:	0801f8dc 	.word	0x0801f8dc
 8015ec0:	20008738 	.word	0x20008738
 8015ec4:	2000873c 	.word	0x2000873c
 8015ec8:	20008742 	.word	0x20008742
 8015ecc:	20008728 	.word	0x20008728
 8015ed0:	20008d04 	.word	0x20008d04
 8015ed4:	20008d08 	.word	0x20008d08
 8015ed8:	2000bdb8 	.word	0x2000bdb8

08015edc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015edc:	b590      	push	{r4, r7, lr}
 8015ede:	b08d      	sub	sp, #52	; 0x34
 8015ee0:	af04      	add	r7, sp, #16
 8015ee2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015ee4:	2300      	movs	r3, #0
 8015ee6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d106      	bne.n	8015f00 <tcp_process+0x24>
 8015ef2:	4ba5      	ldr	r3, [pc, #660]	; (8016188 <tcp_process+0x2ac>)
 8015ef4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015ef8:	49a4      	ldr	r1, [pc, #656]	; (801618c <tcp_process+0x2b0>)
 8015efa:	48a5      	ldr	r0, [pc, #660]	; (8016190 <tcp_process+0x2b4>)
 8015efc:	f006 fe64 	bl	801cbc8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015f00:	4ba4      	ldr	r3, [pc, #656]	; (8016194 <tcp_process+0x2b8>)
 8015f02:	781b      	ldrb	r3, [r3, #0]
 8015f04:	f003 0304 	and.w	r3, r3, #4
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d04e      	beq.n	8015faa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	7d1b      	ldrb	r3, [r3, #20]
 8015f10:	2b02      	cmp	r3, #2
 8015f12:	d108      	bne.n	8015f26 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f18:	4b9f      	ldr	r3, [pc, #636]	; (8016198 <tcp_process+0x2bc>)
 8015f1a:	681b      	ldr	r3, [r3, #0]
 8015f1c:	429a      	cmp	r2, r3
 8015f1e:	d123      	bne.n	8015f68 <tcp_process+0x8c>
        acceptable = 1;
 8015f20:	2301      	movs	r3, #1
 8015f22:	76fb      	strb	r3, [r7, #27]
 8015f24:	e020      	b.n	8015f68 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015f2a:	4b9c      	ldr	r3, [pc, #624]	; (801619c <tcp_process+0x2c0>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d102      	bne.n	8015f38 <tcp_process+0x5c>
        acceptable = 1;
 8015f32:	2301      	movs	r3, #1
 8015f34:	76fb      	strb	r3, [r7, #27]
 8015f36:	e017      	b.n	8015f68 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015f38:	4b98      	ldr	r3, [pc, #608]	; (801619c <tcp_process+0x2c0>)
 8015f3a:	681a      	ldr	r2, [r3, #0]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f40:	1ad3      	subs	r3, r2, r3
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	db10      	blt.n	8015f68 <tcp_process+0x8c>
 8015f46:	4b95      	ldr	r3, [pc, #596]	; (801619c <tcp_process+0x2c0>)
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f4e:	6879      	ldr	r1, [r7, #4]
 8015f50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015f52:	440b      	add	r3, r1
 8015f54:	1ad3      	subs	r3, r2, r3
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	dc06      	bgt.n	8015f68 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	8b5b      	ldrh	r3, [r3, #26]
 8015f5e:	f043 0302 	orr.w	r3, r3, #2
 8015f62:	b29a      	uxth	r2, r3
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015f68:	7efb      	ldrb	r3, [r7, #27]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d01b      	beq.n	8015fa6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	7d1b      	ldrb	r3, [r3, #20]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d106      	bne.n	8015f84 <tcp_process+0xa8>
 8015f76:	4b84      	ldr	r3, [pc, #528]	; (8016188 <tcp_process+0x2ac>)
 8015f78:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015f7c:	4988      	ldr	r1, [pc, #544]	; (80161a0 <tcp_process+0x2c4>)
 8015f7e:	4884      	ldr	r0, [pc, #528]	; (8016190 <tcp_process+0x2b4>)
 8015f80:	f006 fe22 	bl	801cbc8 <iprintf>
      recv_flags |= TF_RESET;
 8015f84:	4b87      	ldr	r3, [pc, #540]	; (80161a4 <tcp_process+0x2c8>)
 8015f86:	781b      	ldrb	r3, [r3, #0]
 8015f88:	f043 0308 	orr.w	r3, r3, #8
 8015f8c:	b2da      	uxtb	r2, r3
 8015f8e:	4b85      	ldr	r3, [pc, #532]	; (80161a4 <tcp_process+0x2c8>)
 8015f90:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	8b5b      	ldrh	r3, [r3, #26]
 8015f96:	f023 0301 	bic.w	r3, r3, #1
 8015f9a:	b29a      	uxth	r2, r3
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015fa0:	f06f 030d 	mvn.w	r3, #13
 8015fa4:	e37a      	b.n	801669c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	e378      	b.n	801669c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015faa:	4b7a      	ldr	r3, [pc, #488]	; (8016194 <tcp_process+0x2b8>)
 8015fac:	781b      	ldrb	r3, [r3, #0]
 8015fae:	f003 0302 	and.w	r3, r3, #2
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d010      	beq.n	8015fd8 <tcp_process+0xfc>
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	7d1b      	ldrb	r3, [r3, #20]
 8015fba:	2b02      	cmp	r3, #2
 8015fbc:	d00c      	beq.n	8015fd8 <tcp_process+0xfc>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	7d1b      	ldrb	r3, [r3, #20]
 8015fc2:	2b03      	cmp	r3, #3
 8015fc4:	d008      	beq.n	8015fd8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	8b5b      	ldrh	r3, [r3, #26]
 8015fca:	f043 0302 	orr.w	r3, r3, #2
 8015fce:	b29a      	uxth	r2, r3
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	e361      	b.n	801669c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	8b5b      	ldrh	r3, [r3, #26]
 8015fdc:	f003 0310 	and.w	r3, r3, #16
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d103      	bne.n	8015fec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015fe4:	4b70      	ldr	r3, [pc, #448]	; (80161a8 <tcp_process+0x2cc>)
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2200      	movs	r2, #0
 8015ff0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015ffc:	6878      	ldr	r0, [r7, #4]
 8015ffe:	f001 fc2d 	bl	801785c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	7d1b      	ldrb	r3, [r3, #20]
 8016006:	3b02      	subs	r3, #2
 8016008:	2b07      	cmp	r3, #7
 801600a:	f200 8337 	bhi.w	801667c <tcp_process+0x7a0>
 801600e:	a201      	add	r2, pc, #4	; (adr r2, 8016014 <tcp_process+0x138>)
 8016010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016014:	08016035 	.word	0x08016035
 8016018:	08016265 	.word	0x08016265
 801601c:	080163dd 	.word	0x080163dd
 8016020:	08016407 	.word	0x08016407
 8016024:	0801652b 	.word	0x0801652b
 8016028:	080163dd 	.word	0x080163dd
 801602c:	080165b7 	.word	0x080165b7
 8016030:	08016647 	.word	0x08016647
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016034:	4b57      	ldr	r3, [pc, #348]	; (8016194 <tcp_process+0x2b8>)
 8016036:	781b      	ldrb	r3, [r3, #0]
 8016038:	f003 0310 	and.w	r3, r3, #16
 801603c:	2b00      	cmp	r3, #0
 801603e:	f000 80e4 	beq.w	801620a <tcp_process+0x32e>
 8016042:	4b54      	ldr	r3, [pc, #336]	; (8016194 <tcp_process+0x2b8>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	f003 0302 	and.w	r3, r3, #2
 801604a:	2b00      	cmp	r3, #0
 801604c:	f000 80dd 	beq.w	801620a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016054:	1c5a      	adds	r2, r3, #1
 8016056:	4b50      	ldr	r3, [pc, #320]	; (8016198 <tcp_process+0x2bc>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	429a      	cmp	r2, r3
 801605c:	f040 80d5 	bne.w	801620a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8016060:	4b4e      	ldr	r3, [pc, #312]	; (801619c <tcp_process+0x2c0>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	1c5a      	adds	r2, r3, #1
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8016072:	4b49      	ldr	r3, [pc, #292]	; (8016198 <tcp_process+0x2bc>)
 8016074:	681a      	ldr	r2, [r3, #0]
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801607a:	4b4c      	ldr	r3, [pc, #304]	; (80161ac <tcp_process+0x2d0>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	89db      	ldrh	r3, [r3, #14]
 8016080:	b29a      	uxth	r2, r3
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8016094:	4b41      	ldr	r3, [pc, #260]	; (801619c <tcp_process+0x2c0>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	1e5a      	subs	r2, r3, #1
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2204      	movs	r2, #4
 80160a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	3304      	adds	r3, #4
 80160ac:	4618      	mov	r0, r3
 80160ae:	f005 f983 	bl	801b3b8 <ip4_route>
 80160b2:	4601      	mov	r1, r0
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	3304      	adds	r3, #4
 80160b8:	461a      	mov	r2, r3
 80160ba:	4620      	mov	r0, r4
 80160bc:	f7ff f88e 	bl	80151dc <tcp_eff_send_mss_netif>
 80160c0:	4603      	mov	r3, r0
 80160c2:	461a      	mov	r2, r3
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160cc:	009a      	lsls	r2, r3, #2
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160d2:	005b      	lsls	r3, r3, #1
 80160d4:	f241 111c 	movw	r1, #4380	; 0x111c
 80160d8:	428b      	cmp	r3, r1
 80160da:	bf38      	it	cc
 80160dc:	460b      	movcc	r3, r1
 80160de:	429a      	cmp	r2, r3
 80160e0:	d204      	bcs.n	80160ec <tcp_process+0x210>
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160e6:	009b      	lsls	r3, r3, #2
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	e00d      	b.n	8016108 <tcp_process+0x22c>
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160f0:	005b      	lsls	r3, r3, #1
 80160f2:	f241 121c 	movw	r2, #4380	; 0x111c
 80160f6:	4293      	cmp	r3, r2
 80160f8:	d904      	bls.n	8016104 <tcp_process+0x228>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160fe:	005b      	lsls	r3, r3, #1
 8016100:	b29b      	uxth	r3, r3
 8016102:	e001      	b.n	8016108 <tcp_process+0x22c>
 8016104:	f241 131c 	movw	r3, #4380	; 0x111c
 8016108:	687a      	ldr	r2, [r7, #4]
 801610a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016114:	2b00      	cmp	r3, #0
 8016116:	d106      	bne.n	8016126 <tcp_process+0x24a>
 8016118:	4b1b      	ldr	r3, [pc, #108]	; (8016188 <tcp_process+0x2ac>)
 801611a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801611e:	4924      	ldr	r1, [pc, #144]	; (80161b0 <tcp_process+0x2d4>)
 8016120:	481b      	ldr	r0, [pc, #108]	; (8016190 <tcp_process+0x2b4>)
 8016122:	f006 fd51 	bl	801cbc8 <iprintf>
        --pcb->snd_queuelen;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801612c:	3b01      	subs	r3, #1
 801612e:	b29a      	uxth	r2, r3
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801613a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d111      	bne.n	8016166 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016146:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016148:	69fb      	ldr	r3, [r7, #28]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d106      	bne.n	801615c <tcp_process+0x280>
 801614e:	4b0e      	ldr	r3, [pc, #56]	; (8016188 <tcp_process+0x2ac>)
 8016150:	f44f 725d 	mov.w	r2, #884	; 0x374
 8016154:	4917      	ldr	r1, [pc, #92]	; (80161b4 <tcp_process+0x2d8>)
 8016156:	480e      	ldr	r0, [pc, #56]	; (8016190 <tcp_process+0x2b4>)
 8016158:	f006 fd36 	bl	801cbc8 <iprintf>
          pcb->unsent = rseg->next;
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	681a      	ldr	r2, [r3, #0]
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	66da      	str	r2, [r3, #108]	; 0x6c
 8016164:	e003      	b.n	801616e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8016166:	69fb      	ldr	r3, [r7, #28]
 8016168:	681a      	ldr	r2, [r3, #0]
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801616e:	69f8      	ldr	r0, [r7, #28]
 8016170:	f7fe fc70 	bl	8014a54 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016178:	2b00      	cmp	r3, #0
 801617a:	d11d      	bne.n	80161b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016182:	861a      	strh	r2, [r3, #48]	; 0x30
 8016184:	e01f      	b.n	80161c6 <tcp_process+0x2ea>
 8016186:	bf00      	nop
 8016188:	0801f890 	.word	0x0801f890
 801618c:	0801fac8 	.word	0x0801fac8
 8016190:	0801f8dc 	.word	0x0801f8dc
 8016194:	20008744 	.word	0x20008744
 8016198:	2000873c 	.word	0x2000873c
 801619c:	20008738 	.word	0x20008738
 80161a0:	0801fae4 	.word	0x0801fae4
 80161a4:	20008745 	.word	0x20008745
 80161a8:	2000bdb8 	.word	0x2000bdb8
 80161ac:	20008728 	.word	0x20008728
 80161b0:	0801fb04 	.word	0x0801fb04
 80161b4:	0801fb1c 	.word	0x0801fb1c
        } else {
          pcb->rtime = 0;
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	2200      	movs	r2, #0
 80161bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	2200      	movs	r2, #0
 80161c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d00a      	beq.n	80161e6 <tcp_process+0x30a>
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80161d6:	687a      	ldr	r2, [r7, #4]
 80161d8:	6910      	ldr	r0, [r2, #16]
 80161da:	2200      	movs	r2, #0
 80161dc:	6879      	ldr	r1, [r7, #4]
 80161de:	4798      	blx	r3
 80161e0:	4603      	mov	r3, r0
 80161e2:	76bb      	strb	r3, [r7, #26]
 80161e4:	e001      	b.n	80161ea <tcp_process+0x30e>
 80161e6:	2300      	movs	r3, #0
 80161e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80161ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80161ee:	f113 0f0d 	cmn.w	r3, #13
 80161f2:	d102      	bne.n	80161fa <tcp_process+0x31e>
          return ERR_ABRT;
 80161f4:	f06f 030c 	mvn.w	r3, #12
 80161f8:	e250      	b.n	801669c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	8b5b      	ldrh	r3, [r3, #26]
 80161fe:	f043 0302 	orr.w	r3, r3, #2
 8016202:	b29a      	uxth	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016208:	e23a      	b.n	8016680 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801620a:	4b9d      	ldr	r3, [pc, #628]	; (8016480 <tcp_process+0x5a4>)
 801620c:	781b      	ldrb	r3, [r3, #0]
 801620e:	f003 0310 	and.w	r3, r3, #16
 8016212:	2b00      	cmp	r3, #0
 8016214:	f000 8234 	beq.w	8016680 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016218:	4b9a      	ldr	r3, [pc, #616]	; (8016484 <tcp_process+0x5a8>)
 801621a:	6819      	ldr	r1, [r3, #0]
 801621c:	4b9a      	ldr	r3, [pc, #616]	; (8016488 <tcp_process+0x5ac>)
 801621e:	881b      	ldrh	r3, [r3, #0]
 8016220:	461a      	mov	r2, r3
 8016222:	4b9a      	ldr	r3, [pc, #616]	; (801648c <tcp_process+0x5b0>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016228:	4b99      	ldr	r3, [pc, #612]	; (8016490 <tcp_process+0x5b4>)
 801622a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801622c:	885b      	ldrh	r3, [r3, #2]
 801622e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016230:	4a97      	ldr	r2, [pc, #604]	; (8016490 <tcp_process+0x5b4>)
 8016232:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016234:	8812      	ldrh	r2, [r2, #0]
 8016236:	b292      	uxth	r2, r2
 8016238:	9202      	str	r2, [sp, #8]
 801623a:	9301      	str	r3, [sp, #4]
 801623c:	4b95      	ldr	r3, [pc, #596]	; (8016494 <tcp_process+0x5b8>)
 801623e:	9300      	str	r3, [sp, #0]
 8016240:	4b95      	ldr	r3, [pc, #596]	; (8016498 <tcp_process+0x5bc>)
 8016242:	4602      	mov	r2, r0
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f003 f90f 	bl	8019468 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016250:	2b05      	cmp	r3, #5
 8016252:	f200 8215 	bhi.w	8016680 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2200      	movs	r2, #0
 801625a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f002 febd 	bl	8018fdc <tcp_rexmit_rto>
      break;
 8016262:	e20d      	b.n	8016680 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016264:	4b86      	ldr	r3, [pc, #536]	; (8016480 <tcp_process+0x5a4>)
 8016266:	781b      	ldrb	r3, [r3, #0]
 8016268:	f003 0310 	and.w	r3, r3, #16
 801626c:	2b00      	cmp	r3, #0
 801626e:	f000 80a1 	beq.w	80163b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016272:	4b84      	ldr	r3, [pc, #528]	; (8016484 <tcp_process+0x5a8>)
 8016274:	681a      	ldr	r2, [r3, #0]
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801627a:	1ad3      	subs	r3, r2, r3
 801627c:	3b01      	subs	r3, #1
 801627e:	2b00      	cmp	r3, #0
 8016280:	db7e      	blt.n	8016380 <tcp_process+0x4a4>
 8016282:	4b80      	ldr	r3, [pc, #512]	; (8016484 <tcp_process+0x5a8>)
 8016284:	681a      	ldr	r2, [r3, #0]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801628a:	1ad3      	subs	r3, r2, r3
 801628c:	2b00      	cmp	r3, #0
 801628e:	dc77      	bgt.n	8016380 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	2204      	movs	r2, #4
 8016294:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801629a:	2b00      	cmp	r3, #0
 801629c:	d102      	bne.n	80162a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801629e:	23fa      	movs	r3, #250	; 0xfa
 80162a0:	76bb      	strb	r3, [r7, #26]
 80162a2:	e01d      	b.n	80162e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162a8:	699b      	ldr	r3, [r3, #24]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d106      	bne.n	80162bc <tcp_process+0x3e0>
 80162ae:	4b7b      	ldr	r3, [pc, #492]	; (801649c <tcp_process+0x5c0>)
 80162b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80162b4:	497a      	ldr	r1, [pc, #488]	; (80164a0 <tcp_process+0x5c4>)
 80162b6:	487b      	ldr	r0, [pc, #492]	; (80164a4 <tcp_process+0x5c8>)
 80162b8:	f006 fc86 	bl	801cbc8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162c0:	699b      	ldr	r3, [r3, #24]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d00a      	beq.n	80162dc <tcp_process+0x400>
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162ca:	699b      	ldr	r3, [r3, #24]
 80162cc:	687a      	ldr	r2, [r7, #4]
 80162ce:	6910      	ldr	r0, [r2, #16]
 80162d0:	2200      	movs	r2, #0
 80162d2:	6879      	ldr	r1, [r7, #4]
 80162d4:	4798      	blx	r3
 80162d6:	4603      	mov	r3, r0
 80162d8:	76bb      	strb	r3, [r7, #26]
 80162da:	e001      	b.n	80162e0 <tcp_process+0x404>
 80162dc:	23f0      	movs	r3, #240	; 0xf0
 80162de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80162e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d00a      	beq.n	80162fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80162e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80162ec:	f113 0f0d 	cmn.w	r3, #13
 80162f0:	d002      	beq.n	80162f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80162f2:	6878      	ldr	r0, [r7, #4]
 80162f4:	f7fd fc06 	bl	8013b04 <tcp_abort>
            }
            return ERR_ABRT;
 80162f8:	f06f 030c 	mvn.w	r3, #12
 80162fc:	e1ce      	b.n	801669c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80162fe:	6878      	ldr	r0, [r7, #4]
 8016300:	f000 fae0 	bl	80168c4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016304:	4b68      	ldr	r3, [pc, #416]	; (80164a8 <tcp_process+0x5cc>)
 8016306:	881b      	ldrh	r3, [r3, #0]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d005      	beq.n	8016318 <tcp_process+0x43c>
            recv_acked--;
 801630c:	4b66      	ldr	r3, [pc, #408]	; (80164a8 <tcp_process+0x5cc>)
 801630e:	881b      	ldrh	r3, [r3, #0]
 8016310:	3b01      	subs	r3, #1
 8016312:	b29a      	uxth	r2, r3
 8016314:	4b64      	ldr	r3, [pc, #400]	; (80164a8 <tcp_process+0x5cc>)
 8016316:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801631c:	009a      	lsls	r2, r3, #2
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016322:	005b      	lsls	r3, r3, #1
 8016324:	f241 111c 	movw	r1, #4380	; 0x111c
 8016328:	428b      	cmp	r3, r1
 801632a:	bf38      	it	cc
 801632c:	460b      	movcc	r3, r1
 801632e:	429a      	cmp	r2, r3
 8016330:	d204      	bcs.n	801633c <tcp_process+0x460>
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016336:	009b      	lsls	r3, r3, #2
 8016338:	b29b      	uxth	r3, r3
 801633a:	e00d      	b.n	8016358 <tcp_process+0x47c>
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	f241 121c 	movw	r2, #4380	; 0x111c
 8016346:	4293      	cmp	r3, r2
 8016348:	d904      	bls.n	8016354 <tcp_process+0x478>
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801634e:	005b      	lsls	r3, r3, #1
 8016350:	b29b      	uxth	r3, r3
 8016352:	e001      	b.n	8016358 <tcp_process+0x47c>
 8016354:	f241 131c 	movw	r3, #4380	; 0x111c
 8016358:	687a      	ldr	r2, [r7, #4]
 801635a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801635e:	4b53      	ldr	r3, [pc, #332]	; (80164ac <tcp_process+0x5d0>)
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	f003 0320 	and.w	r3, r3, #32
 8016366:	2b00      	cmp	r3, #0
 8016368:	d037      	beq.n	80163da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	8b5b      	ldrh	r3, [r3, #26]
 801636e:	f043 0302 	orr.w	r3, r3, #2
 8016372:	b29a      	uxth	r2, r3
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2207      	movs	r2, #7
 801637c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801637e:	e02c      	b.n	80163da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016380:	4b40      	ldr	r3, [pc, #256]	; (8016484 <tcp_process+0x5a8>)
 8016382:	6819      	ldr	r1, [r3, #0]
 8016384:	4b40      	ldr	r3, [pc, #256]	; (8016488 <tcp_process+0x5ac>)
 8016386:	881b      	ldrh	r3, [r3, #0]
 8016388:	461a      	mov	r2, r3
 801638a:	4b40      	ldr	r3, [pc, #256]	; (801648c <tcp_process+0x5b0>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016390:	4b3f      	ldr	r3, [pc, #252]	; (8016490 <tcp_process+0x5b4>)
 8016392:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016394:	885b      	ldrh	r3, [r3, #2]
 8016396:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016398:	4a3d      	ldr	r2, [pc, #244]	; (8016490 <tcp_process+0x5b4>)
 801639a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801639c:	8812      	ldrh	r2, [r2, #0]
 801639e:	b292      	uxth	r2, r2
 80163a0:	9202      	str	r2, [sp, #8]
 80163a2:	9301      	str	r3, [sp, #4]
 80163a4:	4b3b      	ldr	r3, [pc, #236]	; (8016494 <tcp_process+0x5b8>)
 80163a6:	9300      	str	r3, [sp, #0]
 80163a8:	4b3b      	ldr	r3, [pc, #236]	; (8016498 <tcp_process+0x5bc>)
 80163aa:	4602      	mov	r2, r0
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f003 f85b 	bl	8019468 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80163b2:	e167      	b.n	8016684 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80163b4:	4b32      	ldr	r3, [pc, #200]	; (8016480 <tcp_process+0x5a4>)
 80163b6:	781b      	ldrb	r3, [r3, #0]
 80163b8:	f003 0302 	and.w	r3, r3, #2
 80163bc:	2b00      	cmp	r3, #0
 80163be:	f000 8161 	beq.w	8016684 <tcp_process+0x7a8>
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163c6:	1e5a      	subs	r2, r3, #1
 80163c8:	4b30      	ldr	r3, [pc, #192]	; (801648c <tcp_process+0x5b0>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	429a      	cmp	r2, r3
 80163ce:	f040 8159 	bne.w	8016684 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80163d2:	6878      	ldr	r0, [r7, #4]
 80163d4:	f002 fe24 	bl	8019020 <tcp_rexmit>
      break;
 80163d8:	e154      	b.n	8016684 <tcp_process+0x7a8>
 80163da:	e153      	b.n	8016684 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	f000 fa71 	bl	80168c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80163e2:	4b32      	ldr	r3, [pc, #200]	; (80164ac <tcp_process+0x5d0>)
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	f003 0320 	and.w	r3, r3, #32
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	f000 814c 	beq.w	8016688 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	8b5b      	ldrh	r3, [r3, #26]
 80163f4:	f043 0302 	orr.w	r3, r3, #2
 80163f8:	b29a      	uxth	r2, r3
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	2207      	movs	r2, #7
 8016402:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016404:	e140      	b.n	8016688 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	f000 fa5c 	bl	80168c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801640c:	4b27      	ldr	r3, [pc, #156]	; (80164ac <tcp_process+0x5d0>)
 801640e:	781b      	ldrb	r3, [r3, #0]
 8016410:	f003 0320 	and.w	r3, r3, #32
 8016414:	2b00      	cmp	r3, #0
 8016416:	d071      	beq.n	80164fc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016418:	4b19      	ldr	r3, [pc, #100]	; (8016480 <tcp_process+0x5a4>)
 801641a:	781b      	ldrb	r3, [r3, #0]
 801641c:	f003 0310 	and.w	r3, r3, #16
 8016420:	2b00      	cmp	r3, #0
 8016422:	d060      	beq.n	80164e6 <tcp_process+0x60a>
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016428:	4b16      	ldr	r3, [pc, #88]	; (8016484 <tcp_process+0x5a8>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	429a      	cmp	r2, r3
 801642e:	d15a      	bne.n	80164e6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016434:	2b00      	cmp	r3, #0
 8016436:	d156      	bne.n	80164e6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	8b5b      	ldrh	r3, [r3, #26]
 801643c:	f043 0302 	orr.w	r3, r3, #2
 8016440:	b29a      	uxth	r2, r3
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f7fe fdbe 	bl	8014fc8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801644c:	4b18      	ldr	r3, [pc, #96]	; (80164b0 <tcp_process+0x5d4>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	687a      	ldr	r2, [r7, #4]
 8016452:	429a      	cmp	r2, r3
 8016454:	d105      	bne.n	8016462 <tcp_process+0x586>
 8016456:	4b16      	ldr	r3, [pc, #88]	; (80164b0 <tcp_process+0x5d4>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	68db      	ldr	r3, [r3, #12]
 801645c:	4a14      	ldr	r2, [pc, #80]	; (80164b0 <tcp_process+0x5d4>)
 801645e:	6013      	str	r3, [r2, #0]
 8016460:	e02e      	b.n	80164c0 <tcp_process+0x5e4>
 8016462:	4b13      	ldr	r3, [pc, #76]	; (80164b0 <tcp_process+0x5d4>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	617b      	str	r3, [r7, #20]
 8016468:	e027      	b.n	80164ba <tcp_process+0x5de>
 801646a:	697b      	ldr	r3, [r7, #20]
 801646c:	68db      	ldr	r3, [r3, #12]
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	429a      	cmp	r2, r3
 8016472:	d11f      	bne.n	80164b4 <tcp_process+0x5d8>
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	68da      	ldr	r2, [r3, #12]
 8016478:	697b      	ldr	r3, [r7, #20]
 801647a:	60da      	str	r2, [r3, #12]
 801647c:	e020      	b.n	80164c0 <tcp_process+0x5e4>
 801647e:	bf00      	nop
 8016480:	20008744 	.word	0x20008744
 8016484:	2000873c 	.word	0x2000873c
 8016488:	20008742 	.word	0x20008742
 801648c:	20008738 	.word	0x20008738
 8016490:	20008728 	.word	0x20008728
 8016494:	20008d04 	.word	0x20008d04
 8016498:	20008d08 	.word	0x20008d08
 801649c:	0801f890 	.word	0x0801f890
 80164a0:	0801fb30 	.word	0x0801fb30
 80164a4:	0801f8dc 	.word	0x0801f8dc
 80164a8:	20008740 	.word	0x20008740
 80164ac:	20008745 	.word	0x20008745
 80164b0:	2000bdb4 	.word	0x2000bdb4
 80164b4:	697b      	ldr	r3, [r7, #20]
 80164b6:	68db      	ldr	r3, [r3, #12]
 80164b8:	617b      	str	r3, [r7, #20]
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d1d4      	bne.n	801646a <tcp_process+0x58e>
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	60da      	str	r2, [r3, #12]
 80164c6:	4b77      	ldr	r3, [pc, #476]	; (80166a4 <tcp_process+0x7c8>)
 80164c8:	2201      	movs	r2, #1
 80164ca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	220a      	movs	r2, #10
 80164d0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80164d2:	4b75      	ldr	r3, [pc, #468]	; (80166a8 <tcp_process+0x7cc>)
 80164d4:	681a      	ldr	r2, [r3, #0]
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	60da      	str	r2, [r3, #12]
 80164da:	4a73      	ldr	r2, [pc, #460]	; (80166a8 <tcp_process+0x7cc>)
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	6013      	str	r3, [r2, #0]
 80164e0:	f003 f984 	bl	80197ec <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80164e4:	e0d2      	b.n	801668c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	8b5b      	ldrh	r3, [r3, #26]
 80164ea:	f043 0302 	orr.w	r3, r3, #2
 80164ee:	b29a      	uxth	r2, r3
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2208      	movs	r2, #8
 80164f8:	751a      	strb	r2, [r3, #20]
      break;
 80164fa:	e0c7      	b.n	801668c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80164fc:	4b6b      	ldr	r3, [pc, #428]	; (80166ac <tcp_process+0x7d0>)
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	f003 0310 	and.w	r3, r3, #16
 8016504:	2b00      	cmp	r3, #0
 8016506:	f000 80c1 	beq.w	801668c <tcp_process+0x7b0>
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801650e:	4b68      	ldr	r3, [pc, #416]	; (80166b0 <tcp_process+0x7d4>)
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	429a      	cmp	r2, r3
 8016514:	f040 80ba 	bne.w	801668c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801651c:	2b00      	cmp	r3, #0
 801651e:	f040 80b5 	bne.w	801668c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2206      	movs	r2, #6
 8016526:	751a      	strb	r2, [r3, #20]
      break;
 8016528:	e0b0      	b.n	801668c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801652a:	6878      	ldr	r0, [r7, #4]
 801652c:	f000 f9ca 	bl	80168c4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016530:	4b60      	ldr	r3, [pc, #384]	; (80166b4 <tcp_process+0x7d8>)
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	f003 0320 	and.w	r3, r3, #32
 8016538:	2b00      	cmp	r3, #0
 801653a:	f000 80a9 	beq.w	8016690 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	8b5b      	ldrh	r3, [r3, #26]
 8016542:	f043 0302 	orr.w	r3, r3, #2
 8016546:	b29a      	uxth	r2, r3
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801654c:	6878      	ldr	r0, [r7, #4]
 801654e:	f7fe fd3b 	bl	8014fc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016552:	4b59      	ldr	r3, [pc, #356]	; (80166b8 <tcp_process+0x7dc>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	687a      	ldr	r2, [r7, #4]
 8016558:	429a      	cmp	r2, r3
 801655a:	d105      	bne.n	8016568 <tcp_process+0x68c>
 801655c:	4b56      	ldr	r3, [pc, #344]	; (80166b8 <tcp_process+0x7dc>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	68db      	ldr	r3, [r3, #12]
 8016562:	4a55      	ldr	r2, [pc, #340]	; (80166b8 <tcp_process+0x7dc>)
 8016564:	6013      	str	r3, [r2, #0]
 8016566:	e013      	b.n	8016590 <tcp_process+0x6b4>
 8016568:	4b53      	ldr	r3, [pc, #332]	; (80166b8 <tcp_process+0x7dc>)
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	613b      	str	r3, [r7, #16]
 801656e:	e00c      	b.n	801658a <tcp_process+0x6ae>
 8016570:	693b      	ldr	r3, [r7, #16]
 8016572:	68db      	ldr	r3, [r3, #12]
 8016574:	687a      	ldr	r2, [r7, #4]
 8016576:	429a      	cmp	r2, r3
 8016578:	d104      	bne.n	8016584 <tcp_process+0x6a8>
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	68da      	ldr	r2, [r3, #12]
 801657e:	693b      	ldr	r3, [r7, #16]
 8016580:	60da      	str	r2, [r3, #12]
 8016582:	e005      	b.n	8016590 <tcp_process+0x6b4>
 8016584:	693b      	ldr	r3, [r7, #16]
 8016586:	68db      	ldr	r3, [r3, #12]
 8016588:	613b      	str	r3, [r7, #16]
 801658a:	693b      	ldr	r3, [r7, #16]
 801658c:	2b00      	cmp	r3, #0
 801658e:	d1ef      	bne.n	8016570 <tcp_process+0x694>
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2200      	movs	r2, #0
 8016594:	60da      	str	r2, [r3, #12]
 8016596:	4b43      	ldr	r3, [pc, #268]	; (80166a4 <tcp_process+0x7c8>)
 8016598:	2201      	movs	r2, #1
 801659a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	220a      	movs	r2, #10
 80165a0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80165a2:	4b41      	ldr	r3, [pc, #260]	; (80166a8 <tcp_process+0x7cc>)
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	60da      	str	r2, [r3, #12]
 80165aa:	4a3f      	ldr	r2, [pc, #252]	; (80166a8 <tcp_process+0x7cc>)
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	6013      	str	r3, [r2, #0]
 80165b0:	f003 f91c 	bl	80197ec <tcp_timer_needed>
      }
      break;
 80165b4:	e06c      	b.n	8016690 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80165b6:	6878      	ldr	r0, [r7, #4]
 80165b8:	f000 f984 	bl	80168c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80165bc:	4b3b      	ldr	r3, [pc, #236]	; (80166ac <tcp_process+0x7d0>)
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	f003 0310 	and.w	r3, r3, #16
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d065      	beq.n	8016694 <tcp_process+0x7b8>
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80165cc:	4b38      	ldr	r3, [pc, #224]	; (80166b0 <tcp_process+0x7d4>)
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d15f      	bne.n	8016694 <tcp_process+0x7b8>
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d15b      	bne.n	8016694 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80165dc:	6878      	ldr	r0, [r7, #4]
 80165de:	f7fe fcf3 	bl	8014fc8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80165e2:	4b35      	ldr	r3, [pc, #212]	; (80166b8 <tcp_process+0x7dc>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	687a      	ldr	r2, [r7, #4]
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d105      	bne.n	80165f8 <tcp_process+0x71c>
 80165ec:	4b32      	ldr	r3, [pc, #200]	; (80166b8 <tcp_process+0x7dc>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	68db      	ldr	r3, [r3, #12]
 80165f2:	4a31      	ldr	r2, [pc, #196]	; (80166b8 <tcp_process+0x7dc>)
 80165f4:	6013      	str	r3, [r2, #0]
 80165f6:	e013      	b.n	8016620 <tcp_process+0x744>
 80165f8:	4b2f      	ldr	r3, [pc, #188]	; (80166b8 <tcp_process+0x7dc>)
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	60fb      	str	r3, [r7, #12]
 80165fe:	e00c      	b.n	801661a <tcp_process+0x73e>
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	68db      	ldr	r3, [r3, #12]
 8016604:	687a      	ldr	r2, [r7, #4]
 8016606:	429a      	cmp	r2, r3
 8016608:	d104      	bne.n	8016614 <tcp_process+0x738>
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	68da      	ldr	r2, [r3, #12]
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	60da      	str	r2, [r3, #12]
 8016612:	e005      	b.n	8016620 <tcp_process+0x744>
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	68db      	ldr	r3, [r3, #12]
 8016618:	60fb      	str	r3, [r7, #12]
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d1ef      	bne.n	8016600 <tcp_process+0x724>
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	2200      	movs	r2, #0
 8016624:	60da      	str	r2, [r3, #12]
 8016626:	4b1f      	ldr	r3, [pc, #124]	; (80166a4 <tcp_process+0x7c8>)
 8016628:	2201      	movs	r2, #1
 801662a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	220a      	movs	r2, #10
 8016630:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016632:	4b1d      	ldr	r3, [pc, #116]	; (80166a8 <tcp_process+0x7cc>)
 8016634:	681a      	ldr	r2, [r3, #0]
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	60da      	str	r2, [r3, #12]
 801663a:	4a1b      	ldr	r2, [pc, #108]	; (80166a8 <tcp_process+0x7cc>)
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	6013      	str	r3, [r2, #0]
 8016640:	f003 f8d4 	bl	80197ec <tcp_timer_needed>
      }
      break;
 8016644:	e026      	b.n	8016694 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016646:	6878      	ldr	r0, [r7, #4]
 8016648:	f000 f93c 	bl	80168c4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801664c:	4b17      	ldr	r3, [pc, #92]	; (80166ac <tcp_process+0x7d0>)
 801664e:	781b      	ldrb	r3, [r3, #0]
 8016650:	f003 0310 	and.w	r3, r3, #16
 8016654:	2b00      	cmp	r3, #0
 8016656:	d01f      	beq.n	8016698 <tcp_process+0x7bc>
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801665c:	4b14      	ldr	r3, [pc, #80]	; (80166b0 <tcp_process+0x7d4>)
 801665e:	681b      	ldr	r3, [r3, #0]
 8016660:	429a      	cmp	r2, r3
 8016662:	d119      	bne.n	8016698 <tcp_process+0x7bc>
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016668:	2b00      	cmp	r3, #0
 801666a:	d115      	bne.n	8016698 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801666c:	4b11      	ldr	r3, [pc, #68]	; (80166b4 <tcp_process+0x7d8>)
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	f043 0310 	orr.w	r3, r3, #16
 8016674:	b2da      	uxtb	r2, r3
 8016676:	4b0f      	ldr	r3, [pc, #60]	; (80166b4 <tcp_process+0x7d8>)
 8016678:	701a      	strb	r2, [r3, #0]
      }
      break;
 801667a:	e00d      	b.n	8016698 <tcp_process+0x7bc>
    default:
      break;
 801667c:	bf00      	nop
 801667e:	e00c      	b.n	801669a <tcp_process+0x7be>
      break;
 8016680:	bf00      	nop
 8016682:	e00a      	b.n	801669a <tcp_process+0x7be>
      break;
 8016684:	bf00      	nop
 8016686:	e008      	b.n	801669a <tcp_process+0x7be>
      break;
 8016688:	bf00      	nop
 801668a:	e006      	b.n	801669a <tcp_process+0x7be>
      break;
 801668c:	bf00      	nop
 801668e:	e004      	b.n	801669a <tcp_process+0x7be>
      break;
 8016690:	bf00      	nop
 8016692:	e002      	b.n	801669a <tcp_process+0x7be>
      break;
 8016694:	bf00      	nop
 8016696:	e000      	b.n	801669a <tcp_process+0x7be>
      break;
 8016698:	bf00      	nop
  }
  return ERR_OK;
 801669a:	2300      	movs	r3, #0
}
 801669c:	4618      	mov	r0, r3
 801669e:	3724      	adds	r7, #36	; 0x24
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd90      	pop	{r4, r7, pc}
 80166a4:	2000bdb0 	.word	0x2000bdb0
 80166a8:	2000bdc4 	.word	0x2000bdc4
 80166ac:	20008744 	.word	0x20008744
 80166b0:	2000873c 	.word	0x2000873c
 80166b4:	20008745 	.word	0x20008745
 80166b8:	2000bdb4 	.word	0x2000bdb4

080166bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80166bc:	b590      	push	{r4, r7, lr}
 80166be:	b085      	sub	sp, #20
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d106      	bne.n	80166da <tcp_oos_insert_segment+0x1e>
 80166cc:	4b3b      	ldr	r3, [pc, #236]	; (80167bc <tcp_oos_insert_segment+0x100>)
 80166ce:	f240 421f 	movw	r2, #1055	; 0x41f
 80166d2:	493b      	ldr	r1, [pc, #236]	; (80167c0 <tcp_oos_insert_segment+0x104>)
 80166d4:	483b      	ldr	r0, [pc, #236]	; (80167c4 <tcp_oos_insert_segment+0x108>)
 80166d6:	f006 fa77 	bl	801cbc8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	68db      	ldr	r3, [r3, #12]
 80166de:	899b      	ldrh	r3, [r3, #12]
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7fa fec6 	bl	8011474 <lwip_htons>
 80166e8:	4603      	mov	r3, r0
 80166ea:	b2db      	uxtb	r3, r3
 80166ec:	f003 0301 	and.w	r3, r3, #1
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d028      	beq.n	8016746 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80166f4:	6838      	ldr	r0, [r7, #0]
 80166f6:	f7fe f999 	bl	8014a2c <tcp_segs_free>
    next = NULL;
 80166fa:	2300      	movs	r3, #0
 80166fc:	603b      	str	r3, [r7, #0]
 80166fe:	e056      	b.n	80167ae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	68db      	ldr	r3, [r3, #12]
 8016704:	899b      	ldrh	r3, [r3, #12]
 8016706:	b29b      	uxth	r3, r3
 8016708:	4618      	mov	r0, r3
 801670a:	f7fa feb3 	bl	8011474 <lwip_htons>
 801670e:	4603      	mov	r3, r0
 8016710:	b2db      	uxtb	r3, r3
 8016712:	f003 0301 	and.w	r3, r3, #1
 8016716:	2b00      	cmp	r3, #0
 8016718:	d00d      	beq.n	8016736 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	68db      	ldr	r3, [r3, #12]
 801671e:	899b      	ldrh	r3, [r3, #12]
 8016720:	b29c      	uxth	r4, r3
 8016722:	2001      	movs	r0, #1
 8016724:	f7fa fea6 	bl	8011474 <lwip_htons>
 8016728:	4603      	mov	r3, r0
 801672a:	461a      	mov	r2, r3
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	68db      	ldr	r3, [r3, #12]
 8016730:	4322      	orrs	r2, r4
 8016732:	b292      	uxth	r2, r2
 8016734:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801673a:	683b      	ldr	r3, [r7, #0]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016740:	68f8      	ldr	r0, [r7, #12]
 8016742:	f7fe f987 	bl	8014a54 <tcp_seg_free>
    while (next &&
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d00e      	beq.n	801676a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	891b      	ldrh	r3, [r3, #8]
 8016750:	461a      	mov	r2, r3
 8016752:	4b1d      	ldr	r3, [pc, #116]	; (80167c8 <tcp_oos_insert_segment+0x10c>)
 8016754:	681b      	ldr	r3, [r3, #0]
 8016756:	441a      	add	r2, r3
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	68db      	ldr	r3, [r3, #12]
 801675c:	685b      	ldr	r3, [r3, #4]
 801675e:	6839      	ldr	r1, [r7, #0]
 8016760:	8909      	ldrh	r1, [r1, #8]
 8016762:	440b      	add	r3, r1
 8016764:	1ad3      	subs	r3, r2, r3
    while (next &&
 8016766:	2b00      	cmp	r3, #0
 8016768:	daca      	bge.n	8016700 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d01e      	beq.n	80167ae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	891b      	ldrh	r3, [r3, #8]
 8016774:	461a      	mov	r2, r3
 8016776:	4b14      	ldr	r3, [pc, #80]	; (80167c8 <tcp_oos_insert_segment+0x10c>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	441a      	add	r2, r3
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	68db      	ldr	r3, [r3, #12]
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016784:	2b00      	cmp	r3, #0
 8016786:	dd12      	ble.n	80167ae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016788:	683b      	ldr	r3, [r7, #0]
 801678a:	68db      	ldr	r3, [r3, #12]
 801678c:	685b      	ldr	r3, [r3, #4]
 801678e:	b29a      	uxth	r2, r3
 8016790:	4b0d      	ldr	r3, [pc, #52]	; (80167c8 <tcp_oos_insert_segment+0x10c>)
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	b29b      	uxth	r3, r3
 8016796:	1ad3      	subs	r3, r2, r3
 8016798:	b29a      	uxth	r2, r3
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	685a      	ldr	r2, [r3, #4]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	891b      	ldrh	r3, [r3, #8]
 80167a6:	4619      	mov	r1, r3
 80167a8:	4610      	mov	r0, r2
 80167aa:	f7fc fa3f 	bl	8012c2c <pbuf_realloc>
    }
  }
  cseg->next = next;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	683a      	ldr	r2, [r7, #0]
 80167b2:	601a      	str	r2, [r3, #0]
}
 80167b4:	bf00      	nop
 80167b6:	3714      	adds	r7, #20
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd90      	pop	{r4, r7, pc}
 80167bc:	0801f890 	.word	0x0801f890
 80167c0:	0801fb50 	.word	0x0801fb50
 80167c4:	0801f8dc 	.word	0x0801f8dc
 80167c8:	20008738 	.word	0x20008738

080167cc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80167cc:	b5b0      	push	{r4, r5, r7, lr}
 80167ce:	b086      	sub	sp, #24
 80167d0:	af00      	add	r7, sp, #0
 80167d2:	60f8      	str	r0, [r7, #12]
 80167d4:	60b9      	str	r1, [r7, #8]
 80167d6:	607a      	str	r2, [r7, #4]
 80167d8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80167da:	e03e      	b.n	801685a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80167e0:	68bb      	ldr	r3, [r7, #8]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	685b      	ldr	r3, [r3, #4]
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7fc fc32 	bl	8013054 <pbuf_clen>
 80167f0:	4603      	mov	r3, r0
 80167f2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80167fa:	8a7a      	ldrh	r2, [r7, #18]
 80167fc:	429a      	cmp	r2, r3
 80167fe:	d906      	bls.n	801680e <tcp_free_acked_segments+0x42>
 8016800:	4b2a      	ldr	r3, [pc, #168]	; (80168ac <tcp_free_acked_segments+0xe0>)
 8016802:	f240 4257 	movw	r2, #1111	; 0x457
 8016806:	492a      	ldr	r1, [pc, #168]	; (80168b0 <tcp_free_acked_segments+0xe4>)
 8016808:	482a      	ldr	r0, [pc, #168]	; (80168b4 <tcp_free_acked_segments+0xe8>)
 801680a:	f006 f9dd 	bl	801cbc8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016814:	8a7b      	ldrh	r3, [r7, #18]
 8016816:	1ad3      	subs	r3, r2, r3
 8016818:	b29a      	uxth	r2, r3
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	891a      	ldrh	r2, [r3, #8]
 8016824:	4b24      	ldr	r3, [pc, #144]	; (80168b8 <tcp_free_acked_segments+0xec>)
 8016826:	881b      	ldrh	r3, [r3, #0]
 8016828:	4413      	add	r3, r2
 801682a:	b29a      	uxth	r2, r3
 801682c:	4b22      	ldr	r3, [pc, #136]	; (80168b8 <tcp_free_acked_segments+0xec>)
 801682e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016830:	6978      	ldr	r0, [r7, #20]
 8016832:	f7fe f90f 	bl	8014a54 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801683c:	2b00      	cmp	r3, #0
 801683e:	d00c      	beq.n	801685a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d109      	bne.n	801685a <tcp_free_acked_segments+0x8e>
 8016846:	683b      	ldr	r3, [r7, #0]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d106      	bne.n	801685a <tcp_free_acked_segments+0x8e>
 801684c:	4b17      	ldr	r3, [pc, #92]	; (80168ac <tcp_free_acked_segments+0xe0>)
 801684e:	f240 4262 	movw	r2, #1122	; 0x462
 8016852:	491a      	ldr	r1, [pc, #104]	; (80168bc <tcp_free_acked_segments+0xf0>)
 8016854:	4817      	ldr	r0, [pc, #92]	; (80168b4 <tcp_free_acked_segments+0xe8>)
 8016856:	f006 f9b7 	bl	801cbc8 <iprintf>
  while (seg_list != NULL &&
 801685a:	68bb      	ldr	r3, [r7, #8]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d020      	beq.n	80168a2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016860:	68bb      	ldr	r3, [r7, #8]
 8016862:	68db      	ldr	r3, [r3, #12]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	4618      	mov	r0, r3
 8016868:	f7fa fe19 	bl	801149e <lwip_htonl>
 801686c:	4604      	mov	r4, r0
 801686e:	68bb      	ldr	r3, [r7, #8]
 8016870:	891b      	ldrh	r3, [r3, #8]
 8016872:	461d      	mov	r5, r3
 8016874:	68bb      	ldr	r3, [r7, #8]
 8016876:	68db      	ldr	r3, [r3, #12]
 8016878:	899b      	ldrh	r3, [r3, #12]
 801687a:	b29b      	uxth	r3, r3
 801687c:	4618      	mov	r0, r3
 801687e:	f7fa fdf9 	bl	8011474 <lwip_htons>
 8016882:	4603      	mov	r3, r0
 8016884:	b2db      	uxtb	r3, r3
 8016886:	f003 0303 	and.w	r3, r3, #3
 801688a:	2b00      	cmp	r3, #0
 801688c:	d001      	beq.n	8016892 <tcp_free_acked_segments+0xc6>
 801688e:	2301      	movs	r3, #1
 8016890:	e000      	b.n	8016894 <tcp_free_acked_segments+0xc8>
 8016892:	2300      	movs	r3, #0
 8016894:	442b      	add	r3, r5
 8016896:	18e2      	adds	r2, r4, r3
 8016898:	4b09      	ldr	r3, [pc, #36]	; (80168c0 <tcp_free_acked_segments+0xf4>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801689e:	2b00      	cmp	r3, #0
 80168a0:	dd9c      	ble.n	80167dc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80168a2:	68bb      	ldr	r3, [r7, #8]
}
 80168a4:	4618      	mov	r0, r3
 80168a6:	3718      	adds	r7, #24
 80168a8:	46bd      	mov	sp, r7
 80168aa:	bdb0      	pop	{r4, r5, r7, pc}
 80168ac:	0801f890 	.word	0x0801f890
 80168b0:	0801fb78 	.word	0x0801fb78
 80168b4:	0801f8dc 	.word	0x0801f8dc
 80168b8:	20008740 	.word	0x20008740
 80168bc:	0801fba0 	.word	0x0801fba0
 80168c0:	2000873c 	.word	0x2000873c

080168c4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80168c4:	b5b0      	push	{r4, r5, r7, lr}
 80168c6:	b094      	sub	sp, #80	; 0x50
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80168cc:	2300      	movs	r3, #0
 80168ce:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d106      	bne.n	80168e4 <tcp_receive+0x20>
 80168d6:	4ba6      	ldr	r3, [pc, #664]	; (8016b70 <tcp_receive+0x2ac>)
 80168d8:	f240 427b 	movw	r2, #1147	; 0x47b
 80168dc:	49a5      	ldr	r1, [pc, #660]	; (8016b74 <tcp_receive+0x2b0>)
 80168de:	48a6      	ldr	r0, [pc, #664]	; (8016b78 <tcp_receive+0x2b4>)
 80168e0:	f006 f972 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	7d1b      	ldrb	r3, [r3, #20]
 80168e8:	2b03      	cmp	r3, #3
 80168ea:	d806      	bhi.n	80168fa <tcp_receive+0x36>
 80168ec:	4ba0      	ldr	r3, [pc, #640]	; (8016b70 <tcp_receive+0x2ac>)
 80168ee:	f240 427c 	movw	r2, #1148	; 0x47c
 80168f2:	49a2      	ldr	r1, [pc, #648]	; (8016b7c <tcp_receive+0x2b8>)
 80168f4:	48a0      	ldr	r0, [pc, #640]	; (8016b78 <tcp_receive+0x2b4>)
 80168f6:	f006 f967 	bl	801cbc8 <iprintf>

  if (flags & TCP_ACK) {
 80168fa:	4ba1      	ldr	r3, [pc, #644]	; (8016b80 <tcp_receive+0x2bc>)
 80168fc:	781b      	ldrb	r3, [r3, #0]
 80168fe:	f003 0310 	and.w	r3, r3, #16
 8016902:	2b00      	cmp	r3, #0
 8016904:	f000 8263 	beq.w	8016dce <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801690e:	461a      	mov	r2, r3
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016914:	4413      	add	r3, r2
 8016916:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801691c:	4b99      	ldr	r3, [pc, #612]	; (8016b84 <tcp_receive+0x2c0>)
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	1ad3      	subs	r3, r2, r3
 8016922:	2b00      	cmp	r3, #0
 8016924:	db1b      	blt.n	801695e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801692a:	4b96      	ldr	r3, [pc, #600]	; (8016b84 <tcp_receive+0x2c0>)
 801692c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801692e:	429a      	cmp	r2, r3
 8016930:	d106      	bne.n	8016940 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016936:	4b94      	ldr	r3, [pc, #592]	; (8016b88 <tcp_receive+0x2c4>)
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	1ad3      	subs	r3, r2, r3
 801693c:	2b00      	cmp	r3, #0
 801693e:	db0e      	blt.n	801695e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016944:	4b90      	ldr	r3, [pc, #576]	; (8016b88 <tcp_receive+0x2c4>)
 8016946:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016948:	429a      	cmp	r2, r3
 801694a:	d125      	bne.n	8016998 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801694c:	4b8f      	ldr	r3, [pc, #572]	; (8016b8c <tcp_receive+0x2c8>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	89db      	ldrh	r3, [r3, #14]
 8016952:	b29a      	uxth	r2, r3
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801695a:	429a      	cmp	r2, r3
 801695c:	d91c      	bls.n	8016998 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801695e:	4b8b      	ldr	r3, [pc, #556]	; (8016b8c <tcp_receive+0x2c8>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	89db      	ldrh	r3, [r3, #14]
 8016964:	b29a      	uxth	r2, r3
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016978:	429a      	cmp	r2, r3
 801697a:	d205      	bcs.n	8016988 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016988:	4b7e      	ldr	r3, [pc, #504]	; (8016b84 <tcp_receive+0x2c0>)
 801698a:	681a      	ldr	r2, [r3, #0]
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016990:	4b7d      	ldr	r3, [pc, #500]	; (8016b88 <tcp_receive+0x2c4>)
 8016992:	681a      	ldr	r2, [r3, #0]
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016998:	4b7b      	ldr	r3, [pc, #492]	; (8016b88 <tcp_receive+0x2c4>)
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	dc58      	bgt.n	8016a58 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80169a6:	4b7a      	ldr	r3, [pc, #488]	; (8016b90 <tcp_receive+0x2cc>)
 80169a8:	881b      	ldrh	r3, [r3, #0]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d14b      	bne.n	8016a46 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80169b2:	687a      	ldr	r2, [r7, #4]
 80169b4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80169b8:	4413      	add	r3, r2
 80169ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80169bc:	429a      	cmp	r2, r3
 80169be:	d142      	bne.n	8016a46 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	db3d      	blt.n	8016a46 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80169ce:	4b6e      	ldr	r3, [pc, #440]	; (8016b88 <tcp_receive+0x2c4>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d137      	bne.n	8016a46 <tcp_receive+0x182>
              found_dupack = 1;
 80169d6:	2301      	movs	r3, #1
 80169d8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80169da:	687b      	ldr	r3, [r7, #4]
 80169dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169e0:	2bff      	cmp	r3, #255	; 0xff
 80169e2:	d007      	beq.n	80169f4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169ea:	3301      	adds	r3, #1
 80169ec:	b2da      	uxtb	r2, r3
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80169fa:	2b03      	cmp	r3, #3
 80169fc:	d91b      	bls.n	8016a36 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a08:	4413      	add	r3, r2
 8016a0a:	b29a      	uxth	r2, r3
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a12:	429a      	cmp	r2, r3
 8016a14:	d30a      	bcc.n	8016a2c <tcp_receive+0x168>
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a20:	4413      	add	r3, r2
 8016a22:	b29a      	uxth	r2, r3
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016a2a:	e004      	b.n	8016a36 <tcp_receive+0x172>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016a3c:	2b02      	cmp	r3, #2
 8016a3e:	d902      	bls.n	8016a46 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f002 fb59 	bl	80190f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016a48:	2b00      	cmp	r3, #0
 8016a4a:	f040 8160 	bne.w	8016d0e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	2200      	movs	r2, #0
 8016a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016a56:	e15a      	b.n	8016d0e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016a58:	4b4b      	ldr	r3, [pc, #300]	; (8016b88 <tcp_receive+0x2c4>)
 8016a5a:	681a      	ldr	r2, [r3, #0]
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a60:	1ad3      	subs	r3, r2, r3
 8016a62:	3b01      	subs	r3, #1
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	f2c0 814d 	blt.w	8016d04 <tcp_receive+0x440>
 8016a6a:	4b47      	ldr	r3, [pc, #284]	; (8016b88 <tcp_receive+0x2c4>)
 8016a6c:	681a      	ldr	r2, [r3, #0]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	f300 8145 	bgt.w	8016d04 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	8b5b      	ldrh	r3, [r3, #26]
 8016a7e:	f003 0304 	and.w	r3, r3, #4
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d010      	beq.n	8016aa8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	8b5b      	ldrh	r3, [r3, #26]
 8016a8a:	f023 0304 	bic.w	r3, r3, #4
 8016a8e:	b29a      	uxth	r2, r3
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	2200      	movs	r2, #0
 8016aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016ab6:	10db      	asrs	r3, r3, #3
 8016ab8:	b21b      	sxth	r3, r3
 8016aba:	b29a      	uxth	r2, r3
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016ac2:	b29b      	uxth	r3, r3
 8016ac4:	4413      	add	r3, r2
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	b21a      	sxth	r2, r3
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016ad0:	4b2d      	ldr	r3, [pc, #180]	; (8016b88 <tcp_receive+0x2c4>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	b29a      	uxth	r2, r3
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	1ad3      	subs	r3, r2, r3
 8016ade:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016ae8:	4b27      	ldr	r3, [pc, #156]	; (8016b88 <tcp_receive+0x2c4>)
 8016aea:	681a      	ldr	r2, [r3, #0]
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	7d1b      	ldrb	r3, [r3, #20]
 8016af4:	2b03      	cmp	r3, #3
 8016af6:	f240 8096 	bls.w	8016c26 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d244      	bcs.n	8016b94 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	8b5b      	ldrh	r3, [r3, #26]
 8016b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d001      	beq.n	8016b1a <tcp_receive+0x256>
 8016b16:	2301      	movs	r3, #1
 8016b18:	e000      	b.n	8016b1c <tcp_receive+0x258>
 8016b1a:	2302      	movs	r3, #2
 8016b1c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016b20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016b24:	b29a      	uxth	r2, r3
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016b2a:	fb12 f303 	smulbb	r3, r2, r3
 8016b2e:	b29b      	uxth	r3, r3
 8016b30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016b32:	4293      	cmp	r3, r2
 8016b34:	bf28      	it	cs
 8016b36:	4613      	movcs	r3, r2
 8016b38:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b42:	4413      	add	r3, r2
 8016b44:	b29a      	uxth	r2, r3
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d309      	bcc.n	8016b64 <tcp_receive+0x2a0>
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016b56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016b58:	4413      	add	r3, r2
 8016b5a:	b29a      	uxth	r2, r3
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016b62:	e060      	b.n	8016c26 <tcp_receive+0x362>
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016b6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016b6e:	e05a      	b.n	8016c26 <tcp_receive+0x362>
 8016b70:	0801f890 	.word	0x0801f890
 8016b74:	0801fbc0 	.word	0x0801fbc0
 8016b78:	0801f8dc 	.word	0x0801f8dc
 8016b7c:	0801fbdc 	.word	0x0801fbdc
 8016b80:	20008744 	.word	0x20008744
 8016b84:	20008738 	.word	0x20008738
 8016b88:	2000873c 	.word	0x2000873c
 8016b8c:	20008728 	.word	0x20008728
 8016b90:	20008742 	.word	0x20008742
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016b9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016b9c:	4413      	add	r3, r2
 8016b9e:	b29a      	uxth	r2, r3
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d309      	bcc.n	8016bbe <tcp_receive+0x2fa>
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016bb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016bb2:	4413      	add	r3, r2
 8016bb4:	b29a      	uxth	r2, r3
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016bbc:	e004      	b.n	8016bc8 <tcp_receive+0x304>
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016bd4:	429a      	cmp	r2, r3
 8016bd6:	d326      	bcc.n	8016c26 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016be4:	1ad3      	subs	r3, r2, r3
 8016be6:	b29a      	uxth	r2, r3
 8016be8:	687b      	ldr	r3, [r7, #4]
 8016bea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016bf8:	4413      	add	r3, r2
 8016bfa:	b29a      	uxth	r2, r3
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d30a      	bcc.n	8016c1c <tcp_receive+0x358>
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016c10:	4413      	add	r3, r2
 8016c12:	b29a      	uxth	r2, r3
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016c1a:	e004      	b.n	8016c26 <tcp_receive+0x362>
 8016c1c:	687b      	ldr	r3, [r7, #4]
 8016c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c22:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c2e:	4a98      	ldr	r2, [pc, #608]	; (8016e90 <tcp_receive+0x5cc>)
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f7ff fdcb 	bl	80167cc <tcp_free_acked_segments>
 8016c36:	4602      	mov	r2, r0
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c44:	4a93      	ldr	r2, [pc, #588]	; (8016e94 <tcp_receive+0x5d0>)
 8016c46:	6878      	ldr	r0, [r7, #4]
 8016c48:	f7ff fdc0 	bl	80167cc <tcp_free_acked_segments>
 8016c4c:	4602      	mov	r2, r0
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d104      	bne.n	8016c64 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016c60:	861a      	strh	r2, [r3, #48]	; 0x30
 8016c62:	e002      	b.n	8016c6a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2200      	movs	r2, #0
 8016c68:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d103      	bne.n	8016c80 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	2200      	movs	r2, #0
 8016c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016c86:	4b84      	ldr	r3, [pc, #528]	; (8016e98 <tcp_receive+0x5d4>)
 8016c88:	881b      	ldrh	r3, [r3, #0]
 8016c8a:	4413      	add	r3, r2
 8016c8c:	b29a      	uxth	r2, r3
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	8b5b      	ldrh	r3, [r3, #26]
 8016c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d035      	beq.n	8016d0c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d118      	bne.n	8016cda <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d00c      	beq.n	8016cca <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cb8:	68db      	ldr	r3, [r3, #12]
 8016cba:	685b      	ldr	r3, [r3, #4]
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f7fa fbee 	bl	801149e <lwip_htonl>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	dc20      	bgt.n	8016d0c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	8b5b      	ldrh	r3, [r3, #26]
 8016cce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016cd2:	b29a      	uxth	r2, r3
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016cd8:	e018      	b.n	8016d0c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ce2:	68db      	ldr	r3, [r3, #12]
 8016ce4:	685b      	ldr	r3, [r3, #4]
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7fa fbd9 	bl	801149e <lwip_htonl>
 8016cec:	4603      	mov	r3, r0
 8016cee:	1ae3      	subs	r3, r4, r3
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	dc0b      	bgt.n	8016d0c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	8b5b      	ldrh	r3, [r3, #26]
 8016cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016cfc:	b29a      	uxth	r2, r3
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016d02:	e003      	b.n	8016d0c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016d04:	6878      	ldr	r0, [r7, #4]
 8016d06:	f002 fc01 	bl	801950c <tcp_send_empty_ack>
 8016d0a:	e000      	b.n	8016d0e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016d0c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d12:	2b00      	cmp	r3, #0
 8016d14:	d05b      	beq.n	8016dce <tcp_receive+0x50a>
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d1a:	4b60      	ldr	r3, [pc, #384]	; (8016e9c <tcp_receive+0x5d8>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	1ad3      	subs	r3, r2, r3
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	da54      	bge.n	8016dce <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016d24:	4b5e      	ldr	r3, [pc, #376]	; (8016ea0 <tcp_receive+0x5dc>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	b29a      	uxth	r2, r3
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	1ad3      	subs	r3, r2, r3
 8016d32:	b29b      	uxth	r3, r3
 8016d34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016d38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d42:	10db      	asrs	r3, r3, #3
 8016d44:	b21b      	sxth	r3, r3
 8016d46:	b29b      	uxth	r3, r3
 8016d48:	1ad3      	subs	r3, r2, r3
 8016d4a:	b29b      	uxth	r3, r3
 8016d4c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016d56:	b29a      	uxth	r2, r3
 8016d58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d5c:	4413      	add	r3, r2
 8016d5e:	b29b      	uxth	r3, r3
 8016d60:	b21a      	sxth	r2, r3
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016d66:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	da05      	bge.n	8016d7a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8016d6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d72:	425b      	negs	r3, r3
 8016d74:	b29b      	uxth	r3, r3
 8016d76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016d7a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d84:	109b      	asrs	r3, r3, #2
 8016d86:	b21b      	sxth	r3, r3
 8016d88:	b29b      	uxth	r3, r3
 8016d8a:	1ad3      	subs	r3, r2, r3
 8016d8c:	b29b      	uxth	r3, r3
 8016d8e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016d98:	b29a      	uxth	r2, r3
 8016d9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016d9e:	4413      	add	r3, r2
 8016da0:	b29b      	uxth	r3, r3
 8016da2:	b21a      	sxth	r2, r3
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016dae:	10db      	asrs	r3, r3, #3
 8016db0:	b21b      	sxth	r3, r3
 8016db2:	b29a      	uxth	r2, r3
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	4413      	add	r3, r2
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	b21a      	sxth	r2, r3
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016dce:	4b35      	ldr	r3, [pc, #212]	; (8016ea4 <tcp_receive+0x5e0>)
 8016dd0:	881b      	ldrh	r3, [r3, #0]
 8016dd2:	2b00      	cmp	r3, #0
 8016dd4:	f000 84e1 	beq.w	801779a <tcp_receive+0xed6>
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	7d1b      	ldrb	r3, [r3, #20]
 8016ddc:	2b06      	cmp	r3, #6
 8016dde:	f200 84dc 	bhi.w	801779a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016de6:	4b30      	ldr	r3, [pc, #192]	; (8016ea8 <tcp_receive+0x5e4>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	1ad3      	subs	r3, r2, r3
 8016dec:	3b01      	subs	r3, #1
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	f2c0 808e 	blt.w	8016f10 <tcp_receive+0x64c>
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016df8:	4b2a      	ldr	r3, [pc, #168]	; (8016ea4 <tcp_receive+0x5e0>)
 8016dfa:	881b      	ldrh	r3, [r3, #0]
 8016dfc:	4619      	mov	r1, r3
 8016dfe:	4b2a      	ldr	r3, [pc, #168]	; (8016ea8 <tcp_receive+0x5e4>)
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	440b      	add	r3, r1
 8016e04:	1ad3      	subs	r3, r2, r3
 8016e06:	3301      	adds	r3, #1
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	f300 8081 	bgt.w	8016f10 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016e0e:	4b27      	ldr	r3, [pc, #156]	; (8016eac <tcp_receive+0x5e8>)
 8016e10:	685b      	ldr	r3, [r3, #4]
 8016e12:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016e18:	4b23      	ldr	r3, [pc, #140]	; (8016ea8 <tcp_receive+0x5e4>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	1ad3      	subs	r3, r2, r3
 8016e1e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016e20:	4b22      	ldr	r3, [pc, #136]	; (8016eac <tcp_receive+0x5e8>)
 8016e22:	685b      	ldr	r3, [r3, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d106      	bne.n	8016e36 <tcp_receive+0x572>
 8016e28:	4b21      	ldr	r3, [pc, #132]	; (8016eb0 <tcp_receive+0x5ec>)
 8016e2a:	f240 5294 	movw	r2, #1428	; 0x594
 8016e2e:	4921      	ldr	r1, [pc, #132]	; (8016eb4 <tcp_receive+0x5f0>)
 8016e30:	4821      	ldr	r0, [pc, #132]	; (8016eb8 <tcp_receive+0x5f4>)
 8016e32:	f005 fec9 	bl	801cbc8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016e3c:	4293      	cmp	r3, r2
 8016e3e:	d906      	bls.n	8016e4e <tcp_receive+0x58a>
 8016e40:	4b1b      	ldr	r3, [pc, #108]	; (8016eb0 <tcp_receive+0x5ec>)
 8016e42:	f240 5295 	movw	r2, #1429	; 0x595
 8016e46:	491d      	ldr	r1, [pc, #116]	; (8016ebc <tcp_receive+0x5f8>)
 8016e48:	481b      	ldr	r0, [pc, #108]	; (8016eb8 <tcp_receive+0x5f4>)
 8016e4a:	f005 febd 	bl	801cbc8 <iprintf>
      off = (u16_t)off32;
 8016e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016e54:	4b15      	ldr	r3, [pc, #84]	; (8016eac <tcp_receive+0x5e8>)
 8016e56:	685b      	ldr	r3, [r3, #4]
 8016e58:	891b      	ldrh	r3, [r3, #8]
 8016e5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e5e:	429a      	cmp	r2, r3
 8016e60:	d906      	bls.n	8016e70 <tcp_receive+0x5ac>
 8016e62:	4b13      	ldr	r3, [pc, #76]	; (8016eb0 <tcp_receive+0x5ec>)
 8016e64:	f240 5297 	movw	r2, #1431	; 0x597
 8016e68:	4915      	ldr	r1, [pc, #84]	; (8016ec0 <tcp_receive+0x5fc>)
 8016e6a:	4813      	ldr	r0, [pc, #76]	; (8016eb8 <tcp_receive+0x5f4>)
 8016e6c:	f005 feac 	bl	801cbc8 <iprintf>
      inseg.len -= off;
 8016e70:	4b0e      	ldr	r3, [pc, #56]	; (8016eac <tcp_receive+0x5e8>)
 8016e72:	891a      	ldrh	r2, [r3, #8]
 8016e74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e78:	1ad3      	subs	r3, r2, r3
 8016e7a:	b29a      	uxth	r2, r3
 8016e7c:	4b0b      	ldr	r3, [pc, #44]	; (8016eac <tcp_receive+0x5e8>)
 8016e7e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016e80:	4b0a      	ldr	r3, [pc, #40]	; (8016eac <tcp_receive+0x5e8>)
 8016e82:	685b      	ldr	r3, [r3, #4]
 8016e84:	891a      	ldrh	r2, [r3, #8]
 8016e86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016e8a:	1ad3      	subs	r3, r2, r3
 8016e8c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016e8e:	e029      	b.n	8016ee4 <tcp_receive+0x620>
 8016e90:	0801fbf8 	.word	0x0801fbf8
 8016e94:	0801fc00 	.word	0x0801fc00
 8016e98:	20008740 	.word	0x20008740
 8016e9c:	2000873c 	.word	0x2000873c
 8016ea0:	2000bdb8 	.word	0x2000bdb8
 8016ea4:	20008742 	.word	0x20008742
 8016ea8:	20008738 	.word	0x20008738
 8016eac:	20008718 	.word	0x20008718
 8016eb0:	0801f890 	.word	0x0801f890
 8016eb4:	0801fc08 	.word	0x0801fc08
 8016eb8:	0801f8dc 	.word	0x0801f8dc
 8016ebc:	0801fc18 	.word	0x0801fc18
 8016ec0:	0801fc28 	.word	0x0801fc28
        off -= p->len;
 8016ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ec6:	895b      	ldrh	r3, [r3, #10]
 8016ec8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ecc:	1ad3      	subs	r3, r2, r3
 8016ece:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ed4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016ed6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016eda:	2200      	movs	r2, #0
 8016edc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ee6:	895b      	ldrh	r3, [r3, #10]
 8016ee8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016eec:	429a      	cmp	r2, r3
 8016eee:	d8e9      	bhi.n	8016ec4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016ef0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016ef8:	f7fb ff98 	bl	8012e2c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f00:	4a91      	ldr	r2, [pc, #580]	; (8017148 <tcp_receive+0x884>)
 8016f02:	6013      	str	r3, [r2, #0]
 8016f04:	4b91      	ldr	r3, [pc, #580]	; (801714c <tcp_receive+0x888>)
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	4a8f      	ldr	r2, [pc, #572]	; (8017148 <tcp_receive+0x884>)
 8016f0a:	6812      	ldr	r2, [r2, #0]
 8016f0c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016f0e:	e00d      	b.n	8016f2c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016f10:	4b8d      	ldr	r3, [pc, #564]	; (8017148 <tcp_receive+0x884>)
 8016f12:	681a      	ldr	r2, [r3, #0]
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f18:	1ad3      	subs	r3, r2, r3
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	da06      	bge.n	8016f2c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	8b5b      	ldrh	r3, [r3, #26]
 8016f22:	f043 0302 	orr.w	r3, r3, #2
 8016f26:	b29a      	uxth	r2, r3
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016f2c:	4b86      	ldr	r3, [pc, #536]	; (8017148 <tcp_receive+0x884>)
 8016f2e:	681a      	ldr	r2, [r3, #0]
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f34:	1ad3      	subs	r3, r2, r3
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	f2c0 842a 	blt.w	8017790 <tcp_receive+0xecc>
 8016f3c:	4b82      	ldr	r3, [pc, #520]	; (8017148 <tcp_receive+0x884>)
 8016f3e:	681a      	ldr	r2, [r3, #0]
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f44:	6879      	ldr	r1, [r7, #4]
 8016f46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016f48:	440b      	add	r3, r1
 8016f4a:	1ad3      	subs	r3, r2, r3
 8016f4c:	3301      	adds	r3, #1
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	f300 841e 	bgt.w	8017790 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016f58:	4b7b      	ldr	r3, [pc, #492]	; (8017148 <tcp_receive+0x884>)
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	429a      	cmp	r2, r3
 8016f5e:	f040 829a 	bne.w	8017496 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016f62:	4b7a      	ldr	r3, [pc, #488]	; (801714c <tcp_receive+0x888>)
 8016f64:	891c      	ldrh	r4, [r3, #8]
 8016f66:	4b79      	ldr	r3, [pc, #484]	; (801714c <tcp_receive+0x888>)
 8016f68:	68db      	ldr	r3, [r3, #12]
 8016f6a:	899b      	ldrh	r3, [r3, #12]
 8016f6c:	b29b      	uxth	r3, r3
 8016f6e:	4618      	mov	r0, r3
 8016f70:	f7fa fa80 	bl	8011474 <lwip_htons>
 8016f74:	4603      	mov	r3, r0
 8016f76:	b2db      	uxtb	r3, r3
 8016f78:	f003 0303 	and.w	r3, r3, #3
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d001      	beq.n	8016f84 <tcp_receive+0x6c0>
 8016f80:	2301      	movs	r3, #1
 8016f82:	e000      	b.n	8016f86 <tcp_receive+0x6c2>
 8016f84:	2300      	movs	r3, #0
 8016f86:	4423      	add	r3, r4
 8016f88:	b29a      	uxth	r2, r3
 8016f8a:	4b71      	ldr	r3, [pc, #452]	; (8017150 <tcp_receive+0x88c>)
 8016f8c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016f92:	4b6f      	ldr	r3, [pc, #444]	; (8017150 <tcp_receive+0x88c>)
 8016f94:	881b      	ldrh	r3, [r3, #0]
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d275      	bcs.n	8017086 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f9a:	4b6c      	ldr	r3, [pc, #432]	; (801714c <tcp_receive+0x888>)
 8016f9c:	68db      	ldr	r3, [r3, #12]
 8016f9e:	899b      	ldrh	r3, [r3, #12]
 8016fa0:	b29b      	uxth	r3, r3
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7fa fa66 	bl	8011474 <lwip_htons>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	b2db      	uxtb	r3, r3
 8016fac:	f003 0301 	and.w	r3, r3, #1
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d01f      	beq.n	8016ff4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016fb4:	4b65      	ldr	r3, [pc, #404]	; (801714c <tcp_receive+0x888>)
 8016fb6:	68db      	ldr	r3, [r3, #12]
 8016fb8:	899b      	ldrh	r3, [r3, #12]
 8016fba:	b29b      	uxth	r3, r3
 8016fbc:	b21b      	sxth	r3, r3
 8016fbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016fc2:	b21c      	sxth	r4, r3
 8016fc4:	4b61      	ldr	r3, [pc, #388]	; (801714c <tcp_receive+0x888>)
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	899b      	ldrh	r3, [r3, #12]
 8016fca:	b29b      	uxth	r3, r3
 8016fcc:	4618      	mov	r0, r3
 8016fce:	f7fa fa51 	bl	8011474 <lwip_htons>
 8016fd2:	4603      	mov	r3, r0
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	b29b      	uxth	r3, r3
 8016fd8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fa fa48 	bl	8011474 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	b21b      	sxth	r3, r3
 8016fe8:	4323      	orrs	r3, r4
 8016fea:	b21a      	sxth	r2, r3
 8016fec:	4b57      	ldr	r3, [pc, #348]	; (801714c <tcp_receive+0x888>)
 8016fee:	68db      	ldr	r3, [r3, #12]
 8016ff0:	b292      	uxth	r2, r2
 8016ff2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016ff8:	4b54      	ldr	r3, [pc, #336]	; (801714c <tcp_receive+0x888>)
 8016ffa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016ffc:	4b53      	ldr	r3, [pc, #332]	; (801714c <tcp_receive+0x888>)
 8016ffe:	68db      	ldr	r3, [r3, #12]
 8017000:	899b      	ldrh	r3, [r3, #12]
 8017002:	b29b      	uxth	r3, r3
 8017004:	4618      	mov	r0, r3
 8017006:	f7fa fa35 	bl	8011474 <lwip_htons>
 801700a:	4603      	mov	r3, r0
 801700c:	b2db      	uxtb	r3, r3
 801700e:	f003 0302 	and.w	r3, r3, #2
 8017012:	2b00      	cmp	r3, #0
 8017014:	d005      	beq.n	8017022 <tcp_receive+0x75e>
            inseg.len -= 1;
 8017016:	4b4d      	ldr	r3, [pc, #308]	; (801714c <tcp_receive+0x888>)
 8017018:	891b      	ldrh	r3, [r3, #8]
 801701a:	3b01      	subs	r3, #1
 801701c:	b29a      	uxth	r2, r3
 801701e:	4b4b      	ldr	r3, [pc, #300]	; (801714c <tcp_receive+0x888>)
 8017020:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017022:	4b4a      	ldr	r3, [pc, #296]	; (801714c <tcp_receive+0x888>)
 8017024:	685a      	ldr	r2, [r3, #4]
 8017026:	4b49      	ldr	r3, [pc, #292]	; (801714c <tcp_receive+0x888>)
 8017028:	891b      	ldrh	r3, [r3, #8]
 801702a:	4619      	mov	r1, r3
 801702c:	4610      	mov	r0, r2
 801702e:	f7fb fdfd 	bl	8012c2c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017032:	4b46      	ldr	r3, [pc, #280]	; (801714c <tcp_receive+0x888>)
 8017034:	891c      	ldrh	r4, [r3, #8]
 8017036:	4b45      	ldr	r3, [pc, #276]	; (801714c <tcp_receive+0x888>)
 8017038:	68db      	ldr	r3, [r3, #12]
 801703a:	899b      	ldrh	r3, [r3, #12]
 801703c:	b29b      	uxth	r3, r3
 801703e:	4618      	mov	r0, r3
 8017040:	f7fa fa18 	bl	8011474 <lwip_htons>
 8017044:	4603      	mov	r3, r0
 8017046:	b2db      	uxtb	r3, r3
 8017048:	f003 0303 	and.w	r3, r3, #3
 801704c:	2b00      	cmp	r3, #0
 801704e:	d001      	beq.n	8017054 <tcp_receive+0x790>
 8017050:	2301      	movs	r3, #1
 8017052:	e000      	b.n	8017056 <tcp_receive+0x792>
 8017054:	2300      	movs	r3, #0
 8017056:	4423      	add	r3, r4
 8017058:	b29a      	uxth	r2, r3
 801705a:	4b3d      	ldr	r3, [pc, #244]	; (8017150 <tcp_receive+0x88c>)
 801705c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801705e:	4b3c      	ldr	r3, [pc, #240]	; (8017150 <tcp_receive+0x88c>)
 8017060:	881b      	ldrh	r3, [r3, #0]
 8017062:	461a      	mov	r2, r3
 8017064:	4b38      	ldr	r3, [pc, #224]	; (8017148 <tcp_receive+0x884>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	441a      	add	r2, r3
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801706e:	6879      	ldr	r1, [r7, #4]
 8017070:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017072:	440b      	add	r3, r1
 8017074:	429a      	cmp	r2, r3
 8017076:	d006      	beq.n	8017086 <tcp_receive+0x7c2>
 8017078:	4b36      	ldr	r3, [pc, #216]	; (8017154 <tcp_receive+0x890>)
 801707a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 801707e:	4936      	ldr	r1, [pc, #216]	; (8017158 <tcp_receive+0x894>)
 8017080:	4836      	ldr	r0, [pc, #216]	; (801715c <tcp_receive+0x898>)
 8017082:	f005 fda1 	bl	801cbc8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801708a:	2b00      	cmp	r3, #0
 801708c:	f000 80e7 	beq.w	801725e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8017090:	4b2e      	ldr	r3, [pc, #184]	; (801714c <tcp_receive+0x888>)
 8017092:	68db      	ldr	r3, [r3, #12]
 8017094:	899b      	ldrh	r3, [r3, #12]
 8017096:	b29b      	uxth	r3, r3
 8017098:	4618      	mov	r0, r3
 801709a:	f7fa f9eb 	bl	8011474 <lwip_htons>
 801709e:	4603      	mov	r3, r0
 80170a0:	b2db      	uxtb	r3, r3
 80170a2:	f003 0301 	and.w	r3, r3, #1
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d010      	beq.n	80170cc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80170aa:	e00a      	b.n	80170c2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170b0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170b6:	681a      	ldr	r2, [r3, #0]
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80170bc:	68f8      	ldr	r0, [r7, #12]
 80170be:	f7fd fcc9 	bl	8014a54 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d1f0      	bne.n	80170ac <tcp_receive+0x7e8>
 80170ca:	e0c8      	b.n	801725e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80170d2:	e052      	b.n	801717a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80170d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170d6:	68db      	ldr	r3, [r3, #12]
 80170d8:	899b      	ldrh	r3, [r3, #12]
 80170da:	b29b      	uxth	r3, r3
 80170dc:	4618      	mov	r0, r3
 80170de:	f7fa f9c9 	bl	8011474 <lwip_htons>
 80170e2:	4603      	mov	r3, r0
 80170e4:	b2db      	uxtb	r3, r3
 80170e6:	f003 0301 	and.w	r3, r3, #1
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d03d      	beq.n	801716a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80170ee:	4b17      	ldr	r3, [pc, #92]	; (801714c <tcp_receive+0x888>)
 80170f0:	68db      	ldr	r3, [r3, #12]
 80170f2:	899b      	ldrh	r3, [r3, #12]
 80170f4:	b29b      	uxth	r3, r3
 80170f6:	4618      	mov	r0, r3
 80170f8:	f7fa f9bc 	bl	8011474 <lwip_htons>
 80170fc:	4603      	mov	r3, r0
 80170fe:	b2db      	uxtb	r3, r3
 8017100:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017104:	2b00      	cmp	r3, #0
 8017106:	d130      	bne.n	801716a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017108:	4b10      	ldr	r3, [pc, #64]	; (801714c <tcp_receive+0x888>)
 801710a:	68db      	ldr	r3, [r3, #12]
 801710c:	899b      	ldrh	r3, [r3, #12]
 801710e:	b29c      	uxth	r4, r3
 8017110:	2001      	movs	r0, #1
 8017112:	f7fa f9af 	bl	8011474 <lwip_htons>
 8017116:	4603      	mov	r3, r0
 8017118:	461a      	mov	r2, r3
 801711a:	4b0c      	ldr	r3, [pc, #48]	; (801714c <tcp_receive+0x888>)
 801711c:	68db      	ldr	r3, [r3, #12]
 801711e:	4322      	orrs	r2, r4
 8017120:	b292      	uxth	r2, r2
 8017122:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017124:	4b09      	ldr	r3, [pc, #36]	; (801714c <tcp_receive+0x888>)
 8017126:	891c      	ldrh	r4, [r3, #8]
 8017128:	4b08      	ldr	r3, [pc, #32]	; (801714c <tcp_receive+0x888>)
 801712a:	68db      	ldr	r3, [r3, #12]
 801712c:	899b      	ldrh	r3, [r3, #12]
 801712e:	b29b      	uxth	r3, r3
 8017130:	4618      	mov	r0, r3
 8017132:	f7fa f99f 	bl	8011474 <lwip_htons>
 8017136:	4603      	mov	r3, r0
 8017138:	b2db      	uxtb	r3, r3
 801713a:	f003 0303 	and.w	r3, r3, #3
 801713e:	2b00      	cmp	r3, #0
 8017140:	d00e      	beq.n	8017160 <tcp_receive+0x89c>
 8017142:	2301      	movs	r3, #1
 8017144:	e00d      	b.n	8017162 <tcp_receive+0x89e>
 8017146:	bf00      	nop
 8017148:	20008738 	.word	0x20008738
 801714c:	20008718 	.word	0x20008718
 8017150:	20008742 	.word	0x20008742
 8017154:	0801f890 	.word	0x0801f890
 8017158:	0801fc38 	.word	0x0801fc38
 801715c:	0801f8dc 	.word	0x0801f8dc
 8017160:	2300      	movs	r3, #0
 8017162:	4423      	add	r3, r4
 8017164:	b29a      	uxth	r2, r3
 8017166:	4b98      	ldr	r3, [pc, #608]	; (80173c8 <tcp_receive+0xb04>)
 8017168:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801716a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801716c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801716e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8017174:	6938      	ldr	r0, [r7, #16]
 8017176:	f7fd fc6d 	bl	8014a54 <tcp_seg_free>
            while (next &&
 801717a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801717c:	2b00      	cmp	r3, #0
 801717e:	d00e      	beq.n	801719e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017180:	4b91      	ldr	r3, [pc, #580]	; (80173c8 <tcp_receive+0xb04>)
 8017182:	881b      	ldrh	r3, [r3, #0]
 8017184:	461a      	mov	r2, r3
 8017186:	4b91      	ldr	r3, [pc, #580]	; (80173cc <tcp_receive+0xb08>)
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	441a      	add	r2, r3
 801718c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801718e:	68db      	ldr	r3, [r3, #12]
 8017190:	685b      	ldr	r3, [r3, #4]
 8017192:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017194:	8909      	ldrh	r1, [r1, #8]
 8017196:	440b      	add	r3, r1
 8017198:	1ad3      	subs	r3, r2, r3
            while (next &&
 801719a:	2b00      	cmp	r3, #0
 801719c:	da9a      	bge.n	80170d4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801719e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d059      	beq.n	8017258 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80171a4:	4b88      	ldr	r3, [pc, #544]	; (80173c8 <tcp_receive+0xb04>)
 80171a6:	881b      	ldrh	r3, [r3, #0]
 80171a8:	461a      	mov	r2, r3
 80171aa:	4b88      	ldr	r3, [pc, #544]	; (80173cc <tcp_receive+0xb08>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	441a      	add	r2, r3
 80171b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171b2:	68db      	ldr	r3, [r3, #12]
 80171b4:	685b      	ldr	r3, [r3, #4]
 80171b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	dd4d      	ble.n	8017258 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80171bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80171be:	68db      	ldr	r3, [r3, #12]
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	4b81      	ldr	r3, [pc, #516]	; (80173cc <tcp_receive+0xb08>)
 80171c6:	681b      	ldr	r3, [r3, #0]
 80171c8:	b29b      	uxth	r3, r3
 80171ca:	1ad3      	subs	r3, r2, r3
 80171cc:	b29a      	uxth	r2, r3
 80171ce:	4b80      	ldr	r3, [pc, #512]	; (80173d0 <tcp_receive+0xb0c>)
 80171d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80171d2:	4b7f      	ldr	r3, [pc, #508]	; (80173d0 <tcp_receive+0xb0c>)
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	899b      	ldrh	r3, [r3, #12]
 80171d8:	b29b      	uxth	r3, r3
 80171da:	4618      	mov	r0, r3
 80171dc:	f7fa f94a 	bl	8011474 <lwip_htons>
 80171e0:	4603      	mov	r3, r0
 80171e2:	b2db      	uxtb	r3, r3
 80171e4:	f003 0302 	and.w	r3, r3, #2
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d005      	beq.n	80171f8 <tcp_receive+0x934>
                inseg.len -= 1;
 80171ec:	4b78      	ldr	r3, [pc, #480]	; (80173d0 <tcp_receive+0xb0c>)
 80171ee:	891b      	ldrh	r3, [r3, #8]
 80171f0:	3b01      	subs	r3, #1
 80171f2:	b29a      	uxth	r2, r3
 80171f4:	4b76      	ldr	r3, [pc, #472]	; (80173d0 <tcp_receive+0xb0c>)
 80171f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80171f8:	4b75      	ldr	r3, [pc, #468]	; (80173d0 <tcp_receive+0xb0c>)
 80171fa:	685a      	ldr	r2, [r3, #4]
 80171fc:	4b74      	ldr	r3, [pc, #464]	; (80173d0 <tcp_receive+0xb0c>)
 80171fe:	891b      	ldrh	r3, [r3, #8]
 8017200:	4619      	mov	r1, r3
 8017202:	4610      	mov	r0, r2
 8017204:	f7fb fd12 	bl	8012c2c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017208:	4b71      	ldr	r3, [pc, #452]	; (80173d0 <tcp_receive+0xb0c>)
 801720a:	891c      	ldrh	r4, [r3, #8]
 801720c:	4b70      	ldr	r3, [pc, #448]	; (80173d0 <tcp_receive+0xb0c>)
 801720e:	68db      	ldr	r3, [r3, #12]
 8017210:	899b      	ldrh	r3, [r3, #12]
 8017212:	b29b      	uxth	r3, r3
 8017214:	4618      	mov	r0, r3
 8017216:	f7fa f92d 	bl	8011474 <lwip_htons>
 801721a:	4603      	mov	r3, r0
 801721c:	b2db      	uxtb	r3, r3
 801721e:	f003 0303 	and.w	r3, r3, #3
 8017222:	2b00      	cmp	r3, #0
 8017224:	d001      	beq.n	801722a <tcp_receive+0x966>
 8017226:	2301      	movs	r3, #1
 8017228:	e000      	b.n	801722c <tcp_receive+0x968>
 801722a:	2300      	movs	r3, #0
 801722c:	4423      	add	r3, r4
 801722e:	b29a      	uxth	r2, r3
 8017230:	4b65      	ldr	r3, [pc, #404]	; (80173c8 <tcp_receive+0xb04>)
 8017232:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017234:	4b64      	ldr	r3, [pc, #400]	; (80173c8 <tcp_receive+0xb04>)
 8017236:	881b      	ldrh	r3, [r3, #0]
 8017238:	461a      	mov	r2, r3
 801723a:	4b64      	ldr	r3, [pc, #400]	; (80173cc <tcp_receive+0xb08>)
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	441a      	add	r2, r3
 8017240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017242:	68db      	ldr	r3, [r3, #12]
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	429a      	cmp	r2, r3
 8017248:	d006      	beq.n	8017258 <tcp_receive+0x994>
 801724a:	4b62      	ldr	r3, [pc, #392]	; (80173d4 <tcp_receive+0xb10>)
 801724c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8017250:	4961      	ldr	r1, [pc, #388]	; (80173d8 <tcp_receive+0xb14>)
 8017252:	4862      	ldr	r0, [pc, #392]	; (80173dc <tcp_receive+0xb18>)
 8017254:	f005 fcb8 	bl	801cbc8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801725c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801725e:	4b5a      	ldr	r3, [pc, #360]	; (80173c8 <tcp_receive+0xb04>)
 8017260:	881b      	ldrh	r3, [r3, #0]
 8017262:	461a      	mov	r2, r3
 8017264:	4b59      	ldr	r3, [pc, #356]	; (80173cc <tcp_receive+0xb08>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	441a      	add	r2, r3
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017272:	4b55      	ldr	r3, [pc, #340]	; (80173c8 <tcp_receive+0xb04>)
 8017274:	881b      	ldrh	r3, [r3, #0]
 8017276:	429a      	cmp	r2, r3
 8017278:	d206      	bcs.n	8017288 <tcp_receive+0x9c4>
 801727a:	4b56      	ldr	r3, [pc, #344]	; (80173d4 <tcp_receive+0xb10>)
 801727c:	f240 6207 	movw	r2, #1543	; 0x607
 8017280:	4957      	ldr	r1, [pc, #348]	; (80173e0 <tcp_receive+0xb1c>)
 8017282:	4856      	ldr	r0, [pc, #344]	; (80173dc <tcp_receive+0xb18>)
 8017284:	f005 fca0 	bl	801cbc8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801728c:	4b4e      	ldr	r3, [pc, #312]	; (80173c8 <tcp_receive+0xb04>)
 801728e:	881b      	ldrh	r3, [r3, #0]
 8017290:	1ad3      	subs	r3, r2, r3
 8017292:	b29a      	uxth	r2, r3
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7fc fda1 	bl	8013de0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801729e:	4b4c      	ldr	r3, [pc, #304]	; (80173d0 <tcp_receive+0xb0c>)
 80172a0:	685b      	ldr	r3, [r3, #4]
 80172a2:	891b      	ldrh	r3, [r3, #8]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d006      	beq.n	80172b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80172a8:	4b49      	ldr	r3, [pc, #292]	; (80173d0 <tcp_receive+0xb0c>)
 80172aa:	685b      	ldr	r3, [r3, #4]
 80172ac:	4a4d      	ldr	r2, [pc, #308]	; (80173e4 <tcp_receive+0xb20>)
 80172ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80172b0:	4b47      	ldr	r3, [pc, #284]	; (80173d0 <tcp_receive+0xb0c>)
 80172b2:	2200      	movs	r2, #0
 80172b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80172b6:	4b46      	ldr	r3, [pc, #280]	; (80173d0 <tcp_receive+0xb0c>)
 80172b8:	68db      	ldr	r3, [r3, #12]
 80172ba:	899b      	ldrh	r3, [r3, #12]
 80172bc:	b29b      	uxth	r3, r3
 80172be:	4618      	mov	r0, r3
 80172c0:	f7fa f8d8 	bl	8011474 <lwip_htons>
 80172c4:	4603      	mov	r3, r0
 80172c6:	b2db      	uxtb	r3, r3
 80172c8:	f003 0301 	and.w	r3, r3, #1
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	f000 80b8 	beq.w	8017442 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80172d2:	4b45      	ldr	r3, [pc, #276]	; (80173e8 <tcp_receive+0xb24>)
 80172d4:	781b      	ldrb	r3, [r3, #0]
 80172d6:	f043 0320 	orr.w	r3, r3, #32
 80172da:	b2da      	uxtb	r2, r3
 80172dc:	4b42      	ldr	r3, [pc, #264]	; (80173e8 <tcp_receive+0xb24>)
 80172de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80172e0:	e0af      	b.n	8017442 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172ec:	68db      	ldr	r3, [r3, #12]
 80172ee:	685b      	ldr	r3, [r3, #4]
 80172f0:	4a36      	ldr	r2, [pc, #216]	; (80173cc <tcp_receive+0xb08>)
 80172f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	891b      	ldrh	r3, [r3, #8]
 80172f8:	461c      	mov	r4, r3
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	68db      	ldr	r3, [r3, #12]
 80172fe:	899b      	ldrh	r3, [r3, #12]
 8017300:	b29b      	uxth	r3, r3
 8017302:	4618      	mov	r0, r3
 8017304:	f7fa f8b6 	bl	8011474 <lwip_htons>
 8017308:	4603      	mov	r3, r0
 801730a:	b2db      	uxtb	r3, r3
 801730c:	f003 0303 	and.w	r3, r3, #3
 8017310:	2b00      	cmp	r3, #0
 8017312:	d001      	beq.n	8017318 <tcp_receive+0xa54>
 8017314:	2301      	movs	r3, #1
 8017316:	e000      	b.n	801731a <tcp_receive+0xa56>
 8017318:	2300      	movs	r3, #0
 801731a:	191a      	adds	r2, r3, r4
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017320:	441a      	add	r2, r3
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801732a:	461c      	mov	r4, r3
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	891b      	ldrh	r3, [r3, #8]
 8017330:	461d      	mov	r5, r3
 8017332:	68bb      	ldr	r3, [r7, #8]
 8017334:	68db      	ldr	r3, [r3, #12]
 8017336:	899b      	ldrh	r3, [r3, #12]
 8017338:	b29b      	uxth	r3, r3
 801733a:	4618      	mov	r0, r3
 801733c:	f7fa f89a 	bl	8011474 <lwip_htons>
 8017340:	4603      	mov	r3, r0
 8017342:	b2db      	uxtb	r3, r3
 8017344:	f003 0303 	and.w	r3, r3, #3
 8017348:	2b00      	cmp	r3, #0
 801734a:	d001      	beq.n	8017350 <tcp_receive+0xa8c>
 801734c:	2301      	movs	r3, #1
 801734e:	e000      	b.n	8017352 <tcp_receive+0xa8e>
 8017350:	2300      	movs	r3, #0
 8017352:	442b      	add	r3, r5
 8017354:	429c      	cmp	r4, r3
 8017356:	d206      	bcs.n	8017366 <tcp_receive+0xaa2>
 8017358:	4b1e      	ldr	r3, [pc, #120]	; (80173d4 <tcp_receive+0xb10>)
 801735a:	f240 622c 	movw	r2, #1580	; 0x62c
 801735e:	4923      	ldr	r1, [pc, #140]	; (80173ec <tcp_receive+0xb28>)
 8017360:	481e      	ldr	r0, [pc, #120]	; (80173dc <tcp_receive+0xb18>)
 8017362:	f005 fc31 	bl	801cbc8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017366:	68bb      	ldr	r3, [r7, #8]
 8017368:	891b      	ldrh	r3, [r3, #8]
 801736a:	461c      	mov	r4, r3
 801736c:	68bb      	ldr	r3, [r7, #8]
 801736e:	68db      	ldr	r3, [r3, #12]
 8017370:	899b      	ldrh	r3, [r3, #12]
 8017372:	b29b      	uxth	r3, r3
 8017374:	4618      	mov	r0, r3
 8017376:	f7fa f87d 	bl	8011474 <lwip_htons>
 801737a:	4603      	mov	r3, r0
 801737c:	b2db      	uxtb	r3, r3
 801737e:	f003 0303 	and.w	r3, r3, #3
 8017382:	2b00      	cmp	r3, #0
 8017384:	d001      	beq.n	801738a <tcp_receive+0xac6>
 8017386:	2301      	movs	r3, #1
 8017388:	e000      	b.n	801738c <tcp_receive+0xac8>
 801738a:	2300      	movs	r3, #0
 801738c:	1919      	adds	r1, r3, r4
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017392:	b28b      	uxth	r3, r1
 8017394:	1ad3      	subs	r3, r2, r3
 8017396:	b29a      	uxth	r2, r3
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801739c:	6878      	ldr	r0, [r7, #4]
 801739e:	f7fc fd1f 	bl	8013de0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	891b      	ldrh	r3, [r3, #8]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	d028      	beq.n	80173fe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80173ac:	4b0d      	ldr	r3, [pc, #52]	; (80173e4 <tcp_receive+0xb20>)
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d01d      	beq.n	80173f0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80173b4:	4b0b      	ldr	r3, [pc, #44]	; (80173e4 <tcp_receive+0xb20>)
 80173b6:	681a      	ldr	r2, [r3, #0]
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	4619      	mov	r1, r3
 80173be:	4610      	mov	r0, r2
 80173c0:	f7fb fe88 	bl	80130d4 <pbuf_cat>
 80173c4:	e018      	b.n	80173f8 <tcp_receive+0xb34>
 80173c6:	bf00      	nop
 80173c8:	20008742 	.word	0x20008742
 80173cc:	20008738 	.word	0x20008738
 80173d0:	20008718 	.word	0x20008718
 80173d4:	0801f890 	.word	0x0801f890
 80173d8:	0801fc70 	.word	0x0801fc70
 80173dc:	0801f8dc 	.word	0x0801f8dc
 80173e0:	0801fcac 	.word	0x0801fcac
 80173e4:	20008748 	.word	0x20008748
 80173e8:	20008745 	.word	0x20008745
 80173ec:	0801fccc 	.word	0x0801fccc
            } else {
              recv_data = cseg->p;
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	685b      	ldr	r3, [r3, #4]
 80173f4:	4a70      	ldr	r2, [pc, #448]	; (80175b8 <tcp_receive+0xcf4>)
 80173f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80173f8:	68bb      	ldr	r3, [r7, #8]
 80173fa:	2200      	movs	r2, #0
 80173fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80173fe:	68bb      	ldr	r3, [r7, #8]
 8017400:	68db      	ldr	r3, [r3, #12]
 8017402:	899b      	ldrh	r3, [r3, #12]
 8017404:	b29b      	uxth	r3, r3
 8017406:	4618      	mov	r0, r3
 8017408:	f7fa f834 	bl	8011474 <lwip_htons>
 801740c:	4603      	mov	r3, r0
 801740e:	b2db      	uxtb	r3, r3
 8017410:	f003 0301 	and.w	r3, r3, #1
 8017414:	2b00      	cmp	r3, #0
 8017416:	d00d      	beq.n	8017434 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017418:	4b68      	ldr	r3, [pc, #416]	; (80175bc <tcp_receive+0xcf8>)
 801741a:	781b      	ldrb	r3, [r3, #0]
 801741c:	f043 0320 	orr.w	r3, r3, #32
 8017420:	b2da      	uxtb	r2, r3
 8017422:	4b66      	ldr	r3, [pc, #408]	; (80175bc <tcp_receive+0xcf8>)
 8017424:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	7d1b      	ldrb	r3, [r3, #20]
 801742a:	2b04      	cmp	r3, #4
 801742c:	d102      	bne.n	8017434 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	2207      	movs	r2, #7
 8017432:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017434:	68bb      	ldr	r3, [r7, #8]
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801743c:	68b8      	ldr	r0, [r7, #8]
 801743e:	f7fd fb09 	bl	8014a54 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017446:	2b00      	cmp	r3, #0
 8017448:	d008      	beq.n	801745c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801744e:	68db      	ldr	r3, [r3, #12]
 8017450:	685a      	ldr	r2, [r3, #4]
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8017456:	429a      	cmp	r2, r3
 8017458:	f43f af43 	beq.w	80172e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	8b5b      	ldrh	r3, [r3, #26]
 8017460:	f003 0301 	and.w	r3, r3, #1
 8017464:	2b00      	cmp	r3, #0
 8017466:	d00e      	beq.n	8017486 <tcp_receive+0xbc2>
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	8b5b      	ldrh	r3, [r3, #26]
 801746c:	f023 0301 	bic.w	r3, r3, #1
 8017470:	b29a      	uxth	r2, r3
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	835a      	strh	r2, [r3, #26]
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	8b5b      	ldrh	r3, [r3, #26]
 801747a:	f043 0302 	orr.w	r3, r3, #2
 801747e:	b29a      	uxth	r2, r3
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017484:	e188      	b.n	8017798 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	8b5b      	ldrh	r3, [r3, #26]
 801748a:	f043 0301 	orr.w	r3, r3, #1
 801748e:	b29a      	uxth	r2, r3
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017494:	e180      	b.n	8017798 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801749a:	2b00      	cmp	r3, #0
 801749c:	d106      	bne.n	80174ac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801749e:	4848      	ldr	r0, [pc, #288]	; (80175c0 <tcp_receive+0xcfc>)
 80174a0:	f7fd faf0 	bl	8014a84 <tcp_seg_copy>
 80174a4:	4602      	mov	r2, r0
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	675a      	str	r2, [r3, #116]	; 0x74
 80174aa:	e16d      	b.n	8017788 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80174ac:	2300      	movs	r3, #0
 80174ae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80174b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80174b6:	e157      	b.n	8017768 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80174b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ba:	68db      	ldr	r3, [r3, #12]
 80174bc:	685a      	ldr	r2, [r3, #4]
 80174be:	4b41      	ldr	r3, [pc, #260]	; (80175c4 <tcp_receive+0xd00>)
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d11d      	bne.n	8017502 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80174c6:	4b3e      	ldr	r3, [pc, #248]	; (80175c0 <tcp_receive+0xcfc>)
 80174c8:	891a      	ldrh	r2, [r3, #8]
 80174ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174cc:	891b      	ldrh	r3, [r3, #8]
 80174ce:	429a      	cmp	r2, r3
 80174d0:	f240 814f 	bls.w	8017772 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80174d4:	483a      	ldr	r0, [pc, #232]	; (80175c0 <tcp_receive+0xcfc>)
 80174d6:	f7fd fad5 	bl	8014a84 <tcp_seg_copy>
 80174da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	f000 8149 	beq.w	8017776 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80174e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d003      	beq.n	80174f2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80174ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174ec:	697a      	ldr	r2, [r7, #20]
 80174ee:	601a      	str	r2, [r3, #0]
 80174f0:	e002      	b.n	80174f8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	697a      	ldr	r2, [r7, #20]
 80174f6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80174f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80174fa:	6978      	ldr	r0, [r7, #20]
 80174fc:	f7ff f8de 	bl	80166bc <tcp_oos_insert_segment>
                }
                break;
 8017500:	e139      	b.n	8017776 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017504:	2b00      	cmp	r3, #0
 8017506:	d117      	bne.n	8017538 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017508:	4b2e      	ldr	r3, [pc, #184]	; (80175c4 <tcp_receive+0xd00>)
 801750a:	681a      	ldr	r2, [r3, #0]
 801750c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801750e:	68db      	ldr	r3, [r3, #12]
 8017510:	685b      	ldr	r3, [r3, #4]
 8017512:	1ad3      	subs	r3, r2, r3
 8017514:	2b00      	cmp	r3, #0
 8017516:	da57      	bge.n	80175c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017518:	4829      	ldr	r0, [pc, #164]	; (80175c0 <tcp_receive+0xcfc>)
 801751a:	f7fd fab3 	bl	8014a84 <tcp_seg_copy>
 801751e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017520:	69bb      	ldr	r3, [r7, #24]
 8017522:	2b00      	cmp	r3, #0
 8017524:	f000 8129 	beq.w	801777a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	69ba      	ldr	r2, [r7, #24]
 801752c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801752e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017530:	69b8      	ldr	r0, [r7, #24]
 8017532:	f7ff f8c3 	bl	80166bc <tcp_oos_insert_segment>
                  }
                  break;
 8017536:	e120      	b.n	801777a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017538:	4b22      	ldr	r3, [pc, #136]	; (80175c4 <tcp_receive+0xd00>)
 801753a:	681a      	ldr	r2, [r3, #0]
 801753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	685b      	ldr	r3, [r3, #4]
 8017542:	1ad3      	subs	r3, r2, r3
 8017544:	3b01      	subs	r3, #1
 8017546:	2b00      	cmp	r3, #0
 8017548:	db3e      	blt.n	80175c8 <tcp_receive+0xd04>
 801754a:	4b1e      	ldr	r3, [pc, #120]	; (80175c4 <tcp_receive+0xd00>)
 801754c:	681a      	ldr	r2, [r3, #0]
 801754e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017550:	68db      	ldr	r3, [r3, #12]
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	1ad3      	subs	r3, r2, r3
 8017556:	3301      	adds	r3, #1
 8017558:	2b00      	cmp	r3, #0
 801755a:	dc35      	bgt.n	80175c8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801755c:	4818      	ldr	r0, [pc, #96]	; (80175c0 <tcp_receive+0xcfc>)
 801755e:	f7fd fa91 	bl	8014a84 <tcp_seg_copy>
 8017562:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017564:	69fb      	ldr	r3, [r7, #28]
 8017566:	2b00      	cmp	r3, #0
 8017568:	f000 8109 	beq.w	801777e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801756c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801756e:	68db      	ldr	r3, [r3, #12]
 8017570:	685b      	ldr	r3, [r3, #4]
 8017572:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017574:	8912      	ldrh	r2, [r2, #8]
 8017576:	441a      	add	r2, r3
 8017578:	4b12      	ldr	r3, [pc, #72]	; (80175c4 <tcp_receive+0xd00>)
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	1ad3      	subs	r3, r2, r3
 801757e:	2b00      	cmp	r3, #0
 8017580:	dd12      	ble.n	80175a8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017582:	4b10      	ldr	r3, [pc, #64]	; (80175c4 <tcp_receive+0xd00>)
 8017584:	681b      	ldr	r3, [r3, #0]
 8017586:	b29a      	uxth	r2, r3
 8017588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801758a:	68db      	ldr	r3, [r3, #12]
 801758c:	685b      	ldr	r3, [r3, #4]
 801758e:	b29b      	uxth	r3, r3
 8017590:	1ad3      	subs	r3, r2, r3
 8017592:	b29a      	uxth	r2, r3
 8017594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017596:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801759a:	685a      	ldr	r2, [r3, #4]
 801759c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801759e:	891b      	ldrh	r3, [r3, #8]
 80175a0:	4619      	mov	r1, r3
 80175a2:	4610      	mov	r0, r2
 80175a4:	f7fb fb42 	bl	8012c2c <pbuf_realloc>
                    }
                    prev->next = cseg;
 80175a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80175aa:	69fa      	ldr	r2, [r7, #28]
 80175ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80175ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80175b0:	69f8      	ldr	r0, [r7, #28]
 80175b2:	f7ff f883 	bl	80166bc <tcp_oos_insert_segment>
                  }
                  break;
 80175b6:	e0e2      	b.n	801777e <tcp_receive+0xeba>
 80175b8:	20008748 	.word	0x20008748
 80175bc:	20008745 	.word	0x20008745
 80175c0:	20008718 	.word	0x20008718
 80175c4:	20008738 	.word	0x20008738
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80175c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80175cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ce:	681b      	ldr	r3, [r3, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	f040 80c6 	bne.w	8017762 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80175d6:	4b80      	ldr	r3, [pc, #512]	; (80177d8 <tcp_receive+0xf14>)
 80175d8:	681a      	ldr	r2, [r3, #0]
 80175da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	685b      	ldr	r3, [r3, #4]
 80175e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	f340 80bd 	ble.w	8017762 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80175e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175ea:	68db      	ldr	r3, [r3, #12]
 80175ec:	899b      	ldrh	r3, [r3, #12]
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7f9 ff3f 	bl	8011474 <lwip_htons>
 80175f6:	4603      	mov	r3, r0
 80175f8:	b2db      	uxtb	r3, r3
 80175fa:	f003 0301 	and.w	r3, r3, #1
 80175fe:	2b00      	cmp	r3, #0
 8017600:	f040 80bf 	bne.w	8017782 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017604:	4875      	ldr	r0, [pc, #468]	; (80177dc <tcp_receive+0xf18>)
 8017606:	f7fd fa3d 	bl	8014a84 <tcp_seg_copy>
 801760a:	4602      	mov	r2, r0
 801760c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801760e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	2b00      	cmp	r3, #0
 8017616:	f000 80b6 	beq.w	8017786 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801761c:	68db      	ldr	r3, [r3, #12]
 801761e:	685b      	ldr	r3, [r3, #4]
 8017620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017622:	8912      	ldrh	r2, [r2, #8]
 8017624:	441a      	add	r2, r3
 8017626:	4b6c      	ldr	r3, [pc, #432]	; (80177d8 <tcp_receive+0xf14>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	1ad3      	subs	r3, r2, r3
 801762c:	2b00      	cmp	r3, #0
 801762e:	dd12      	ble.n	8017656 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017630:	4b69      	ldr	r3, [pc, #420]	; (80177d8 <tcp_receive+0xf14>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	b29a      	uxth	r2, r3
 8017636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017638:	68db      	ldr	r3, [r3, #12]
 801763a:	685b      	ldr	r3, [r3, #4]
 801763c:	b29b      	uxth	r3, r3
 801763e:	1ad3      	subs	r3, r2, r3
 8017640:	b29a      	uxth	r2, r3
 8017642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017644:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017648:	685a      	ldr	r2, [r3, #4]
 801764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801764c:	891b      	ldrh	r3, [r3, #8]
 801764e:	4619      	mov	r1, r3
 8017650:	4610      	mov	r0, r2
 8017652:	f7fb faeb 	bl	8012c2c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017656:	4b62      	ldr	r3, [pc, #392]	; (80177e0 <tcp_receive+0xf1c>)
 8017658:	881b      	ldrh	r3, [r3, #0]
 801765a:	461a      	mov	r2, r3
 801765c:	4b5e      	ldr	r3, [pc, #376]	; (80177d8 <tcp_receive+0xf14>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	441a      	add	r2, r3
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017666:	6879      	ldr	r1, [r7, #4]
 8017668:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801766a:	440b      	add	r3, r1
 801766c:	1ad3      	subs	r3, r2, r3
 801766e:	2b00      	cmp	r3, #0
 8017670:	f340 8089 	ble.w	8017786 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	68db      	ldr	r3, [r3, #12]
 801767a:	899b      	ldrh	r3, [r3, #12]
 801767c:	b29b      	uxth	r3, r3
 801767e:	4618      	mov	r0, r3
 8017680:	f7f9 fef8 	bl	8011474 <lwip_htons>
 8017684:	4603      	mov	r3, r0
 8017686:	b2db      	uxtb	r3, r3
 8017688:	f003 0301 	and.w	r3, r3, #1
 801768c:	2b00      	cmp	r3, #0
 801768e:	d022      	beq.n	80176d6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	68db      	ldr	r3, [r3, #12]
 8017696:	899b      	ldrh	r3, [r3, #12]
 8017698:	b29b      	uxth	r3, r3
 801769a:	b21b      	sxth	r3, r3
 801769c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80176a0:	b21c      	sxth	r4, r3
 80176a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	68db      	ldr	r3, [r3, #12]
 80176a8:	899b      	ldrh	r3, [r3, #12]
 80176aa:	b29b      	uxth	r3, r3
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7f9 fee1 	bl	8011474 <lwip_htons>
 80176b2:	4603      	mov	r3, r0
 80176b4:	b2db      	uxtb	r3, r3
 80176b6:	b29b      	uxth	r3, r3
 80176b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80176bc:	b29b      	uxth	r3, r3
 80176be:	4618      	mov	r0, r3
 80176c0:	f7f9 fed8 	bl	8011474 <lwip_htons>
 80176c4:	4603      	mov	r3, r0
 80176c6:	b21b      	sxth	r3, r3
 80176c8:	4323      	orrs	r3, r4
 80176ca:	b21a      	sxth	r2, r3
 80176cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	68db      	ldr	r3, [r3, #12]
 80176d2:	b292      	uxth	r2, r2
 80176d4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176da:	b29a      	uxth	r2, r3
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80176e0:	4413      	add	r3, r2
 80176e2:	b299      	uxth	r1, r3
 80176e4:	4b3c      	ldr	r3, [pc, #240]	; (80177d8 <tcp_receive+0xf14>)
 80176e6:	681b      	ldr	r3, [r3, #0]
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	1a8a      	subs	r2, r1, r2
 80176f0:	b292      	uxth	r2, r2
 80176f2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80176f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	685a      	ldr	r2, [r3, #4]
 80176fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	891b      	ldrh	r3, [r3, #8]
 8017700:	4619      	mov	r1, r3
 8017702:	4610      	mov	r0, r2
 8017704:	f7fb fa92 	bl	8012c2c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	891c      	ldrh	r4, [r3, #8]
 801770e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	68db      	ldr	r3, [r3, #12]
 8017714:	899b      	ldrh	r3, [r3, #12]
 8017716:	b29b      	uxth	r3, r3
 8017718:	4618      	mov	r0, r3
 801771a:	f7f9 feab 	bl	8011474 <lwip_htons>
 801771e:	4603      	mov	r3, r0
 8017720:	b2db      	uxtb	r3, r3
 8017722:	f003 0303 	and.w	r3, r3, #3
 8017726:	2b00      	cmp	r3, #0
 8017728:	d001      	beq.n	801772e <tcp_receive+0xe6a>
 801772a:	2301      	movs	r3, #1
 801772c:	e000      	b.n	8017730 <tcp_receive+0xe6c>
 801772e:	2300      	movs	r3, #0
 8017730:	4423      	add	r3, r4
 8017732:	b29a      	uxth	r2, r3
 8017734:	4b2a      	ldr	r3, [pc, #168]	; (80177e0 <tcp_receive+0xf1c>)
 8017736:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017738:	4b29      	ldr	r3, [pc, #164]	; (80177e0 <tcp_receive+0xf1c>)
 801773a:	881b      	ldrh	r3, [r3, #0]
 801773c:	461a      	mov	r2, r3
 801773e:	4b26      	ldr	r3, [pc, #152]	; (80177d8 <tcp_receive+0xf14>)
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	441a      	add	r2, r3
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017748:	6879      	ldr	r1, [r7, #4]
 801774a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801774c:	440b      	add	r3, r1
 801774e:	429a      	cmp	r2, r3
 8017750:	d019      	beq.n	8017786 <tcp_receive+0xec2>
 8017752:	4b24      	ldr	r3, [pc, #144]	; (80177e4 <tcp_receive+0xf20>)
 8017754:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017758:	4923      	ldr	r1, [pc, #140]	; (80177e8 <tcp_receive+0xf24>)
 801775a:	4824      	ldr	r0, [pc, #144]	; (80177ec <tcp_receive+0xf28>)
 801775c:	f005 fa34 	bl	801cbc8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017760:	e011      	b.n	8017786 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	63bb      	str	r3, [r7, #56]	; 0x38
 8017768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801776a:	2b00      	cmp	r3, #0
 801776c:	f47f aea4 	bne.w	80174b8 <tcp_receive+0xbf4>
 8017770:	e00a      	b.n	8017788 <tcp_receive+0xec4>
                break;
 8017772:	bf00      	nop
 8017774:	e008      	b.n	8017788 <tcp_receive+0xec4>
                break;
 8017776:	bf00      	nop
 8017778:	e006      	b.n	8017788 <tcp_receive+0xec4>
                  break;
 801777a:	bf00      	nop
 801777c:	e004      	b.n	8017788 <tcp_receive+0xec4>
                  break;
 801777e:	bf00      	nop
 8017780:	e002      	b.n	8017788 <tcp_receive+0xec4>
                  break;
 8017782:	bf00      	nop
 8017784:	e000      	b.n	8017788 <tcp_receive+0xec4>
                break;
 8017786:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f001 febf 	bl	801950c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801778e:	e003      	b.n	8017798 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f001 febb 	bl	801950c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017796:	e01a      	b.n	80177ce <tcp_receive+0xf0a>
 8017798:	e019      	b.n	80177ce <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801779a:	4b0f      	ldr	r3, [pc, #60]	; (80177d8 <tcp_receive+0xf14>)
 801779c:	681a      	ldr	r2, [r3, #0]
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177a2:	1ad3      	subs	r3, r2, r3
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	db0a      	blt.n	80177be <tcp_receive+0xefa>
 80177a8:	4b0b      	ldr	r3, [pc, #44]	; (80177d8 <tcp_receive+0xf14>)
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177b0:	6879      	ldr	r1, [r7, #4]
 80177b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80177b4:	440b      	add	r3, r1
 80177b6:	1ad3      	subs	r3, r2, r3
 80177b8:	3301      	adds	r3, #1
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	dd07      	ble.n	80177ce <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	8b5b      	ldrh	r3, [r3, #26]
 80177c2:	f043 0302 	orr.w	r3, r3, #2
 80177c6:	b29a      	uxth	r2, r3
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80177cc:	e7ff      	b.n	80177ce <tcp_receive+0xf0a>
 80177ce:	bf00      	nop
 80177d0:	3750      	adds	r7, #80	; 0x50
 80177d2:	46bd      	mov	sp, r7
 80177d4:	bdb0      	pop	{r4, r5, r7, pc}
 80177d6:	bf00      	nop
 80177d8:	20008738 	.word	0x20008738
 80177dc:	20008718 	.word	0x20008718
 80177e0:	20008742 	.word	0x20008742
 80177e4:	0801f890 	.word	0x0801f890
 80177e8:	0801fc38 	.word	0x0801fc38
 80177ec:	0801f8dc 	.word	0x0801f8dc

080177f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80177f0:	b480      	push	{r7}
 80177f2:	b083      	sub	sp, #12
 80177f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80177f6:	4b15      	ldr	r3, [pc, #84]	; (801784c <tcp_get_next_optbyte+0x5c>)
 80177f8:	881b      	ldrh	r3, [r3, #0]
 80177fa:	1c5a      	adds	r2, r3, #1
 80177fc:	b291      	uxth	r1, r2
 80177fe:	4a13      	ldr	r2, [pc, #76]	; (801784c <tcp_get_next_optbyte+0x5c>)
 8017800:	8011      	strh	r1, [r2, #0]
 8017802:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017804:	4b12      	ldr	r3, [pc, #72]	; (8017850 <tcp_get_next_optbyte+0x60>)
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d004      	beq.n	8017816 <tcp_get_next_optbyte+0x26>
 801780c:	4b11      	ldr	r3, [pc, #68]	; (8017854 <tcp_get_next_optbyte+0x64>)
 801780e:	881b      	ldrh	r3, [r3, #0]
 8017810:	88fa      	ldrh	r2, [r7, #6]
 8017812:	429a      	cmp	r2, r3
 8017814:	d208      	bcs.n	8017828 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017816:	4b10      	ldr	r3, [pc, #64]	; (8017858 <tcp_get_next_optbyte+0x68>)
 8017818:	681b      	ldr	r3, [r3, #0]
 801781a:	3314      	adds	r3, #20
 801781c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801781e:	88fb      	ldrh	r3, [r7, #6]
 8017820:	683a      	ldr	r2, [r7, #0]
 8017822:	4413      	add	r3, r2
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	e00b      	b.n	8017840 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017828:	88fb      	ldrh	r3, [r7, #6]
 801782a:	b2da      	uxtb	r2, r3
 801782c:	4b09      	ldr	r3, [pc, #36]	; (8017854 <tcp_get_next_optbyte+0x64>)
 801782e:	881b      	ldrh	r3, [r3, #0]
 8017830:	b2db      	uxtb	r3, r3
 8017832:	1ad3      	subs	r3, r2, r3
 8017834:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017836:	4b06      	ldr	r3, [pc, #24]	; (8017850 <tcp_get_next_optbyte+0x60>)
 8017838:	681a      	ldr	r2, [r3, #0]
 801783a:	797b      	ldrb	r3, [r7, #5]
 801783c:	4413      	add	r3, r2
 801783e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017840:	4618      	mov	r0, r3
 8017842:	370c      	adds	r7, #12
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr
 801784c:	20008734 	.word	0x20008734
 8017850:	20008730 	.word	0x20008730
 8017854:	2000872e 	.word	0x2000872e
 8017858:	20008728 	.word	0x20008728

0801785c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b084      	sub	sp, #16
 8017860:	af00      	add	r7, sp, #0
 8017862:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	2b00      	cmp	r3, #0
 8017868:	d106      	bne.n	8017878 <tcp_parseopt+0x1c>
 801786a:	4b31      	ldr	r3, [pc, #196]	; (8017930 <tcp_parseopt+0xd4>)
 801786c:	f240 727d 	movw	r2, #1917	; 0x77d
 8017870:	4930      	ldr	r1, [pc, #192]	; (8017934 <tcp_parseopt+0xd8>)
 8017872:	4831      	ldr	r0, [pc, #196]	; (8017938 <tcp_parseopt+0xdc>)
 8017874:	f005 f9a8 	bl	801cbc8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017878:	4b30      	ldr	r3, [pc, #192]	; (801793c <tcp_parseopt+0xe0>)
 801787a:	881b      	ldrh	r3, [r3, #0]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d053      	beq.n	8017928 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017880:	4b2f      	ldr	r3, [pc, #188]	; (8017940 <tcp_parseopt+0xe4>)
 8017882:	2200      	movs	r2, #0
 8017884:	801a      	strh	r2, [r3, #0]
 8017886:	e043      	b.n	8017910 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8017888:	f7ff ffb2 	bl	80177f0 <tcp_get_next_optbyte>
 801788c:	4603      	mov	r3, r0
 801788e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017890:	7bfb      	ldrb	r3, [r7, #15]
 8017892:	2b01      	cmp	r3, #1
 8017894:	d03c      	beq.n	8017910 <tcp_parseopt+0xb4>
 8017896:	2b02      	cmp	r3, #2
 8017898:	d002      	beq.n	80178a0 <tcp_parseopt+0x44>
 801789a:	2b00      	cmp	r3, #0
 801789c:	d03f      	beq.n	801791e <tcp_parseopt+0xc2>
 801789e:	e026      	b.n	80178ee <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80178a0:	f7ff ffa6 	bl	80177f0 <tcp_get_next_optbyte>
 80178a4:	4603      	mov	r3, r0
 80178a6:	2b04      	cmp	r3, #4
 80178a8:	d13b      	bne.n	8017922 <tcp_parseopt+0xc6>
 80178aa:	4b25      	ldr	r3, [pc, #148]	; (8017940 <tcp_parseopt+0xe4>)
 80178ac:	881b      	ldrh	r3, [r3, #0]
 80178ae:	3302      	adds	r3, #2
 80178b0:	4a22      	ldr	r2, [pc, #136]	; (801793c <tcp_parseopt+0xe0>)
 80178b2:	8812      	ldrh	r2, [r2, #0]
 80178b4:	4293      	cmp	r3, r2
 80178b6:	dc34      	bgt.n	8017922 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80178b8:	f7ff ff9a 	bl	80177f0 <tcp_get_next_optbyte>
 80178bc:	4603      	mov	r3, r0
 80178be:	b29b      	uxth	r3, r3
 80178c0:	021b      	lsls	r3, r3, #8
 80178c2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80178c4:	f7ff ff94 	bl	80177f0 <tcp_get_next_optbyte>
 80178c8:	4603      	mov	r3, r0
 80178ca:	b29a      	uxth	r2, r3
 80178cc:	89bb      	ldrh	r3, [r7, #12]
 80178ce:	4313      	orrs	r3, r2
 80178d0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80178d2:	89bb      	ldrh	r3, [r7, #12]
 80178d4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80178d8:	d804      	bhi.n	80178e4 <tcp_parseopt+0x88>
 80178da:	89bb      	ldrh	r3, [r7, #12]
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d001      	beq.n	80178e4 <tcp_parseopt+0x88>
 80178e0:	89ba      	ldrh	r2, [r7, #12]
 80178e2:	e001      	b.n	80178e8 <tcp_parseopt+0x8c>
 80178e4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80178ec:	e010      	b.n	8017910 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80178ee:	f7ff ff7f 	bl	80177f0 <tcp_get_next_optbyte>
 80178f2:	4603      	mov	r3, r0
 80178f4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80178f6:	7afb      	ldrb	r3, [r7, #11]
 80178f8:	2b01      	cmp	r3, #1
 80178fa:	d914      	bls.n	8017926 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80178fc:	7afb      	ldrb	r3, [r7, #11]
 80178fe:	b29a      	uxth	r2, r3
 8017900:	4b0f      	ldr	r3, [pc, #60]	; (8017940 <tcp_parseopt+0xe4>)
 8017902:	881b      	ldrh	r3, [r3, #0]
 8017904:	4413      	add	r3, r2
 8017906:	b29b      	uxth	r3, r3
 8017908:	3b02      	subs	r3, #2
 801790a:	b29a      	uxth	r2, r3
 801790c:	4b0c      	ldr	r3, [pc, #48]	; (8017940 <tcp_parseopt+0xe4>)
 801790e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017910:	4b0b      	ldr	r3, [pc, #44]	; (8017940 <tcp_parseopt+0xe4>)
 8017912:	881a      	ldrh	r2, [r3, #0]
 8017914:	4b09      	ldr	r3, [pc, #36]	; (801793c <tcp_parseopt+0xe0>)
 8017916:	881b      	ldrh	r3, [r3, #0]
 8017918:	429a      	cmp	r2, r3
 801791a:	d3b5      	bcc.n	8017888 <tcp_parseopt+0x2c>
 801791c:	e004      	b.n	8017928 <tcp_parseopt+0xcc>
          return;
 801791e:	bf00      	nop
 8017920:	e002      	b.n	8017928 <tcp_parseopt+0xcc>
            return;
 8017922:	bf00      	nop
 8017924:	e000      	b.n	8017928 <tcp_parseopt+0xcc>
            return;
 8017926:	bf00      	nop
      }
    }
  }
}
 8017928:	3710      	adds	r7, #16
 801792a:	46bd      	mov	sp, r7
 801792c:	bd80      	pop	{r7, pc}
 801792e:	bf00      	nop
 8017930:	0801f890 	.word	0x0801f890
 8017934:	0801fcf4 	.word	0x0801fcf4
 8017938:	0801f8dc 	.word	0x0801f8dc
 801793c:	2000872c 	.word	0x2000872c
 8017940:	20008734 	.word	0x20008734

08017944 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017944:	b480      	push	{r7}
 8017946:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017948:	4b05      	ldr	r3, [pc, #20]	; (8017960 <tcp_trigger_input_pcb_close+0x1c>)
 801794a:	781b      	ldrb	r3, [r3, #0]
 801794c:	f043 0310 	orr.w	r3, r3, #16
 8017950:	b2da      	uxtb	r2, r3
 8017952:	4b03      	ldr	r3, [pc, #12]	; (8017960 <tcp_trigger_input_pcb_close+0x1c>)
 8017954:	701a      	strb	r2, [r3, #0]
}
 8017956:	bf00      	nop
 8017958:	46bd      	mov	sp, r7
 801795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795e:	4770      	bx	lr
 8017960:	20008745 	.word	0x20008745

08017964 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b084      	sub	sp, #16
 8017968:	af00      	add	r7, sp, #0
 801796a:	60f8      	str	r0, [r7, #12]
 801796c:	60b9      	str	r1, [r7, #8]
 801796e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d00a      	beq.n	801798c <tcp_route+0x28>
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	7a1b      	ldrb	r3, [r3, #8]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d006      	beq.n	801798c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	7a1b      	ldrb	r3, [r3, #8]
 8017982:	4618      	mov	r0, r3
 8017984:	f7fa ff4e 	bl	8012824 <netif_get_by_index>
 8017988:	4603      	mov	r3, r0
 801798a:	e003      	b.n	8017994 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f003 fd13 	bl	801b3b8 <ip4_route>
 8017992:	4603      	mov	r3, r0
  }
}
 8017994:	4618      	mov	r0, r3
 8017996:	3710      	adds	r7, #16
 8017998:	46bd      	mov	sp, r7
 801799a:	bd80      	pop	{r7, pc}

0801799c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801799c:	b590      	push	{r4, r7, lr}
 801799e:	b087      	sub	sp, #28
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	60f8      	str	r0, [r7, #12]
 80179a4:	60b9      	str	r1, [r7, #8]
 80179a6:	603b      	str	r3, [r7, #0]
 80179a8:	4613      	mov	r3, r2
 80179aa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80179ac:	68fb      	ldr	r3, [r7, #12]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d105      	bne.n	80179be <tcp_create_segment+0x22>
 80179b2:	4b44      	ldr	r3, [pc, #272]	; (8017ac4 <tcp_create_segment+0x128>)
 80179b4:	22a3      	movs	r2, #163	; 0xa3
 80179b6:	4944      	ldr	r1, [pc, #272]	; (8017ac8 <tcp_create_segment+0x12c>)
 80179b8:	4844      	ldr	r0, [pc, #272]	; (8017acc <tcp_create_segment+0x130>)
 80179ba:	f005 f905 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80179be:	68bb      	ldr	r3, [r7, #8]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d105      	bne.n	80179d0 <tcp_create_segment+0x34>
 80179c4:	4b3f      	ldr	r3, [pc, #252]	; (8017ac4 <tcp_create_segment+0x128>)
 80179c6:	22a4      	movs	r2, #164	; 0xa4
 80179c8:	4941      	ldr	r1, [pc, #260]	; (8017ad0 <tcp_create_segment+0x134>)
 80179ca:	4840      	ldr	r0, [pc, #256]	; (8017acc <tcp_create_segment+0x130>)
 80179cc:	f005 f8fc 	bl	801cbc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80179d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179d4:	009b      	lsls	r3, r3, #2
 80179d6:	b2db      	uxtb	r3, r3
 80179d8:	f003 0304 	and.w	r3, r3, #4
 80179dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80179de:	2003      	movs	r0, #3
 80179e0:	f7fa fb94 	bl	801210c <memp_malloc>
 80179e4:	6138      	str	r0, [r7, #16]
 80179e6:	693b      	ldr	r3, [r7, #16]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d104      	bne.n	80179f6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80179ec:	68b8      	ldr	r0, [r7, #8]
 80179ee:	f7fb faa3 	bl	8012f38 <pbuf_free>
    return NULL;
 80179f2:	2300      	movs	r3, #0
 80179f4:	e061      	b.n	8017aba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80179f6:	693b      	ldr	r3, [r7, #16]
 80179f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80179fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80179fe:	693b      	ldr	r3, [r7, #16]
 8017a00:	2200      	movs	r2, #0
 8017a02:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017a04:	693b      	ldr	r3, [r7, #16]
 8017a06:	68ba      	ldr	r2, [r7, #8]
 8017a08:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8017a0a:	68bb      	ldr	r3, [r7, #8]
 8017a0c:	891a      	ldrh	r2, [r3, #8]
 8017a0e:	7dfb      	ldrb	r3, [r7, #23]
 8017a10:	b29b      	uxth	r3, r3
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d205      	bcs.n	8017a22 <tcp_create_segment+0x86>
 8017a16:	4b2b      	ldr	r3, [pc, #172]	; (8017ac4 <tcp_create_segment+0x128>)
 8017a18:	22b0      	movs	r2, #176	; 0xb0
 8017a1a:	492e      	ldr	r1, [pc, #184]	; (8017ad4 <tcp_create_segment+0x138>)
 8017a1c:	482b      	ldr	r0, [pc, #172]	; (8017acc <tcp_create_segment+0x130>)
 8017a1e:	f005 f8d3 	bl	801cbc8 <iprintf>
  seg->len = p->tot_len - optlen;
 8017a22:	68bb      	ldr	r3, [r7, #8]
 8017a24:	891a      	ldrh	r2, [r3, #8]
 8017a26:	7dfb      	ldrb	r3, [r7, #23]
 8017a28:	b29b      	uxth	r3, r3
 8017a2a:	1ad3      	subs	r3, r2, r3
 8017a2c:	b29a      	uxth	r2, r3
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017a32:	2114      	movs	r1, #20
 8017a34:	68b8      	ldr	r0, [r7, #8]
 8017a36:	f7fb f9e9 	bl	8012e0c <pbuf_add_header>
 8017a3a:	4603      	mov	r3, r0
 8017a3c:	2b00      	cmp	r3, #0
 8017a3e:	d004      	beq.n	8017a4a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017a40:	6938      	ldr	r0, [r7, #16]
 8017a42:	f7fd f807 	bl	8014a54 <tcp_seg_free>
    return NULL;
 8017a46:	2300      	movs	r3, #0
 8017a48:	e037      	b.n	8017aba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	685a      	ldr	r2, [r3, #4]
 8017a50:	693b      	ldr	r3, [r7, #16]
 8017a52:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	8ada      	ldrh	r2, [r3, #22]
 8017a58:	693b      	ldr	r3, [r7, #16]
 8017a5a:	68dc      	ldr	r4, [r3, #12]
 8017a5c:	4610      	mov	r0, r2
 8017a5e:	f7f9 fd09 	bl	8011474 <lwip_htons>
 8017a62:	4603      	mov	r3, r0
 8017a64:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	8b1a      	ldrh	r2, [r3, #24]
 8017a6a:	693b      	ldr	r3, [r7, #16]
 8017a6c:	68dc      	ldr	r4, [r3, #12]
 8017a6e:	4610      	mov	r0, r2
 8017a70:	f7f9 fd00 	bl	8011474 <lwip_htons>
 8017a74:	4603      	mov	r3, r0
 8017a76:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017a78:	693b      	ldr	r3, [r7, #16]
 8017a7a:	68dc      	ldr	r4, [r3, #12]
 8017a7c:	6838      	ldr	r0, [r7, #0]
 8017a7e:	f7f9 fd0e 	bl	801149e <lwip_htonl>
 8017a82:	4603      	mov	r3, r0
 8017a84:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8017a86:	7dfb      	ldrb	r3, [r7, #23]
 8017a88:	089b      	lsrs	r3, r3, #2
 8017a8a:	b2db      	uxtb	r3, r3
 8017a8c:	b29b      	uxth	r3, r3
 8017a8e:	3305      	adds	r3, #5
 8017a90:	b29b      	uxth	r3, r3
 8017a92:	031b      	lsls	r3, r3, #12
 8017a94:	b29a      	uxth	r2, r3
 8017a96:	79fb      	ldrb	r3, [r7, #7]
 8017a98:	b29b      	uxth	r3, r3
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	b29a      	uxth	r2, r3
 8017a9e:	693b      	ldr	r3, [r7, #16]
 8017aa0:	68dc      	ldr	r4, [r3, #12]
 8017aa2:	4610      	mov	r0, r2
 8017aa4:	f7f9 fce6 	bl	8011474 <lwip_htons>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017aac:	693b      	ldr	r3, [r7, #16]
 8017aae:	68db      	ldr	r3, [r3, #12]
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	749a      	strb	r2, [r3, #18]
 8017ab4:	2200      	movs	r2, #0
 8017ab6:	74da      	strb	r2, [r3, #19]
  return seg;
 8017ab8:	693b      	ldr	r3, [r7, #16]
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	371c      	adds	r7, #28
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd90      	pop	{r4, r7, pc}
 8017ac2:	bf00      	nop
 8017ac4:	0801fd10 	.word	0x0801fd10
 8017ac8:	0801fd44 	.word	0x0801fd44
 8017acc:	0801fd64 	.word	0x0801fd64
 8017ad0:	0801fd8c 	.word	0x0801fd8c
 8017ad4:	0801fdb0 	.word	0x0801fdb0

08017ad8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017ad8:	b580      	push	{r7, lr}
 8017ada:	b086      	sub	sp, #24
 8017adc:	af00      	add	r7, sp, #0
 8017ade:	607b      	str	r3, [r7, #4]
 8017ae0:	4603      	mov	r3, r0
 8017ae2:	73fb      	strb	r3, [r7, #15]
 8017ae4:	460b      	mov	r3, r1
 8017ae6:	81bb      	strh	r3, [r7, #12]
 8017ae8:	4613      	mov	r3, r2
 8017aea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017aec:	89bb      	ldrh	r3, [r7, #12]
 8017aee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d105      	bne.n	8017b02 <tcp_pbuf_prealloc+0x2a>
 8017af6:	4b30      	ldr	r3, [pc, #192]	; (8017bb8 <tcp_pbuf_prealloc+0xe0>)
 8017af8:	22e8      	movs	r2, #232	; 0xe8
 8017afa:	4930      	ldr	r1, [pc, #192]	; (8017bbc <tcp_pbuf_prealloc+0xe4>)
 8017afc:	4830      	ldr	r0, [pc, #192]	; (8017bc0 <tcp_pbuf_prealloc+0xe8>)
 8017afe:	f005 f863 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8017b02:	6a3b      	ldr	r3, [r7, #32]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d105      	bne.n	8017b14 <tcp_pbuf_prealloc+0x3c>
 8017b08:	4b2b      	ldr	r3, [pc, #172]	; (8017bb8 <tcp_pbuf_prealloc+0xe0>)
 8017b0a:	22e9      	movs	r2, #233	; 0xe9
 8017b0c:	492d      	ldr	r1, [pc, #180]	; (8017bc4 <tcp_pbuf_prealloc+0xec>)
 8017b0e:	482c      	ldr	r0, [pc, #176]	; (8017bc0 <tcp_pbuf_prealloc+0xe8>)
 8017b10:	f005 f85a 	bl	801cbc8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8017b14:	89ba      	ldrh	r2, [r7, #12]
 8017b16:	897b      	ldrh	r3, [r7, #10]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d221      	bcs.n	8017b60 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017b1c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017b20:	f003 0302 	and.w	r3, r3, #2
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d111      	bne.n	8017b4c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8017b28:	6a3b      	ldr	r3, [r7, #32]
 8017b2a:	8b5b      	ldrh	r3, [r3, #26]
 8017b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d115      	bne.n	8017b60 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8017b34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d007      	beq.n	8017b4c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8017b3c:	6a3b      	ldr	r3, [r7, #32]
 8017b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d103      	bne.n	8017b4c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8017b44:	6a3b      	ldr	r3, [r7, #32]
 8017b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d009      	beq.n	8017b60 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8017b4c:	89bb      	ldrh	r3, [r7, #12]
 8017b4e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8017b52:	f023 0203 	bic.w	r2, r3, #3
 8017b56:	897b      	ldrh	r3, [r7, #10]
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	bf28      	it	cs
 8017b5c:	4613      	movcs	r3, r2
 8017b5e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8017b60:	8af9      	ldrh	r1, [r7, #22]
 8017b62:	7bfb      	ldrb	r3, [r7, #15]
 8017b64:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7fa ff05 	bl	8012978 <pbuf_alloc>
 8017b6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	2b00      	cmp	r3, #0
 8017b74:	d101      	bne.n	8017b7a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017b76:	2300      	movs	r3, #0
 8017b78:	e019      	b.n	8017bae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017b7a:	693b      	ldr	r3, [r7, #16]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d006      	beq.n	8017b90 <tcp_pbuf_prealloc+0xb8>
 8017b82:	4b0d      	ldr	r3, [pc, #52]	; (8017bb8 <tcp_pbuf_prealloc+0xe0>)
 8017b84:	f240 120b 	movw	r2, #267	; 0x10b
 8017b88:	490f      	ldr	r1, [pc, #60]	; (8017bc8 <tcp_pbuf_prealloc+0xf0>)
 8017b8a:	480d      	ldr	r0, [pc, #52]	; (8017bc0 <tcp_pbuf_prealloc+0xe8>)
 8017b8c:	f005 f81c 	bl	801cbc8 <iprintf>
  *oversize = p->len - length;
 8017b90:	693b      	ldr	r3, [r7, #16]
 8017b92:	895a      	ldrh	r2, [r3, #10]
 8017b94:	89bb      	ldrh	r3, [r7, #12]
 8017b96:	1ad3      	subs	r3, r2, r3
 8017b98:	b29a      	uxth	r2, r3
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017b9e:	693b      	ldr	r3, [r7, #16]
 8017ba0:	89ba      	ldrh	r2, [r7, #12]
 8017ba2:	811a      	strh	r2, [r3, #8]
 8017ba4:	693b      	ldr	r3, [r7, #16]
 8017ba6:	891a      	ldrh	r2, [r3, #8]
 8017ba8:	693b      	ldr	r3, [r7, #16]
 8017baa:	815a      	strh	r2, [r3, #10]
  return p;
 8017bac:	693b      	ldr	r3, [r7, #16]
}
 8017bae:	4618      	mov	r0, r3
 8017bb0:	3718      	adds	r7, #24
 8017bb2:	46bd      	mov	sp, r7
 8017bb4:	bd80      	pop	{r7, pc}
 8017bb6:	bf00      	nop
 8017bb8:	0801fd10 	.word	0x0801fd10
 8017bbc:	0801fdc8 	.word	0x0801fdc8
 8017bc0:	0801fd64 	.word	0x0801fd64
 8017bc4:	0801fdec 	.word	0x0801fdec
 8017bc8:	0801fe0c 	.word	0x0801fe0c

08017bcc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	460b      	mov	r3, r1
 8017bd6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d106      	bne.n	8017bec <tcp_write_checks+0x20>
 8017bde:	4b33      	ldr	r3, [pc, #204]	; (8017cac <tcp_write_checks+0xe0>)
 8017be0:	f240 1233 	movw	r2, #307	; 0x133
 8017be4:	4932      	ldr	r1, [pc, #200]	; (8017cb0 <tcp_write_checks+0xe4>)
 8017be6:	4833      	ldr	r0, [pc, #204]	; (8017cb4 <tcp_write_checks+0xe8>)
 8017be8:	f004 ffee 	bl	801cbc8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	7d1b      	ldrb	r3, [r3, #20]
 8017bf0:	2b04      	cmp	r3, #4
 8017bf2:	d00e      	beq.n	8017c12 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017bf8:	2b07      	cmp	r3, #7
 8017bfa:	d00a      	beq.n	8017c12 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017c00:	2b02      	cmp	r3, #2
 8017c02:	d006      	beq.n	8017c12 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017c08:	2b03      	cmp	r3, #3
 8017c0a:	d002      	beq.n	8017c12 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017c0c:	f06f 030a 	mvn.w	r3, #10
 8017c10:	e048      	b.n	8017ca4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017c12:	887b      	ldrh	r3, [r7, #2]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d101      	bne.n	8017c1c <tcp_write_checks+0x50>
    return ERR_OK;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	e043      	b.n	8017ca4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017c22:	887a      	ldrh	r2, [r7, #2]
 8017c24:	429a      	cmp	r2, r3
 8017c26:	d909      	bls.n	8017c3c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	8b5b      	ldrh	r3, [r3, #26]
 8017c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c30:	b29a      	uxth	r2, r3
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017c36:	f04f 33ff 	mov.w	r3, #4294967295
 8017c3a:	e033      	b.n	8017ca4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c42:	2b08      	cmp	r3, #8
 8017c44:	d909      	bls.n	8017c5a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	8b5b      	ldrh	r3, [r3, #26]
 8017c4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c4e:	b29a      	uxth	r2, r3
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017c54:	f04f 33ff 	mov.w	r3, #4294967295
 8017c58:	e024      	b.n	8017ca4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d00f      	beq.n	8017c84 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d11a      	bne.n	8017ca2 <tcp_write_checks+0xd6>
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c70:	2b00      	cmp	r3, #0
 8017c72:	d116      	bne.n	8017ca2 <tcp_write_checks+0xd6>
 8017c74:	4b0d      	ldr	r3, [pc, #52]	; (8017cac <tcp_write_checks+0xe0>)
 8017c76:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8017c7a:	490f      	ldr	r1, [pc, #60]	; (8017cb8 <tcp_write_checks+0xec>)
 8017c7c:	480d      	ldr	r0, [pc, #52]	; (8017cb4 <tcp_write_checks+0xe8>)
 8017c7e:	f004 ffa3 	bl	801cbc8 <iprintf>
 8017c82:	e00e      	b.n	8017ca2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d103      	bne.n	8017c94 <tcp_write_checks+0xc8>
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d006      	beq.n	8017ca2 <tcp_write_checks+0xd6>
 8017c94:	4b05      	ldr	r3, [pc, #20]	; (8017cac <tcp_write_checks+0xe0>)
 8017c96:	f240 1259 	movw	r2, #345	; 0x159
 8017c9a:	4908      	ldr	r1, [pc, #32]	; (8017cbc <tcp_write_checks+0xf0>)
 8017c9c:	4805      	ldr	r0, [pc, #20]	; (8017cb4 <tcp_write_checks+0xe8>)
 8017c9e:	f004 ff93 	bl	801cbc8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017ca2:	2300      	movs	r3, #0
}
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	3708      	adds	r7, #8
 8017ca8:	46bd      	mov	sp, r7
 8017caa:	bd80      	pop	{r7, pc}
 8017cac:	0801fd10 	.word	0x0801fd10
 8017cb0:	0801fe20 	.word	0x0801fe20
 8017cb4:	0801fd64 	.word	0x0801fd64
 8017cb8:	0801fe40 	.word	0x0801fe40
 8017cbc:	0801fe7c 	.word	0x0801fe7c

08017cc0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017cc0:	b590      	push	{r4, r7, lr}
 8017cc2:	b09b      	sub	sp, #108	; 0x6c
 8017cc4:	af04      	add	r7, sp, #16
 8017cc6:	60f8      	str	r0, [r7, #12]
 8017cc8:	60b9      	str	r1, [r7, #8]
 8017cca:	4611      	mov	r1, r2
 8017ccc:	461a      	mov	r2, r3
 8017cce:	460b      	mov	r3, r1
 8017cd0:	80fb      	strh	r3, [r7, #6]
 8017cd2:	4613      	mov	r3, r2
 8017cd4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	653b      	str	r3, [r7, #80]	; 0x50
 8017cde:	2300      	movs	r3, #0
 8017ce0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	64bb      	str	r3, [r7, #72]	; 0x48
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017cea:	2300      	movs	r3, #0
 8017cec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017cf6:	2300      	movs	r3, #0
 8017cf8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d109      	bne.n	8017d1c <tcp_write+0x5c>
 8017d08:	4ba5      	ldr	r3, [pc, #660]	; (8017fa0 <tcp_write+0x2e0>)
 8017d0a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8017d0e:	49a5      	ldr	r1, [pc, #660]	; (8017fa4 <tcp_write+0x2e4>)
 8017d10:	48a5      	ldr	r0, [pc, #660]	; (8017fa8 <tcp_write+0x2e8>)
 8017d12:	f004 ff59 	bl	801cbc8 <iprintf>
 8017d16:	f06f 030f 	mvn.w	r3, #15
 8017d1a:	e32c      	b.n	8018376 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017d22:	085b      	lsrs	r3, r3, #1
 8017d24:	b29a      	uxth	r2, r3
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d2a:	4293      	cmp	r3, r2
 8017d2c:	bf28      	it	cs
 8017d2e:	4613      	movcs	r3, r2
 8017d30:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017d32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d34:	2b00      	cmp	r3, #0
 8017d36:	d102      	bne.n	8017d3e <tcp_write+0x7e>
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d3c:	e000      	b.n	8017d40 <tcp_write+0x80>
 8017d3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017d40:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d109      	bne.n	8017d5c <tcp_write+0x9c>
 8017d48:	4b95      	ldr	r3, [pc, #596]	; (8017fa0 <tcp_write+0x2e0>)
 8017d4a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 8017d4e:	4997      	ldr	r1, [pc, #604]	; (8017fac <tcp_write+0x2ec>)
 8017d50:	4895      	ldr	r0, [pc, #596]	; (8017fa8 <tcp_write+0x2e8>)
 8017d52:	f004 ff39 	bl	801cbc8 <iprintf>
 8017d56:	f06f 030f 	mvn.w	r3, #15
 8017d5a:	e30c      	b.n	8018376 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017d5c:	88fb      	ldrh	r3, [r7, #6]
 8017d5e:	4619      	mov	r1, r3
 8017d60:	68f8      	ldr	r0, [r7, #12]
 8017d62:	f7ff ff33 	bl	8017bcc <tcp_write_checks>
 8017d66:	4603      	mov	r3, r0
 8017d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017d6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d002      	beq.n	8017d7a <tcp_write+0xba>
    return err;
 8017d74:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017d78:	e2fd      	b.n	8018376 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017d84:	2300      	movs	r3, #0
 8017d86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017d8a:	68fb      	ldr	r3, [r7, #12]
 8017d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	f000 80f7 	beq.w	8017f82 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d98:	653b      	str	r3, [r7, #80]	; 0x50
 8017d9a:	e002      	b.n	8017da2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017da4:	681b      	ldr	r3, [r3, #0]
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d1f8      	bne.n	8017d9c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dac:	7a9b      	ldrb	r3, [r3, #10]
 8017dae:	009b      	lsls	r3, r3, #2
 8017db0:	b29b      	uxth	r3, r3
 8017db2:	f003 0304 	and.w	r3, r3, #4
 8017db6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017db8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dbc:	891b      	ldrh	r3, [r3, #8]
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	8c3b      	ldrh	r3, [r7, #32]
 8017dc2:	440b      	add	r3, r1
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	da06      	bge.n	8017dd6 <tcp_write+0x116>
 8017dc8:	4b75      	ldr	r3, [pc, #468]	; (8017fa0 <tcp_write+0x2e0>)
 8017dca:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017dce:	4978      	ldr	r1, [pc, #480]	; (8017fb0 <tcp_write+0x2f0>)
 8017dd0:	4875      	ldr	r0, [pc, #468]	; (8017fa8 <tcp_write+0x2e8>)
 8017dd2:	f004 fef9 	bl	801cbc8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017dd8:	891a      	ldrh	r2, [r3, #8]
 8017dda:	8c3b      	ldrh	r3, [r7, #32]
 8017ddc:	4413      	add	r3, r2
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017de2:	1ad3      	subs	r3, r2, r3
 8017de4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017dec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017dee:	8a7b      	ldrh	r3, [r7, #18]
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d027      	beq.n	8017e44 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017df4:	8a7b      	ldrh	r3, [r7, #18]
 8017df6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017df8:	429a      	cmp	r2, r3
 8017dfa:	d206      	bcs.n	8017e0a <tcp_write+0x14a>
 8017dfc:	4b68      	ldr	r3, [pc, #416]	; (8017fa0 <tcp_write+0x2e0>)
 8017dfe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017e02:	496c      	ldr	r1, [pc, #432]	; (8017fb4 <tcp_write+0x2f4>)
 8017e04:	4868      	ldr	r0, [pc, #416]	; (8017fa8 <tcp_write+0x2e8>)
 8017e06:	f004 fedf 	bl	801cbc8 <iprintf>
      seg = last_unsent;
 8017e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017e0e:	8a7b      	ldrh	r3, [r7, #18]
 8017e10:	88fa      	ldrh	r2, [r7, #6]
 8017e12:	429a      	cmp	r2, r3
 8017e14:	d901      	bls.n	8017e1a <tcp_write+0x15a>
 8017e16:	8a7b      	ldrh	r3, [r7, #18]
 8017e18:	e000      	b.n	8017e1c <tcp_write+0x15c>
 8017e1a:	88fb      	ldrh	r3, [r7, #6]
 8017e1c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	bfa8      	it	ge
 8017e22:	4613      	movge	r3, r2
 8017e24:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017e26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e2c:	4413      	add	r3, r2
 8017e2e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017e32:	8a7a      	ldrh	r2, [r7, #18]
 8017e34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e36:	1ad3      	subs	r3, r2, r3
 8017e38:	b29b      	uxth	r3, r3
 8017e3a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017e3c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017e3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e40:	1ad3      	subs	r3, r2, r3
 8017e42:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017e44:	8a7b      	ldrh	r3, [r7, #18]
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d00b      	beq.n	8017e62 <tcp_write+0x1a2>
 8017e4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e4e:	88fb      	ldrh	r3, [r7, #6]
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d006      	beq.n	8017e62 <tcp_write+0x1a2>
 8017e54:	4b52      	ldr	r3, [pc, #328]	; (8017fa0 <tcp_write+0x2e0>)
 8017e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e5a:	4957      	ldr	r1, [pc, #348]	; (8017fb8 <tcp_write+0x2f8>)
 8017e5c:	4852      	ldr	r0, [pc, #328]	; (8017fa8 <tcp_write+0x2e8>)
 8017e5e:	f004 feb3 	bl	801cbc8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017e62:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e66:	88fb      	ldrh	r3, [r7, #6]
 8017e68:	429a      	cmp	r2, r3
 8017e6a:	f080 8168 	bcs.w	801813e <tcp_write+0x47e>
 8017e6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	f000 8164 	beq.w	801813e <tcp_write+0x47e>
 8017e76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e78:	891b      	ldrh	r3, [r3, #8]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	f000 815f 	beq.w	801813e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017e80:	88fa      	ldrh	r2, [r7, #6]
 8017e82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017e86:	1ad2      	subs	r2, r2, r3
 8017e88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	bfa8      	it	ge
 8017e8e:	4613      	movge	r3, r2
 8017e90:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017e94:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017e96:	797b      	ldrb	r3, [r7, #5]
 8017e98:	f003 0301 	and.w	r3, r3, #1
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d027      	beq.n	8017ef0 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017ea0:	f107 0012 	add.w	r0, r7, #18
 8017ea4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017ea6:	8bf9      	ldrh	r1, [r7, #30]
 8017ea8:	2301      	movs	r3, #1
 8017eaa:	9302      	str	r3, [sp, #8]
 8017eac:	797b      	ldrb	r3, [r7, #5]
 8017eae:	9301      	str	r3, [sp, #4]
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	9300      	str	r3, [sp, #0]
 8017eb4:	4603      	mov	r3, r0
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	f7ff fe0e 	bl	8017ad8 <tcp_pbuf_prealloc>
 8017ebc:	6578      	str	r0, [r7, #84]	; 0x54
 8017ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	f000 8226 	beq.w	8018312 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017ec8:	6858      	ldr	r0, [r3, #4]
 8017eca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ece:	68ba      	ldr	r2, [r7, #8]
 8017ed0:	4413      	add	r3, r2
 8017ed2:	8bfa      	ldrh	r2, [r7, #30]
 8017ed4:	4619      	mov	r1, r3
 8017ed6:	f004 fe64 	bl	801cba2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017eda:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017edc:	f7fb f8ba 	bl	8013054 <pbuf_clen>
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	461a      	mov	r2, r3
 8017ee4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017ee8:	4413      	add	r3, r2
 8017eea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017eee:	e041      	b.n	8017f74 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ef2:	685b      	ldr	r3, [r3, #4]
 8017ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8017ef6:	e002      	b.n	8017efe <tcp_write+0x23e>
 8017ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	637b      	str	r3, [r7, #52]	; 0x34
 8017efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d1f8      	bne.n	8017ef8 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f08:	7b1b      	ldrb	r3, [r3, #12]
 8017f0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d115      	bne.n	8017f3e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017f14:	685b      	ldr	r3, [r3, #4]
 8017f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017f18:	8952      	ldrh	r2, [r2, #10]
 8017f1a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017f1c:	68ba      	ldr	r2, [r7, #8]
 8017f1e:	429a      	cmp	r2, r3
 8017f20:	d10d      	bne.n	8017f3e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017f22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d006      	beq.n	8017f38 <tcp_write+0x278>
 8017f2a:	4b1d      	ldr	r3, [pc, #116]	; (8017fa0 <tcp_write+0x2e0>)
 8017f2c:	f240 2231 	movw	r2, #561	; 0x231
 8017f30:	4922      	ldr	r1, [pc, #136]	; (8017fbc <tcp_write+0x2fc>)
 8017f32:	481d      	ldr	r0, [pc, #116]	; (8017fa8 <tcp_write+0x2e8>)
 8017f34:	f004 fe48 	bl	801cbc8 <iprintf>
          extendlen = seglen;
 8017f38:	8bfb      	ldrh	r3, [r7, #30]
 8017f3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017f3c:	e01a      	b.n	8017f74 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017f3e:	8bfb      	ldrh	r3, [r7, #30]
 8017f40:	2201      	movs	r2, #1
 8017f42:	4619      	mov	r1, r3
 8017f44:	2000      	movs	r0, #0
 8017f46:	f7fa fd17 	bl	8012978 <pbuf_alloc>
 8017f4a:	6578      	str	r0, [r7, #84]	; 0x54
 8017f4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	f000 81e1 	beq.w	8018316 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017f54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f58:	68ba      	ldr	r2, [r7, #8]
 8017f5a:	441a      	add	r2, r3
 8017f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017f5e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017f60:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017f62:	f7fb f877 	bl	8013054 <pbuf_clen>
 8017f66:	4603      	mov	r3, r0
 8017f68:	461a      	mov	r2, r3
 8017f6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017f6e:	4413      	add	r3, r2
 8017f70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017f74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f78:	8bfb      	ldrh	r3, [r7, #30]
 8017f7a:	4413      	add	r3, r2
 8017f7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017f80:	e0dd      	b.n	801813e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f000 80d8 	beq.w	801813e <tcp_write+0x47e>
 8017f8e:	4b04      	ldr	r3, [pc, #16]	; (8017fa0 <tcp_write+0x2e0>)
 8017f90:	f240 224b 	movw	r2, #587	; 0x24b
 8017f94:	490a      	ldr	r1, [pc, #40]	; (8017fc0 <tcp_write+0x300>)
 8017f96:	4804      	ldr	r0, [pc, #16]	; (8017fa8 <tcp_write+0x2e8>)
 8017f98:	f004 fe16 	bl	801cbc8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017f9c:	e0cf      	b.n	801813e <tcp_write+0x47e>
 8017f9e:	bf00      	nop
 8017fa0:	0801fd10 	.word	0x0801fd10
 8017fa4:	0801feb0 	.word	0x0801feb0
 8017fa8:	0801fd64 	.word	0x0801fd64
 8017fac:	0801fec8 	.word	0x0801fec8
 8017fb0:	0801fefc 	.word	0x0801fefc
 8017fb4:	0801ff14 	.word	0x0801ff14
 8017fb8:	0801ff34 	.word	0x0801ff34
 8017fbc:	0801ff54 	.word	0x0801ff54
 8017fc0:	0801ff80 	.word	0x0801ff80
    struct pbuf *p;
    u16_t left = len - pos;
 8017fc4:	88fa      	ldrh	r2, [r7, #6]
 8017fc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017fca:	1ad3      	subs	r3, r2, r3
 8017fcc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017fce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017fd2:	b29b      	uxth	r3, r3
 8017fd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017fd6:	1ad3      	subs	r3, r2, r3
 8017fd8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017fda:	8b7a      	ldrh	r2, [r7, #26]
 8017fdc:	8bbb      	ldrh	r3, [r7, #28]
 8017fde:	4293      	cmp	r3, r2
 8017fe0:	bf28      	it	cs
 8017fe2:	4613      	movcs	r3, r2
 8017fe4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017fe6:	797b      	ldrb	r3, [r7, #5]
 8017fe8:	f003 0301 	and.w	r3, r3, #1
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d036      	beq.n	801805e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017ff0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017ff4:	b29a      	uxth	r2, r3
 8017ff6:	8b3b      	ldrh	r3, [r7, #24]
 8017ff8:	4413      	add	r3, r2
 8017ffa:	b299      	uxth	r1, r3
 8017ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	bf0c      	ite	eq
 8018002:	2301      	moveq	r3, #1
 8018004:	2300      	movne	r3, #0
 8018006:	b2db      	uxtb	r3, r3
 8018008:	f107 0012 	add.w	r0, r7, #18
 801800c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801800e:	9302      	str	r3, [sp, #8]
 8018010:	797b      	ldrb	r3, [r7, #5]
 8018012:	9301      	str	r3, [sp, #4]
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	9300      	str	r3, [sp, #0]
 8018018:	4603      	mov	r3, r0
 801801a:	2036      	movs	r0, #54	; 0x36
 801801c:	f7ff fd5c 	bl	8017ad8 <tcp_pbuf_prealloc>
 8018020:	6338      	str	r0, [r7, #48]	; 0x30
 8018022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018024:	2b00      	cmp	r3, #0
 8018026:	f000 8178 	beq.w	801831a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801802a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801802c:	895b      	ldrh	r3, [r3, #10]
 801802e:	8b3a      	ldrh	r2, [r7, #24]
 8018030:	429a      	cmp	r2, r3
 8018032:	d906      	bls.n	8018042 <tcp_write+0x382>
 8018034:	4b8c      	ldr	r3, [pc, #560]	; (8018268 <tcp_write+0x5a8>)
 8018036:	f240 2267 	movw	r2, #615	; 0x267
 801803a:	498c      	ldr	r1, [pc, #560]	; (801826c <tcp_write+0x5ac>)
 801803c:	488c      	ldr	r0, [pc, #560]	; (8018270 <tcp_write+0x5b0>)
 801803e:	f004 fdc3 	bl	801cbc8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8018042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018044:	685a      	ldr	r2, [r3, #4]
 8018046:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801804a:	18d0      	adds	r0, r2, r3
 801804c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018050:	68ba      	ldr	r2, [r7, #8]
 8018052:	4413      	add	r3, r2
 8018054:	8b3a      	ldrh	r2, [r7, #24]
 8018056:	4619      	mov	r1, r3
 8018058:	f004 fda3 	bl	801cba2 <memcpy>
 801805c:	e02f      	b.n	80180be <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801805e:	8a7b      	ldrh	r3, [r7, #18]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d006      	beq.n	8018072 <tcp_write+0x3b2>
 8018064:	4b80      	ldr	r3, [pc, #512]	; (8018268 <tcp_write+0x5a8>)
 8018066:	f240 2271 	movw	r2, #625	; 0x271
 801806a:	4982      	ldr	r1, [pc, #520]	; (8018274 <tcp_write+0x5b4>)
 801806c:	4880      	ldr	r0, [pc, #512]	; (8018270 <tcp_write+0x5b0>)
 801806e:	f004 fdab 	bl	801cbc8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8018072:	8b3b      	ldrh	r3, [r7, #24]
 8018074:	2201      	movs	r2, #1
 8018076:	4619      	mov	r1, r3
 8018078:	2036      	movs	r0, #54	; 0x36
 801807a:	f7fa fc7d 	bl	8012978 <pbuf_alloc>
 801807e:	6178      	str	r0, [r7, #20]
 8018080:	697b      	ldr	r3, [r7, #20]
 8018082:	2b00      	cmp	r3, #0
 8018084:	f000 814b 	beq.w	801831e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8018088:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801808c:	68ba      	ldr	r2, [r7, #8]
 801808e:	441a      	add	r2, r3
 8018090:	697b      	ldr	r3, [r7, #20]
 8018092:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8018098:	b29b      	uxth	r3, r3
 801809a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801809e:	4619      	mov	r1, r3
 80180a0:	2036      	movs	r0, #54	; 0x36
 80180a2:	f7fa fc69 	bl	8012978 <pbuf_alloc>
 80180a6:	6338      	str	r0, [r7, #48]	; 0x30
 80180a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	d103      	bne.n	80180b6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80180ae:	6978      	ldr	r0, [r7, #20]
 80180b0:	f7fa ff42 	bl	8012f38 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80180b4:	e136      	b.n	8018324 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80180b6:	6979      	ldr	r1, [r7, #20]
 80180b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180ba:	f7fb f80b 	bl	80130d4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80180be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180c0:	f7fa ffc8 	bl	8013054 <pbuf_clen>
 80180c4:	4603      	mov	r3, r0
 80180c6:	461a      	mov	r2, r3
 80180c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80180cc:	4413      	add	r3, r2
 80180ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80180d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80180d6:	2b09      	cmp	r3, #9
 80180d8:	d903      	bls.n	80180e2 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80180da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180dc:	f7fa ff2c 	bl	8012f38 <pbuf_free>
      goto memerr;
 80180e0:	e120      	b.n	8018324 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80180e2:	68fb      	ldr	r3, [r7, #12]
 80180e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80180e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80180ea:	441a      	add	r2, r3
 80180ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80180f0:	9300      	str	r3, [sp, #0]
 80180f2:	4613      	mov	r3, r2
 80180f4:	2200      	movs	r2, #0
 80180f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80180f8:	68f8      	ldr	r0, [r7, #12]
 80180fa:	f7ff fc4f 	bl	801799c <tcp_create_segment>
 80180fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 8018100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018102:	2b00      	cmp	r3, #0
 8018104:	f000 810d 	beq.w	8018322 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8018108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801810a:	2b00      	cmp	r3, #0
 801810c:	d102      	bne.n	8018114 <tcp_write+0x454>
      queue = seg;
 801810e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018110:	647b      	str	r3, [r7, #68]	; 0x44
 8018112:	e00c      	b.n	801812e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8018114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018116:	2b00      	cmp	r3, #0
 8018118:	d106      	bne.n	8018128 <tcp_write+0x468>
 801811a:	4b53      	ldr	r3, [pc, #332]	; (8018268 <tcp_write+0x5a8>)
 801811c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018120:	4955      	ldr	r1, [pc, #340]	; (8018278 <tcp_write+0x5b8>)
 8018122:	4853      	ldr	r0, [pc, #332]	; (8018270 <tcp_write+0x5b0>)
 8018124:	f004 fd50 	bl	801cbc8 <iprintf>
      prev_seg->next = seg;
 8018128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801812a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801812c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801812e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018130:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8018132:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018136:	8b3b      	ldrh	r3, [r7, #24]
 8018138:	4413      	add	r3, r2
 801813a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801813e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018142:	88fb      	ldrh	r3, [r7, #6]
 8018144:	429a      	cmp	r2, r3
 8018146:	f4ff af3d 	bcc.w	8017fc4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801814a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801814c:	2b00      	cmp	r3, #0
 801814e:	d02c      	beq.n	80181aa <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8018150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018152:	685b      	ldr	r3, [r3, #4]
 8018154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018156:	e01e      	b.n	8018196 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8018158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801815a:	891a      	ldrh	r2, [r3, #8]
 801815c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801815e:	4413      	add	r3, r2
 8018160:	b29a      	uxth	r2, r3
 8018162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018164:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8018166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d110      	bne.n	8018190 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018174:	8952      	ldrh	r2, [r2, #10]
 8018176:	4413      	add	r3, r2
 8018178:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801817a:	68b9      	ldr	r1, [r7, #8]
 801817c:	4618      	mov	r0, r3
 801817e:	f004 fd10 	bl	801cba2 <memcpy>
        p->len += oversize_used;
 8018182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018184:	895a      	ldrh	r2, [r3, #10]
 8018186:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018188:	4413      	add	r3, r2
 801818a:	b29a      	uxth	r2, r3
 801818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801818e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018198:	2b00      	cmp	r3, #0
 801819a:	d1dd      	bne.n	8018158 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 801819c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801819e:	891a      	ldrh	r2, [r3, #8]
 80181a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80181a2:	4413      	add	r3, r2
 80181a4:	b29a      	uxth	r2, r3
 80181a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181a8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80181aa:	8a7a      	ldrh	r2, [r7, #18]
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80181b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181b4:	2b00      	cmp	r3, #0
 80181b6:	d018      	beq.n	80181ea <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80181b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d106      	bne.n	80181cc <tcp_write+0x50c>
 80181be:	4b2a      	ldr	r3, [pc, #168]	; (8018268 <tcp_write+0x5a8>)
 80181c0:	f240 22e1 	movw	r2, #737	; 0x2e1
 80181c4:	492d      	ldr	r1, [pc, #180]	; (801827c <tcp_write+0x5bc>)
 80181c6:	482a      	ldr	r0, [pc, #168]	; (8018270 <tcp_write+0x5b0>)
 80181c8:	f004 fcfe 	bl	801cbc8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80181cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181ce:	685b      	ldr	r3, [r3, #4]
 80181d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80181d2:	4618      	mov	r0, r3
 80181d4:	f7fa ff7e 	bl	80130d4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80181d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181da:	891a      	ldrh	r2, [r3, #8]
 80181dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181de:	891b      	ldrh	r3, [r3, #8]
 80181e0:	4413      	add	r3, r2
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181e6:	811a      	strh	r2, [r3, #8]
 80181e8:	e037      	b.n	801825a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 80181ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d034      	beq.n	801825a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80181f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181f2:	2b00      	cmp	r3, #0
 80181f4:	d003      	beq.n	80181fe <tcp_write+0x53e>
 80181f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80181f8:	685b      	ldr	r3, [r3, #4]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d106      	bne.n	801820c <tcp_write+0x54c>
 80181fe:	4b1a      	ldr	r3, [pc, #104]	; (8018268 <tcp_write+0x5a8>)
 8018200:	f240 22e7 	movw	r2, #743	; 0x2e7
 8018204:	491e      	ldr	r1, [pc, #120]	; (8018280 <tcp_write+0x5c0>)
 8018206:	481a      	ldr	r0, [pc, #104]	; (8018270 <tcp_write+0x5b0>)
 8018208:	f004 fcde 	bl	801cbc8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801820c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801820e:	685b      	ldr	r3, [r3, #4]
 8018210:	62bb      	str	r3, [r7, #40]	; 0x28
 8018212:	e009      	b.n	8018228 <tcp_write+0x568>
      p->tot_len += extendlen;
 8018214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018216:	891a      	ldrh	r2, [r3, #8]
 8018218:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801821a:	4413      	add	r3, r2
 801821c:	b29a      	uxth	r2, r3
 801821e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018220:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8018222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	62bb      	str	r3, [r7, #40]	; 0x28
 8018228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d1f1      	bne.n	8018214 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8018230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018232:	891a      	ldrh	r2, [r3, #8]
 8018234:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018236:	4413      	add	r3, r2
 8018238:	b29a      	uxth	r2, r3
 801823a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801823c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018240:	895a      	ldrh	r2, [r3, #10]
 8018242:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018244:	4413      	add	r3, r2
 8018246:	b29a      	uxth	r2, r3
 8018248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801824a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801824c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801824e:	891a      	ldrh	r2, [r3, #8]
 8018250:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018252:	4413      	add	r3, r2
 8018254:	b29a      	uxth	r2, r3
 8018256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018258:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801825a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801825c:	2b00      	cmp	r3, #0
 801825e:	d111      	bne.n	8018284 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8018260:	68fb      	ldr	r3, [r7, #12]
 8018262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018264:	66da      	str	r2, [r3, #108]	; 0x6c
 8018266:	e010      	b.n	801828a <tcp_write+0x5ca>
 8018268:	0801fd10 	.word	0x0801fd10
 801826c:	0801ffb0 	.word	0x0801ffb0
 8018270:	0801fd64 	.word	0x0801fd64
 8018274:	0801fff0 	.word	0x0801fff0
 8018278:	08020000 	.word	0x08020000
 801827c:	08020014 	.word	0x08020014
 8018280:	0802004c 	.word	0x0802004c
  } else {
    last_unsent->next = queue;
 8018284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8018288:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801828e:	88fb      	ldrh	r3, [r7, #6]
 8018290:	441a      	add	r2, r3
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801829c:	88fb      	ldrh	r3, [r7, #6]
 801829e:	1ad3      	subs	r3, r2, r3
 80182a0:	b29a      	uxth	r2, r3
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80182ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d00e      	beq.n	80182da <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 80182bc:	68fb      	ldr	r3, [r7, #12]
 80182be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d10a      	bne.n	80182da <tcp_write+0x61a>
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d106      	bne.n	80182da <tcp_write+0x61a>
 80182cc:	4b2c      	ldr	r3, [pc, #176]	; (8018380 <tcp_write+0x6c0>)
 80182ce:	f240 3213 	movw	r2, #787	; 0x313
 80182d2:	492c      	ldr	r1, [pc, #176]	; (8018384 <tcp_write+0x6c4>)
 80182d4:	482c      	ldr	r0, [pc, #176]	; (8018388 <tcp_write+0x6c8>)
 80182d6:	f004 fc77 	bl	801cbc8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80182da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d016      	beq.n	801830e <tcp_write+0x64e>
 80182e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182e2:	68db      	ldr	r3, [r3, #12]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d012      	beq.n	801830e <tcp_write+0x64e>
 80182e8:	797b      	ldrb	r3, [r7, #5]
 80182ea:	f003 0302 	and.w	r3, r3, #2
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d10d      	bne.n	801830e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80182f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80182f4:	68db      	ldr	r3, [r3, #12]
 80182f6:	899b      	ldrh	r3, [r3, #12]
 80182f8:	b29c      	uxth	r4, r3
 80182fa:	2008      	movs	r0, #8
 80182fc:	f7f9 f8ba 	bl	8011474 <lwip_htons>
 8018300:	4603      	mov	r3, r0
 8018302:	461a      	mov	r2, r3
 8018304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018306:	68db      	ldr	r3, [r3, #12]
 8018308:	4322      	orrs	r2, r4
 801830a:	b292      	uxth	r2, r2
 801830c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801830e:	2300      	movs	r3, #0
 8018310:	e031      	b.n	8018376 <tcp_write+0x6b6>
          goto memerr;
 8018312:	bf00      	nop
 8018314:	e006      	b.n	8018324 <tcp_write+0x664>
            goto memerr;
 8018316:	bf00      	nop
 8018318:	e004      	b.n	8018324 <tcp_write+0x664>
        goto memerr;
 801831a:	bf00      	nop
 801831c:	e002      	b.n	8018324 <tcp_write+0x664>
        goto memerr;
 801831e:	bf00      	nop
 8018320:	e000      	b.n	8018324 <tcp_write+0x664>
      goto memerr;
 8018322:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	8b5b      	ldrh	r3, [r3, #26]
 8018328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801832c:	b29a      	uxth	r2, r3
 801832e:	68fb      	ldr	r3, [r7, #12]
 8018330:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8018332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018334:	2b00      	cmp	r3, #0
 8018336:	d002      	beq.n	801833e <tcp_write+0x67e>
    pbuf_free(concat_p);
 8018338:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801833a:	f7fa fdfd 	bl	8012f38 <pbuf_free>
  }
  if (queue != NULL) {
 801833e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018340:	2b00      	cmp	r3, #0
 8018342:	d002      	beq.n	801834a <tcp_write+0x68a>
    tcp_segs_free(queue);
 8018344:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8018346:	f7fc fb71 	bl	8014a2c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018350:	2b00      	cmp	r3, #0
 8018352:	d00e      	beq.n	8018372 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018358:	2b00      	cmp	r3, #0
 801835a:	d10a      	bne.n	8018372 <tcp_write+0x6b2>
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018360:	2b00      	cmp	r3, #0
 8018362:	d106      	bne.n	8018372 <tcp_write+0x6b2>
 8018364:	4b06      	ldr	r3, [pc, #24]	; (8018380 <tcp_write+0x6c0>)
 8018366:	f44f 724a 	mov.w	r2, #808	; 0x328
 801836a:	4906      	ldr	r1, [pc, #24]	; (8018384 <tcp_write+0x6c4>)
 801836c:	4806      	ldr	r0, [pc, #24]	; (8018388 <tcp_write+0x6c8>)
 801836e:	f004 fc2b 	bl	801cbc8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018376:	4618      	mov	r0, r3
 8018378:	375c      	adds	r7, #92	; 0x5c
 801837a:	46bd      	mov	sp, r7
 801837c:	bd90      	pop	{r4, r7, pc}
 801837e:	bf00      	nop
 8018380:	0801fd10 	.word	0x0801fd10
 8018384:	08020084 	.word	0x08020084
 8018388:	0801fd64 	.word	0x0801fd64

0801838c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801838c:	b590      	push	{r4, r7, lr}
 801838e:	b08b      	sub	sp, #44	; 0x2c
 8018390:	af02      	add	r7, sp, #8
 8018392:	6078      	str	r0, [r7, #4]
 8018394:	460b      	mov	r3, r1
 8018396:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8018398:	2300      	movs	r3, #0
 801839a:	61fb      	str	r3, [r7, #28]
 801839c:	2300      	movs	r3, #0
 801839e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80183a0:	2300      	movs	r3, #0
 80183a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80183a4:	687b      	ldr	r3, [r7, #4]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d106      	bne.n	80183b8 <tcp_split_unsent_seg+0x2c>
 80183aa:	4b95      	ldr	r3, [pc, #596]	; (8018600 <tcp_split_unsent_seg+0x274>)
 80183ac:	f240 324b 	movw	r2, #843	; 0x34b
 80183b0:	4994      	ldr	r1, [pc, #592]	; (8018604 <tcp_split_unsent_seg+0x278>)
 80183b2:	4895      	ldr	r0, [pc, #596]	; (8018608 <tcp_split_unsent_seg+0x27c>)
 80183b4:	f004 fc08 	bl	801cbc8 <iprintf>

  useg = pcb->unsent;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80183be:	697b      	ldr	r3, [r7, #20]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d102      	bne.n	80183ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80183c4:	f04f 33ff 	mov.w	r3, #4294967295
 80183c8:	e116      	b.n	80185f8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80183ca:	887b      	ldrh	r3, [r7, #2]
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d109      	bne.n	80183e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80183d0:	4b8b      	ldr	r3, [pc, #556]	; (8018600 <tcp_split_unsent_seg+0x274>)
 80183d2:	f240 3253 	movw	r2, #851	; 0x353
 80183d6:	498d      	ldr	r1, [pc, #564]	; (801860c <tcp_split_unsent_seg+0x280>)
 80183d8:	488b      	ldr	r0, [pc, #556]	; (8018608 <tcp_split_unsent_seg+0x27c>)
 80183da:	f004 fbf5 	bl	801cbc8 <iprintf>
    return ERR_VAL;
 80183de:	f06f 0305 	mvn.w	r3, #5
 80183e2:	e109      	b.n	80185f8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	891b      	ldrh	r3, [r3, #8]
 80183e8:	887a      	ldrh	r2, [r7, #2]
 80183ea:	429a      	cmp	r2, r3
 80183ec:	d301      	bcc.n	80183f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80183ee:	2300      	movs	r3, #0
 80183f0:	e102      	b.n	80185f8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80183f6:	887a      	ldrh	r2, [r7, #2]
 80183f8:	429a      	cmp	r2, r3
 80183fa:	d906      	bls.n	801840a <tcp_split_unsent_seg+0x7e>
 80183fc:	4b80      	ldr	r3, [pc, #512]	; (8018600 <tcp_split_unsent_seg+0x274>)
 80183fe:	f240 325b 	movw	r2, #859	; 0x35b
 8018402:	4983      	ldr	r1, [pc, #524]	; (8018610 <tcp_split_unsent_seg+0x284>)
 8018404:	4880      	ldr	r0, [pc, #512]	; (8018608 <tcp_split_unsent_seg+0x27c>)
 8018406:	f004 fbdf 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801840a:	697b      	ldr	r3, [r7, #20]
 801840c:	891b      	ldrh	r3, [r3, #8]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d106      	bne.n	8018420 <tcp_split_unsent_seg+0x94>
 8018412:	4b7b      	ldr	r3, [pc, #492]	; (8018600 <tcp_split_unsent_seg+0x274>)
 8018414:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8018418:	497e      	ldr	r1, [pc, #504]	; (8018614 <tcp_split_unsent_seg+0x288>)
 801841a:	487b      	ldr	r0, [pc, #492]	; (8018608 <tcp_split_unsent_seg+0x27c>)
 801841c:	f004 fbd4 	bl	801cbc8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018420:	697b      	ldr	r3, [r7, #20]
 8018422:	7a9b      	ldrb	r3, [r3, #10]
 8018424:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018426:	7bfb      	ldrb	r3, [r7, #15]
 8018428:	009b      	lsls	r3, r3, #2
 801842a:	b2db      	uxtb	r3, r3
 801842c:	f003 0304 	and.w	r3, r3, #4
 8018430:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018432:	697b      	ldr	r3, [r7, #20]
 8018434:	891a      	ldrh	r2, [r3, #8]
 8018436:	887b      	ldrh	r3, [r7, #2]
 8018438:	1ad3      	subs	r3, r2, r3
 801843a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801843c:	7bbb      	ldrb	r3, [r7, #14]
 801843e:	b29a      	uxth	r2, r3
 8018440:	89bb      	ldrh	r3, [r7, #12]
 8018442:	4413      	add	r3, r2
 8018444:	b29b      	uxth	r3, r3
 8018446:	f44f 7220 	mov.w	r2, #640	; 0x280
 801844a:	4619      	mov	r1, r3
 801844c:	2036      	movs	r0, #54	; 0x36
 801844e:	f7fa fa93 	bl	8012978 <pbuf_alloc>
 8018452:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018454:	693b      	ldr	r3, [r7, #16]
 8018456:	2b00      	cmp	r3, #0
 8018458:	f000 80b7 	beq.w	80185ca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801845c:	697b      	ldr	r3, [r7, #20]
 801845e:	685b      	ldr	r3, [r3, #4]
 8018460:	891a      	ldrh	r2, [r3, #8]
 8018462:	697b      	ldr	r3, [r7, #20]
 8018464:	891b      	ldrh	r3, [r3, #8]
 8018466:	1ad3      	subs	r3, r2, r3
 8018468:	b29a      	uxth	r2, r3
 801846a:	887b      	ldrh	r3, [r7, #2]
 801846c:	4413      	add	r3, r2
 801846e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018470:	697b      	ldr	r3, [r7, #20]
 8018472:	6858      	ldr	r0, [r3, #4]
 8018474:	693b      	ldr	r3, [r7, #16]
 8018476:	685a      	ldr	r2, [r3, #4]
 8018478:	7bbb      	ldrb	r3, [r7, #14]
 801847a:	18d1      	adds	r1, r2, r3
 801847c:	897b      	ldrh	r3, [r7, #10]
 801847e:	89ba      	ldrh	r2, [r7, #12]
 8018480:	f7fa ff50 	bl	8013324 <pbuf_copy_partial>
 8018484:	4603      	mov	r3, r0
 8018486:	461a      	mov	r2, r3
 8018488:	89bb      	ldrh	r3, [r7, #12]
 801848a:	4293      	cmp	r3, r2
 801848c:	f040 809f 	bne.w	80185ce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018490:	697b      	ldr	r3, [r7, #20]
 8018492:	68db      	ldr	r3, [r3, #12]
 8018494:	899b      	ldrh	r3, [r3, #12]
 8018496:	b29b      	uxth	r3, r3
 8018498:	4618      	mov	r0, r3
 801849a:	f7f8 ffeb 	bl	8011474 <lwip_htons>
 801849e:	4603      	mov	r3, r0
 80184a0:	b2db      	uxtb	r3, r3
 80184a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80184a6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80184a8:	2300      	movs	r3, #0
 80184aa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80184ac:	7efb      	ldrb	r3, [r7, #27]
 80184ae:	f003 0308 	and.w	r3, r3, #8
 80184b2:	2b00      	cmp	r3, #0
 80184b4:	d007      	beq.n	80184c6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80184b6:	7efb      	ldrb	r3, [r7, #27]
 80184b8:	f023 0308 	bic.w	r3, r3, #8
 80184bc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80184be:	7ebb      	ldrb	r3, [r7, #26]
 80184c0:	f043 0308 	orr.w	r3, r3, #8
 80184c4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80184c6:	7efb      	ldrb	r3, [r7, #27]
 80184c8:	f003 0301 	and.w	r3, r3, #1
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	d007      	beq.n	80184e0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80184d0:	7efb      	ldrb	r3, [r7, #27]
 80184d2:	f023 0301 	bic.w	r3, r3, #1
 80184d6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80184d8:	7ebb      	ldrb	r3, [r7, #26]
 80184da:	f043 0301 	orr.w	r3, r3, #1
 80184de:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80184e0:	697b      	ldr	r3, [r7, #20]
 80184e2:	68db      	ldr	r3, [r3, #12]
 80184e4:	685b      	ldr	r3, [r3, #4]
 80184e6:	4618      	mov	r0, r3
 80184e8:	f7f8 ffd9 	bl	801149e <lwip_htonl>
 80184ec:	4602      	mov	r2, r0
 80184ee:	887b      	ldrh	r3, [r7, #2]
 80184f0:	18d1      	adds	r1, r2, r3
 80184f2:	7eba      	ldrb	r2, [r7, #26]
 80184f4:	7bfb      	ldrb	r3, [r7, #15]
 80184f6:	9300      	str	r3, [sp, #0]
 80184f8:	460b      	mov	r3, r1
 80184fa:	6939      	ldr	r1, [r7, #16]
 80184fc:	6878      	ldr	r0, [r7, #4]
 80184fe:	f7ff fa4d 	bl	801799c <tcp_create_segment>
 8018502:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018504:	69fb      	ldr	r3, [r7, #28]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d063      	beq.n	80185d2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	685b      	ldr	r3, [r3, #4]
 801850e:	4618      	mov	r0, r3
 8018510:	f7fa fda0 	bl	8013054 <pbuf_clen>
 8018514:	4603      	mov	r3, r0
 8018516:	461a      	mov	r2, r3
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801851e:	1a9b      	subs	r3, r3, r2
 8018520:	b29a      	uxth	r2, r3
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	6858      	ldr	r0, [r3, #4]
 801852c:	697b      	ldr	r3, [r7, #20]
 801852e:	685b      	ldr	r3, [r3, #4]
 8018530:	891a      	ldrh	r2, [r3, #8]
 8018532:	89bb      	ldrh	r3, [r7, #12]
 8018534:	1ad3      	subs	r3, r2, r3
 8018536:	b29b      	uxth	r3, r3
 8018538:	4619      	mov	r1, r3
 801853a:	f7fa fb77 	bl	8012c2c <pbuf_realloc>
  useg->len -= remainder;
 801853e:	697b      	ldr	r3, [r7, #20]
 8018540:	891a      	ldrh	r2, [r3, #8]
 8018542:	89bb      	ldrh	r3, [r7, #12]
 8018544:	1ad3      	subs	r3, r2, r3
 8018546:	b29a      	uxth	r2, r3
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801854c:	697b      	ldr	r3, [r7, #20]
 801854e:	68db      	ldr	r3, [r3, #12]
 8018550:	899b      	ldrh	r3, [r3, #12]
 8018552:	b29c      	uxth	r4, r3
 8018554:	7efb      	ldrb	r3, [r7, #27]
 8018556:	b29b      	uxth	r3, r3
 8018558:	4618      	mov	r0, r3
 801855a:	f7f8 ff8b 	bl	8011474 <lwip_htons>
 801855e:	4603      	mov	r3, r0
 8018560:	461a      	mov	r2, r3
 8018562:	697b      	ldr	r3, [r7, #20]
 8018564:	68db      	ldr	r3, [r3, #12]
 8018566:	4322      	orrs	r2, r4
 8018568:	b292      	uxth	r2, r2
 801856a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801856c:	697b      	ldr	r3, [r7, #20]
 801856e:	685b      	ldr	r3, [r3, #4]
 8018570:	4618      	mov	r0, r3
 8018572:	f7fa fd6f 	bl	8013054 <pbuf_clen>
 8018576:	4603      	mov	r3, r0
 8018578:	461a      	mov	r2, r3
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018580:	4413      	add	r3, r2
 8018582:	b29a      	uxth	r2, r3
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801858a:	69fb      	ldr	r3, [r7, #28]
 801858c:	685b      	ldr	r3, [r3, #4]
 801858e:	4618      	mov	r0, r3
 8018590:	f7fa fd60 	bl	8013054 <pbuf_clen>
 8018594:	4603      	mov	r3, r0
 8018596:	461a      	mov	r2, r3
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801859e:	4413      	add	r3, r2
 80185a0:	b29a      	uxth	r2, r3
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80185a8:	697b      	ldr	r3, [r7, #20]
 80185aa:	681a      	ldr	r2, [r3, #0]
 80185ac:	69fb      	ldr	r3, [r7, #28]
 80185ae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80185b0:	697b      	ldr	r3, [r7, #20]
 80185b2:	69fa      	ldr	r2, [r7, #28]
 80185b4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80185b6:	69fb      	ldr	r3, [r7, #28]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d103      	bne.n	80185c6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	2200      	movs	r2, #0
 80185c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80185c6:	2300      	movs	r3, #0
 80185c8:	e016      	b.n	80185f8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80185ca:	bf00      	nop
 80185cc:	e002      	b.n	80185d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80185ce:	bf00      	nop
 80185d0:	e000      	b.n	80185d4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80185d2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80185d4:	69fb      	ldr	r3, [r7, #28]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d006      	beq.n	80185e8 <tcp_split_unsent_seg+0x25c>
 80185da:	4b09      	ldr	r3, [pc, #36]	; (8018600 <tcp_split_unsent_seg+0x274>)
 80185dc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80185e0:	490d      	ldr	r1, [pc, #52]	; (8018618 <tcp_split_unsent_seg+0x28c>)
 80185e2:	4809      	ldr	r0, [pc, #36]	; (8018608 <tcp_split_unsent_seg+0x27c>)
 80185e4:	f004 faf0 	bl	801cbc8 <iprintf>
  if (p != NULL) {
 80185e8:	693b      	ldr	r3, [r7, #16]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d002      	beq.n	80185f4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80185ee:	6938      	ldr	r0, [r7, #16]
 80185f0:	f7fa fca2 	bl	8012f38 <pbuf_free>
  }

  return ERR_MEM;
 80185f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80185f8:	4618      	mov	r0, r3
 80185fa:	3724      	adds	r7, #36	; 0x24
 80185fc:	46bd      	mov	sp, r7
 80185fe:	bd90      	pop	{r4, r7, pc}
 8018600:	0801fd10 	.word	0x0801fd10
 8018604:	080200a4 	.word	0x080200a4
 8018608:	0801fd64 	.word	0x0801fd64
 801860c:	080200c8 	.word	0x080200c8
 8018610:	080200ec 	.word	0x080200ec
 8018614:	080200fc 	.word	0x080200fc
 8018618:	0802010c 	.word	0x0802010c

0801861c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801861c:	b590      	push	{r4, r7, lr}
 801861e:	b085      	sub	sp, #20
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d106      	bne.n	8018638 <tcp_send_fin+0x1c>
 801862a:	4b21      	ldr	r3, [pc, #132]	; (80186b0 <tcp_send_fin+0x94>)
 801862c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8018630:	4920      	ldr	r1, [pc, #128]	; (80186b4 <tcp_send_fin+0x98>)
 8018632:	4821      	ldr	r0, [pc, #132]	; (80186b8 <tcp_send_fin+0x9c>)
 8018634:	f004 fac8 	bl	801cbc8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801863c:	2b00      	cmp	r3, #0
 801863e:	d02e      	beq.n	801869e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018644:	60fb      	str	r3, [r7, #12]
 8018646:	e002      	b.n	801864e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801864e:	68fb      	ldr	r3, [r7, #12]
 8018650:	681b      	ldr	r3, [r3, #0]
 8018652:	2b00      	cmp	r3, #0
 8018654:	d1f8      	bne.n	8018648 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	68db      	ldr	r3, [r3, #12]
 801865a:	899b      	ldrh	r3, [r3, #12]
 801865c:	b29b      	uxth	r3, r3
 801865e:	4618      	mov	r0, r3
 8018660:	f7f8 ff08 	bl	8011474 <lwip_htons>
 8018664:	4603      	mov	r3, r0
 8018666:	b2db      	uxtb	r3, r3
 8018668:	f003 0307 	and.w	r3, r3, #7
 801866c:	2b00      	cmp	r3, #0
 801866e:	d116      	bne.n	801869e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	68db      	ldr	r3, [r3, #12]
 8018674:	899b      	ldrh	r3, [r3, #12]
 8018676:	b29c      	uxth	r4, r3
 8018678:	2001      	movs	r0, #1
 801867a:	f7f8 fefb 	bl	8011474 <lwip_htons>
 801867e:	4603      	mov	r3, r0
 8018680:	461a      	mov	r2, r3
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	4322      	orrs	r2, r4
 8018688:	b292      	uxth	r2, r2
 801868a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	8b5b      	ldrh	r3, [r3, #26]
 8018690:	f043 0320 	orr.w	r3, r3, #32
 8018694:	b29a      	uxth	r2, r3
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801869a:	2300      	movs	r3, #0
 801869c:	e004      	b.n	80186a8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801869e:	2101      	movs	r1, #1
 80186a0:	6878      	ldr	r0, [r7, #4]
 80186a2:	f000 f80b 	bl	80186bc <tcp_enqueue_flags>
 80186a6:	4603      	mov	r3, r0
}
 80186a8:	4618      	mov	r0, r3
 80186aa:	3714      	adds	r7, #20
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd90      	pop	{r4, r7, pc}
 80186b0:	0801fd10 	.word	0x0801fd10
 80186b4:	08020118 	.word	0x08020118
 80186b8:	0801fd64 	.word	0x0801fd64

080186bc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80186bc:	b580      	push	{r7, lr}
 80186be:	b08a      	sub	sp, #40	; 0x28
 80186c0:	af02      	add	r7, sp, #8
 80186c2:	6078      	str	r0, [r7, #4]
 80186c4:	460b      	mov	r3, r1
 80186c6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80186c8:	2300      	movs	r3, #0
 80186ca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80186cc:	2300      	movs	r3, #0
 80186ce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80186d0:	78fb      	ldrb	r3, [r7, #3]
 80186d2:	f003 0303 	and.w	r3, r3, #3
 80186d6:	2b00      	cmp	r3, #0
 80186d8:	d106      	bne.n	80186e8 <tcp_enqueue_flags+0x2c>
 80186da:	4b67      	ldr	r3, [pc, #412]	; (8018878 <tcp_enqueue_flags+0x1bc>)
 80186dc:	f240 4212 	movw	r2, #1042	; 0x412
 80186e0:	4966      	ldr	r1, [pc, #408]	; (801887c <tcp_enqueue_flags+0x1c0>)
 80186e2:	4867      	ldr	r0, [pc, #412]	; (8018880 <tcp_enqueue_flags+0x1c4>)
 80186e4:	f004 fa70 	bl	801cbc8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d106      	bne.n	80186fc <tcp_enqueue_flags+0x40>
 80186ee:	4b62      	ldr	r3, [pc, #392]	; (8018878 <tcp_enqueue_flags+0x1bc>)
 80186f0:	f240 4213 	movw	r2, #1043	; 0x413
 80186f4:	4963      	ldr	r1, [pc, #396]	; (8018884 <tcp_enqueue_flags+0x1c8>)
 80186f6:	4862      	ldr	r0, [pc, #392]	; (8018880 <tcp_enqueue_flags+0x1c4>)
 80186f8:	f004 fa66 	bl	801cbc8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80186fc:	78fb      	ldrb	r3, [r7, #3]
 80186fe:	f003 0302 	and.w	r3, r3, #2
 8018702:	2b00      	cmp	r3, #0
 8018704:	d001      	beq.n	801870a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018706:	2301      	movs	r3, #1
 8018708:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801870a:	7ffb      	ldrb	r3, [r7, #31]
 801870c:	009b      	lsls	r3, r3, #2
 801870e:	b2db      	uxtb	r3, r3
 8018710:	f003 0304 	and.w	r3, r3, #4
 8018714:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018716:	7dfb      	ldrb	r3, [r7, #23]
 8018718:	b29b      	uxth	r3, r3
 801871a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801871e:	4619      	mov	r1, r3
 8018720:	2036      	movs	r0, #54	; 0x36
 8018722:	f7fa f929 	bl	8012978 <pbuf_alloc>
 8018726:	6138      	str	r0, [r7, #16]
 8018728:	693b      	ldr	r3, [r7, #16]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d109      	bne.n	8018742 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	8b5b      	ldrh	r3, [r3, #26]
 8018732:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018736:	b29a      	uxth	r2, r3
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801873c:	f04f 33ff 	mov.w	r3, #4294967295
 8018740:	e095      	b.n	801886e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8018742:	693b      	ldr	r3, [r7, #16]
 8018744:	895a      	ldrh	r2, [r3, #10]
 8018746:	7dfb      	ldrb	r3, [r7, #23]
 8018748:	b29b      	uxth	r3, r3
 801874a:	429a      	cmp	r2, r3
 801874c:	d206      	bcs.n	801875c <tcp_enqueue_flags+0xa0>
 801874e:	4b4a      	ldr	r3, [pc, #296]	; (8018878 <tcp_enqueue_flags+0x1bc>)
 8018750:	f240 423a 	movw	r2, #1082	; 0x43a
 8018754:	494c      	ldr	r1, [pc, #304]	; (8018888 <tcp_enqueue_flags+0x1cc>)
 8018756:	484a      	ldr	r0, [pc, #296]	; (8018880 <tcp_enqueue_flags+0x1c4>)
 8018758:	f004 fa36 	bl	801cbc8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8018760:	78fa      	ldrb	r2, [r7, #3]
 8018762:	7ffb      	ldrb	r3, [r7, #31]
 8018764:	9300      	str	r3, [sp, #0]
 8018766:	460b      	mov	r3, r1
 8018768:	6939      	ldr	r1, [r7, #16]
 801876a:	6878      	ldr	r0, [r7, #4]
 801876c:	f7ff f916 	bl	801799c <tcp_create_segment>
 8018770:	60f8      	str	r0, [r7, #12]
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	2b00      	cmp	r3, #0
 8018776:	d109      	bne.n	801878c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	8b5b      	ldrh	r3, [r3, #26]
 801877c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018780:	b29a      	uxth	r2, r3
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8018786:	f04f 33ff 	mov.w	r3, #4294967295
 801878a:	e070      	b.n	801886e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	68db      	ldr	r3, [r3, #12]
 8018790:	f003 0303 	and.w	r3, r3, #3
 8018794:	2b00      	cmp	r3, #0
 8018796:	d006      	beq.n	80187a6 <tcp_enqueue_flags+0xea>
 8018798:	4b37      	ldr	r3, [pc, #220]	; (8018878 <tcp_enqueue_flags+0x1bc>)
 801879a:	f240 4242 	movw	r2, #1090	; 0x442
 801879e:	493b      	ldr	r1, [pc, #236]	; (801888c <tcp_enqueue_flags+0x1d0>)
 80187a0:	4837      	ldr	r0, [pc, #220]	; (8018880 <tcp_enqueue_flags+0x1c4>)
 80187a2:	f004 fa11 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	891b      	ldrh	r3, [r3, #8]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d006      	beq.n	80187bc <tcp_enqueue_flags+0x100>
 80187ae:	4b32      	ldr	r3, [pc, #200]	; (8018878 <tcp_enqueue_flags+0x1bc>)
 80187b0:	f240 4243 	movw	r2, #1091	; 0x443
 80187b4:	4936      	ldr	r1, [pc, #216]	; (8018890 <tcp_enqueue_flags+0x1d4>)
 80187b6:	4832      	ldr	r0, [pc, #200]	; (8018880 <tcp_enqueue_flags+0x1c4>)
 80187b8:	f004 fa06 	bl	801cbc8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d103      	bne.n	80187cc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	68fa      	ldr	r2, [r7, #12]
 80187c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80187ca:	e00d      	b.n	80187e8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187d0:	61bb      	str	r3, [r7, #24]
 80187d2:	e002      	b.n	80187da <tcp_enqueue_flags+0x11e>
 80187d4:	69bb      	ldr	r3, [r7, #24]
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	61bb      	str	r3, [r7, #24]
 80187da:	69bb      	ldr	r3, [r7, #24]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d1f8      	bne.n	80187d4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80187e2:	69bb      	ldr	r3, [r7, #24]
 80187e4:	68fa      	ldr	r2, [r7, #12]
 80187e6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	2200      	movs	r2, #0
 80187ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80187f0:	78fb      	ldrb	r3, [r7, #3]
 80187f2:	f003 0302 	and.w	r3, r3, #2
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d104      	bne.n	8018804 <tcp_enqueue_flags+0x148>
 80187fa:	78fb      	ldrb	r3, [r7, #3]
 80187fc:	f003 0301 	and.w	r3, r3, #1
 8018800:	2b00      	cmp	r3, #0
 8018802:	d004      	beq.n	801880e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018808:	1c5a      	adds	r2, r3, #1
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801880e:	78fb      	ldrb	r3, [r7, #3]
 8018810:	f003 0301 	and.w	r3, r3, #1
 8018814:	2b00      	cmp	r3, #0
 8018816:	d006      	beq.n	8018826 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	8b5b      	ldrh	r3, [r3, #26]
 801881c:	f043 0320 	orr.w	r3, r3, #32
 8018820:	b29a      	uxth	r2, r3
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	685b      	ldr	r3, [r3, #4]
 801882a:	4618      	mov	r0, r3
 801882c:	f7fa fc12 	bl	8013054 <pbuf_clen>
 8018830:	4603      	mov	r3, r0
 8018832:	461a      	mov	r2, r3
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801883a:	4413      	add	r3, r2
 801883c:	b29a      	uxth	r2, r3
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801884a:	2b00      	cmp	r3, #0
 801884c:	d00e      	beq.n	801886c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018852:	2b00      	cmp	r3, #0
 8018854:	d10a      	bne.n	801886c <tcp_enqueue_flags+0x1b0>
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801885a:	2b00      	cmp	r3, #0
 801885c:	d106      	bne.n	801886c <tcp_enqueue_flags+0x1b0>
 801885e:	4b06      	ldr	r3, [pc, #24]	; (8018878 <tcp_enqueue_flags+0x1bc>)
 8018860:	f240 4266 	movw	r2, #1126	; 0x466
 8018864:	490b      	ldr	r1, [pc, #44]	; (8018894 <tcp_enqueue_flags+0x1d8>)
 8018866:	4806      	ldr	r0, [pc, #24]	; (8018880 <tcp_enqueue_flags+0x1c4>)
 8018868:	f004 f9ae 	bl	801cbc8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801886c:	2300      	movs	r3, #0
}
 801886e:	4618      	mov	r0, r3
 8018870:	3720      	adds	r7, #32
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	0801fd10 	.word	0x0801fd10
 801887c:	08020134 	.word	0x08020134
 8018880:	0801fd64 	.word	0x0801fd64
 8018884:	0802018c 	.word	0x0802018c
 8018888:	080201ac 	.word	0x080201ac
 801888c:	080201e8 	.word	0x080201e8
 8018890:	08020200 	.word	0x08020200
 8018894:	0802022c 	.word	0x0802022c

08018898 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8018898:	b5b0      	push	{r4, r5, r7, lr}
 801889a:	b08a      	sub	sp, #40	; 0x28
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d106      	bne.n	80188b4 <tcp_output+0x1c>
 80188a6:	4ba0      	ldr	r3, [pc, #640]	; (8018b28 <tcp_output+0x290>)
 80188a8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80188ac:	499f      	ldr	r1, [pc, #636]	; (8018b2c <tcp_output+0x294>)
 80188ae:	48a0      	ldr	r0, [pc, #640]	; (8018b30 <tcp_output+0x298>)
 80188b0:	f004 f98a 	bl	801cbc8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	7d1b      	ldrb	r3, [r3, #20]
 80188b8:	2b01      	cmp	r3, #1
 80188ba:	d106      	bne.n	80188ca <tcp_output+0x32>
 80188bc:	4b9a      	ldr	r3, [pc, #616]	; (8018b28 <tcp_output+0x290>)
 80188be:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80188c2:	499c      	ldr	r1, [pc, #624]	; (8018b34 <tcp_output+0x29c>)
 80188c4:	489a      	ldr	r0, [pc, #616]	; (8018b30 <tcp_output+0x298>)
 80188c6:	f004 f97f 	bl	801cbc8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80188ca:	4b9b      	ldr	r3, [pc, #620]	; (8018b38 <tcp_output+0x2a0>)
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	687a      	ldr	r2, [r7, #4]
 80188d0:	429a      	cmp	r2, r3
 80188d2:	d101      	bne.n	80188d8 <tcp_output+0x40>
    return ERR_OK;
 80188d4:	2300      	movs	r3, #0
 80188d6:	e1d2      	b.n	8018c7e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d203      	bcs.n	80188f0 <tcp_output+0x58>
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80188ee:	e002      	b.n	80188f6 <tcp_output+0x5e>
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80188f6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188fc:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80188fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018900:	2b00      	cmp	r3, #0
 8018902:	d10b      	bne.n	801891c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	8b5b      	ldrh	r3, [r3, #26]
 8018908:	f003 0302 	and.w	r3, r3, #2
 801890c:	2b00      	cmp	r3, #0
 801890e:	f000 81a9 	beq.w	8018c64 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8018912:	6878      	ldr	r0, [r7, #4]
 8018914:	f000 fdfa 	bl	801950c <tcp_send_empty_ack>
 8018918:	4603      	mov	r3, r0
 801891a:	e1b0      	b.n	8018c7e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801891c:	6879      	ldr	r1, [r7, #4]
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	3304      	adds	r3, #4
 8018922:	461a      	mov	r2, r3
 8018924:	6878      	ldr	r0, [r7, #4]
 8018926:	f7ff f81d 	bl	8017964 <tcp_route>
 801892a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801892c:	697b      	ldr	r3, [r7, #20]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d102      	bne.n	8018938 <tcp_output+0xa0>
    return ERR_RTE;
 8018932:	f06f 0303 	mvn.w	r3, #3
 8018936:	e1a2      	b.n	8018c7e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8018938:	687b      	ldr	r3, [r7, #4]
 801893a:	2b00      	cmp	r3, #0
 801893c:	d003      	beq.n	8018946 <tcp_output+0xae>
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	2b00      	cmp	r3, #0
 8018944:	d111      	bne.n	801896a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8018946:	697b      	ldr	r3, [r7, #20]
 8018948:	2b00      	cmp	r3, #0
 801894a:	d002      	beq.n	8018952 <tcp_output+0xba>
 801894c:	697b      	ldr	r3, [r7, #20]
 801894e:	3304      	adds	r3, #4
 8018950:	e000      	b.n	8018954 <tcp_output+0xbc>
 8018952:	2300      	movs	r3, #0
 8018954:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8018956:	693b      	ldr	r3, [r7, #16]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d102      	bne.n	8018962 <tcp_output+0xca>
      return ERR_RTE;
 801895c:	f06f 0303 	mvn.w	r3, #3
 8018960:	e18d      	b.n	8018c7e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8018962:	693b      	ldr	r3, [r7, #16]
 8018964:	681a      	ldr	r2, [r3, #0]
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801896c:	68db      	ldr	r3, [r3, #12]
 801896e:	685b      	ldr	r3, [r3, #4]
 8018970:	4618      	mov	r0, r3
 8018972:	f7f8 fd94 	bl	801149e <lwip_htonl>
 8018976:	4602      	mov	r2, r0
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801897c:	1ad3      	subs	r3, r2, r3
 801897e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018980:	8912      	ldrh	r2, [r2, #8]
 8018982:	4413      	add	r3, r2
 8018984:	69ba      	ldr	r2, [r7, #24]
 8018986:	429a      	cmp	r2, r3
 8018988:	d227      	bcs.n	80189da <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018990:	461a      	mov	r2, r3
 8018992:	69bb      	ldr	r3, [r7, #24]
 8018994:	4293      	cmp	r3, r2
 8018996:	d114      	bne.n	80189c2 <tcp_output+0x12a>
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801899c:	2b00      	cmp	r3, #0
 801899e:	d110      	bne.n	80189c2 <tcp_output+0x12a>
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	d10b      	bne.n	80189c2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	2200      	movs	r2, #0
 80189ae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	2201      	movs	r2, #1
 80189b6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80189ba:	687b      	ldr	r3, [r7, #4]
 80189bc:	2200      	movs	r2, #0
 80189be:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	8b5b      	ldrh	r3, [r3, #26]
 80189c6:	f003 0302 	and.w	r3, r3, #2
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	f000 814c 	beq.w	8018c68 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f000 fd9b 	bl	801950c <tcp_send_empty_ack>
 80189d6:	4603      	mov	r3, r0
 80189d8:	e151      	b.n	8018c7e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	2200      	movs	r2, #0
 80189de:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80189e6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80189e8:	6a3b      	ldr	r3, [r7, #32]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	f000 811b 	beq.w	8018c26 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 80189f0:	e002      	b.n	80189f8 <tcp_output+0x160>
 80189f2:	6a3b      	ldr	r3, [r7, #32]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	623b      	str	r3, [r7, #32]
 80189f8:	6a3b      	ldr	r3, [r7, #32]
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	2b00      	cmp	r3, #0
 80189fe:	d1f8      	bne.n	80189f2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018a00:	e111      	b.n	8018c26 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a04:	68db      	ldr	r3, [r3, #12]
 8018a06:	899b      	ldrh	r3, [r3, #12]
 8018a08:	b29b      	uxth	r3, r3
 8018a0a:	4618      	mov	r0, r3
 8018a0c:	f7f8 fd32 	bl	8011474 <lwip_htons>
 8018a10:	4603      	mov	r3, r0
 8018a12:	b2db      	uxtb	r3, r3
 8018a14:	f003 0304 	and.w	r3, r3, #4
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d006      	beq.n	8018a2a <tcp_output+0x192>
 8018a1c:	4b42      	ldr	r3, [pc, #264]	; (8018b28 <tcp_output+0x290>)
 8018a1e:	f240 5237 	movw	r2, #1335	; 0x537
 8018a22:	4946      	ldr	r1, [pc, #280]	; (8018b3c <tcp_output+0x2a4>)
 8018a24:	4842      	ldr	r0, [pc, #264]	; (8018b30 <tcp_output+0x298>)
 8018a26:	f004 f8cf 	bl	801cbc8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d01f      	beq.n	8018a72 <tcp_output+0x1da>
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	8b5b      	ldrh	r3, [r3, #26]
 8018a36:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d119      	bne.n	8018a72 <tcp_output+0x1da>
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d00b      	beq.n	8018a5e <tcp_output+0x1c6>
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d110      	bne.n	8018a72 <tcp_output+0x1da>
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018a54:	891a      	ldrh	r2, [r3, #8]
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018a5a:	429a      	cmp	r2, r3
 8018a5c:	d209      	bcs.n	8018a72 <tcp_output+0x1da>
 8018a5e:	687b      	ldr	r3, [r7, #4]
 8018a60:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d004      	beq.n	8018a72 <tcp_output+0x1da>
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018a6e:	2b08      	cmp	r3, #8
 8018a70:	d901      	bls.n	8018a76 <tcp_output+0x1de>
 8018a72:	2301      	movs	r3, #1
 8018a74:	e000      	b.n	8018a78 <tcp_output+0x1e0>
 8018a76:	2300      	movs	r3, #0
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d106      	bne.n	8018a8a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018a7c:	687b      	ldr	r3, [r7, #4]
 8018a7e:	8b5b      	ldrh	r3, [r3, #26]
 8018a80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	f000 80e3 	beq.w	8018c50 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	7d1b      	ldrb	r3, [r3, #20]
 8018a8e:	2b02      	cmp	r3, #2
 8018a90:	d00d      	beq.n	8018aae <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8018a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a94:	68db      	ldr	r3, [r3, #12]
 8018a96:	899b      	ldrh	r3, [r3, #12]
 8018a98:	b29c      	uxth	r4, r3
 8018a9a:	2010      	movs	r0, #16
 8018a9c:	f7f8 fcea 	bl	8011474 <lwip_htons>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	461a      	mov	r2, r3
 8018aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aa6:	68db      	ldr	r3, [r3, #12]
 8018aa8:	4322      	orrs	r2, r4
 8018aaa:	b292      	uxth	r2, r2
 8018aac:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018aae:	697a      	ldr	r2, [r7, #20]
 8018ab0:	6879      	ldr	r1, [r7, #4]
 8018ab2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ab4:	f000 f908 	bl	8018cc8 <tcp_output_segment>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d009      	beq.n	8018ad8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	8b5b      	ldrh	r3, [r3, #26]
 8018ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018acc:	b29a      	uxth	r2, r3
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	835a      	strh	r2, [r3, #26]
      return err;
 8018ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018ad6:	e0d2      	b.n	8018c7e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ada:	681a      	ldr	r2, [r3, #0]
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	7d1b      	ldrb	r3, [r3, #20]
 8018ae4:	2b02      	cmp	r3, #2
 8018ae6:	d006      	beq.n	8018af6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	8b5b      	ldrh	r3, [r3, #26]
 8018aec:	f023 0303 	bic.w	r3, r3, #3
 8018af0:	b29a      	uxth	r2, r3
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018af8:	68db      	ldr	r3, [r3, #12]
 8018afa:	685b      	ldr	r3, [r3, #4]
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7f8 fcce 	bl	801149e <lwip_htonl>
 8018b02:	4604      	mov	r4, r0
 8018b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b06:	891b      	ldrh	r3, [r3, #8]
 8018b08:	461d      	mov	r5, r3
 8018b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	899b      	ldrh	r3, [r3, #12]
 8018b10:	b29b      	uxth	r3, r3
 8018b12:	4618      	mov	r0, r3
 8018b14:	f7f8 fcae 	bl	8011474 <lwip_htons>
 8018b18:	4603      	mov	r3, r0
 8018b1a:	b2db      	uxtb	r3, r3
 8018b1c:	f003 0303 	and.w	r3, r3, #3
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d00d      	beq.n	8018b40 <tcp_output+0x2a8>
 8018b24:	2301      	movs	r3, #1
 8018b26:	e00c      	b.n	8018b42 <tcp_output+0x2aa>
 8018b28:	0801fd10 	.word	0x0801fd10
 8018b2c:	08020254 	.word	0x08020254
 8018b30:	0801fd64 	.word	0x0801fd64
 8018b34:	0802026c 	.word	0x0802026c
 8018b38:	2000bdc8 	.word	0x2000bdc8
 8018b3c:	08020294 	.word	0x08020294
 8018b40:	2300      	movs	r3, #0
 8018b42:	442b      	add	r3, r5
 8018b44:	4423      	add	r3, r4
 8018b46:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b4c:	68bb      	ldr	r3, [r7, #8]
 8018b4e:	1ad3      	subs	r3, r2, r3
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	da02      	bge.n	8018b5a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	68ba      	ldr	r2, [r7, #8]
 8018b58:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8018b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b5c:	891b      	ldrh	r3, [r3, #8]
 8018b5e:	461c      	mov	r4, r3
 8018b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b62:	68db      	ldr	r3, [r3, #12]
 8018b64:	899b      	ldrh	r3, [r3, #12]
 8018b66:	b29b      	uxth	r3, r3
 8018b68:	4618      	mov	r0, r3
 8018b6a:	f7f8 fc83 	bl	8011474 <lwip_htons>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	f003 0303 	and.w	r3, r3, #3
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d001      	beq.n	8018b7e <tcp_output+0x2e6>
 8018b7a:	2301      	movs	r3, #1
 8018b7c:	e000      	b.n	8018b80 <tcp_output+0x2e8>
 8018b7e:	2300      	movs	r3, #0
 8018b80:	4423      	add	r3, r4
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d049      	beq.n	8018c1a <tcp_output+0x382>
      seg->next = NULL;
 8018b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b88:	2200      	movs	r2, #0
 8018b8a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018b8c:	687b      	ldr	r3, [r7, #4]
 8018b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d105      	bne.n	8018ba0 <tcp_output+0x308>
        pcb->unacked = seg;
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b98:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b9c:	623b      	str	r3, [r7, #32]
 8018b9e:	e03f      	b.n	8018c20 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ba2:	68db      	ldr	r3, [r3, #12]
 8018ba4:	685b      	ldr	r3, [r3, #4]
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7f8 fc79 	bl	801149e <lwip_htonl>
 8018bac:	4604      	mov	r4, r0
 8018bae:	6a3b      	ldr	r3, [r7, #32]
 8018bb0:	68db      	ldr	r3, [r3, #12]
 8018bb2:	685b      	ldr	r3, [r3, #4]
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	f7f8 fc72 	bl	801149e <lwip_htonl>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	1ae3      	subs	r3, r4, r3
 8018bbe:	2b00      	cmp	r3, #0
 8018bc0:	da24      	bge.n	8018c0c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	3370      	adds	r3, #112	; 0x70
 8018bc6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018bc8:	e002      	b.n	8018bd0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018bca:	69fb      	ldr	r3, [r7, #28]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018bd0:	69fb      	ldr	r3, [r7, #28]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d011      	beq.n	8018bfc <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018bd8:	69fb      	ldr	r3, [r7, #28]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	68db      	ldr	r3, [r3, #12]
 8018bde:	685b      	ldr	r3, [r3, #4]
 8018be0:	4618      	mov	r0, r3
 8018be2:	f7f8 fc5c 	bl	801149e <lwip_htonl>
 8018be6:	4604      	mov	r4, r0
 8018be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bea:	68db      	ldr	r3, [r3, #12]
 8018bec:	685b      	ldr	r3, [r3, #4]
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7f8 fc55 	bl	801149e <lwip_htonl>
 8018bf4:	4603      	mov	r3, r0
 8018bf6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	dbe6      	blt.n	8018bca <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8018bfc:	69fb      	ldr	r3, [r7, #28]
 8018bfe:	681a      	ldr	r2, [r3, #0]
 8018c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c02:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018c04:	69fb      	ldr	r3, [r7, #28]
 8018c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c08:	601a      	str	r2, [r3, #0]
 8018c0a:	e009      	b.n	8018c20 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018c0c:	6a3b      	ldr	r3, [r7, #32]
 8018c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c10:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018c12:	6a3b      	ldr	r3, [r7, #32]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	623b      	str	r3, [r7, #32]
 8018c18:	e002      	b.n	8018c20 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018c1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018c1c:	f7fb ff1a 	bl	8014a54 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c24:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8018c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d012      	beq.n	8018c52 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c2e:	68db      	ldr	r3, [r3, #12]
 8018c30:	685b      	ldr	r3, [r3, #4]
 8018c32:	4618      	mov	r0, r3
 8018c34:	f7f8 fc33 	bl	801149e <lwip_htonl>
 8018c38:	4602      	mov	r2, r0
 8018c3a:	687b      	ldr	r3, [r7, #4]
 8018c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c3e:	1ad3      	subs	r3, r2, r3
 8018c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c42:	8912      	ldrh	r2, [r2, #8]
 8018c44:	4413      	add	r3, r2
  while (seg != NULL &&
 8018c46:	69ba      	ldr	r2, [r7, #24]
 8018c48:	429a      	cmp	r2, r3
 8018c4a:	f4bf aeda 	bcs.w	8018a02 <tcp_output+0x16a>
 8018c4e:	e000      	b.n	8018c52 <tcp_output+0x3ba>
      break;
 8018c50:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d108      	bne.n	8018c6c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	2200      	movs	r2, #0
 8018c5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018c62:	e004      	b.n	8018c6e <tcp_output+0x3d6>
    goto output_done;
 8018c64:	bf00      	nop
 8018c66:	e002      	b.n	8018c6e <tcp_output+0x3d6>
    goto output_done;
 8018c68:	bf00      	nop
 8018c6a:	e000      	b.n	8018c6e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018c6c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	8b5b      	ldrh	r3, [r3, #26]
 8018c72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018c76:	b29a      	uxth	r2, r3
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018c7c:	2300      	movs	r3, #0
}
 8018c7e:	4618      	mov	r0, r3
 8018c80:	3728      	adds	r7, #40	; 0x28
 8018c82:	46bd      	mov	sp, r7
 8018c84:	bdb0      	pop	{r4, r5, r7, pc}
 8018c86:	bf00      	nop

08018c88 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d106      	bne.n	8018ca4 <tcp_output_segment_busy+0x1c>
 8018c96:	4b09      	ldr	r3, [pc, #36]	; (8018cbc <tcp_output_segment_busy+0x34>)
 8018c98:	f240 529a 	movw	r2, #1434	; 0x59a
 8018c9c:	4908      	ldr	r1, [pc, #32]	; (8018cc0 <tcp_output_segment_busy+0x38>)
 8018c9e:	4809      	ldr	r0, [pc, #36]	; (8018cc4 <tcp_output_segment_busy+0x3c>)
 8018ca0:	f003 ff92 	bl	801cbc8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	685b      	ldr	r3, [r3, #4]
 8018ca8:	7b9b      	ldrb	r3, [r3, #14]
 8018caa:	2b01      	cmp	r3, #1
 8018cac:	d001      	beq.n	8018cb2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018cae:	2301      	movs	r3, #1
 8018cb0:	e000      	b.n	8018cb4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018cb2:	2300      	movs	r3, #0
}
 8018cb4:	4618      	mov	r0, r3
 8018cb6:	3708      	adds	r7, #8
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}
 8018cbc:	0801fd10 	.word	0x0801fd10
 8018cc0:	080202ac 	.word	0x080202ac
 8018cc4:	0801fd64 	.word	0x0801fd64

08018cc8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018cc8:	b5b0      	push	{r4, r5, r7, lr}
 8018cca:	b08c      	sub	sp, #48	; 0x30
 8018ccc:	af04      	add	r7, sp, #16
 8018cce:	60f8      	str	r0, [r7, #12]
 8018cd0:	60b9      	str	r1, [r7, #8]
 8018cd2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d106      	bne.n	8018ce8 <tcp_output_segment+0x20>
 8018cda:	4b6d      	ldr	r3, [pc, #436]	; (8018e90 <tcp_output_segment+0x1c8>)
 8018cdc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018ce0:	496c      	ldr	r1, [pc, #432]	; (8018e94 <tcp_output_segment+0x1cc>)
 8018ce2:	486d      	ldr	r0, [pc, #436]	; (8018e98 <tcp_output_segment+0x1d0>)
 8018ce4:	f003 ff70 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018ce8:	68bb      	ldr	r3, [r7, #8]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d106      	bne.n	8018cfc <tcp_output_segment+0x34>
 8018cee:	4b68      	ldr	r3, [pc, #416]	; (8018e90 <tcp_output_segment+0x1c8>)
 8018cf0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018cf4:	4969      	ldr	r1, [pc, #420]	; (8018e9c <tcp_output_segment+0x1d4>)
 8018cf6:	4868      	ldr	r0, [pc, #416]	; (8018e98 <tcp_output_segment+0x1d0>)
 8018cf8:	f003 ff66 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d106      	bne.n	8018d10 <tcp_output_segment+0x48>
 8018d02:	4b63      	ldr	r3, [pc, #396]	; (8018e90 <tcp_output_segment+0x1c8>)
 8018d04:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018d08:	4965      	ldr	r1, [pc, #404]	; (8018ea0 <tcp_output_segment+0x1d8>)
 8018d0a:	4863      	ldr	r0, [pc, #396]	; (8018e98 <tcp_output_segment+0x1d0>)
 8018d0c:	f003 ff5c 	bl	801cbc8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018d10:	68f8      	ldr	r0, [r7, #12]
 8018d12:	f7ff ffb9 	bl	8018c88 <tcp_output_segment_busy>
 8018d16:	4603      	mov	r3, r0
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	d001      	beq.n	8018d20 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	e0b2      	b.n	8018e86 <tcp_output_segment+0x1be>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018d20:	68bb      	ldr	r3, [r7, #8]
 8018d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	68dc      	ldr	r4, [r3, #12]
 8018d28:	4610      	mov	r0, r2
 8018d2a:	f7f8 fbb8 	bl	801149e <lwip_htonl>
 8018d2e:	4603      	mov	r3, r0
 8018d30:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018d32:	68bb      	ldr	r3, [r7, #8]
 8018d34:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	68dc      	ldr	r4, [r3, #12]
 8018d3a:	4610      	mov	r0, r2
 8018d3c:	f7f8 fb9a 	bl	8011474 <lwip_htons>
 8018d40:	4603      	mov	r3, r0
 8018d42:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018d44:	68bb      	ldr	r3, [r7, #8]
 8018d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d48:	68ba      	ldr	r2, [r7, #8]
 8018d4a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018d4c:	441a      	add	r2, r3
 8018d4e:	68bb      	ldr	r3, [r7, #8]
 8018d50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	68db      	ldr	r3, [r3, #12]
 8018d56:	3314      	adds	r3, #20
 8018d58:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	7a9b      	ldrb	r3, [r3, #10]
 8018d5e:	f003 0301 	and.w	r3, r3, #1
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d015      	beq.n	8018d92 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018d66:	68bb      	ldr	r3, [r7, #8]
 8018d68:	3304      	adds	r3, #4
 8018d6a:	461a      	mov	r2, r3
 8018d6c:	6879      	ldr	r1, [r7, #4]
 8018d6e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018d72:	f7fc fa33 	bl	80151dc <tcp_eff_send_mss_netif>
 8018d76:	4603      	mov	r3, r0
 8018d78:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018d7a:	8b7b      	ldrh	r3, [r7, #26]
 8018d7c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018d80:	4618      	mov	r0, r3
 8018d82:	f7f8 fb8c 	bl	801149e <lwip_htonl>
 8018d86:	4602      	mov	r2, r0
 8018d88:	69fb      	ldr	r3, [r7, #28]
 8018d8a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018d8c:	69fb      	ldr	r3, [r7, #28]
 8018d8e:	3304      	adds	r3, #4
 8018d90:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	da02      	bge.n	8018da2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018d9c:	68bb      	ldr	r3, [r7, #8]
 8018d9e:	2200      	movs	r2, #0
 8018da0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018da2:	68bb      	ldr	r3, [r7, #8]
 8018da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d10c      	bne.n	8018dc4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018daa:	4b3e      	ldr	r3, [pc, #248]	; (8018ea4 <tcp_output_segment+0x1dc>)
 8018dac:	681a      	ldr	r2, [r3, #0]
 8018dae:	68bb      	ldr	r3, [r7, #8]
 8018db0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	68db      	ldr	r3, [r3, #12]
 8018db6:	685b      	ldr	r3, [r3, #4]
 8018db8:	4618      	mov	r0, r3
 8018dba:	f7f8 fb70 	bl	801149e <lwip_htonl>
 8018dbe:	4602      	mov	r2, r0
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	68db      	ldr	r3, [r3, #12]
 8018dc8:	461a      	mov	r2, r3
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	685b      	ldr	r3, [r3, #4]
 8018dce:	685b      	ldr	r3, [r3, #4]
 8018dd0:	1ad3      	subs	r3, r2, r3
 8018dd2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	685b      	ldr	r3, [r3, #4]
 8018dd8:	8959      	ldrh	r1, [r3, #10]
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	685b      	ldr	r3, [r3, #4]
 8018dde:	8b3a      	ldrh	r2, [r7, #24]
 8018de0:	1a8a      	subs	r2, r1, r2
 8018de2:	b292      	uxth	r2, r2
 8018de4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	685b      	ldr	r3, [r3, #4]
 8018dea:	8919      	ldrh	r1, [r3, #8]
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	685b      	ldr	r3, [r3, #4]
 8018df0:	8b3a      	ldrh	r2, [r7, #24]
 8018df2:	1a8a      	subs	r2, r1, r2
 8018df4:	b292      	uxth	r2, r2
 8018df6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018df8:	68fb      	ldr	r3, [r7, #12]
 8018dfa:	685b      	ldr	r3, [r3, #4]
 8018dfc:	68fa      	ldr	r2, [r7, #12]
 8018dfe:	68d2      	ldr	r2, [r2, #12]
 8018e00:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	68db      	ldr	r3, [r3, #12]
 8018e06:	2200      	movs	r2, #0
 8018e08:	741a      	strb	r2, [r3, #16]
 8018e0a:	2200      	movs	r2, #0
 8018e0c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	68db      	ldr	r3, [r3, #12]
 8018e12:	f103 0214 	add.w	r2, r3, #20
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	7a9b      	ldrb	r3, [r3, #10]
 8018e1a:	009b      	lsls	r3, r3, #2
 8018e1c:	f003 0304 	and.w	r3, r3, #4
 8018e20:	4413      	add	r3, r2
 8018e22:	69fa      	ldr	r2, [r7, #28]
 8018e24:	429a      	cmp	r2, r3
 8018e26:	d006      	beq.n	8018e36 <tcp_output_segment+0x16e>
 8018e28:	4b19      	ldr	r3, [pc, #100]	; (8018e90 <tcp_output_segment+0x1c8>)
 8018e2a:	f240 621c 	movw	r2, #1564	; 0x61c
 8018e2e:	491e      	ldr	r1, [pc, #120]	; (8018ea8 <tcp_output_segment+0x1e0>)
 8018e30:	4819      	ldr	r0, [pc, #100]	; (8018e98 <tcp_output_segment+0x1d0>)
 8018e32:	f003 fec9 	bl	801cbc8 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018e3e:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8018e40:	68bd      	ldr	r5, [r7, #8]
 8018e42:	68bb      	ldr	r3, [r7, #8]
 8018e44:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8018e46:	68fa      	ldr	r2, [r7, #12]
 8018e48:	68d4      	ldr	r4, [r2, #12]
 8018e4a:	9300      	str	r3, [sp, #0]
 8018e4c:	462b      	mov	r3, r5
 8018e4e:	460a      	mov	r2, r1
 8018e50:	2106      	movs	r1, #6
 8018e52:	f7f8 fc41 	bl	80116d8 <ip_chksum_pseudo>
 8018e56:	4603      	mov	r3, r0
 8018e58:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	6858      	ldr	r0, [r3, #4]
 8018e5e:	68b9      	ldr	r1, [r7, #8]
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	1d1c      	adds	r4, r3, #4
 8018e64:	68bb      	ldr	r3, [r7, #8]
 8018e66:	7add      	ldrb	r5, [r3, #11]
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	7a9b      	ldrb	r3, [r3, #10]
 8018e6c:	687a      	ldr	r2, [r7, #4]
 8018e6e:	9202      	str	r2, [sp, #8]
 8018e70:	2206      	movs	r2, #6
 8018e72:	9201      	str	r2, [sp, #4]
 8018e74:	9300      	str	r3, [sp, #0]
 8018e76:	462b      	mov	r3, r5
 8018e78:	4622      	mov	r2, r4
 8018e7a:	f002 fc59 	bl	801b730 <ip4_output_if>
 8018e7e:	4603      	mov	r3, r0
 8018e80:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018e86:	4618      	mov	r0, r3
 8018e88:	3720      	adds	r7, #32
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8018e8e:	bf00      	nop
 8018e90:	0801fd10 	.word	0x0801fd10
 8018e94:	080202d4 	.word	0x080202d4
 8018e98:	0801fd64 	.word	0x0801fd64
 8018e9c:	080202f4 	.word	0x080202f4
 8018ea0:	08020314 	.word	0x08020314
 8018ea4:	2000bdb8 	.word	0x2000bdb8
 8018ea8:	08020338 	.word	0x08020338

08018eac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018eac:	b5b0      	push	{r4, r5, r7, lr}
 8018eae:	b084      	sub	sp, #16
 8018eb0:	af00      	add	r7, sp, #0
 8018eb2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d106      	bne.n	8018ec8 <tcp_rexmit_rto_prepare+0x1c>
 8018eba:	4b31      	ldr	r3, [pc, #196]	; (8018f80 <tcp_rexmit_rto_prepare+0xd4>)
 8018ebc:	f240 6263 	movw	r2, #1635	; 0x663
 8018ec0:	4930      	ldr	r1, [pc, #192]	; (8018f84 <tcp_rexmit_rto_prepare+0xd8>)
 8018ec2:	4831      	ldr	r0, [pc, #196]	; (8018f88 <tcp_rexmit_rto_prepare+0xdc>)
 8018ec4:	f003 fe80 	bl	801cbc8 <iprintf>

  if (pcb->unacked == NULL) {
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d102      	bne.n	8018ed6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018ed0:	f06f 0305 	mvn.w	r3, #5
 8018ed4:	e050      	b.n	8018f78 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018eda:	60fb      	str	r3, [r7, #12]
 8018edc:	e00b      	b.n	8018ef6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018ede:	68f8      	ldr	r0, [r7, #12]
 8018ee0:	f7ff fed2 	bl	8018c88 <tcp_output_segment_busy>
 8018ee4:	4603      	mov	r3, r0
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d002      	beq.n	8018ef0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018eea:	f06f 0305 	mvn.w	r3, #5
 8018eee:	e043      	b.n	8018f78 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018ef0:	68fb      	ldr	r3, [r7, #12]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	60fb      	str	r3, [r7, #12]
 8018ef6:	68fb      	ldr	r3, [r7, #12]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d1ef      	bne.n	8018ede <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018efe:	68f8      	ldr	r0, [r7, #12]
 8018f00:	f7ff fec2 	bl	8018c88 <tcp_output_segment_busy>
 8018f04:	4603      	mov	r3, r0
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d002      	beq.n	8018f10 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018f0a:	f06f 0305 	mvn.w	r3, #5
 8018f0e:	e033      	b.n	8018f78 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018f14:	68fb      	ldr	r3, [r7, #12]
 8018f16:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	2200      	movs	r2, #0
 8018f24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	8b5b      	ldrh	r3, [r3, #26]
 8018f2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018f2e:	b29a      	uxth	r2, r3
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	68db      	ldr	r3, [r3, #12]
 8018f38:	685b      	ldr	r3, [r3, #4]
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	f7f8 faaf 	bl	801149e <lwip_htonl>
 8018f40:	4604      	mov	r4, r0
 8018f42:	68fb      	ldr	r3, [r7, #12]
 8018f44:	891b      	ldrh	r3, [r3, #8]
 8018f46:	461d      	mov	r5, r3
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	68db      	ldr	r3, [r3, #12]
 8018f4c:	899b      	ldrh	r3, [r3, #12]
 8018f4e:	b29b      	uxth	r3, r3
 8018f50:	4618      	mov	r0, r3
 8018f52:	f7f8 fa8f 	bl	8011474 <lwip_htons>
 8018f56:	4603      	mov	r3, r0
 8018f58:	b2db      	uxtb	r3, r3
 8018f5a:	f003 0303 	and.w	r3, r3, #3
 8018f5e:	2b00      	cmp	r3, #0
 8018f60:	d001      	beq.n	8018f66 <tcp_rexmit_rto_prepare+0xba>
 8018f62:	2301      	movs	r3, #1
 8018f64:	e000      	b.n	8018f68 <tcp_rexmit_rto_prepare+0xbc>
 8018f66:	2300      	movs	r3, #0
 8018f68:	442b      	add	r3, r5
 8018f6a:	18e2      	adds	r2, r4, r3
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2200      	movs	r2, #0
 8018f74:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018f76:	2300      	movs	r3, #0
}
 8018f78:	4618      	mov	r0, r3
 8018f7a:	3710      	adds	r7, #16
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8018f80:	0801fd10 	.word	0x0801fd10
 8018f84:	0802034c 	.word	0x0802034c
 8018f88:	0801fd64 	.word	0x0801fd64

08018f8c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b082      	sub	sp, #8
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d106      	bne.n	8018fa8 <tcp_rexmit_rto_commit+0x1c>
 8018f9a:	4b0d      	ldr	r3, [pc, #52]	; (8018fd0 <tcp_rexmit_rto_commit+0x44>)
 8018f9c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018fa0:	490c      	ldr	r1, [pc, #48]	; (8018fd4 <tcp_rexmit_rto_commit+0x48>)
 8018fa2:	480d      	ldr	r0, [pc, #52]	; (8018fd8 <tcp_rexmit_rto_commit+0x4c>)
 8018fa4:	f003 fe10 	bl	801cbc8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018fae:	2bff      	cmp	r3, #255	; 0xff
 8018fb0:	d007      	beq.n	8018fc2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018fb8:	3301      	adds	r3, #1
 8018fba:	b2da      	uxtb	r2, r3
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018fc2:	6878      	ldr	r0, [r7, #4]
 8018fc4:	f7ff fc68 	bl	8018898 <tcp_output>
}
 8018fc8:	bf00      	nop
 8018fca:	3708      	adds	r7, #8
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}
 8018fd0:	0801fd10 	.word	0x0801fd10
 8018fd4:	08020370 	.word	0x08020370
 8018fd8:	0801fd64 	.word	0x0801fd64

08018fdc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
 8018fe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d106      	bne.n	8018ff8 <tcp_rexmit_rto+0x1c>
 8018fea:	4b0a      	ldr	r3, [pc, #40]	; (8019014 <tcp_rexmit_rto+0x38>)
 8018fec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018ff0:	4909      	ldr	r1, [pc, #36]	; (8019018 <tcp_rexmit_rto+0x3c>)
 8018ff2:	480a      	ldr	r0, [pc, #40]	; (801901c <tcp_rexmit_rto+0x40>)
 8018ff4:	f003 fde8 	bl	801cbc8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018ff8:	6878      	ldr	r0, [r7, #4]
 8018ffa:	f7ff ff57 	bl	8018eac <tcp_rexmit_rto_prepare>
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	d102      	bne.n	801900a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8019004:	6878      	ldr	r0, [r7, #4]
 8019006:	f7ff ffc1 	bl	8018f8c <tcp_rexmit_rto_commit>
  }
}
 801900a:	bf00      	nop
 801900c:	3708      	adds	r7, #8
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}
 8019012:	bf00      	nop
 8019014:	0801fd10 	.word	0x0801fd10
 8019018:	08020394 	.word	0x08020394
 801901c:	0801fd64 	.word	0x0801fd64

08019020 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8019020:	b590      	push	{r4, r7, lr}
 8019022:	b085      	sub	sp, #20
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d106      	bne.n	801903c <tcp_rexmit+0x1c>
 801902e:	4b2f      	ldr	r3, [pc, #188]	; (80190ec <tcp_rexmit+0xcc>)
 8019030:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8019034:	492e      	ldr	r1, [pc, #184]	; (80190f0 <tcp_rexmit+0xd0>)
 8019036:	482f      	ldr	r0, [pc, #188]	; (80190f4 <tcp_rexmit+0xd4>)
 8019038:	f003 fdc6 	bl	801cbc8 <iprintf>

  if (pcb->unacked == NULL) {
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019040:	2b00      	cmp	r3, #0
 8019042:	d102      	bne.n	801904a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8019044:	f06f 0305 	mvn.w	r3, #5
 8019048:	e04c      	b.n	80190e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801904e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8019050:	68b8      	ldr	r0, [r7, #8]
 8019052:	f7ff fe19 	bl	8018c88 <tcp_output_segment_busy>
 8019056:	4603      	mov	r3, r0
 8019058:	2b00      	cmp	r3, #0
 801905a:	d002      	beq.n	8019062 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801905c:	f06f 0305 	mvn.w	r3, #5
 8019060:	e040      	b.n	80190e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	681a      	ldr	r2, [r3, #0]
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	336c      	adds	r3, #108	; 0x6c
 801906e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019070:	e002      	b.n	8019078 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d011      	beq.n	80190a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019080:	68fb      	ldr	r3, [r7, #12]
 8019082:	681b      	ldr	r3, [r3, #0]
 8019084:	68db      	ldr	r3, [r3, #12]
 8019086:	685b      	ldr	r3, [r3, #4]
 8019088:	4618      	mov	r0, r3
 801908a:	f7f8 fa08 	bl	801149e <lwip_htonl>
 801908e:	4604      	mov	r4, r0
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	68db      	ldr	r3, [r3, #12]
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	4618      	mov	r0, r3
 8019098:	f7f8 fa01 	bl	801149e <lwip_htonl>
 801909c:	4603      	mov	r3, r0
 801909e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	dbe6      	blt.n	8019072 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	681a      	ldr	r2, [r3, #0]
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	68ba      	ldr	r2, [r7, #8]
 80190b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80190b2:	68bb      	ldr	r3, [r7, #8]
 80190b4:	681b      	ldr	r3, [r3, #0]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d103      	bne.n	80190c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	2200      	movs	r2, #0
 80190be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80190c8:	2bff      	cmp	r3, #255	; 0xff
 80190ca:	d007      	beq.n	80190dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80190d2:	3301      	adds	r3, #1
 80190d4:	b2da      	uxtb	r2, r3
 80190d6:	687b      	ldr	r3, [r7, #4]
 80190d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	2200      	movs	r2, #0
 80190e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80190e2:	2300      	movs	r3, #0
}
 80190e4:	4618      	mov	r0, r3
 80190e6:	3714      	adds	r7, #20
 80190e8:	46bd      	mov	sp, r7
 80190ea:	bd90      	pop	{r4, r7, pc}
 80190ec:	0801fd10 	.word	0x0801fd10
 80190f0:	080203b0 	.word	0x080203b0
 80190f4:	0801fd64 	.word	0x0801fd64

080190f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b082      	sub	sp, #8
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8019100:	687b      	ldr	r3, [r7, #4]
 8019102:	2b00      	cmp	r3, #0
 8019104:	d106      	bne.n	8019114 <tcp_rexmit_fast+0x1c>
 8019106:	4b2f      	ldr	r3, [pc, #188]	; (80191c4 <tcp_rexmit_fast+0xcc>)
 8019108:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801910c:	492e      	ldr	r1, [pc, #184]	; (80191c8 <tcp_rexmit_fast+0xd0>)
 801910e:	482f      	ldr	r0, [pc, #188]	; (80191cc <tcp_rexmit_fast+0xd4>)
 8019110:	f003 fd5a 	bl	801cbc8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019118:	2b00      	cmp	r3, #0
 801911a:	d04f      	beq.n	80191bc <tcp_rexmit_fast+0xc4>
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	8b5b      	ldrh	r3, [r3, #26]
 8019120:	f003 0304 	and.w	r3, r3, #4
 8019124:	2b00      	cmp	r3, #0
 8019126:	d149      	bne.n	80191bc <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8019128:	6878      	ldr	r0, [r7, #4]
 801912a:	f7ff ff79 	bl	8019020 <tcp_rexmit>
 801912e:	4603      	mov	r3, r0
 8019130:	2b00      	cmp	r3, #0
 8019132:	d143      	bne.n	80191bc <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019140:	429a      	cmp	r2, r3
 8019142:	d208      	bcs.n	8019156 <tcp_rexmit_fast+0x5e>
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801914a:	2b00      	cmp	r3, #0
 801914c:	da00      	bge.n	8019150 <tcp_rexmit_fast+0x58>
 801914e:	3301      	adds	r3, #1
 8019150:	105b      	asrs	r3, r3, #1
 8019152:	b29b      	uxth	r3, r3
 8019154:	e007      	b.n	8019166 <tcp_rexmit_fast+0x6e>
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801915c:	2b00      	cmp	r3, #0
 801915e:	da00      	bge.n	8019162 <tcp_rexmit_fast+0x6a>
 8019160:	3301      	adds	r3, #1
 8019162:	105b      	asrs	r3, r3, #1
 8019164:	b29b      	uxth	r3, r3
 8019166:	687a      	ldr	r2, [r7, #4]
 8019168:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8019172:	461a      	mov	r2, r3
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019178:	005b      	lsls	r3, r3, #1
 801917a:	429a      	cmp	r2, r3
 801917c:	d206      	bcs.n	801918c <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019182:	005b      	lsls	r3, r3, #1
 8019184:	b29a      	uxth	r2, r3
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019196:	4619      	mov	r1, r3
 8019198:	0049      	lsls	r1, r1, #1
 801919a:	440b      	add	r3, r1
 801919c:	b29b      	uxth	r3, r3
 801919e:	4413      	add	r3, r2
 80191a0:	b29a      	uxth	r2, r3
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	8b5b      	ldrh	r3, [r3, #26]
 80191ac:	f043 0304 	orr.w	r3, r3, #4
 80191b0:	b29a      	uxth	r2, r3
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	2200      	movs	r2, #0
 80191ba:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80191bc:	bf00      	nop
 80191be:	3708      	adds	r7, #8
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	0801fd10 	.word	0x0801fd10
 80191c8:	080203c8 	.word	0x080203c8
 80191cc:	0801fd64 	.word	0x0801fd64

080191d0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80191d0:	b580      	push	{r7, lr}
 80191d2:	b086      	sub	sp, #24
 80191d4:	af00      	add	r7, sp, #0
 80191d6:	60f8      	str	r0, [r7, #12]
 80191d8:	607b      	str	r3, [r7, #4]
 80191da:	460b      	mov	r3, r1
 80191dc:	817b      	strh	r3, [r7, #10]
 80191de:	4613      	mov	r3, r2
 80191e0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80191e2:	897a      	ldrh	r2, [r7, #10]
 80191e4:	893b      	ldrh	r3, [r7, #8]
 80191e6:	4413      	add	r3, r2
 80191e8:	b29b      	uxth	r3, r3
 80191ea:	3314      	adds	r3, #20
 80191ec:	b29b      	uxth	r3, r3
 80191ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80191f2:	4619      	mov	r1, r3
 80191f4:	2022      	movs	r0, #34	; 0x22
 80191f6:	f7f9 fbbf 	bl	8012978 <pbuf_alloc>
 80191fa:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d04e      	beq.n	80192a0 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019202:	697b      	ldr	r3, [r7, #20]
 8019204:	895b      	ldrh	r3, [r3, #10]
 8019206:	461a      	mov	r2, r3
 8019208:	897b      	ldrh	r3, [r7, #10]
 801920a:	3314      	adds	r3, #20
 801920c:	429a      	cmp	r2, r3
 801920e:	da06      	bge.n	801921e <tcp_output_alloc_header_common+0x4e>
 8019210:	4b26      	ldr	r3, [pc, #152]	; (80192ac <tcp_output_alloc_header_common+0xdc>)
 8019212:	f240 7224 	movw	r2, #1828	; 0x724
 8019216:	4926      	ldr	r1, [pc, #152]	; (80192b0 <tcp_output_alloc_header_common+0xe0>)
 8019218:	4826      	ldr	r0, [pc, #152]	; (80192b4 <tcp_output_alloc_header_common+0xe4>)
 801921a:	f003 fcd5 	bl	801cbc8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801921e:	697b      	ldr	r3, [r7, #20]
 8019220:	685b      	ldr	r3, [r3, #4]
 8019222:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019224:	8c3b      	ldrh	r3, [r7, #32]
 8019226:	4618      	mov	r0, r3
 8019228:	f7f8 f924 	bl	8011474 <lwip_htons>
 801922c:	4603      	mov	r3, r0
 801922e:	461a      	mov	r2, r3
 8019230:	693b      	ldr	r3, [r7, #16]
 8019232:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019236:	4618      	mov	r0, r3
 8019238:	f7f8 f91c 	bl	8011474 <lwip_htons>
 801923c:	4603      	mov	r3, r0
 801923e:	461a      	mov	r2, r3
 8019240:	693b      	ldr	r3, [r7, #16]
 8019242:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801924a:	68f8      	ldr	r0, [r7, #12]
 801924c:	f7f8 f927 	bl	801149e <lwip_htonl>
 8019250:	4602      	mov	r2, r0
 8019252:	693b      	ldr	r3, [r7, #16]
 8019254:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8019256:	897b      	ldrh	r3, [r7, #10]
 8019258:	089b      	lsrs	r3, r3, #2
 801925a:	b29b      	uxth	r3, r3
 801925c:	3305      	adds	r3, #5
 801925e:	b29b      	uxth	r3, r3
 8019260:	031b      	lsls	r3, r3, #12
 8019262:	b29a      	uxth	r2, r3
 8019264:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8019268:	b29b      	uxth	r3, r3
 801926a:	4313      	orrs	r3, r2
 801926c:	b29b      	uxth	r3, r3
 801926e:	4618      	mov	r0, r3
 8019270:	f7f8 f900 	bl	8011474 <lwip_htons>
 8019274:	4603      	mov	r3, r0
 8019276:	461a      	mov	r2, r3
 8019278:	693b      	ldr	r3, [r7, #16]
 801927a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801927c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801927e:	4618      	mov	r0, r3
 8019280:	f7f8 f8f8 	bl	8011474 <lwip_htons>
 8019284:	4603      	mov	r3, r0
 8019286:	461a      	mov	r2, r3
 8019288:	693b      	ldr	r3, [r7, #16]
 801928a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	2200      	movs	r2, #0
 8019290:	741a      	strb	r2, [r3, #16]
 8019292:	2200      	movs	r2, #0
 8019294:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8019296:	693b      	ldr	r3, [r7, #16]
 8019298:	2200      	movs	r2, #0
 801929a:	749a      	strb	r2, [r3, #18]
 801929c:	2200      	movs	r2, #0
 801929e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80192a0:	697b      	ldr	r3, [r7, #20]
}
 80192a2:	4618      	mov	r0, r3
 80192a4:	3718      	adds	r7, #24
 80192a6:	46bd      	mov	sp, r7
 80192a8:	bd80      	pop	{r7, pc}
 80192aa:	bf00      	nop
 80192ac:	0801fd10 	.word	0x0801fd10
 80192b0:	080203e8 	.word	0x080203e8
 80192b4:	0801fd64 	.word	0x0801fd64

080192b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80192b8:	b5b0      	push	{r4, r5, r7, lr}
 80192ba:	b08a      	sub	sp, #40	; 0x28
 80192bc:	af04      	add	r7, sp, #16
 80192be:	60f8      	str	r0, [r7, #12]
 80192c0:	607b      	str	r3, [r7, #4]
 80192c2:	460b      	mov	r3, r1
 80192c4:	817b      	strh	r3, [r7, #10]
 80192c6:	4613      	mov	r3, r2
 80192c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	2b00      	cmp	r3, #0
 80192ce:	d106      	bne.n	80192de <tcp_output_alloc_header+0x26>
 80192d0:	4b15      	ldr	r3, [pc, #84]	; (8019328 <tcp_output_alloc_header+0x70>)
 80192d2:	f240 7242 	movw	r2, #1858	; 0x742
 80192d6:	4915      	ldr	r1, [pc, #84]	; (801932c <tcp_output_alloc_header+0x74>)
 80192d8:	4815      	ldr	r0, [pc, #84]	; (8019330 <tcp_output_alloc_header+0x78>)
 80192da:	f003 fc75 	bl	801cbc8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80192e2:	68fb      	ldr	r3, [r7, #12]
 80192e4:	8adb      	ldrh	r3, [r3, #22]
 80192e6:	68fa      	ldr	r2, [r7, #12]
 80192e8:	8b12      	ldrh	r2, [r2, #24]
 80192ea:	68f9      	ldr	r1, [r7, #12]
 80192ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80192ee:	893d      	ldrh	r5, [r7, #8]
 80192f0:	897c      	ldrh	r4, [r7, #10]
 80192f2:	9103      	str	r1, [sp, #12]
 80192f4:	2110      	movs	r1, #16
 80192f6:	9102      	str	r1, [sp, #8]
 80192f8:	9201      	str	r2, [sp, #4]
 80192fa:	9300      	str	r3, [sp, #0]
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	462a      	mov	r2, r5
 8019300:	4621      	mov	r1, r4
 8019302:	f7ff ff65 	bl	80191d0 <tcp_output_alloc_header_common>
 8019306:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019308:	697b      	ldr	r3, [r7, #20]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d006      	beq.n	801931c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019312:	68fa      	ldr	r2, [r7, #12]
 8019314:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019316:	441a      	add	r2, r3
 8019318:	68fb      	ldr	r3, [r7, #12]
 801931a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801931c:	697b      	ldr	r3, [r7, #20]
}
 801931e:	4618      	mov	r0, r3
 8019320:	3718      	adds	r7, #24
 8019322:	46bd      	mov	sp, r7
 8019324:	bdb0      	pop	{r4, r5, r7, pc}
 8019326:	bf00      	nop
 8019328:	0801fd10 	.word	0x0801fd10
 801932c:	08020418 	.word	0x08020418
 8019330:	0801fd64 	.word	0x0801fd64

08019334 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b088      	sub	sp, #32
 8019338:	af00      	add	r7, sp, #0
 801933a:	60f8      	str	r0, [r7, #12]
 801933c:	60b9      	str	r1, [r7, #8]
 801933e:	4611      	mov	r1, r2
 8019340:	461a      	mov	r2, r3
 8019342:	460b      	mov	r3, r1
 8019344:	71fb      	strb	r3, [r7, #7]
 8019346:	4613      	mov	r3, r2
 8019348:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801934a:	2300      	movs	r3, #0
 801934c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801934e:	68bb      	ldr	r3, [r7, #8]
 8019350:	2b00      	cmp	r3, #0
 8019352:	d106      	bne.n	8019362 <tcp_output_fill_options+0x2e>
 8019354:	4b13      	ldr	r3, [pc, #76]	; (80193a4 <tcp_output_fill_options+0x70>)
 8019356:	f240 7256 	movw	r2, #1878	; 0x756
 801935a:	4913      	ldr	r1, [pc, #76]	; (80193a8 <tcp_output_fill_options+0x74>)
 801935c:	4813      	ldr	r0, [pc, #76]	; (80193ac <tcp_output_fill_options+0x78>)
 801935e:	f003 fc33 	bl	801cbc8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8019362:	68bb      	ldr	r3, [r7, #8]
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019368:	69bb      	ldr	r3, [r7, #24]
 801936a:	3314      	adds	r3, #20
 801936c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801936e:	69bb      	ldr	r3, [r7, #24]
 8019370:	f103 0214 	add.w	r2, r3, #20
 8019374:	8bfb      	ldrh	r3, [r7, #30]
 8019376:	009b      	lsls	r3, r3, #2
 8019378:	4619      	mov	r1, r3
 801937a:	79fb      	ldrb	r3, [r7, #7]
 801937c:	009b      	lsls	r3, r3, #2
 801937e:	f003 0304 	and.w	r3, r3, #4
 8019382:	440b      	add	r3, r1
 8019384:	4413      	add	r3, r2
 8019386:	697a      	ldr	r2, [r7, #20]
 8019388:	429a      	cmp	r2, r3
 801938a:	d006      	beq.n	801939a <tcp_output_fill_options+0x66>
 801938c:	4b05      	ldr	r3, [pc, #20]	; (80193a4 <tcp_output_fill_options+0x70>)
 801938e:	f240 7275 	movw	r2, #1909	; 0x775
 8019392:	4907      	ldr	r1, [pc, #28]	; (80193b0 <tcp_output_fill_options+0x7c>)
 8019394:	4805      	ldr	r0, [pc, #20]	; (80193ac <tcp_output_fill_options+0x78>)
 8019396:	f003 fc17 	bl	801cbc8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801939a:	bf00      	nop
 801939c:	3720      	adds	r7, #32
 801939e:	46bd      	mov	sp, r7
 80193a0:	bd80      	pop	{r7, pc}
 80193a2:	bf00      	nop
 80193a4:	0801fd10 	.word	0x0801fd10
 80193a8:	08020440 	.word	0x08020440
 80193ac:	0801fd64 	.word	0x0801fd64
 80193b0:	08020338 	.word	0x08020338

080193b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b08c      	sub	sp, #48	; 0x30
 80193b8:	af04      	add	r7, sp, #16
 80193ba:	60f8      	str	r0, [r7, #12]
 80193bc:	60b9      	str	r1, [r7, #8]
 80193be:	607a      	str	r2, [r7, #4]
 80193c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80193c2:	68bb      	ldr	r3, [r7, #8]
 80193c4:	2b00      	cmp	r3, #0
 80193c6:	d106      	bne.n	80193d6 <tcp_output_control_segment+0x22>
 80193c8:	4b24      	ldr	r3, [pc, #144]	; (801945c <tcp_output_control_segment+0xa8>)
 80193ca:	f240 7287 	movw	r2, #1927	; 0x787
 80193ce:	4924      	ldr	r1, [pc, #144]	; (8019460 <tcp_output_control_segment+0xac>)
 80193d0:	4824      	ldr	r0, [pc, #144]	; (8019464 <tcp_output_control_segment+0xb0>)
 80193d2:	f003 fbf9 	bl	801cbc8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80193d6:	683a      	ldr	r2, [r7, #0]
 80193d8:	6879      	ldr	r1, [r7, #4]
 80193da:	68f8      	ldr	r0, [r7, #12]
 80193dc:	f7fe fac2 	bl	8017964 <tcp_route>
 80193e0:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 80193e2:	69bb      	ldr	r3, [r7, #24]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d102      	bne.n	80193ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80193e8:	23fc      	movs	r3, #252	; 0xfc
 80193ea:	77fb      	strb	r3, [r7, #31]
 80193ec:	e02c      	b.n	8019448 <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80193ee:	68bb      	ldr	r3, [r7, #8]
 80193f0:	685b      	ldr	r3, [r3, #4]
 80193f2:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80193f4:	68bb      	ldr	r3, [r7, #8]
 80193f6:	891a      	ldrh	r2, [r3, #8]
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	9300      	str	r3, [sp, #0]
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	2106      	movs	r1, #6
 8019400:	68b8      	ldr	r0, [r7, #8]
 8019402:	f7f8 f969 	bl	80116d8 <ip_chksum_pseudo>
 8019406:	4603      	mov	r3, r0
 8019408:	461a      	mov	r2, r3
 801940a:	697b      	ldr	r3, [r7, #20]
 801940c:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	2b00      	cmp	r3, #0
 8019412:	d006      	beq.n	8019422 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	7adb      	ldrb	r3, [r3, #11]
 8019418:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801941a:	68fb      	ldr	r3, [r7, #12]
 801941c:	7a9b      	ldrb	r3, [r3, #10]
 801941e:	777b      	strb	r3, [r7, #29]
 8019420:	e003      	b.n	801942a <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8019422:	23ff      	movs	r3, #255	; 0xff
 8019424:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 8019426:	2300      	movs	r3, #0
 8019428:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801942a:	7fba      	ldrb	r2, [r7, #30]
 801942c:	69bb      	ldr	r3, [r7, #24]
 801942e:	9302      	str	r3, [sp, #8]
 8019430:	2306      	movs	r3, #6
 8019432:	9301      	str	r3, [sp, #4]
 8019434:	7f7b      	ldrb	r3, [r7, #29]
 8019436:	9300      	str	r3, [sp, #0]
 8019438:	4613      	mov	r3, r2
 801943a:	683a      	ldr	r2, [r7, #0]
 801943c:	6879      	ldr	r1, [r7, #4]
 801943e:	68b8      	ldr	r0, [r7, #8]
 8019440:	f002 f976 	bl	801b730 <ip4_output_if>
 8019444:	4603      	mov	r3, r0
 8019446:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019448:	68b8      	ldr	r0, [r7, #8]
 801944a:	f7f9 fd75 	bl	8012f38 <pbuf_free>
  return err;
 801944e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019452:	4618      	mov	r0, r3
 8019454:	3720      	adds	r7, #32
 8019456:	46bd      	mov	sp, r7
 8019458:	bd80      	pop	{r7, pc}
 801945a:	bf00      	nop
 801945c:	0801fd10 	.word	0x0801fd10
 8019460:	08020468 	.word	0x08020468
 8019464:	0801fd64 	.word	0x0801fd64

08019468 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019468:	b590      	push	{r4, r7, lr}
 801946a:	b08b      	sub	sp, #44	; 0x2c
 801946c:	af04      	add	r7, sp, #16
 801946e:	60f8      	str	r0, [r7, #12]
 8019470:	60b9      	str	r1, [r7, #8]
 8019472:	607a      	str	r2, [r7, #4]
 8019474:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8019476:	683b      	ldr	r3, [r7, #0]
 8019478:	2b00      	cmp	r3, #0
 801947a:	d106      	bne.n	801948a <tcp_rst+0x22>
 801947c:	4b1f      	ldr	r3, [pc, #124]	; (80194fc <tcp_rst+0x94>)
 801947e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8019482:	491f      	ldr	r1, [pc, #124]	; (8019500 <tcp_rst+0x98>)
 8019484:	481f      	ldr	r0, [pc, #124]	; (8019504 <tcp_rst+0x9c>)
 8019486:	f003 fb9f 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801948a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801948c:	2b00      	cmp	r3, #0
 801948e:	d106      	bne.n	801949e <tcp_rst+0x36>
 8019490:	4b1a      	ldr	r3, [pc, #104]	; (80194fc <tcp_rst+0x94>)
 8019492:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8019496:	491c      	ldr	r1, [pc, #112]	; (8019508 <tcp_rst+0xa0>)
 8019498:	481a      	ldr	r0, [pc, #104]	; (8019504 <tcp_rst+0x9c>)
 801949a:	f003 fb95 	bl	801cbc8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801949e:	2300      	movs	r3, #0
 80194a0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80194a2:	f246 0308 	movw	r3, #24584	; 0x6008
 80194a6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80194a8:	7dfb      	ldrb	r3, [r7, #23]
 80194aa:	b29c      	uxth	r4, r3
 80194ac:	68b8      	ldr	r0, [r7, #8]
 80194ae:	f7f7 fff6 	bl	801149e <lwip_htonl>
 80194b2:	4602      	mov	r2, r0
 80194b4:	8abb      	ldrh	r3, [r7, #20]
 80194b6:	9303      	str	r3, [sp, #12]
 80194b8:	2314      	movs	r3, #20
 80194ba:	9302      	str	r3, [sp, #8]
 80194bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80194be:	9301      	str	r3, [sp, #4]
 80194c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80194c2:	9300      	str	r3, [sp, #0]
 80194c4:	4613      	mov	r3, r2
 80194c6:	2200      	movs	r2, #0
 80194c8:	4621      	mov	r1, r4
 80194ca:	6878      	ldr	r0, [r7, #4]
 80194cc:	f7ff fe80 	bl	80191d0 <tcp_output_alloc_header_common>
 80194d0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d00c      	beq.n	80194f2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80194d8:	7dfb      	ldrb	r3, [r7, #23]
 80194da:	2200      	movs	r2, #0
 80194dc:	6939      	ldr	r1, [r7, #16]
 80194de:	68f8      	ldr	r0, [r7, #12]
 80194e0:	f7ff ff28 	bl	8019334 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80194e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e6:	683a      	ldr	r2, [r7, #0]
 80194e8:	6939      	ldr	r1, [r7, #16]
 80194ea:	68f8      	ldr	r0, [r7, #12]
 80194ec:	f7ff ff62 	bl	80193b4 <tcp_output_control_segment>
 80194f0:	e000      	b.n	80194f4 <tcp_rst+0x8c>
    return;
 80194f2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80194f4:	371c      	adds	r7, #28
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd90      	pop	{r4, r7, pc}
 80194fa:	bf00      	nop
 80194fc:	0801fd10 	.word	0x0801fd10
 8019500:	08020494 	.word	0x08020494
 8019504:	0801fd64 	.word	0x0801fd64
 8019508:	080204b0 	.word	0x080204b0

0801950c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801950c:	b590      	push	{r4, r7, lr}
 801950e:	b087      	sub	sp, #28
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019514:	2300      	movs	r3, #0
 8019516:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019518:	2300      	movs	r3, #0
 801951a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d106      	bne.n	8019530 <tcp_send_empty_ack+0x24>
 8019522:	4b28      	ldr	r3, [pc, #160]	; (80195c4 <tcp_send_empty_ack+0xb8>)
 8019524:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019528:	4927      	ldr	r1, [pc, #156]	; (80195c8 <tcp_send_empty_ack+0xbc>)
 801952a:	4828      	ldr	r0, [pc, #160]	; (80195cc <tcp_send_empty_ack+0xc0>)
 801952c:	f003 fb4c 	bl	801cbc8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019530:	7dfb      	ldrb	r3, [r7, #23]
 8019532:	009b      	lsls	r3, r3, #2
 8019534:	b2db      	uxtb	r3, r3
 8019536:	f003 0304 	and.w	r3, r3, #4
 801953a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801953c:	7d7b      	ldrb	r3, [r7, #21]
 801953e:	b29c      	uxth	r4, r3
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019544:	4618      	mov	r0, r3
 8019546:	f7f7 ffaa 	bl	801149e <lwip_htonl>
 801954a:	4603      	mov	r3, r0
 801954c:	2200      	movs	r2, #0
 801954e:	4621      	mov	r1, r4
 8019550:	6878      	ldr	r0, [r7, #4]
 8019552:	f7ff feb1 	bl	80192b8 <tcp_output_alloc_header>
 8019556:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019558:	693b      	ldr	r3, [r7, #16]
 801955a:	2b00      	cmp	r3, #0
 801955c:	d109      	bne.n	8019572 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	8b5b      	ldrh	r3, [r3, #26]
 8019562:	f043 0303 	orr.w	r3, r3, #3
 8019566:	b29a      	uxth	r2, r3
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801956c:	f06f 0301 	mvn.w	r3, #1
 8019570:	e023      	b.n	80195ba <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8019572:	7dbb      	ldrb	r3, [r7, #22]
 8019574:	7dfa      	ldrb	r2, [r7, #23]
 8019576:	6939      	ldr	r1, [r7, #16]
 8019578:	6878      	ldr	r0, [r7, #4]
 801957a:	f7ff fedb 	bl	8019334 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801957e:	687a      	ldr	r2, [r7, #4]
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	3304      	adds	r3, #4
 8019584:	6939      	ldr	r1, [r7, #16]
 8019586:	6878      	ldr	r0, [r7, #4]
 8019588:	f7ff ff14 	bl	80193b4 <tcp_output_control_segment>
 801958c:	4603      	mov	r3, r0
 801958e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019594:	2b00      	cmp	r3, #0
 8019596:	d007      	beq.n	80195a8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	8b5b      	ldrh	r3, [r3, #26]
 801959c:	f043 0303 	orr.w	r3, r3, #3
 80195a0:	b29a      	uxth	r2, r3
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	835a      	strh	r2, [r3, #26]
 80195a6:	e006      	b.n	80195b6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	8b5b      	ldrh	r3, [r3, #26]
 80195ac:	f023 0303 	bic.w	r3, r3, #3
 80195b0:	b29a      	uxth	r2, r3
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80195b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80195ba:	4618      	mov	r0, r3
 80195bc:	371c      	adds	r7, #28
 80195be:	46bd      	mov	sp, r7
 80195c0:	bd90      	pop	{r4, r7, pc}
 80195c2:	bf00      	nop
 80195c4:	0801fd10 	.word	0x0801fd10
 80195c8:	080204cc 	.word	0x080204cc
 80195cc:	0801fd64 	.word	0x0801fd64

080195d0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80195d0:	b590      	push	{r4, r7, lr}
 80195d2:	b087      	sub	sp, #28
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80195d8:	2300      	movs	r3, #0
 80195da:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d106      	bne.n	80195f0 <tcp_keepalive+0x20>
 80195e2:	4b18      	ldr	r3, [pc, #96]	; (8019644 <tcp_keepalive+0x74>)
 80195e4:	f640 0224 	movw	r2, #2084	; 0x824
 80195e8:	4917      	ldr	r1, [pc, #92]	; (8019648 <tcp_keepalive+0x78>)
 80195ea:	4818      	ldr	r0, [pc, #96]	; (801964c <tcp_keepalive+0x7c>)
 80195ec:	f003 faec 	bl	801cbc8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80195f0:	7dfb      	ldrb	r3, [r7, #23]
 80195f2:	b29c      	uxth	r4, r3
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195f8:	3b01      	subs	r3, #1
 80195fa:	4618      	mov	r0, r3
 80195fc:	f7f7 ff4f 	bl	801149e <lwip_htonl>
 8019600:	4603      	mov	r3, r0
 8019602:	2200      	movs	r2, #0
 8019604:	4621      	mov	r1, r4
 8019606:	6878      	ldr	r0, [r7, #4]
 8019608:	f7ff fe56 	bl	80192b8 <tcp_output_alloc_header>
 801960c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801960e:	693b      	ldr	r3, [r7, #16]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d102      	bne.n	801961a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019614:	f04f 33ff 	mov.w	r3, #4294967295
 8019618:	e010      	b.n	801963c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801961a:	7dfb      	ldrb	r3, [r7, #23]
 801961c:	2200      	movs	r2, #0
 801961e:	6939      	ldr	r1, [r7, #16]
 8019620:	6878      	ldr	r0, [r7, #4]
 8019622:	f7ff fe87 	bl	8019334 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019626:	687a      	ldr	r2, [r7, #4]
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	3304      	adds	r3, #4
 801962c:	6939      	ldr	r1, [r7, #16]
 801962e:	6878      	ldr	r0, [r7, #4]
 8019630:	f7ff fec0 	bl	80193b4 <tcp_output_control_segment>
 8019634:	4603      	mov	r3, r0
 8019636:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019638:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801963c:	4618      	mov	r0, r3
 801963e:	371c      	adds	r7, #28
 8019640:	46bd      	mov	sp, r7
 8019642:	bd90      	pop	{r4, r7, pc}
 8019644:	0801fd10 	.word	0x0801fd10
 8019648:	080204ec 	.word	0x080204ec
 801964c:	0801fd64 	.word	0x0801fd64

08019650 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019650:	b590      	push	{r4, r7, lr}
 8019652:	b08b      	sub	sp, #44	; 0x2c
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019658:	2300      	movs	r3, #0
 801965a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d106      	bne.n	8019672 <tcp_zero_window_probe+0x22>
 8019664:	4b4c      	ldr	r3, [pc, #304]	; (8019798 <tcp_zero_window_probe+0x148>)
 8019666:	f640 024f 	movw	r2, #2127	; 0x84f
 801966a:	494c      	ldr	r1, [pc, #304]	; (801979c <tcp_zero_window_probe+0x14c>)
 801966c:	484c      	ldr	r0, [pc, #304]	; (80197a0 <tcp_zero_window_probe+0x150>)
 801966e:	f003 faab 	bl	801cbc8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019676:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019678:	6a3b      	ldr	r3, [r7, #32]
 801967a:	2b00      	cmp	r3, #0
 801967c:	d101      	bne.n	8019682 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801967e:	2300      	movs	r3, #0
 8019680:	e086      	b.n	8019790 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019688:	2bff      	cmp	r3, #255	; 0xff
 801968a:	d007      	beq.n	801969c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019692:	3301      	adds	r3, #1
 8019694:	b2da      	uxtb	r2, r3
 8019696:	687b      	ldr	r3, [r7, #4]
 8019698:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801969c:	6a3b      	ldr	r3, [r7, #32]
 801969e:	68db      	ldr	r3, [r3, #12]
 80196a0:	899b      	ldrh	r3, [r3, #12]
 80196a2:	b29b      	uxth	r3, r3
 80196a4:	4618      	mov	r0, r3
 80196a6:	f7f7 fee5 	bl	8011474 <lwip_htons>
 80196aa:	4603      	mov	r3, r0
 80196ac:	b2db      	uxtb	r3, r3
 80196ae:	f003 0301 	and.w	r3, r3, #1
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	d005      	beq.n	80196c2 <tcp_zero_window_probe+0x72>
 80196b6:	6a3b      	ldr	r3, [r7, #32]
 80196b8:	891b      	ldrh	r3, [r3, #8]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d101      	bne.n	80196c2 <tcp_zero_window_probe+0x72>
 80196be:	2301      	movs	r3, #1
 80196c0:	e000      	b.n	80196c4 <tcp_zero_window_probe+0x74>
 80196c2:	2300      	movs	r3, #0
 80196c4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80196c6:	7ffb      	ldrb	r3, [r7, #31]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	bf0c      	ite	eq
 80196cc:	2301      	moveq	r3, #1
 80196ce:	2300      	movne	r3, #0
 80196d0:	b2db      	uxtb	r3, r3
 80196d2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80196d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80196d8:	b299      	uxth	r1, r3
 80196da:	6a3b      	ldr	r3, [r7, #32]
 80196dc:	68db      	ldr	r3, [r3, #12]
 80196de:	685b      	ldr	r3, [r3, #4]
 80196e0:	8bba      	ldrh	r2, [r7, #28]
 80196e2:	6878      	ldr	r0, [r7, #4]
 80196e4:	f7ff fde8 	bl	80192b8 <tcp_output_alloc_header>
 80196e8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80196ea:	69bb      	ldr	r3, [r7, #24]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d102      	bne.n	80196f6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80196f0:	f04f 33ff 	mov.w	r3, #4294967295
 80196f4:	e04c      	b.n	8019790 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80196f6:	69bb      	ldr	r3, [r7, #24]
 80196f8:	685b      	ldr	r3, [r3, #4]
 80196fa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80196fc:	7ffb      	ldrb	r3, [r7, #31]
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d011      	beq.n	8019726 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8019702:	697b      	ldr	r3, [r7, #20]
 8019704:	899b      	ldrh	r3, [r3, #12]
 8019706:	b29b      	uxth	r3, r3
 8019708:	b21b      	sxth	r3, r3
 801970a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801970e:	b21c      	sxth	r4, r3
 8019710:	2011      	movs	r0, #17
 8019712:	f7f7 feaf 	bl	8011474 <lwip_htons>
 8019716:	4603      	mov	r3, r0
 8019718:	b21b      	sxth	r3, r3
 801971a:	4323      	orrs	r3, r4
 801971c:	b21b      	sxth	r3, r3
 801971e:	b29a      	uxth	r2, r3
 8019720:	697b      	ldr	r3, [r7, #20]
 8019722:	819a      	strh	r2, [r3, #12]
 8019724:	e010      	b.n	8019748 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019726:	69bb      	ldr	r3, [r7, #24]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	3314      	adds	r3, #20
 801972c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801972e:	6a3b      	ldr	r3, [r7, #32]
 8019730:	6858      	ldr	r0, [r3, #4]
 8019732:	6a3b      	ldr	r3, [r7, #32]
 8019734:	685b      	ldr	r3, [r3, #4]
 8019736:	891a      	ldrh	r2, [r3, #8]
 8019738:	6a3b      	ldr	r3, [r7, #32]
 801973a:	891b      	ldrh	r3, [r3, #8]
 801973c:	1ad3      	subs	r3, r2, r3
 801973e:	b29b      	uxth	r3, r3
 8019740:	2201      	movs	r2, #1
 8019742:	6939      	ldr	r1, [r7, #16]
 8019744:	f7f9 fdee 	bl	8013324 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019748:	6a3b      	ldr	r3, [r7, #32]
 801974a:	68db      	ldr	r3, [r3, #12]
 801974c:	685b      	ldr	r3, [r3, #4]
 801974e:	4618      	mov	r0, r3
 8019750:	f7f7 fea5 	bl	801149e <lwip_htonl>
 8019754:	4603      	mov	r3, r0
 8019756:	3301      	adds	r3, #1
 8019758:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801975e:	68fb      	ldr	r3, [r7, #12]
 8019760:	1ad3      	subs	r3, r2, r3
 8019762:	2b00      	cmp	r3, #0
 8019764:	da02      	bge.n	801976c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	68fa      	ldr	r2, [r7, #12]
 801976a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801976c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019770:	2200      	movs	r2, #0
 8019772:	69b9      	ldr	r1, [r7, #24]
 8019774:	6878      	ldr	r0, [r7, #4]
 8019776:	f7ff fddd 	bl	8019334 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801977a:	687a      	ldr	r2, [r7, #4]
 801977c:	687b      	ldr	r3, [r7, #4]
 801977e:	3304      	adds	r3, #4
 8019780:	69b9      	ldr	r1, [r7, #24]
 8019782:	6878      	ldr	r0, [r7, #4]
 8019784:	f7ff fe16 	bl	80193b4 <tcp_output_control_segment>
 8019788:	4603      	mov	r3, r0
 801978a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801978c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019790:	4618      	mov	r0, r3
 8019792:	372c      	adds	r7, #44	; 0x2c
 8019794:	46bd      	mov	sp, r7
 8019796:	bd90      	pop	{r4, r7, pc}
 8019798:	0801fd10 	.word	0x0801fd10
 801979c:	08020508 	.word	0x08020508
 80197a0:	0801fd64 	.word	0x0801fd64

080197a4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80197a4:	b580      	push	{r7, lr}
 80197a6:	b082      	sub	sp, #8
 80197a8:	af00      	add	r7, sp, #0
 80197aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80197ac:	f7f9 fea8 	bl	8013500 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80197b0:	4b0a      	ldr	r3, [pc, #40]	; (80197dc <tcpip_tcp_timer+0x38>)
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	d103      	bne.n	80197c0 <tcpip_tcp_timer+0x1c>
 80197b8:	4b09      	ldr	r3, [pc, #36]	; (80197e0 <tcpip_tcp_timer+0x3c>)
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d005      	beq.n	80197cc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80197c0:	2200      	movs	r2, #0
 80197c2:	4908      	ldr	r1, [pc, #32]	; (80197e4 <tcpip_tcp_timer+0x40>)
 80197c4:	20fa      	movs	r0, #250	; 0xfa
 80197c6:	f000 f8f1 	bl	80199ac <sys_timeout>
 80197ca:	e002      	b.n	80197d2 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80197cc:	4b06      	ldr	r3, [pc, #24]	; (80197e8 <tcpip_tcp_timer+0x44>)
 80197ce:	2200      	movs	r2, #0
 80197d0:	601a      	str	r2, [r3, #0]
  }
}
 80197d2:	bf00      	nop
 80197d4:	3708      	adds	r7, #8
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bd80      	pop	{r7, pc}
 80197da:	bf00      	nop
 80197dc:	2000bdb4 	.word	0x2000bdb4
 80197e0:	2000bdc4 	.word	0x2000bdc4
 80197e4:	080197a5 	.word	0x080197a5
 80197e8:	20008754 	.word	0x20008754

080197ec <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80197f0:	4b0a      	ldr	r3, [pc, #40]	; (801981c <tcp_timer_needed+0x30>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d10f      	bne.n	8019818 <tcp_timer_needed+0x2c>
 80197f8:	4b09      	ldr	r3, [pc, #36]	; (8019820 <tcp_timer_needed+0x34>)
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d103      	bne.n	8019808 <tcp_timer_needed+0x1c>
 8019800:	4b08      	ldr	r3, [pc, #32]	; (8019824 <tcp_timer_needed+0x38>)
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	2b00      	cmp	r3, #0
 8019806:	d007      	beq.n	8019818 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019808:	4b04      	ldr	r3, [pc, #16]	; (801981c <tcp_timer_needed+0x30>)
 801980a:	2201      	movs	r2, #1
 801980c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801980e:	2200      	movs	r2, #0
 8019810:	4905      	ldr	r1, [pc, #20]	; (8019828 <tcp_timer_needed+0x3c>)
 8019812:	20fa      	movs	r0, #250	; 0xfa
 8019814:	f000 f8ca 	bl	80199ac <sys_timeout>
  }
}
 8019818:	bf00      	nop
 801981a:	bd80      	pop	{r7, pc}
 801981c:	20008754 	.word	0x20008754
 8019820:	2000bdb4 	.word	0x2000bdb4
 8019824:	2000bdc4 	.word	0x2000bdc4
 8019828:	080197a5 	.word	0x080197a5

0801982c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801982c:	b580      	push	{r7, lr}
 801982e:	b086      	sub	sp, #24
 8019830:	af00      	add	r7, sp, #0
 8019832:	60f8      	str	r0, [r7, #12]
 8019834:	60b9      	str	r1, [r7, #8]
 8019836:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019838:	200a      	movs	r0, #10
 801983a:	f7f8 fc67 	bl	801210c <memp_malloc>
 801983e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d109      	bne.n	801985a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019846:	693b      	ldr	r3, [r7, #16]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d151      	bne.n	80198f0 <sys_timeout_abs+0xc4>
 801984c:	4b2a      	ldr	r3, [pc, #168]	; (80198f8 <sys_timeout_abs+0xcc>)
 801984e:	22be      	movs	r2, #190	; 0xbe
 8019850:	492a      	ldr	r1, [pc, #168]	; (80198fc <sys_timeout_abs+0xd0>)
 8019852:	482b      	ldr	r0, [pc, #172]	; (8019900 <sys_timeout_abs+0xd4>)
 8019854:	f003 f9b8 	bl	801cbc8 <iprintf>
    return;
 8019858:	e04a      	b.n	80198f0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801985a:	693b      	ldr	r3, [r7, #16]
 801985c:	2200      	movs	r2, #0
 801985e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019860:	693b      	ldr	r3, [r7, #16]
 8019862:	68ba      	ldr	r2, [r7, #8]
 8019864:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019866:	693b      	ldr	r3, [r7, #16]
 8019868:	687a      	ldr	r2, [r7, #4]
 801986a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801986c:	693b      	ldr	r3, [r7, #16]
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8019872:	4b24      	ldr	r3, [pc, #144]	; (8019904 <sys_timeout_abs+0xd8>)
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d103      	bne.n	8019882 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801987a:	4a22      	ldr	r2, [pc, #136]	; (8019904 <sys_timeout_abs+0xd8>)
 801987c:	693b      	ldr	r3, [r7, #16]
 801987e:	6013      	str	r3, [r2, #0]
    return;
 8019880:	e037      	b.n	80198f2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8019882:	693b      	ldr	r3, [r7, #16]
 8019884:	685a      	ldr	r2, [r3, #4]
 8019886:	4b1f      	ldr	r3, [pc, #124]	; (8019904 <sys_timeout_abs+0xd8>)
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	685b      	ldr	r3, [r3, #4]
 801988c:	1ad3      	subs	r3, r2, r3
 801988e:	0fdb      	lsrs	r3, r3, #31
 8019890:	f003 0301 	and.w	r3, r3, #1
 8019894:	b2db      	uxtb	r3, r3
 8019896:	2b00      	cmp	r3, #0
 8019898:	d007      	beq.n	80198aa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801989a:	4b1a      	ldr	r3, [pc, #104]	; (8019904 <sys_timeout_abs+0xd8>)
 801989c:	681a      	ldr	r2, [r3, #0]
 801989e:	693b      	ldr	r3, [r7, #16]
 80198a0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80198a2:	4a18      	ldr	r2, [pc, #96]	; (8019904 <sys_timeout_abs+0xd8>)
 80198a4:	693b      	ldr	r3, [r7, #16]
 80198a6:	6013      	str	r3, [r2, #0]
 80198a8:	e023      	b.n	80198f2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80198aa:	4b16      	ldr	r3, [pc, #88]	; (8019904 <sys_timeout_abs+0xd8>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	617b      	str	r3, [r7, #20]
 80198b0:	e01a      	b.n	80198e8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80198b2:	697b      	ldr	r3, [r7, #20]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d00b      	beq.n	80198d2 <sys_timeout_abs+0xa6>
 80198ba:	693b      	ldr	r3, [r7, #16]
 80198bc:	685a      	ldr	r2, [r3, #4]
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	681b      	ldr	r3, [r3, #0]
 80198c2:	685b      	ldr	r3, [r3, #4]
 80198c4:	1ad3      	subs	r3, r2, r3
 80198c6:	0fdb      	lsrs	r3, r3, #31
 80198c8:	f003 0301 	and.w	r3, r3, #1
 80198cc:	b2db      	uxtb	r3, r3
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d007      	beq.n	80198e2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80198d2:	697b      	ldr	r3, [r7, #20]
 80198d4:	681a      	ldr	r2, [r3, #0]
 80198d6:	693b      	ldr	r3, [r7, #16]
 80198d8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80198da:	697b      	ldr	r3, [r7, #20]
 80198dc:	693a      	ldr	r2, [r7, #16]
 80198de:	601a      	str	r2, [r3, #0]
        break;
 80198e0:	e007      	b.n	80198f2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80198e2:	697b      	ldr	r3, [r7, #20]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	617b      	str	r3, [r7, #20]
 80198e8:	697b      	ldr	r3, [r7, #20]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d1e1      	bne.n	80198b2 <sys_timeout_abs+0x86>
 80198ee:	e000      	b.n	80198f2 <sys_timeout_abs+0xc6>
    return;
 80198f0:	bf00      	nop
      }
    }
  }
}
 80198f2:	3718      	adds	r7, #24
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	0802052c 	.word	0x0802052c
 80198fc:	08020560 	.word	0x08020560
 8019900:	080205a0 	.word	0x080205a0
 8019904:	2000874c 	.word	0x2000874c

08019908 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b086      	sub	sp, #24
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	685b      	ldr	r3, [r3, #4]
 8019918:	4798      	blx	r3

  now = sys_now();
 801991a:	f7f2 f87b 	bl	800ba14 <sys_now>
 801991e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019920:	697b      	ldr	r3, [r7, #20]
 8019922:	681a      	ldr	r2, [r3, #0]
 8019924:	4b0f      	ldr	r3, [pc, #60]	; (8019964 <lwip_cyclic_timer+0x5c>)
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	4413      	add	r3, r2
 801992a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801992c:	68fa      	ldr	r2, [r7, #12]
 801992e:	693b      	ldr	r3, [r7, #16]
 8019930:	1ad3      	subs	r3, r2, r3
 8019932:	0fdb      	lsrs	r3, r3, #31
 8019934:	f003 0301 	and.w	r3, r3, #1
 8019938:	b2db      	uxtb	r3, r3
 801993a:	2b00      	cmp	r3, #0
 801993c:	d009      	beq.n	8019952 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801993e:	697b      	ldr	r3, [r7, #20]
 8019940:	681a      	ldr	r2, [r3, #0]
 8019942:	693b      	ldr	r3, [r7, #16]
 8019944:	4413      	add	r3, r2
 8019946:	687a      	ldr	r2, [r7, #4]
 8019948:	4907      	ldr	r1, [pc, #28]	; (8019968 <lwip_cyclic_timer+0x60>)
 801994a:	4618      	mov	r0, r3
 801994c:	f7ff ff6e 	bl	801982c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019950:	e004      	b.n	801995c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8019952:	687a      	ldr	r2, [r7, #4]
 8019954:	4904      	ldr	r1, [pc, #16]	; (8019968 <lwip_cyclic_timer+0x60>)
 8019956:	68f8      	ldr	r0, [r7, #12]
 8019958:	f7ff ff68 	bl	801982c <sys_timeout_abs>
}
 801995c:	bf00      	nop
 801995e:	3718      	adds	r7, #24
 8019960:	46bd      	mov	sp, r7
 8019962:	bd80      	pop	{r7, pc}
 8019964:	20008750 	.word	0x20008750
 8019968:	08019909 	.word	0x08019909

0801996c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801996c:	b580      	push	{r7, lr}
 801996e:	b082      	sub	sp, #8
 8019970:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019972:	2301      	movs	r3, #1
 8019974:	607b      	str	r3, [r7, #4]
 8019976:	e00e      	b.n	8019996 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019978:	4a0a      	ldr	r2, [pc, #40]	; (80199a4 <sys_timeouts_init+0x38>)
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	00db      	lsls	r3, r3, #3
 8019984:	4a07      	ldr	r2, [pc, #28]	; (80199a4 <sys_timeouts_init+0x38>)
 8019986:	4413      	add	r3, r2
 8019988:	461a      	mov	r2, r3
 801998a:	4907      	ldr	r1, [pc, #28]	; (80199a8 <sys_timeouts_init+0x3c>)
 801998c:	f000 f80e 	bl	80199ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	3301      	adds	r3, #1
 8019994:	607b      	str	r3, [r7, #4]
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	2b02      	cmp	r3, #2
 801999a:	d9ed      	bls.n	8019978 <sys_timeouts_init+0xc>
  }
}
 801999c:	bf00      	nop
 801999e:	3708      	adds	r7, #8
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}
 80199a4:	08021174 	.word	0x08021174
 80199a8:	08019909 	.word	0x08019909

080199ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b086      	sub	sp, #24
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	60f8      	str	r0, [r7, #12]
 80199b4:	60b9      	str	r1, [r7, #8]
 80199b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80199b8:	68fb      	ldr	r3, [r7, #12]
 80199ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80199be:	d306      	bcc.n	80199ce <sys_timeout+0x22>
 80199c0:	4b0a      	ldr	r3, [pc, #40]	; (80199ec <sys_timeout+0x40>)
 80199c2:	f240 1229 	movw	r2, #297	; 0x129
 80199c6:	490a      	ldr	r1, [pc, #40]	; (80199f0 <sys_timeout+0x44>)
 80199c8:	480a      	ldr	r0, [pc, #40]	; (80199f4 <sys_timeout+0x48>)
 80199ca:	f003 f8fd 	bl	801cbc8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80199ce:	f7f2 f821 	bl	800ba14 <sys_now>
 80199d2:	4602      	mov	r2, r0
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	4413      	add	r3, r2
 80199d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80199da:	687a      	ldr	r2, [r7, #4]
 80199dc:	68b9      	ldr	r1, [r7, #8]
 80199de:	6978      	ldr	r0, [r7, #20]
 80199e0:	f7ff ff24 	bl	801982c <sys_timeout_abs>
#endif
}
 80199e4:	bf00      	nop
 80199e6:	3718      	adds	r7, #24
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}
 80199ec:	0802052c 	.word	0x0802052c
 80199f0:	080205c8 	.word	0x080205c8
 80199f4:	080205a0 	.word	0x080205a0

080199f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80199f8:	b580      	push	{r7, lr}
 80199fa:	b084      	sub	sp, #16
 80199fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80199fe:	f7f2 f809 	bl	800ba14 <sys_now>
 8019a02:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019a04:	4b17      	ldr	r3, [pc, #92]	; (8019a64 <sys_check_timeouts+0x6c>)
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019a0a:	68bb      	ldr	r3, [r7, #8]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d022      	beq.n	8019a56 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019a10:	68bb      	ldr	r3, [r7, #8]
 8019a12:	685b      	ldr	r3, [r3, #4]
 8019a14:	68fa      	ldr	r2, [r7, #12]
 8019a16:	1ad3      	subs	r3, r2, r3
 8019a18:	0fdb      	lsrs	r3, r3, #31
 8019a1a:	f003 0301 	and.w	r3, r3, #1
 8019a1e:	b2db      	uxtb	r3, r3
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d11a      	bne.n	8019a5a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019a24:	68bb      	ldr	r3, [r7, #8]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	4a0e      	ldr	r2, [pc, #56]	; (8019a64 <sys_check_timeouts+0x6c>)
 8019a2a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019a2c:	68bb      	ldr	r3, [r7, #8]
 8019a2e:	689b      	ldr	r3, [r3, #8]
 8019a30:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019a32:	68bb      	ldr	r3, [r7, #8]
 8019a34:	68db      	ldr	r3, [r3, #12]
 8019a36:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019a38:	68bb      	ldr	r3, [r7, #8]
 8019a3a:	685b      	ldr	r3, [r3, #4]
 8019a3c:	4a0a      	ldr	r2, [pc, #40]	; (8019a68 <sys_check_timeouts+0x70>)
 8019a3e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019a40:	68b9      	ldr	r1, [r7, #8]
 8019a42:	200a      	movs	r0, #10
 8019a44:	f7f8 fbd8 	bl	80121f8 <memp_free>
    if (handler != NULL) {
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d0da      	beq.n	8019a04 <sys_check_timeouts+0xc>
      handler(arg);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	6838      	ldr	r0, [r7, #0]
 8019a52:	4798      	blx	r3
  do {
 8019a54:	e7d6      	b.n	8019a04 <sys_check_timeouts+0xc>
      return;
 8019a56:	bf00      	nop
 8019a58:	e000      	b.n	8019a5c <sys_check_timeouts+0x64>
      return;
 8019a5a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019a5c:	3710      	adds	r7, #16
 8019a5e:	46bd      	mov	sp, r7
 8019a60:	bd80      	pop	{r7, pc}
 8019a62:	bf00      	nop
 8019a64:	2000874c 	.word	0x2000874c
 8019a68:	20008750 	.word	0x20008750

08019a6c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b082      	sub	sp, #8
 8019a70:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8019a72:	4b16      	ldr	r3, [pc, #88]	; (8019acc <sys_timeouts_sleeptime+0x60>)
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	2b00      	cmp	r3, #0
 8019a78:	d102      	bne.n	8019a80 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a7e:	e020      	b.n	8019ac2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8019a80:	f7f1 ffc8 	bl	800ba14 <sys_now>
 8019a84:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019a86:	4b11      	ldr	r3, [pc, #68]	; (8019acc <sys_timeouts_sleeptime+0x60>)
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	685a      	ldr	r2, [r3, #4]
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	1ad3      	subs	r3, r2, r3
 8019a90:	0fdb      	lsrs	r3, r3, #31
 8019a92:	f003 0301 	and.w	r3, r3, #1
 8019a96:	b2db      	uxtb	r3, r3
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d001      	beq.n	8019aa0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	e010      	b.n	8019ac2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8019aa0:	4b0a      	ldr	r3, [pc, #40]	; (8019acc <sys_timeouts_sleeptime+0x60>)
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	685a      	ldr	r2, [r3, #4]
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	1ad3      	subs	r3, r2, r3
 8019aaa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8019aac:	683b      	ldr	r3, [r7, #0]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	da06      	bge.n	8019ac0 <sys_timeouts_sleeptime+0x54>
 8019ab2:	4b07      	ldr	r3, [pc, #28]	; (8019ad0 <sys_timeouts_sleeptime+0x64>)
 8019ab4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8019ab8:	4906      	ldr	r1, [pc, #24]	; (8019ad4 <sys_timeouts_sleeptime+0x68>)
 8019aba:	4807      	ldr	r0, [pc, #28]	; (8019ad8 <sys_timeouts_sleeptime+0x6c>)
 8019abc:	f003 f884 	bl	801cbc8 <iprintf>
    return ret;
 8019ac0:	683b      	ldr	r3, [r7, #0]
  }
}
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	3708      	adds	r7, #8
 8019ac6:	46bd      	mov	sp, r7
 8019ac8:	bd80      	pop	{r7, pc}
 8019aca:	bf00      	nop
 8019acc:	2000874c 	.word	0x2000874c
 8019ad0:	0802052c 	.word	0x0802052c
 8019ad4:	08020600 	.word	0x08020600
 8019ad8:	080205a0 	.word	0x080205a0

08019adc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8019adc:	b580      	push	{r7, lr}
 8019ade:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019ae0:	f003 f88a 	bl	801cbf8 <rand>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	b29b      	uxth	r3, r3
 8019ae8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019aec:	b29b      	uxth	r3, r3
 8019aee:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019af2:	b29a      	uxth	r2, r3
 8019af4:	4b01      	ldr	r3, [pc, #4]	; (8019afc <udp_init+0x20>)
 8019af6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019af8:	bf00      	nop
 8019afa:	bd80      	pop	{r7, pc}
 8019afc:	20000030 	.word	0x20000030

08019b00 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019b00:	b480      	push	{r7}
 8019b02:	b083      	sub	sp, #12
 8019b04:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019b06:	2300      	movs	r3, #0
 8019b08:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019b0a:	4b17      	ldr	r3, [pc, #92]	; (8019b68 <udp_new_port+0x68>)
 8019b0c:	881b      	ldrh	r3, [r3, #0]
 8019b0e:	1c5a      	adds	r2, r3, #1
 8019b10:	b291      	uxth	r1, r2
 8019b12:	4a15      	ldr	r2, [pc, #84]	; (8019b68 <udp_new_port+0x68>)
 8019b14:	8011      	strh	r1, [r2, #0]
 8019b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019b1a:	4293      	cmp	r3, r2
 8019b1c:	d103      	bne.n	8019b26 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8019b1e:	4b12      	ldr	r3, [pc, #72]	; (8019b68 <udp_new_port+0x68>)
 8019b20:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019b24:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b26:	4b11      	ldr	r3, [pc, #68]	; (8019b6c <udp_new_port+0x6c>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	603b      	str	r3, [r7, #0]
 8019b2c:	e011      	b.n	8019b52 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8019b2e:	683b      	ldr	r3, [r7, #0]
 8019b30:	8a5a      	ldrh	r2, [r3, #18]
 8019b32:	4b0d      	ldr	r3, [pc, #52]	; (8019b68 <udp_new_port+0x68>)
 8019b34:	881b      	ldrh	r3, [r3, #0]
 8019b36:	429a      	cmp	r2, r3
 8019b38:	d108      	bne.n	8019b4c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019b3a:	88fb      	ldrh	r3, [r7, #6]
 8019b3c:	3301      	adds	r3, #1
 8019b3e:	80fb      	strh	r3, [r7, #6]
 8019b40:	88fb      	ldrh	r3, [r7, #6]
 8019b42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019b46:	d3e0      	bcc.n	8019b0a <udp_new_port+0xa>
        return 0;
 8019b48:	2300      	movs	r3, #0
 8019b4a:	e007      	b.n	8019b5c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	68db      	ldr	r3, [r3, #12]
 8019b50:	603b      	str	r3, [r7, #0]
 8019b52:	683b      	ldr	r3, [r7, #0]
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d1ea      	bne.n	8019b2e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019b58:	4b03      	ldr	r3, [pc, #12]	; (8019b68 <udp_new_port+0x68>)
 8019b5a:	881b      	ldrh	r3, [r3, #0]
}
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	370c      	adds	r7, #12
 8019b60:	46bd      	mov	sp, r7
 8019b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b66:	4770      	bx	lr
 8019b68:	20000030 	.word	0x20000030
 8019b6c:	2000bdcc 	.word	0x2000bdcc

08019b70 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b084      	sub	sp, #16
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	60f8      	str	r0, [r7, #12]
 8019b78:	60b9      	str	r1, [r7, #8]
 8019b7a:	4613      	mov	r3, r2
 8019b7c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d105      	bne.n	8019b90 <udp_input_local_match+0x20>
 8019b84:	4b27      	ldr	r3, [pc, #156]	; (8019c24 <udp_input_local_match+0xb4>)
 8019b86:	2287      	movs	r2, #135	; 0x87
 8019b88:	4927      	ldr	r1, [pc, #156]	; (8019c28 <udp_input_local_match+0xb8>)
 8019b8a:	4828      	ldr	r0, [pc, #160]	; (8019c2c <udp_input_local_match+0xbc>)
 8019b8c:	f003 f81c 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d105      	bne.n	8019ba2 <udp_input_local_match+0x32>
 8019b96:	4b23      	ldr	r3, [pc, #140]	; (8019c24 <udp_input_local_match+0xb4>)
 8019b98:	2288      	movs	r2, #136	; 0x88
 8019b9a:	4925      	ldr	r1, [pc, #148]	; (8019c30 <udp_input_local_match+0xc0>)
 8019b9c:	4823      	ldr	r0, [pc, #140]	; (8019c2c <udp_input_local_match+0xbc>)
 8019b9e:	f003 f813 	bl	801cbc8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019ba2:	68fb      	ldr	r3, [r7, #12]
 8019ba4:	7a1b      	ldrb	r3, [r3, #8]
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d00b      	beq.n	8019bc2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	7a1a      	ldrb	r2, [r3, #8]
 8019bae:	4b21      	ldr	r3, [pc, #132]	; (8019c34 <udp_input_local_match+0xc4>)
 8019bb0:	685b      	ldr	r3, [r3, #4]
 8019bb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8019bba:	429a      	cmp	r2, r3
 8019bbc:	d001      	beq.n	8019bc2 <udp_input_local_match+0x52>
    return 0;
 8019bbe:	2300      	movs	r3, #0
 8019bc0:	e02b      	b.n	8019c1a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8019bc2:	79fb      	ldrb	r3, [r7, #7]
 8019bc4:	2b00      	cmp	r3, #0
 8019bc6:	d018      	beq.n	8019bfa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019bc8:	68fb      	ldr	r3, [r7, #12]
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d013      	beq.n	8019bf6 <udp_input_local_match+0x86>
 8019bce:	68fb      	ldr	r3, [r7, #12]
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	2b00      	cmp	r3, #0
 8019bd4:	d00f      	beq.n	8019bf6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019bd6:	4b17      	ldr	r3, [pc, #92]	; (8019c34 <udp_input_local_match+0xc4>)
 8019bd8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019bde:	d00a      	beq.n	8019bf6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	681a      	ldr	r2, [r3, #0]
 8019be4:	4b13      	ldr	r3, [pc, #76]	; (8019c34 <udp_input_local_match+0xc4>)
 8019be6:	695b      	ldr	r3, [r3, #20]
 8019be8:	405a      	eors	r2, r3
 8019bea:	68bb      	ldr	r3, [r7, #8]
 8019bec:	3308      	adds	r3, #8
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d110      	bne.n	8019c18 <udp_input_local_match+0xa8>
          return 1;
 8019bf6:	2301      	movs	r3, #1
 8019bf8:	e00f      	b.n	8019c1a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d009      	beq.n	8019c14 <udp_input_local_match+0xa4>
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d005      	beq.n	8019c14 <udp_input_local_match+0xa4>
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	681a      	ldr	r2, [r3, #0]
 8019c0c:	4b09      	ldr	r3, [pc, #36]	; (8019c34 <udp_input_local_match+0xc4>)
 8019c0e:	695b      	ldr	r3, [r3, #20]
 8019c10:	429a      	cmp	r2, r3
 8019c12:	d101      	bne.n	8019c18 <udp_input_local_match+0xa8>
        return 1;
 8019c14:	2301      	movs	r3, #1
 8019c16:	e000      	b.n	8019c1a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019c18:	2300      	movs	r3, #0
}
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	3710      	adds	r7, #16
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bd80      	pop	{r7, pc}
 8019c22:	bf00      	nop
 8019c24:	08020614 	.word	0x08020614
 8019c28:	08020644 	.word	0x08020644
 8019c2c:	08020668 	.word	0x08020668
 8019c30:	08020690 	.word	0x08020690
 8019c34:	20008cf4 	.word	0x20008cf4

08019c38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019c38:	b590      	push	{r4, r7, lr}
 8019c3a:	b08d      	sub	sp, #52	; 0x34
 8019c3c:	af02      	add	r7, sp, #8
 8019c3e:	6078      	str	r0, [r7, #4]
 8019c40:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019c42:	2300      	movs	r3, #0
 8019c44:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d105      	bne.n	8019c58 <udp_input+0x20>
 8019c4c:	4b7c      	ldr	r3, [pc, #496]	; (8019e40 <udp_input+0x208>)
 8019c4e:	22cf      	movs	r2, #207	; 0xcf
 8019c50:	497c      	ldr	r1, [pc, #496]	; (8019e44 <udp_input+0x20c>)
 8019c52:	487d      	ldr	r0, [pc, #500]	; (8019e48 <udp_input+0x210>)
 8019c54:	f002 ffb8 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019c58:	683b      	ldr	r3, [r7, #0]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d105      	bne.n	8019c6a <udp_input+0x32>
 8019c5e:	4b78      	ldr	r3, [pc, #480]	; (8019e40 <udp_input+0x208>)
 8019c60:	22d0      	movs	r2, #208	; 0xd0
 8019c62:	497a      	ldr	r1, [pc, #488]	; (8019e4c <udp_input+0x214>)
 8019c64:	4878      	ldr	r0, [pc, #480]	; (8019e48 <udp_input+0x210>)
 8019c66:	f002 ffaf 	bl	801cbc8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	895b      	ldrh	r3, [r3, #10]
 8019c6e:	2b07      	cmp	r3, #7
 8019c70:	d803      	bhi.n	8019c7a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019c72:	6878      	ldr	r0, [r7, #4]
 8019c74:	f7f9 f960 	bl	8012f38 <pbuf_free>
    goto end;
 8019c78:	e0de      	b.n	8019e38 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	685b      	ldr	r3, [r3, #4]
 8019c7e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019c80:	4b73      	ldr	r3, [pc, #460]	; (8019e50 <udp_input+0x218>)
 8019c82:	695a      	ldr	r2, [r3, #20]
 8019c84:	4b72      	ldr	r3, [pc, #456]	; (8019e50 <udp_input+0x218>)
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	4619      	mov	r1, r3
 8019c8a:	4610      	mov	r0, r2
 8019c8c:	f001 fe28 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 8019c90:	4603      	mov	r3, r0
 8019c92:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019c94:	697b      	ldr	r3, [r7, #20]
 8019c96:	881b      	ldrh	r3, [r3, #0]
 8019c98:	b29b      	uxth	r3, r3
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7f7 fbea 	bl	8011474 <lwip_htons>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019ca4:	697b      	ldr	r3, [r7, #20]
 8019ca6:	885b      	ldrh	r3, [r3, #2]
 8019ca8:	b29b      	uxth	r3, r3
 8019caa:	4618      	mov	r0, r3
 8019cac:	f7f7 fbe2 	bl	8011474 <lwip_htons>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019cb8:	2300      	movs	r3, #0
 8019cba:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019cc0:	4b64      	ldr	r3, [pc, #400]	; (8019e54 <udp_input+0x21c>)
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8019cc6:	e054      	b.n	8019d72 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cca:	8a5b      	ldrh	r3, [r3, #18]
 8019ccc:	89fa      	ldrh	r2, [r7, #14]
 8019cce:	429a      	cmp	r2, r3
 8019cd0:	d14a      	bne.n	8019d68 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019cd2:	7cfb      	ldrb	r3, [r7, #19]
 8019cd4:	461a      	mov	r2, r3
 8019cd6:	6839      	ldr	r1, [r7, #0]
 8019cd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cda:	f7ff ff49 	bl	8019b70 <udp_input_local_match>
 8019cde:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d041      	beq.n	8019d68 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ce6:	7c1b      	ldrb	r3, [r3, #16]
 8019ce8:	f003 0304 	and.w	r3, r3, #4
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d11d      	bne.n	8019d2c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019cf0:	69fb      	ldr	r3, [r7, #28]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d102      	bne.n	8019cfc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cf8:	61fb      	str	r3, [r7, #28]
 8019cfa:	e017      	b.n	8019d2c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019cfc:	7cfb      	ldrb	r3, [r7, #19]
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d014      	beq.n	8019d2c <udp_input+0xf4>
 8019d02:	4b53      	ldr	r3, [pc, #332]	; (8019e50 <udp_input+0x218>)
 8019d04:	695b      	ldr	r3, [r3, #20]
 8019d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d0a:	d10f      	bne.n	8019d2c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019d0c:	69fb      	ldr	r3, [r7, #28]
 8019d0e:	681a      	ldr	r2, [r3, #0]
 8019d10:	683b      	ldr	r3, [r7, #0]
 8019d12:	3304      	adds	r3, #4
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	429a      	cmp	r2, r3
 8019d18:	d008      	beq.n	8019d2c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d1c:	681a      	ldr	r2, [r3, #0]
 8019d1e:	683b      	ldr	r3, [r7, #0]
 8019d20:	3304      	adds	r3, #4
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	429a      	cmp	r2, r3
 8019d26:	d101      	bne.n	8019d2c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d2e:	8a9b      	ldrh	r3, [r3, #20]
 8019d30:	8a3a      	ldrh	r2, [r7, #16]
 8019d32:	429a      	cmp	r2, r3
 8019d34:	d118      	bne.n	8019d68 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d38:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d005      	beq.n	8019d4a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d40:	685a      	ldr	r2, [r3, #4]
 8019d42:	4b43      	ldr	r3, [pc, #268]	; (8019e50 <udp_input+0x218>)
 8019d44:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019d46:	429a      	cmp	r2, r3
 8019d48:	d10e      	bne.n	8019d68 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019d4a:	6a3b      	ldr	r3, [r7, #32]
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d014      	beq.n	8019d7a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d52:	68da      	ldr	r2, [r3, #12]
 8019d54:	6a3b      	ldr	r3, [r7, #32]
 8019d56:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019d58:	4b3e      	ldr	r3, [pc, #248]	; (8019e54 <udp_input+0x21c>)
 8019d5a:	681a      	ldr	r2, [r3, #0]
 8019d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d5e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019d60:	4a3c      	ldr	r2, [pc, #240]	; (8019e54 <udp_input+0x21c>)
 8019d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d64:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019d66:	e008      	b.n	8019d7a <udp_input+0x142>
      }
    }

    prev = pcb;
 8019d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d6e:	68db      	ldr	r3, [r3, #12]
 8019d70:	627b      	str	r3, [r7, #36]	; 0x24
 8019d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d1a7      	bne.n	8019cc8 <udp_input+0x90>
 8019d78:	e000      	b.n	8019d7c <udp_input+0x144>
        break;
 8019d7a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d101      	bne.n	8019d86 <udp_input+0x14e>
    pcb = uncon_pcb;
 8019d82:	69fb      	ldr	r3, [r7, #28]
 8019d84:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d002      	beq.n	8019d92 <udp_input+0x15a>
    for_us = 1;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	76fb      	strb	r3, [r7, #27]
 8019d90:	e00a      	b.n	8019da8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	3304      	adds	r3, #4
 8019d96:	681a      	ldr	r2, [r3, #0]
 8019d98:	4b2d      	ldr	r3, [pc, #180]	; (8019e50 <udp_input+0x218>)
 8019d9a:	695b      	ldr	r3, [r3, #20]
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	bf0c      	ite	eq
 8019da0:	2301      	moveq	r3, #1
 8019da2:	2300      	movne	r3, #0
 8019da4:	b2db      	uxtb	r3, r3
 8019da6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019da8:	7efb      	ldrb	r3, [r7, #27]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d041      	beq.n	8019e32 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019dae:	2108      	movs	r1, #8
 8019db0:	6878      	ldr	r0, [r7, #4]
 8019db2:	f7f9 f83b 	bl	8012e2c <pbuf_remove_header>
 8019db6:	4603      	mov	r3, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d00a      	beq.n	8019dd2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019dbc:	4b20      	ldr	r3, [pc, #128]	; (8019e40 <udp_input+0x208>)
 8019dbe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019dc2:	4925      	ldr	r1, [pc, #148]	; (8019e58 <udp_input+0x220>)
 8019dc4:	4820      	ldr	r0, [pc, #128]	; (8019e48 <udp_input+0x210>)
 8019dc6:	f002 feff 	bl	801cbc8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019dca:	6878      	ldr	r0, [r7, #4]
 8019dcc:	f7f9 f8b4 	bl	8012f38 <pbuf_free>
      goto end;
 8019dd0:	e032      	b.n	8019e38 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d012      	beq.n	8019dfe <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dda:	699b      	ldr	r3, [r3, #24]
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d00a      	beq.n	8019df6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de2:	699c      	ldr	r4, [r3, #24]
 8019de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de6:	69d8      	ldr	r0, [r3, #28]
 8019de8:	8a3b      	ldrh	r3, [r7, #16]
 8019dea:	9300      	str	r3, [sp, #0]
 8019dec:	4b1b      	ldr	r3, [pc, #108]	; (8019e5c <udp_input+0x224>)
 8019dee:	687a      	ldr	r2, [r7, #4]
 8019df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019df2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019df4:	e021      	b.n	8019e3a <udp_input+0x202>
        pbuf_free(p);
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	f7f9 f89e 	bl	8012f38 <pbuf_free>
        goto end;
 8019dfc:	e01c      	b.n	8019e38 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019dfe:	7cfb      	ldrb	r3, [r7, #19]
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	d112      	bne.n	8019e2a <udp_input+0x1f2>
 8019e04:	4b12      	ldr	r3, [pc, #72]	; (8019e50 <udp_input+0x218>)
 8019e06:	695b      	ldr	r3, [r3, #20]
 8019e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019e0c:	2be0      	cmp	r3, #224	; 0xe0
 8019e0e:	d00c      	beq.n	8019e2a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019e10:	4b0f      	ldr	r3, [pc, #60]	; (8019e50 <udp_input+0x218>)
 8019e12:	899b      	ldrh	r3, [r3, #12]
 8019e14:	3308      	adds	r3, #8
 8019e16:	b29b      	uxth	r3, r3
 8019e18:	b21b      	sxth	r3, r3
 8019e1a:	4619      	mov	r1, r3
 8019e1c:	6878      	ldr	r0, [r7, #4]
 8019e1e:	f7f9 f878 	bl	8012f12 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019e22:	2103      	movs	r1, #3
 8019e24:	6878      	ldr	r0, [r7, #4]
 8019e26:	f001 fa33 	bl	801b290 <icmp_dest_unreach>
      pbuf_free(p);
 8019e2a:	6878      	ldr	r0, [r7, #4]
 8019e2c:	f7f9 f884 	bl	8012f38 <pbuf_free>
  return;
 8019e30:	e003      	b.n	8019e3a <udp_input+0x202>
    pbuf_free(p);
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f7f9 f880 	bl	8012f38 <pbuf_free>
  return;
 8019e38:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019e3a:	372c      	adds	r7, #44	; 0x2c
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	bd90      	pop	{r4, r7, pc}
 8019e40:	08020614 	.word	0x08020614
 8019e44:	080206b8 	.word	0x080206b8
 8019e48:	08020668 	.word	0x08020668
 8019e4c:	080206d0 	.word	0x080206d0
 8019e50:	20008cf4 	.word	0x20008cf4
 8019e54:	2000bdcc 	.word	0x2000bdcc
 8019e58:	080206ec 	.word	0x080206ec
 8019e5c:	20008d04 	.word	0x20008d04

08019e60 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b086      	sub	sp, #24
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	60f8      	str	r0, [r7, #12]
 8019e68:	60b9      	str	r1, [r7, #8]
 8019e6a:	4613      	mov	r3, r2
 8019e6c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019e6e:	68bb      	ldr	r3, [r7, #8]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d101      	bne.n	8019e78 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019e74:	4b39      	ldr	r3, [pc, #228]	; (8019f5c <udp_bind+0xfc>)
 8019e76:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d109      	bne.n	8019e92 <udp_bind+0x32>
 8019e7e:	4b38      	ldr	r3, [pc, #224]	; (8019f60 <udp_bind+0x100>)
 8019e80:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019e84:	4937      	ldr	r1, [pc, #220]	; (8019f64 <udp_bind+0x104>)
 8019e86:	4838      	ldr	r0, [pc, #224]	; (8019f68 <udp_bind+0x108>)
 8019e88:	f002 fe9e 	bl	801cbc8 <iprintf>
 8019e8c:	f06f 030f 	mvn.w	r3, #15
 8019e90:	e060      	b.n	8019f54 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019e92:	2300      	movs	r3, #0
 8019e94:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019e96:	4b35      	ldr	r3, [pc, #212]	; (8019f6c <udp_bind+0x10c>)
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	617b      	str	r3, [r7, #20]
 8019e9c:	e009      	b.n	8019eb2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019e9e:	68fa      	ldr	r2, [r7, #12]
 8019ea0:	697b      	ldr	r3, [r7, #20]
 8019ea2:	429a      	cmp	r2, r3
 8019ea4:	d102      	bne.n	8019eac <udp_bind+0x4c>
      rebind = 1;
 8019ea6:	2301      	movs	r3, #1
 8019ea8:	74fb      	strb	r3, [r7, #19]
      break;
 8019eaa:	e005      	b.n	8019eb8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019eac:	697b      	ldr	r3, [r7, #20]
 8019eae:	68db      	ldr	r3, [r3, #12]
 8019eb0:	617b      	str	r3, [r7, #20]
 8019eb2:	697b      	ldr	r3, [r7, #20]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d1f2      	bne.n	8019e9e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019eb8:	88fb      	ldrh	r3, [r7, #6]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	d109      	bne.n	8019ed2 <udp_bind+0x72>
    port = udp_new_port();
 8019ebe:	f7ff fe1f 	bl	8019b00 <udp_new_port>
 8019ec2:	4603      	mov	r3, r0
 8019ec4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019ec6:	88fb      	ldrh	r3, [r7, #6]
 8019ec8:	2b00      	cmp	r3, #0
 8019eca:	d12c      	bne.n	8019f26 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019ecc:	f06f 0307 	mvn.w	r3, #7
 8019ed0:	e040      	b.n	8019f54 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019ed2:	4b26      	ldr	r3, [pc, #152]	; (8019f6c <udp_bind+0x10c>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	617b      	str	r3, [r7, #20]
 8019ed8:	e022      	b.n	8019f20 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019eda:	68fa      	ldr	r2, [r7, #12]
 8019edc:	697b      	ldr	r3, [r7, #20]
 8019ede:	429a      	cmp	r2, r3
 8019ee0:	d01b      	beq.n	8019f1a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	8a5b      	ldrh	r3, [r3, #18]
 8019ee6:	88fa      	ldrh	r2, [r7, #6]
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	d116      	bne.n	8019f1a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019eec:	697b      	ldr	r3, [r7, #20]
 8019eee:	681a      	ldr	r2, [r3, #0]
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019ef4:	429a      	cmp	r2, r3
 8019ef6:	d00d      	beq.n	8019f14 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019ef8:	68bb      	ldr	r3, [r7, #8]
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d00a      	beq.n	8019f14 <udp_bind+0xb4>
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	d006      	beq.n	8019f14 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f06:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	d003      	beq.n	8019f14 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f0c:	697b      	ldr	r3, [r7, #20]
 8019f0e:	681b      	ldr	r3, [r3, #0]
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d102      	bne.n	8019f1a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019f14:	f06f 0307 	mvn.w	r3, #7
 8019f18:	e01c      	b.n	8019f54 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f1a:	697b      	ldr	r3, [r7, #20]
 8019f1c:	68db      	ldr	r3, [r3, #12]
 8019f1e:	617b      	str	r3, [r7, #20]
 8019f20:	697b      	ldr	r3, [r7, #20]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d1d9      	bne.n	8019eda <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019f26:	68bb      	ldr	r3, [r7, #8]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d002      	beq.n	8019f32 <udp_bind+0xd2>
 8019f2c:	68bb      	ldr	r3, [r7, #8]
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	e000      	b.n	8019f34 <udp_bind+0xd4>
 8019f32:	2300      	movs	r3, #0
 8019f34:	68fa      	ldr	r2, [r7, #12]
 8019f36:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	88fa      	ldrh	r2, [r7, #6]
 8019f3c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019f3e:	7cfb      	ldrb	r3, [r7, #19]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d106      	bne.n	8019f52 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019f44:	4b09      	ldr	r3, [pc, #36]	; (8019f6c <udp_bind+0x10c>)
 8019f46:	681a      	ldr	r2, [r3, #0]
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019f4c:	4a07      	ldr	r2, [pc, #28]	; (8019f6c <udp_bind+0x10c>)
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019f52:	2300      	movs	r3, #0
}
 8019f54:	4618      	mov	r0, r3
 8019f56:	3718      	adds	r7, #24
 8019f58:	46bd      	mov	sp, r7
 8019f5a:	bd80      	pop	{r7, pc}
 8019f5c:	0802118c 	.word	0x0802118c
 8019f60:	08020614 	.word	0x08020614
 8019f64:	080208dc 	.word	0x080208dc
 8019f68:	08020668 	.word	0x08020668
 8019f6c:	2000bdcc 	.word	0x2000bdcc

08019f70 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019f70:	b580      	push	{r7, lr}
 8019f72:	b086      	sub	sp, #24
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	60f8      	str	r0, [r7, #12]
 8019f78:	60b9      	str	r1, [r7, #8]
 8019f7a:	4613      	mov	r3, r2
 8019f7c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d109      	bne.n	8019f98 <udp_connect+0x28>
 8019f84:	4b2c      	ldr	r3, [pc, #176]	; (801a038 <udp_connect+0xc8>)
 8019f86:	f240 4235 	movw	r2, #1077	; 0x435
 8019f8a:	492c      	ldr	r1, [pc, #176]	; (801a03c <udp_connect+0xcc>)
 8019f8c:	482c      	ldr	r0, [pc, #176]	; (801a040 <udp_connect+0xd0>)
 8019f8e:	f002 fe1b 	bl	801cbc8 <iprintf>
 8019f92:	f06f 030f 	mvn.w	r3, #15
 8019f96:	e04b      	b.n	801a030 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019f98:	68bb      	ldr	r3, [r7, #8]
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d109      	bne.n	8019fb2 <udp_connect+0x42>
 8019f9e:	4b26      	ldr	r3, [pc, #152]	; (801a038 <udp_connect+0xc8>)
 8019fa0:	f240 4236 	movw	r2, #1078	; 0x436
 8019fa4:	4927      	ldr	r1, [pc, #156]	; (801a044 <udp_connect+0xd4>)
 8019fa6:	4826      	ldr	r0, [pc, #152]	; (801a040 <udp_connect+0xd0>)
 8019fa8:	f002 fe0e 	bl	801cbc8 <iprintf>
 8019fac:	f06f 030f 	mvn.w	r3, #15
 8019fb0:	e03e      	b.n	801a030 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	8a5b      	ldrh	r3, [r3, #18]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d10f      	bne.n	8019fda <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019fba:	68f9      	ldr	r1, [r7, #12]
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	8a5b      	ldrh	r3, [r3, #18]
 8019fc0:	461a      	mov	r2, r3
 8019fc2:	68f8      	ldr	r0, [r7, #12]
 8019fc4:	f7ff ff4c 	bl	8019e60 <udp_bind>
 8019fc8:	4603      	mov	r3, r0
 8019fca:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8019fcc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d002      	beq.n	8019fda <udp_connect+0x6a>
      return err;
 8019fd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019fd8:	e02a      	b.n	801a030 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8019fda:	68bb      	ldr	r3, [r7, #8]
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d002      	beq.n	8019fe6 <udp_connect+0x76>
 8019fe0:	68bb      	ldr	r3, [r7, #8]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	e000      	b.n	8019fe8 <udp_connect+0x78>
 8019fe6:	2300      	movs	r3, #0
 8019fe8:	68fa      	ldr	r2, [r7, #12]
 8019fea:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	88fa      	ldrh	r2, [r7, #6]
 8019ff0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	7c1b      	ldrb	r3, [r3, #16]
 8019ff6:	f043 0304 	orr.w	r3, r3, #4
 8019ffa:	b2da      	uxtb	r2, r3
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a000:	4b11      	ldr	r3, [pc, #68]	; (801a048 <udp_connect+0xd8>)
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	617b      	str	r3, [r7, #20]
 801a006:	e008      	b.n	801a01a <udp_connect+0xaa>
    if (pcb == ipcb) {
 801a008:	68fa      	ldr	r2, [r7, #12]
 801a00a:	697b      	ldr	r3, [r7, #20]
 801a00c:	429a      	cmp	r2, r3
 801a00e:	d101      	bne.n	801a014 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801a010:	2300      	movs	r3, #0
 801a012:	e00d      	b.n	801a030 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a014:	697b      	ldr	r3, [r7, #20]
 801a016:	68db      	ldr	r3, [r3, #12]
 801a018:	617b      	str	r3, [r7, #20]
 801a01a:	697b      	ldr	r3, [r7, #20]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d1f3      	bne.n	801a008 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801a020:	4b09      	ldr	r3, [pc, #36]	; (801a048 <udp_connect+0xd8>)
 801a022:	681a      	ldr	r2, [r3, #0]
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801a028:	4a07      	ldr	r2, [pc, #28]	; (801a048 <udp_connect+0xd8>)
 801a02a:	68fb      	ldr	r3, [r7, #12]
 801a02c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801a02e:	2300      	movs	r3, #0
}
 801a030:	4618      	mov	r0, r3
 801a032:	3718      	adds	r7, #24
 801a034:	46bd      	mov	sp, r7
 801a036:	bd80      	pop	{r7, pc}
 801a038:	08020614 	.word	0x08020614
 801a03c:	080208f4 	.word	0x080208f4
 801a040:	08020668 	.word	0x08020668
 801a044:	08020910 	.word	0x08020910
 801a048:	2000bdcc 	.word	0x2000bdcc

0801a04c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b084      	sub	sp, #16
 801a050:	af00      	add	r7, sp, #0
 801a052:	60f8      	str	r0, [r7, #12]
 801a054:	60b9      	str	r1, [r7, #8]
 801a056:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d107      	bne.n	801a06e <udp_recv+0x22>
 801a05e:	4b08      	ldr	r3, [pc, #32]	; (801a080 <udp_recv+0x34>)
 801a060:	f240 428a 	movw	r2, #1162	; 0x48a
 801a064:	4907      	ldr	r1, [pc, #28]	; (801a084 <udp_recv+0x38>)
 801a066:	4808      	ldr	r0, [pc, #32]	; (801a088 <udp_recv+0x3c>)
 801a068:	f002 fdae 	bl	801cbc8 <iprintf>
 801a06c:	e005      	b.n	801a07a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a06e:	68fb      	ldr	r3, [r7, #12]
 801a070:	68ba      	ldr	r2, [r7, #8]
 801a072:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	687a      	ldr	r2, [r7, #4]
 801a078:	61da      	str	r2, [r3, #28]
}
 801a07a:	3710      	adds	r7, #16
 801a07c:	46bd      	mov	sp, r7
 801a07e:	bd80      	pop	{r7, pc}
 801a080:	08020614 	.word	0x08020614
 801a084:	08020948 	.word	0x08020948
 801a088:	08020668 	.word	0x08020668

0801a08c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a08c:	b580      	push	{r7, lr}
 801a08e:	b084      	sub	sp, #16
 801a090:	af00      	add	r7, sp, #0
 801a092:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d107      	bne.n	801a0aa <udp_remove+0x1e>
 801a09a:	4b19      	ldr	r3, [pc, #100]	; (801a100 <udp_remove+0x74>)
 801a09c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801a0a0:	4918      	ldr	r1, [pc, #96]	; (801a104 <udp_remove+0x78>)
 801a0a2:	4819      	ldr	r0, [pc, #100]	; (801a108 <udp_remove+0x7c>)
 801a0a4:	f002 fd90 	bl	801cbc8 <iprintf>
 801a0a8:	e026      	b.n	801a0f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a0aa:	4b18      	ldr	r3, [pc, #96]	; (801a10c <udp_remove+0x80>)
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	687a      	ldr	r2, [r7, #4]
 801a0b0:	429a      	cmp	r2, r3
 801a0b2:	d105      	bne.n	801a0c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a0b4:	4b15      	ldr	r3, [pc, #84]	; (801a10c <udp_remove+0x80>)
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	68db      	ldr	r3, [r3, #12]
 801a0ba:	4a14      	ldr	r2, [pc, #80]	; (801a10c <udp_remove+0x80>)
 801a0bc:	6013      	str	r3, [r2, #0]
 801a0be:	e017      	b.n	801a0f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a0c0:	4b12      	ldr	r3, [pc, #72]	; (801a10c <udp_remove+0x80>)
 801a0c2:	681b      	ldr	r3, [r3, #0]
 801a0c4:	60fb      	str	r3, [r7, #12]
 801a0c6:	e010      	b.n	801a0ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a0c8:	68fb      	ldr	r3, [r7, #12]
 801a0ca:	68db      	ldr	r3, [r3, #12]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d009      	beq.n	801a0e4 <udp_remove+0x58>
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	68db      	ldr	r3, [r3, #12]
 801a0d4:	687a      	ldr	r2, [r7, #4]
 801a0d6:	429a      	cmp	r2, r3
 801a0d8:	d104      	bne.n	801a0e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	68da      	ldr	r2, [r3, #12]
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	60da      	str	r2, [r3, #12]
        break;
 801a0e2:	e005      	b.n	801a0f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	68db      	ldr	r3, [r3, #12]
 801a0e8:	60fb      	str	r3, [r7, #12]
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	2b00      	cmp	r3, #0
 801a0ee:	d1eb      	bne.n	801a0c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a0f0:	6879      	ldr	r1, [r7, #4]
 801a0f2:	2000      	movs	r0, #0
 801a0f4:	f7f8 f880 	bl	80121f8 <memp_free>
}
 801a0f8:	3710      	adds	r7, #16
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	bd80      	pop	{r7, pc}
 801a0fe:	bf00      	nop
 801a100:	08020614 	.word	0x08020614
 801a104:	08020960 	.word	0x08020960
 801a108:	08020668 	.word	0x08020668
 801a10c:	2000bdcc 	.word	0x2000bdcc

0801a110 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b082      	sub	sp, #8
 801a114:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a116:	2000      	movs	r0, #0
 801a118:	f7f7 fff8 	bl	801210c <memp_malloc>
 801a11c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	2b00      	cmp	r3, #0
 801a122:	d007      	beq.n	801a134 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a124:	2220      	movs	r2, #32
 801a126:	2100      	movs	r1, #0
 801a128:	6878      	ldr	r0, [r7, #4]
 801a12a:	f002 fd45 	bl	801cbb8 <memset>
    pcb->ttl = UDP_TTL;
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	22ff      	movs	r2, #255	; 0xff
 801a132:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a134:	687b      	ldr	r3, [r7, #4]
}
 801a136:	4618      	mov	r0, r3
 801a138:	3708      	adds	r7, #8
 801a13a:	46bd      	mov	sp, r7
 801a13c:	bd80      	pop	{r7, pc}

0801a13e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a13e:	b580      	push	{r7, lr}
 801a140:	b084      	sub	sp, #16
 801a142:	af00      	add	r7, sp, #0
 801a144:	4603      	mov	r3, r0
 801a146:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a148:	f7ff ffe2 	bl	801a110 <udp_new>
 801a14c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a14e:	68fb      	ldr	r3, [r7, #12]
}
 801a150:	4618      	mov	r0, r3
 801a152:	3710      	adds	r7, #16
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a158:	b480      	push	{r7}
 801a15a:	b085      	sub	sp, #20
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
 801a160:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d01e      	beq.n	801a1a6 <udp_netif_ip_addr_changed+0x4e>
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d01a      	beq.n	801a1a6 <udp_netif_ip_addr_changed+0x4e>
 801a170:	683b      	ldr	r3, [r7, #0]
 801a172:	2b00      	cmp	r3, #0
 801a174:	d017      	beq.n	801a1a6 <udp_netif_ip_addr_changed+0x4e>
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d013      	beq.n	801a1a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a17e:	4b0d      	ldr	r3, [pc, #52]	; (801a1b4 <udp_netif_ip_addr_changed+0x5c>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	60fb      	str	r3, [r7, #12]
 801a184:	e00c      	b.n	801a1a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a186:	68fb      	ldr	r3, [r7, #12]
 801a188:	681a      	ldr	r2, [r3, #0]
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	429a      	cmp	r2, r3
 801a190:	d103      	bne.n	801a19a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a192:	683b      	ldr	r3, [r7, #0]
 801a194:	681a      	ldr	r2, [r3, #0]
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	68db      	ldr	r3, [r3, #12]
 801a19e:	60fb      	str	r3, [r7, #12]
 801a1a0:	68fb      	ldr	r3, [r7, #12]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d1ef      	bne.n	801a186 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a1a6:	bf00      	nop
 801a1a8:	3714      	adds	r7, #20
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b0:	4770      	bx	lr
 801a1b2:	bf00      	nop
 801a1b4:	2000bdcc 	.word	0x2000bdcc

0801a1b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b082      	sub	sp, #8
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a1c0:	4915      	ldr	r1, [pc, #84]	; (801a218 <etharp_free_entry+0x60>)
 801a1c2:	687a      	ldr	r2, [r7, #4]
 801a1c4:	4613      	mov	r3, r2
 801a1c6:	005b      	lsls	r3, r3, #1
 801a1c8:	4413      	add	r3, r2
 801a1ca:	00db      	lsls	r3, r3, #3
 801a1cc:	440b      	add	r3, r1
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d013      	beq.n	801a1fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a1d4:	4910      	ldr	r1, [pc, #64]	; (801a218 <etharp_free_entry+0x60>)
 801a1d6:	687a      	ldr	r2, [r7, #4]
 801a1d8:	4613      	mov	r3, r2
 801a1da:	005b      	lsls	r3, r3, #1
 801a1dc:	4413      	add	r3, r2
 801a1de:	00db      	lsls	r3, r3, #3
 801a1e0:	440b      	add	r3, r1
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	4618      	mov	r0, r3
 801a1e6:	f7f8 fea7 	bl	8012f38 <pbuf_free>
    arp_table[i].q = NULL;
 801a1ea:	490b      	ldr	r1, [pc, #44]	; (801a218 <etharp_free_entry+0x60>)
 801a1ec:	687a      	ldr	r2, [r7, #4]
 801a1ee:	4613      	mov	r3, r2
 801a1f0:	005b      	lsls	r3, r3, #1
 801a1f2:	4413      	add	r3, r2
 801a1f4:	00db      	lsls	r3, r3, #3
 801a1f6:	440b      	add	r3, r1
 801a1f8:	2200      	movs	r2, #0
 801a1fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a1fc:	4906      	ldr	r1, [pc, #24]	; (801a218 <etharp_free_entry+0x60>)
 801a1fe:	687a      	ldr	r2, [r7, #4]
 801a200:	4613      	mov	r3, r2
 801a202:	005b      	lsls	r3, r3, #1
 801a204:	4413      	add	r3, r2
 801a206:	00db      	lsls	r3, r3, #3
 801a208:	440b      	add	r3, r1
 801a20a:	3314      	adds	r3, #20
 801a20c:	2200      	movs	r2, #0
 801a20e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a210:	bf00      	nop
 801a212:	3708      	adds	r7, #8
 801a214:	46bd      	mov	sp, r7
 801a216:	bd80      	pop	{r7, pc}
 801a218:	20008758 	.word	0x20008758

0801a21c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b082      	sub	sp, #8
 801a220:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a222:	2300      	movs	r3, #0
 801a224:	607b      	str	r3, [r7, #4]
 801a226:	e096      	b.n	801a356 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a228:	494f      	ldr	r1, [pc, #316]	; (801a368 <etharp_tmr+0x14c>)
 801a22a:	687a      	ldr	r2, [r7, #4]
 801a22c:	4613      	mov	r3, r2
 801a22e:	005b      	lsls	r3, r3, #1
 801a230:	4413      	add	r3, r2
 801a232:	00db      	lsls	r3, r3, #3
 801a234:	440b      	add	r3, r1
 801a236:	3314      	adds	r3, #20
 801a238:	781b      	ldrb	r3, [r3, #0]
 801a23a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a23c:	78fb      	ldrb	r3, [r7, #3]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	f000 8086 	beq.w	801a350 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a244:	4948      	ldr	r1, [pc, #288]	; (801a368 <etharp_tmr+0x14c>)
 801a246:	687a      	ldr	r2, [r7, #4]
 801a248:	4613      	mov	r3, r2
 801a24a:	005b      	lsls	r3, r3, #1
 801a24c:	4413      	add	r3, r2
 801a24e:	00db      	lsls	r3, r3, #3
 801a250:	440b      	add	r3, r1
 801a252:	3312      	adds	r3, #18
 801a254:	881b      	ldrh	r3, [r3, #0]
 801a256:	3301      	adds	r3, #1
 801a258:	b298      	uxth	r0, r3
 801a25a:	4943      	ldr	r1, [pc, #268]	; (801a368 <etharp_tmr+0x14c>)
 801a25c:	687a      	ldr	r2, [r7, #4]
 801a25e:	4613      	mov	r3, r2
 801a260:	005b      	lsls	r3, r3, #1
 801a262:	4413      	add	r3, r2
 801a264:	00db      	lsls	r3, r3, #3
 801a266:	440b      	add	r3, r1
 801a268:	3312      	adds	r3, #18
 801a26a:	4602      	mov	r2, r0
 801a26c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a26e:	493e      	ldr	r1, [pc, #248]	; (801a368 <etharp_tmr+0x14c>)
 801a270:	687a      	ldr	r2, [r7, #4]
 801a272:	4613      	mov	r3, r2
 801a274:	005b      	lsls	r3, r3, #1
 801a276:	4413      	add	r3, r2
 801a278:	00db      	lsls	r3, r3, #3
 801a27a:	440b      	add	r3, r1
 801a27c:	3312      	adds	r3, #18
 801a27e:	881b      	ldrh	r3, [r3, #0]
 801a280:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801a284:	d215      	bcs.n	801a2b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a286:	4938      	ldr	r1, [pc, #224]	; (801a368 <etharp_tmr+0x14c>)
 801a288:	687a      	ldr	r2, [r7, #4]
 801a28a:	4613      	mov	r3, r2
 801a28c:	005b      	lsls	r3, r3, #1
 801a28e:	4413      	add	r3, r2
 801a290:	00db      	lsls	r3, r3, #3
 801a292:	440b      	add	r3, r1
 801a294:	3314      	adds	r3, #20
 801a296:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a298:	2b01      	cmp	r3, #1
 801a29a:	d10e      	bne.n	801a2ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a29c:	4932      	ldr	r1, [pc, #200]	; (801a368 <etharp_tmr+0x14c>)
 801a29e:	687a      	ldr	r2, [r7, #4]
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	005b      	lsls	r3, r3, #1
 801a2a4:	4413      	add	r3, r2
 801a2a6:	00db      	lsls	r3, r3, #3
 801a2a8:	440b      	add	r3, r1
 801a2aa:	3312      	adds	r3, #18
 801a2ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a2ae:	2b04      	cmp	r3, #4
 801a2b0:	d903      	bls.n	801a2ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a2b2:	6878      	ldr	r0, [r7, #4]
 801a2b4:	f7ff ff80 	bl	801a1b8 <etharp_free_entry>
 801a2b8:	e04a      	b.n	801a350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a2ba:	492b      	ldr	r1, [pc, #172]	; (801a368 <etharp_tmr+0x14c>)
 801a2bc:	687a      	ldr	r2, [r7, #4]
 801a2be:	4613      	mov	r3, r2
 801a2c0:	005b      	lsls	r3, r3, #1
 801a2c2:	4413      	add	r3, r2
 801a2c4:	00db      	lsls	r3, r3, #3
 801a2c6:	440b      	add	r3, r1
 801a2c8:	3314      	adds	r3, #20
 801a2ca:	781b      	ldrb	r3, [r3, #0]
 801a2cc:	2b03      	cmp	r3, #3
 801a2ce:	d10a      	bne.n	801a2e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a2d0:	4925      	ldr	r1, [pc, #148]	; (801a368 <etharp_tmr+0x14c>)
 801a2d2:	687a      	ldr	r2, [r7, #4]
 801a2d4:	4613      	mov	r3, r2
 801a2d6:	005b      	lsls	r3, r3, #1
 801a2d8:	4413      	add	r3, r2
 801a2da:	00db      	lsls	r3, r3, #3
 801a2dc:	440b      	add	r3, r1
 801a2de:	3314      	adds	r3, #20
 801a2e0:	2204      	movs	r2, #4
 801a2e2:	701a      	strb	r2, [r3, #0]
 801a2e4:	e034      	b.n	801a350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a2e6:	4920      	ldr	r1, [pc, #128]	; (801a368 <etharp_tmr+0x14c>)
 801a2e8:	687a      	ldr	r2, [r7, #4]
 801a2ea:	4613      	mov	r3, r2
 801a2ec:	005b      	lsls	r3, r3, #1
 801a2ee:	4413      	add	r3, r2
 801a2f0:	00db      	lsls	r3, r3, #3
 801a2f2:	440b      	add	r3, r1
 801a2f4:	3314      	adds	r3, #20
 801a2f6:	781b      	ldrb	r3, [r3, #0]
 801a2f8:	2b04      	cmp	r3, #4
 801a2fa:	d10a      	bne.n	801a312 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a2fc:	491a      	ldr	r1, [pc, #104]	; (801a368 <etharp_tmr+0x14c>)
 801a2fe:	687a      	ldr	r2, [r7, #4]
 801a300:	4613      	mov	r3, r2
 801a302:	005b      	lsls	r3, r3, #1
 801a304:	4413      	add	r3, r2
 801a306:	00db      	lsls	r3, r3, #3
 801a308:	440b      	add	r3, r1
 801a30a:	3314      	adds	r3, #20
 801a30c:	2202      	movs	r2, #2
 801a30e:	701a      	strb	r2, [r3, #0]
 801a310:	e01e      	b.n	801a350 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a312:	4915      	ldr	r1, [pc, #84]	; (801a368 <etharp_tmr+0x14c>)
 801a314:	687a      	ldr	r2, [r7, #4]
 801a316:	4613      	mov	r3, r2
 801a318:	005b      	lsls	r3, r3, #1
 801a31a:	4413      	add	r3, r2
 801a31c:	00db      	lsls	r3, r3, #3
 801a31e:	440b      	add	r3, r1
 801a320:	3314      	adds	r3, #20
 801a322:	781b      	ldrb	r3, [r3, #0]
 801a324:	2b01      	cmp	r3, #1
 801a326:	d113      	bne.n	801a350 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a328:	490f      	ldr	r1, [pc, #60]	; (801a368 <etharp_tmr+0x14c>)
 801a32a:	687a      	ldr	r2, [r7, #4]
 801a32c:	4613      	mov	r3, r2
 801a32e:	005b      	lsls	r3, r3, #1
 801a330:	4413      	add	r3, r2
 801a332:	00db      	lsls	r3, r3, #3
 801a334:	440b      	add	r3, r1
 801a336:	3308      	adds	r3, #8
 801a338:	6818      	ldr	r0, [r3, #0]
 801a33a:	687a      	ldr	r2, [r7, #4]
 801a33c:	4613      	mov	r3, r2
 801a33e:	005b      	lsls	r3, r3, #1
 801a340:	4413      	add	r3, r2
 801a342:	00db      	lsls	r3, r3, #3
 801a344:	4a08      	ldr	r2, [pc, #32]	; (801a368 <etharp_tmr+0x14c>)
 801a346:	4413      	add	r3, r2
 801a348:	3304      	adds	r3, #4
 801a34a:	4619      	mov	r1, r3
 801a34c:	f000 fe6e 	bl	801b02c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	3301      	adds	r3, #1
 801a354:	607b      	str	r3, [r7, #4]
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	2b09      	cmp	r3, #9
 801a35a:	f77f af65 	ble.w	801a228 <etharp_tmr+0xc>
      }
    }
  }
}
 801a35e:	bf00      	nop
 801a360:	3708      	adds	r7, #8
 801a362:	46bd      	mov	sp, r7
 801a364:	bd80      	pop	{r7, pc}
 801a366:	bf00      	nop
 801a368:	20008758 	.word	0x20008758

0801a36c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a36c:	b580      	push	{r7, lr}
 801a36e:	b08a      	sub	sp, #40	; 0x28
 801a370:	af00      	add	r7, sp, #0
 801a372:	60f8      	str	r0, [r7, #12]
 801a374:	460b      	mov	r3, r1
 801a376:	607a      	str	r2, [r7, #4]
 801a378:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a37a:	230a      	movs	r3, #10
 801a37c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801a37e:	230a      	movs	r3, #10
 801a380:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a382:	230a      	movs	r3, #10
 801a384:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801a386:	2300      	movs	r3, #0
 801a388:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a38a:	230a      	movs	r3, #10
 801a38c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a38e:	2300      	movs	r3, #0
 801a390:	83bb      	strh	r3, [r7, #28]
 801a392:	2300      	movs	r3, #0
 801a394:	837b      	strh	r3, [r7, #26]
 801a396:	2300      	movs	r3, #0
 801a398:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a39a:	2300      	movs	r3, #0
 801a39c:	843b      	strh	r3, [r7, #32]
 801a39e:	e0ae      	b.n	801a4fe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a3a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3a4:	49a6      	ldr	r1, [pc, #664]	; (801a640 <etharp_find_entry+0x2d4>)
 801a3a6:	4613      	mov	r3, r2
 801a3a8:	005b      	lsls	r3, r3, #1
 801a3aa:	4413      	add	r3, r2
 801a3ac:	00db      	lsls	r3, r3, #3
 801a3ae:	440b      	add	r3, r1
 801a3b0:	3314      	adds	r3, #20
 801a3b2:	781b      	ldrb	r3, [r3, #0]
 801a3b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a3b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a3ba:	2b0a      	cmp	r3, #10
 801a3bc:	d105      	bne.n	801a3ca <etharp_find_entry+0x5e>
 801a3be:	7dfb      	ldrb	r3, [r7, #23]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d102      	bne.n	801a3ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a3c4:	8c3b      	ldrh	r3, [r7, #32]
 801a3c6:	847b      	strh	r3, [r7, #34]	; 0x22
 801a3c8:	e095      	b.n	801a4f6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a3ca:	7dfb      	ldrb	r3, [r7, #23]
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	f000 8092 	beq.w	801a4f6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a3d2:	7dfb      	ldrb	r3, [r7, #23]
 801a3d4:	2b01      	cmp	r3, #1
 801a3d6:	d009      	beq.n	801a3ec <etharp_find_entry+0x80>
 801a3d8:	7dfb      	ldrb	r3, [r7, #23]
 801a3da:	2b01      	cmp	r3, #1
 801a3dc:	d806      	bhi.n	801a3ec <etharp_find_entry+0x80>
 801a3de:	4b99      	ldr	r3, [pc, #612]	; (801a644 <etharp_find_entry+0x2d8>)
 801a3e0:	f44f 7292 	mov.w	r2, #292	; 0x124
 801a3e4:	4998      	ldr	r1, [pc, #608]	; (801a648 <etharp_find_entry+0x2dc>)
 801a3e6:	4899      	ldr	r0, [pc, #612]	; (801a64c <etharp_find_entry+0x2e0>)
 801a3e8:	f002 fbee 	bl	801cbc8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a3ec:	68fb      	ldr	r3, [r7, #12]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d020      	beq.n	801a434 <etharp_find_entry+0xc8>
 801a3f2:	68fb      	ldr	r3, [r7, #12]
 801a3f4:	6819      	ldr	r1, [r3, #0]
 801a3f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3fa:	4891      	ldr	r0, [pc, #580]	; (801a640 <etharp_find_entry+0x2d4>)
 801a3fc:	4613      	mov	r3, r2
 801a3fe:	005b      	lsls	r3, r3, #1
 801a400:	4413      	add	r3, r2
 801a402:	00db      	lsls	r3, r3, #3
 801a404:	4403      	add	r3, r0
 801a406:	3304      	adds	r3, #4
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	4299      	cmp	r1, r3
 801a40c:	d112      	bne.n	801a434 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d00c      	beq.n	801a42e <etharp_find_entry+0xc2>
 801a414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a418:	4989      	ldr	r1, [pc, #548]	; (801a640 <etharp_find_entry+0x2d4>)
 801a41a:	4613      	mov	r3, r2
 801a41c:	005b      	lsls	r3, r3, #1
 801a41e:	4413      	add	r3, r2
 801a420:	00db      	lsls	r3, r3, #3
 801a422:	440b      	add	r3, r1
 801a424:	3308      	adds	r3, #8
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	687a      	ldr	r2, [r7, #4]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d102      	bne.n	801a434 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a42e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a432:	e100      	b.n	801a636 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a434:	7dfb      	ldrb	r3, [r7, #23]
 801a436:	2b01      	cmp	r3, #1
 801a438:	d140      	bne.n	801a4bc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a43a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a43e:	4980      	ldr	r1, [pc, #512]	; (801a640 <etharp_find_entry+0x2d4>)
 801a440:	4613      	mov	r3, r2
 801a442:	005b      	lsls	r3, r3, #1
 801a444:	4413      	add	r3, r2
 801a446:	00db      	lsls	r3, r3, #3
 801a448:	440b      	add	r3, r1
 801a44a:	681b      	ldr	r3, [r3, #0]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d01a      	beq.n	801a486 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a450:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a454:	497a      	ldr	r1, [pc, #488]	; (801a640 <etharp_find_entry+0x2d4>)
 801a456:	4613      	mov	r3, r2
 801a458:	005b      	lsls	r3, r3, #1
 801a45a:	4413      	add	r3, r2
 801a45c:	00db      	lsls	r3, r3, #3
 801a45e:	440b      	add	r3, r1
 801a460:	3312      	adds	r3, #18
 801a462:	881b      	ldrh	r3, [r3, #0]
 801a464:	8bba      	ldrh	r2, [r7, #28]
 801a466:	429a      	cmp	r2, r3
 801a468:	d845      	bhi.n	801a4f6 <etharp_find_entry+0x18a>
            old_queue = i;
 801a46a:	8c3b      	ldrh	r3, [r7, #32]
 801a46c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a46e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a472:	4973      	ldr	r1, [pc, #460]	; (801a640 <etharp_find_entry+0x2d4>)
 801a474:	4613      	mov	r3, r2
 801a476:	005b      	lsls	r3, r3, #1
 801a478:	4413      	add	r3, r2
 801a47a:	00db      	lsls	r3, r3, #3
 801a47c:	440b      	add	r3, r1
 801a47e:	3312      	adds	r3, #18
 801a480:	881b      	ldrh	r3, [r3, #0]
 801a482:	83bb      	strh	r3, [r7, #28]
 801a484:	e037      	b.n	801a4f6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a48a:	496d      	ldr	r1, [pc, #436]	; (801a640 <etharp_find_entry+0x2d4>)
 801a48c:	4613      	mov	r3, r2
 801a48e:	005b      	lsls	r3, r3, #1
 801a490:	4413      	add	r3, r2
 801a492:	00db      	lsls	r3, r3, #3
 801a494:	440b      	add	r3, r1
 801a496:	3312      	adds	r3, #18
 801a498:	881b      	ldrh	r3, [r3, #0]
 801a49a:	8b7a      	ldrh	r2, [r7, #26]
 801a49c:	429a      	cmp	r2, r3
 801a49e:	d82a      	bhi.n	801a4f6 <etharp_find_entry+0x18a>
            old_pending = i;
 801a4a0:	8c3b      	ldrh	r3, [r7, #32]
 801a4a2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801a4a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4a8:	4965      	ldr	r1, [pc, #404]	; (801a640 <etharp_find_entry+0x2d4>)
 801a4aa:	4613      	mov	r3, r2
 801a4ac:	005b      	lsls	r3, r3, #1
 801a4ae:	4413      	add	r3, r2
 801a4b0:	00db      	lsls	r3, r3, #3
 801a4b2:	440b      	add	r3, r1
 801a4b4:	3312      	adds	r3, #18
 801a4b6:	881b      	ldrh	r3, [r3, #0]
 801a4b8:	837b      	strh	r3, [r7, #26]
 801a4ba:	e01c      	b.n	801a4f6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a4bc:	7dfb      	ldrb	r3, [r7, #23]
 801a4be:	2b01      	cmp	r3, #1
 801a4c0:	d919      	bls.n	801a4f6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a4c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4c6:	495e      	ldr	r1, [pc, #376]	; (801a640 <etharp_find_entry+0x2d4>)
 801a4c8:	4613      	mov	r3, r2
 801a4ca:	005b      	lsls	r3, r3, #1
 801a4cc:	4413      	add	r3, r2
 801a4ce:	00db      	lsls	r3, r3, #3
 801a4d0:	440b      	add	r3, r1
 801a4d2:	3312      	adds	r3, #18
 801a4d4:	881b      	ldrh	r3, [r3, #0]
 801a4d6:	8b3a      	ldrh	r2, [r7, #24]
 801a4d8:	429a      	cmp	r2, r3
 801a4da:	d80c      	bhi.n	801a4f6 <etharp_find_entry+0x18a>
            old_stable = i;
 801a4dc:	8c3b      	ldrh	r3, [r7, #32]
 801a4de:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a4e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4e4:	4956      	ldr	r1, [pc, #344]	; (801a640 <etharp_find_entry+0x2d4>)
 801a4e6:	4613      	mov	r3, r2
 801a4e8:	005b      	lsls	r3, r3, #1
 801a4ea:	4413      	add	r3, r2
 801a4ec:	00db      	lsls	r3, r3, #3
 801a4ee:	440b      	add	r3, r1
 801a4f0:	3312      	adds	r3, #18
 801a4f2:	881b      	ldrh	r3, [r3, #0]
 801a4f4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a4f6:	8c3b      	ldrh	r3, [r7, #32]
 801a4f8:	3301      	adds	r3, #1
 801a4fa:	b29b      	uxth	r3, r3
 801a4fc:	843b      	strh	r3, [r7, #32]
 801a4fe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a502:	2b09      	cmp	r3, #9
 801a504:	f77f af4c 	ble.w	801a3a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a508:	7afb      	ldrb	r3, [r7, #11]
 801a50a:	f003 0302 	and.w	r3, r3, #2
 801a50e:	2b00      	cmp	r3, #0
 801a510:	d108      	bne.n	801a524 <etharp_find_entry+0x1b8>
 801a512:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a516:	2b0a      	cmp	r3, #10
 801a518:	d107      	bne.n	801a52a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a51a:	7afb      	ldrb	r3, [r7, #11]
 801a51c:	f003 0301 	and.w	r3, r3, #1
 801a520:	2b00      	cmp	r3, #0
 801a522:	d102      	bne.n	801a52a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a524:	f04f 33ff 	mov.w	r3, #4294967295
 801a528:	e085      	b.n	801a636 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a52a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a52e:	2b09      	cmp	r3, #9
 801a530:	dc02      	bgt.n	801a538 <etharp_find_entry+0x1cc>
    i = empty;
 801a532:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a534:	843b      	strh	r3, [r7, #32]
 801a536:	e039      	b.n	801a5ac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a538:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a53c:	2b09      	cmp	r3, #9
 801a53e:	dc14      	bgt.n	801a56a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a542:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a544:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a548:	493d      	ldr	r1, [pc, #244]	; (801a640 <etharp_find_entry+0x2d4>)
 801a54a:	4613      	mov	r3, r2
 801a54c:	005b      	lsls	r3, r3, #1
 801a54e:	4413      	add	r3, r2
 801a550:	00db      	lsls	r3, r3, #3
 801a552:	440b      	add	r3, r1
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d018      	beq.n	801a58c <etharp_find_entry+0x220>
 801a55a:	4b3a      	ldr	r3, [pc, #232]	; (801a644 <etharp_find_entry+0x2d8>)
 801a55c:	f240 126d 	movw	r2, #365	; 0x16d
 801a560:	493b      	ldr	r1, [pc, #236]	; (801a650 <etharp_find_entry+0x2e4>)
 801a562:	483a      	ldr	r0, [pc, #232]	; (801a64c <etharp_find_entry+0x2e0>)
 801a564:	f002 fb30 	bl	801cbc8 <iprintf>
 801a568:	e010      	b.n	801a58c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a56a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a56e:	2b09      	cmp	r3, #9
 801a570:	dc02      	bgt.n	801a578 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a572:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a574:	843b      	strh	r3, [r7, #32]
 801a576:	e009      	b.n	801a58c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a578:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a57c:	2b09      	cmp	r3, #9
 801a57e:	dc02      	bgt.n	801a586 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a580:	8bfb      	ldrh	r3, [r7, #30]
 801a582:	843b      	strh	r3, [r7, #32]
 801a584:	e002      	b.n	801a58c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a586:	f04f 33ff 	mov.w	r3, #4294967295
 801a58a:	e054      	b.n	801a636 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a58c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a590:	2b09      	cmp	r3, #9
 801a592:	dd06      	ble.n	801a5a2 <etharp_find_entry+0x236>
 801a594:	4b2b      	ldr	r3, [pc, #172]	; (801a644 <etharp_find_entry+0x2d8>)
 801a596:	f240 127f 	movw	r2, #383	; 0x17f
 801a59a:	492e      	ldr	r1, [pc, #184]	; (801a654 <etharp_find_entry+0x2e8>)
 801a59c:	482b      	ldr	r0, [pc, #172]	; (801a64c <etharp_find_entry+0x2e0>)
 801a59e:	f002 fb13 	bl	801cbc8 <iprintf>
    etharp_free_entry(i);
 801a5a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a5a6:	4618      	mov	r0, r3
 801a5a8:	f7ff fe06 	bl	801a1b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a5ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a5b0:	2b09      	cmp	r3, #9
 801a5b2:	dd06      	ble.n	801a5c2 <etharp_find_entry+0x256>
 801a5b4:	4b23      	ldr	r3, [pc, #140]	; (801a644 <etharp_find_entry+0x2d8>)
 801a5b6:	f240 1283 	movw	r2, #387	; 0x183
 801a5ba:	4926      	ldr	r1, [pc, #152]	; (801a654 <etharp_find_entry+0x2e8>)
 801a5bc:	4823      	ldr	r0, [pc, #140]	; (801a64c <etharp_find_entry+0x2e0>)
 801a5be:	f002 fb03 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a5c2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5c6:	491e      	ldr	r1, [pc, #120]	; (801a640 <etharp_find_entry+0x2d4>)
 801a5c8:	4613      	mov	r3, r2
 801a5ca:	005b      	lsls	r3, r3, #1
 801a5cc:	4413      	add	r3, r2
 801a5ce:	00db      	lsls	r3, r3, #3
 801a5d0:	440b      	add	r3, r1
 801a5d2:	3314      	adds	r3, #20
 801a5d4:	781b      	ldrb	r3, [r3, #0]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d006      	beq.n	801a5e8 <etharp_find_entry+0x27c>
 801a5da:	4b1a      	ldr	r3, [pc, #104]	; (801a644 <etharp_find_entry+0x2d8>)
 801a5dc:	f240 1285 	movw	r2, #389	; 0x185
 801a5e0:	491d      	ldr	r1, [pc, #116]	; (801a658 <etharp_find_entry+0x2ec>)
 801a5e2:	481a      	ldr	r0, [pc, #104]	; (801a64c <etharp_find_entry+0x2e0>)
 801a5e4:	f002 faf0 	bl	801cbc8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	d00b      	beq.n	801a606 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a5ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	6819      	ldr	r1, [r3, #0]
 801a5f6:	4812      	ldr	r0, [pc, #72]	; (801a640 <etharp_find_entry+0x2d4>)
 801a5f8:	4613      	mov	r3, r2
 801a5fa:	005b      	lsls	r3, r3, #1
 801a5fc:	4413      	add	r3, r2
 801a5fe:	00db      	lsls	r3, r3, #3
 801a600:	4403      	add	r3, r0
 801a602:	3304      	adds	r3, #4
 801a604:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a606:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a60a:	490d      	ldr	r1, [pc, #52]	; (801a640 <etharp_find_entry+0x2d4>)
 801a60c:	4613      	mov	r3, r2
 801a60e:	005b      	lsls	r3, r3, #1
 801a610:	4413      	add	r3, r2
 801a612:	00db      	lsls	r3, r3, #3
 801a614:	440b      	add	r3, r1
 801a616:	3312      	adds	r3, #18
 801a618:	2200      	movs	r2, #0
 801a61a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a61c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a620:	4907      	ldr	r1, [pc, #28]	; (801a640 <etharp_find_entry+0x2d4>)
 801a622:	4613      	mov	r3, r2
 801a624:	005b      	lsls	r3, r3, #1
 801a626:	4413      	add	r3, r2
 801a628:	00db      	lsls	r3, r3, #3
 801a62a:	440b      	add	r3, r1
 801a62c:	3308      	adds	r3, #8
 801a62e:	687a      	ldr	r2, [r7, #4]
 801a630:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a632:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a636:	4618      	mov	r0, r3
 801a638:	3728      	adds	r7, #40	; 0x28
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bd80      	pop	{r7, pc}
 801a63e:	bf00      	nop
 801a640:	20008758 	.word	0x20008758
 801a644:	08020978 	.word	0x08020978
 801a648:	080209b0 	.word	0x080209b0
 801a64c:	080209f0 	.word	0x080209f0
 801a650:	08020a18 	.word	0x08020a18
 801a654:	08020a30 	.word	0x08020a30
 801a658:	08020a44 	.word	0x08020a44

0801a65c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a65c:	b580      	push	{r7, lr}
 801a65e:	b088      	sub	sp, #32
 801a660:	af02      	add	r7, sp, #8
 801a662:	60f8      	str	r0, [r7, #12]
 801a664:	60b9      	str	r1, [r7, #8]
 801a666:	607a      	str	r2, [r7, #4]
 801a668:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a66a:	68fb      	ldr	r3, [r7, #12]
 801a66c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a670:	2b06      	cmp	r3, #6
 801a672:	d006      	beq.n	801a682 <etharp_update_arp_entry+0x26>
 801a674:	4b48      	ldr	r3, [pc, #288]	; (801a798 <etharp_update_arp_entry+0x13c>)
 801a676:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a67a:	4948      	ldr	r1, [pc, #288]	; (801a79c <etharp_update_arp_entry+0x140>)
 801a67c:	4848      	ldr	r0, [pc, #288]	; (801a7a0 <etharp_update_arp_entry+0x144>)
 801a67e:	f002 faa3 	bl	801cbc8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a682:	68bb      	ldr	r3, [r7, #8]
 801a684:	2b00      	cmp	r3, #0
 801a686:	d012      	beq.n	801a6ae <etharp_update_arp_entry+0x52>
 801a688:	68bb      	ldr	r3, [r7, #8]
 801a68a:	681b      	ldr	r3, [r3, #0]
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d00e      	beq.n	801a6ae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a690:	68bb      	ldr	r3, [r7, #8]
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	68f9      	ldr	r1, [r7, #12]
 801a696:	4618      	mov	r0, r3
 801a698:	f001 f922 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 801a69c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d105      	bne.n	801a6ae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a6a2:	68bb      	ldr	r3, [r7, #8]
 801a6a4:	681b      	ldr	r3, [r3, #0]
 801a6a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a6aa:	2be0      	cmp	r3, #224	; 0xe0
 801a6ac:	d102      	bne.n	801a6b4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a6ae:	f06f 030f 	mvn.w	r3, #15
 801a6b2:	e06c      	b.n	801a78e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a6b4:	78fb      	ldrb	r3, [r7, #3]
 801a6b6:	68fa      	ldr	r2, [r7, #12]
 801a6b8:	4619      	mov	r1, r3
 801a6ba:	68b8      	ldr	r0, [r7, #8]
 801a6bc:	f7ff fe56 	bl	801a36c <etharp_find_entry>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a6c4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	da02      	bge.n	801a6d2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a6cc:	8afb      	ldrh	r3, [r7, #22]
 801a6ce:	b25b      	sxtb	r3, r3
 801a6d0:	e05d      	b.n	801a78e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a6d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6d6:	4933      	ldr	r1, [pc, #204]	; (801a7a4 <etharp_update_arp_entry+0x148>)
 801a6d8:	4613      	mov	r3, r2
 801a6da:	005b      	lsls	r3, r3, #1
 801a6dc:	4413      	add	r3, r2
 801a6de:	00db      	lsls	r3, r3, #3
 801a6e0:	440b      	add	r3, r1
 801a6e2:	3314      	adds	r3, #20
 801a6e4:	2202      	movs	r2, #2
 801a6e6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a6e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6ec:	492d      	ldr	r1, [pc, #180]	; (801a7a4 <etharp_update_arp_entry+0x148>)
 801a6ee:	4613      	mov	r3, r2
 801a6f0:	005b      	lsls	r3, r3, #1
 801a6f2:	4413      	add	r3, r2
 801a6f4:	00db      	lsls	r3, r3, #3
 801a6f6:	440b      	add	r3, r1
 801a6f8:	3308      	adds	r3, #8
 801a6fa:	68fa      	ldr	r2, [r7, #12]
 801a6fc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a6fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a702:	4613      	mov	r3, r2
 801a704:	005b      	lsls	r3, r3, #1
 801a706:	4413      	add	r3, r2
 801a708:	00db      	lsls	r3, r3, #3
 801a70a:	3308      	adds	r3, #8
 801a70c:	4a25      	ldr	r2, [pc, #148]	; (801a7a4 <etharp_update_arp_entry+0x148>)
 801a70e:	4413      	add	r3, r2
 801a710:	3304      	adds	r3, #4
 801a712:	2206      	movs	r2, #6
 801a714:	6879      	ldr	r1, [r7, #4]
 801a716:	4618      	mov	r0, r3
 801a718:	f002 fa43 	bl	801cba2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a71c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a720:	4920      	ldr	r1, [pc, #128]	; (801a7a4 <etharp_update_arp_entry+0x148>)
 801a722:	4613      	mov	r3, r2
 801a724:	005b      	lsls	r3, r3, #1
 801a726:	4413      	add	r3, r2
 801a728:	00db      	lsls	r3, r3, #3
 801a72a:	440b      	add	r3, r1
 801a72c:	3312      	adds	r3, #18
 801a72e:	2200      	movs	r2, #0
 801a730:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a732:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a736:	491b      	ldr	r1, [pc, #108]	; (801a7a4 <etharp_update_arp_entry+0x148>)
 801a738:	4613      	mov	r3, r2
 801a73a:	005b      	lsls	r3, r3, #1
 801a73c:	4413      	add	r3, r2
 801a73e:	00db      	lsls	r3, r3, #3
 801a740:	440b      	add	r3, r1
 801a742:	681b      	ldr	r3, [r3, #0]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d021      	beq.n	801a78c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a748:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a74c:	4915      	ldr	r1, [pc, #84]	; (801a7a4 <etharp_update_arp_entry+0x148>)
 801a74e:	4613      	mov	r3, r2
 801a750:	005b      	lsls	r3, r3, #1
 801a752:	4413      	add	r3, r2
 801a754:	00db      	lsls	r3, r3, #3
 801a756:	440b      	add	r3, r1
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a75c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a760:	4910      	ldr	r1, [pc, #64]	; (801a7a4 <etharp_update_arp_entry+0x148>)
 801a762:	4613      	mov	r3, r2
 801a764:	005b      	lsls	r3, r3, #1
 801a766:	4413      	add	r3, r2
 801a768:	00db      	lsls	r3, r3, #3
 801a76a:	440b      	add	r3, r1
 801a76c:	2200      	movs	r2, #0
 801a76e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a77a:	9300      	str	r3, [sp, #0]
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	6939      	ldr	r1, [r7, #16]
 801a780:	68f8      	ldr	r0, [r7, #12]
 801a782:	f001 ffb1 	bl	801c6e8 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a786:	6938      	ldr	r0, [r7, #16]
 801a788:	f7f8 fbd6 	bl	8012f38 <pbuf_free>
  }
  return ERR_OK;
 801a78c:	2300      	movs	r3, #0
}
 801a78e:	4618      	mov	r0, r3
 801a790:	3718      	adds	r7, #24
 801a792:	46bd      	mov	sp, r7
 801a794:	bd80      	pop	{r7, pc}
 801a796:	bf00      	nop
 801a798:	08020978 	.word	0x08020978
 801a79c:	08020a70 	.word	0x08020a70
 801a7a0:	080209f0 	.word	0x080209f0
 801a7a4:	20008758 	.word	0x20008758

0801a7a8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a7a8:	b580      	push	{r7, lr}
 801a7aa:	b084      	sub	sp, #16
 801a7ac:	af00      	add	r7, sp, #0
 801a7ae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	60fb      	str	r3, [r7, #12]
 801a7b4:	e01e      	b.n	801a7f4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a7b6:	4913      	ldr	r1, [pc, #76]	; (801a804 <etharp_cleanup_netif+0x5c>)
 801a7b8:	68fa      	ldr	r2, [r7, #12]
 801a7ba:	4613      	mov	r3, r2
 801a7bc:	005b      	lsls	r3, r3, #1
 801a7be:	4413      	add	r3, r2
 801a7c0:	00db      	lsls	r3, r3, #3
 801a7c2:	440b      	add	r3, r1
 801a7c4:	3314      	adds	r3, #20
 801a7c6:	781b      	ldrb	r3, [r3, #0]
 801a7c8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a7ca:	7afb      	ldrb	r3, [r7, #11]
 801a7cc:	2b00      	cmp	r3, #0
 801a7ce:	d00e      	beq.n	801a7ee <etharp_cleanup_netif+0x46>
 801a7d0:	490c      	ldr	r1, [pc, #48]	; (801a804 <etharp_cleanup_netif+0x5c>)
 801a7d2:	68fa      	ldr	r2, [r7, #12]
 801a7d4:	4613      	mov	r3, r2
 801a7d6:	005b      	lsls	r3, r3, #1
 801a7d8:	4413      	add	r3, r2
 801a7da:	00db      	lsls	r3, r3, #3
 801a7dc:	440b      	add	r3, r1
 801a7de:	3308      	adds	r3, #8
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	687a      	ldr	r2, [r7, #4]
 801a7e4:	429a      	cmp	r2, r3
 801a7e6:	d102      	bne.n	801a7ee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a7e8:	68f8      	ldr	r0, [r7, #12]
 801a7ea:	f7ff fce5 	bl	801a1b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a7ee:	68fb      	ldr	r3, [r7, #12]
 801a7f0:	3301      	adds	r3, #1
 801a7f2:	60fb      	str	r3, [r7, #12]
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	2b09      	cmp	r3, #9
 801a7f8:	dddd      	ble.n	801a7b6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801a7fa:	bf00      	nop
 801a7fc:	3710      	adds	r7, #16
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bd80      	pop	{r7, pc}
 801a802:	bf00      	nop
 801a804:	20008758 	.word	0x20008758

0801a808 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a808:	b5b0      	push	{r4, r5, r7, lr}
 801a80a:	b08a      	sub	sp, #40	; 0x28
 801a80c:	af04      	add	r7, sp, #16
 801a80e:	6078      	str	r0, [r7, #4]
 801a810:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a812:	683b      	ldr	r3, [r7, #0]
 801a814:	2b00      	cmp	r3, #0
 801a816:	d107      	bne.n	801a828 <etharp_input+0x20>
 801a818:	4b3d      	ldr	r3, [pc, #244]	; (801a910 <etharp_input+0x108>)
 801a81a:	f240 228a 	movw	r2, #650	; 0x28a
 801a81e:	493d      	ldr	r1, [pc, #244]	; (801a914 <etharp_input+0x10c>)
 801a820:	483d      	ldr	r0, [pc, #244]	; (801a918 <etharp_input+0x110>)
 801a822:	f002 f9d1 	bl	801cbc8 <iprintf>
 801a826:	e06f      	b.n	801a908 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	685b      	ldr	r3, [r3, #4]
 801a82c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a82e:	693b      	ldr	r3, [r7, #16]
 801a830:	881b      	ldrh	r3, [r3, #0]
 801a832:	b29b      	uxth	r3, r3
 801a834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a838:	d10c      	bne.n	801a854 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a83a:	693b      	ldr	r3, [r7, #16]
 801a83c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a83e:	2b06      	cmp	r3, #6
 801a840:	d108      	bne.n	801a854 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a842:	693b      	ldr	r3, [r7, #16]
 801a844:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a846:	2b04      	cmp	r3, #4
 801a848:	d104      	bne.n	801a854 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a84a:	693b      	ldr	r3, [r7, #16]
 801a84c:	885b      	ldrh	r3, [r3, #2]
 801a84e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a850:	2b08      	cmp	r3, #8
 801a852:	d003      	beq.n	801a85c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a854:	6878      	ldr	r0, [r7, #4]
 801a856:	f7f8 fb6f 	bl	8012f38 <pbuf_free>
    return;
 801a85a:	e055      	b.n	801a908 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a85c:	693b      	ldr	r3, [r7, #16]
 801a85e:	330e      	adds	r3, #14
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a864:	693b      	ldr	r3, [r7, #16]
 801a866:	3318      	adds	r3, #24
 801a868:	681b      	ldr	r3, [r3, #0]
 801a86a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a86c:	683b      	ldr	r3, [r7, #0]
 801a86e:	3304      	adds	r3, #4
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	2b00      	cmp	r3, #0
 801a874:	d102      	bne.n	801a87c <etharp_input+0x74>
    for_us = 0;
 801a876:	2300      	movs	r3, #0
 801a878:	75fb      	strb	r3, [r7, #23]
 801a87a:	e009      	b.n	801a890 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a87c:	68ba      	ldr	r2, [r7, #8]
 801a87e:	683b      	ldr	r3, [r7, #0]
 801a880:	3304      	adds	r3, #4
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	429a      	cmp	r2, r3
 801a886:	bf0c      	ite	eq
 801a888:	2301      	moveq	r3, #1
 801a88a:	2300      	movne	r3, #0
 801a88c:	b2db      	uxtb	r3, r3
 801a88e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a890:	693b      	ldr	r3, [r7, #16]
 801a892:	f103 0208 	add.w	r2, r3, #8
 801a896:	7dfb      	ldrb	r3, [r7, #23]
 801a898:	2b00      	cmp	r3, #0
 801a89a:	d001      	beq.n	801a8a0 <etharp_input+0x98>
 801a89c:	2301      	movs	r3, #1
 801a89e:	e000      	b.n	801a8a2 <etharp_input+0x9a>
 801a8a0:	2302      	movs	r3, #2
 801a8a2:	f107 010c 	add.w	r1, r7, #12
 801a8a6:	6838      	ldr	r0, [r7, #0]
 801a8a8:	f7ff fed8 	bl	801a65c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a8ac:	693b      	ldr	r3, [r7, #16]
 801a8ae:	88db      	ldrh	r3, [r3, #6]
 801a8b0:	b29b      	uxth	r3, r3
 801a8b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a8b6:	d003      	beq.n	801a8c0 <etharp_input+0xb8>
 801a8b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a8bc:	d01e      	beq.n	801a8fc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a8be:	e020      	b.n	801a902 <etharp_input+0xfa>
      if (for_us) {
 801a8c0:	7dfb      	ldrb	r3, [r7, #23]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d01c      	beq.n	801a900 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a8c6:	683b      	ldr	r3, [r7, #0]
 801a8c8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a8cc:	693b      	ldr	r3, [r7, #16]
 801a8ce:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a8d2:	683b      	ldr	r3, [r7, #0]
 801a8d4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a8d8:	683b      	ldr	r3, [r7, #0]
 801a8da:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a8dc:	693a      	ldr	r2, [r7, #16]
 801a8de:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a8e0:	2102      	movs	r1, #2
 801a8e2:	9103      	str	r1, [sp, #12]
 801a8e4:	f107 010c 	add.w	r1, r7, #12
 801a8e8:	9102      	str	r1, [sp, #8]
 801a8ea:	9201      	str	r2, [sp, #4]
 801a8ec:	9300      	str	r3, [sp, #0]
 801a8ee:	462b      	mov	r3, r5
 801a8f0:	4622      	mov	r2, r4
 801a8f2:	4601      	mov	r1, r0
 801a8f4:	6838      	ldr	r0, [r7, #0]
 801a8f6:	f000 faeb 	bl	801aed0 <etharp_raw>
      break;
 801a8fa:	e001      	b.n	801a900 <etharp_input+0xf8>
      break;
 801a8fc:	bf00      	nop
 801a8fe:	e000      	b.n	801a902 <etharp_input+0xfa>
      break;
 801a900:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a902:	6878      	ldr	r0, [r7, #4]
 801a904:	f7f8 fb18 	bl	8012f38 <pbuf_free>
}
 801a908:	3718      	adds	r7, #24
 801a90a:	46bd      	mov	sp, r7
 801a90c:	bdb0      	pop	{r4, r5, r7, pc}
 801a90e:	bf00      	nop
 801a910:	08020978 	.word	0x08020978
 801a914:	08020ac8 	.word	0x08020ac8
 801a918:	080209f0 	.word	0x080209f0

0801a91c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b086      	sub	sp, #24
 801a920:	af02      	add	r7, sp, #8
 801a922:	60f8      	str	r0, [r7, #12]
 801a924:	60b9      	str	r1, [r7, #8]
 801a926:	4613      	mov	r3, r2
 801a928:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a92a:	79fa      	ldrb	r2, [r7, #7]
 801a92c:	4944      	ldr	r1, [pc, #272]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a92e:	4613      	mov	r3, r2
 801a930:	005b      	lsls	r3, r3, #1
 801a932:	4413      	add	r3, r2
 801a934:	00db      	lsls	r3, r3, #3
 801a936:	440b      	add	r3, r1
 801a938:	3314      	adds	r3, #20
 801a93a:	781b      	ldrb	r3, [r3, #0]
 801a93c:	2b01      	cmp	r3, #1
 801a93e:	d806      	bhi.n	801a94e <etharp_output_to_arp_index+0x32>
 801a940:	4b40      	ldr	r3, [pc, #256]	; (801aa44 <etharp_output_to_arp_index+0x128>)
 801a942:	f240 22ef 	movw	r2, #751	; 0x2ef
 801a946:	4940      	ldr	r1, [pc, #256]	; (801aa48 <etharp_output_to_arp_index+0x12c>)
 801a948:	4840      	ldr	r0, [pc, #256]	; (801aa4c <etharp_output_to_arp_index+0x130>)
 801a94a:	f002 f93d 	bl	801cbc8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a94e:	79fa      	ldrb	r2, [r7, #7]
 801a950:	493b      	ldr	r1, [pc, #236]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a952:	4613      	mov	r3, r2
 801a954:	005b      	lsls	r3, r3, #1
 801a956:	4413      	add	r3, r2
 801a958:	00db      	lsls	r3, r3, #3
 801a95a:	440b      	add	r3, r1
 801a95c:	3314      	adds	r3, #20
 801a95e:	781b      	ldrb	r3, [r3, #0]
 801a960:	2b02      	cmp	r3, #2
 801a962:	d153      	bne.n	801aa0c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a964:	79fa      	ldrb	r2, [r7, #7]
 801a966:	4936      	ldr	r1, [pc, #216]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a968:	4613      	mov	r3, r2
 801a96a:	005b      	lsls	r3, r3, #1
 801a96c:	4413      	add	r3, r2
 801a96e:	00db      	lsls	r3, r3, #3
 801a970:	440b      	add	r3, r1
 801a972:	3312      	adds	r3, #18
 801a974:	881b      	ldrh	r3, [r3, #0]
 801a976:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a97a:	d919      	bls.n	801a9b0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a97c:	79fa      	ldrb	r2, [r7, #7]
 801a97e:	4613      	mov	r3, r2
 801a980:	005b      	lsls	r3, r3, #1
 801a982:	4413      	add	r3, r2
 801a984:	00db      	lsls	r3, r3, #3
 801a986:	4a2e      	ldr	r2, [pc, #184]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a988:	4413      	add	r3, r2
 801a98a:	3304      	adds	r3, #4
 801a98c:	4619      	mov	r1, r3
 801a98e:	68f8      	ldr	r0, [r7, #12]
 801a990:	f000 fb4c 	bl	801b02c <etharp_request>
 801a994:	4603      	mov	r3, r0
 801a996:	2b00      	cmp	r3, #0
 801a998:	d138      	bne.n	801aa0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a99a:	79fa      	ldrb	r2, [r7, #7]
 801a99c:	4928      	ldr	r1, [pc, #160]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a99e:	4613      	mov	r3, r2
 801a9a0:	005b      	lsls	r3, r3, #1
 801a9a2:	4413      	add	r3, r2
 801a9a4:	00db      	lsls	r3, r3, #3
 801a9a6:	440b      	add	r3, r1
 801a9a8:	3314      	adds	r3, #20
 801a9aa:	2203      	movs	r2, #3
 801a9ac:	701a      	strb	r2, [r3, #0]
 801a9ae:	e02d      	b.n	801aa0c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a9b0:	79fa      	ldrb	r2, [r7, #7]
 801a9b2:	4923      	ldr	r1, [pc, #140]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a9b4:	4613      	mov	r3, r2
 801a9b6:	005b      	lsls	r3, r3, #1
 801a9b8:	4413      	add	r3, r2
 801a9ba:	00db      	lsls	r3, r3, #3
 801a9bc:	440b      	add	r3, r1
 801a9be:	3312      	adds	r3, #18
 801a9c0:	881b      	ldrh	r3, [r3, #0]
 801a9c2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a9c6:	d321      	bcc.n	801aa0c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a9c8:	79fa      	ldrb	r2, [r7, #7]
 801a9ca:	4613      	mov	r3, r2
 801a9cc:	005b      	lsls	r3, r3, #1
 801a9ce:	4413      	add	r3, r2
 801a9d0:	00db      	lsls	r3, r3, #3
 801a9d2:	4a1b      	ldr	r2, [pc, #108]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a9d4:	4413      	add	r3, r2
 801a9d6:	1d19      	adds	r1, r3, #4
 801a9d8:	79fa      	ldrb	r2, [r7, #7]
 801a9da:	4613      	mov	r3, r2
 801a9dc:	005b      	lsls	r3, r3, #1
 801a9de:	4413      	add	r3, r2
 801a9e0:	00db      	lsls	r3, r3, #3
 801a9e2:	3308      	adds	r3, #8
 801a9e4:	4a16      	ldr	r2, [pc, #88]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a9e6:	4413      	add	r3, r2
 801a9e8:	3304      	adds	r3, #4
 801a9ea:	461a      	mov	r2, r3
 801a9ec:	68f8      	ldr	r0, [r7, #12]
 801a9ee:	f000 fafb 	bl	801afe8 <etharp_request_dst>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	2b00      	cmp	r3, #0
 801a9f6:	d109      	bne.n	801aa0c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a9f8:	79fa      	ldrb	r2, [r7, #7]
 801a9fa:	4911      	ldr	r1, [pc, #68]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801a9fc:	4613      	mov	r3, r2
 801a9fe:	005b      	lsls	r3, r3, #1
 801aa00:	4413      	add	r3, r2
 801aa02:	00db      	lsls	r3, r3, #3
 801aa04:	440b      	add	r3, r1
 801aa06:	3314      	adds	r3, #20
 801aa08:	2203      	movs	r2, #3
 801aa0a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801aa12:	79fa      	ldrb	r2, [r7, #7]
 801aa14:	4613      	mov	r3, r2
 801aa16:	005b      	lsls	r3, r3, #1
 801aa18:	4413      	add	r3, r2
 801aa1a:	00db      	lsls	r3, r3, #3
 801aa1c:	3308      	adds	r3, #8
 801aa1e:	4a08      	ldr	r2, [pc, #32]	; (801aa40 <etharp_output_to_arp_index+0x124>)
 801aa20:	4413      	add	r3, r2
 801aa22:	1d1a      	adds	r2, r3, #4
 801aa24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801aa28:	9300      	str	r3, [sp, #0]
 801aa2a:	4613      	mov	r3, r2
 801aa2c:	460a      	mov	r2, r1
 801aa2e:	68b9      	ldr	r1, [r7, #8]
 801aa30:	68f8      	ldr	r0, [r7, #12]
 801aa32:	f001 fe59 	bl	801c6e8 <ethernet_output>
 801aa36:	4603      	mov	r3, r0
}
 801aa38:	4618      	mov	r0, r3
 801aa3a:	3710      	adds	r7, #16
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	bd80      	pop	{r7, pc}
 801aa40:	20008758 	.word	0x20008758
 801aa44:	08020978 	.word	0x08020978
 801aa48:	08020ae8 	.word	0x08020ae8
 801aa4c:	080209f0 	.word	0x080209f0

0801aa50 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b08a      	sub	sp, #40	; 0x28
 801aa54:	af02      	add	r7, sp, #8
 801aa56:	60f8      	str	r0, [r7, #12]
 801aa58:	60b9      	str	r1, [r7, #8]
 801aa5a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801aa5c:	687b      	ldr	r3, [r7, #4]
 801aa5e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	2b00      	cmp	r3, #0
 801aa64:	d106      	bne.n	801aa74 <etharp_output+0x24>
 801aa66:	4b73      	ldr	r3, [pc, #460]	; (801ac34 <etharp_output+0x1e4>)
 801aa68:	f240 321e 	movw	r2, #798	; 0x31e
 801aa6c:	4972      	ldr	r1, [pc, #456]	; (801ac38 <etharp_output+0x1e8>)
 801aa6e:	4873      	ldr	r0, [pc, #460]	; (801ac3c <etharp_output+0x1ec>)
 801aa70:	f002 f8aa 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801aa74:	68bb      	ldr	r3, [r7, #8]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	d106      	bne.n	801aa88 <etharp_output+0x38>
 801aa7a:	4b6e      	ldr	r3, [pc, #440]	; (801ac34 <etharp_output+0x1e4>)
 801aa7c:	f240 321f 	movw	r2, #799	; 0x31f
 801aa80:	496f      	ldr	r1, [pc, #444]	; (801ac40 <etharp_output+0x1f0>)
 801aa82:	486e      	ldr	r0, [pc, #440]	; (801ac3c <etharp_output+0x1ec>)
 801aa84:	f002 f8a0 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d106      	bne.n	801aa9c <etharp_output+0x4c>
 801aa8e:	4b69      	ldr	r3, [pc, #420]	; (801ac34 <etharp_output+0x1e4>)
 801aa90:	f44f 7248 	mov.w	r2, #800	; 0x320
 801aa94:	496b      	ldr	r1, [pc, #428]	; (801ac44 <etharp_output+0x1f4>)
 801aa96:	4869      	ldr	r0, [pc, #420]	; (801ac3c <etharp_output+0x1ec>)
 801aa98:	f002 f896 	bl	801cbc8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	68f9      	ldr	r1, [r7, #12]
 801aaa2:	4618      	mov	r0, r3
 801aaa4:	f000 ff1c 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 801aaa8:	4603      	mov	r3, r0
 801aaaa:	2b00      	cmp	r3, #0
 801aaac:	d002      	beq.n	801aab4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801aaae:	4b66      	ldr	r3, [pc, #408]	; (801ac48 <etharp_output+0x1f8>)
 801aab0:	61fb      	str	r3, [r7, #28]
 801aab2:	e0af      	b.n	801ac14 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	681b      	ldr	r3, [r3, #0]
 801aab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801aabc:	2be0      	cmp	r3, #224	; 0xe0
 801aabe:	d118      	bne.n	801aaf2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801aac0:	2301      	movs	r3, #1
 801aac2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801aac4:	2300      	movs	r3, #0
 801aac6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801aac8:	235e      	movs	r3, #94	; 0x5e
 801aaca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	3301      	adds	r3, #1
 801aad0:	781b      	ldrb	r3, [r3, #0]
 801aad2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aad6:	b2db      	uxtb	r3, r3
 801aad8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	3302      	adds	r3, #2
 801aade:	781b      	ldrb	r3, [r3, #0]
 801aae0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	3303      	adds	r3, #3
 801aae6:	781b      	ldrb	r3, [r3, #0]
 801aae8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aaea:	f107 0310 	add.w	r3, r7, #16
 801aaee:	61fb      	str	r3, [r7, #28]
 801aaf0:	e090      	b.n	801ac14 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681a      	ldr	r2, [r3, #0]
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	3304      	adds	r3, #4
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	405a      	eors	r2, r3
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	3308      	adds	r3, #8
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	4013      	ands	r3, r2
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d012      	beq.n	801ab30 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ab0a:	687b      	ldr	r3, [r7, #4]
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ab10:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ab14:	4293      	cmp	r3, r2
 801ab16:	d00b      	beq.n	801ab30 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	330c      	adds	r3, #12
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d003      	beq.n	801ab2a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ab22:	68fb      	ldr	r3, [r7, #12]
 801ab24:	330c      	adds	r3, #12
 801ab26:	61bb      	str	r3, [r7, #24]
 801ab28:	e002      	b.n	801ab30 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ab2a:	f06f 0303 	mvn.w	r3, #3
 801ab2e:	e07d      	b.n	801ac2c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ab30:	4b46      	ldr	r3, [pc, #280]	; (801ac4c <etharp_output+0x1fc>)
 801ab32:	781b      	ldrb	r3, [r3, #0]
 801ab34:	4619      	mov	r1, r3
 801ab36:	4a46      	ldr	r2, [pc, #280]	; (801ac50 <etharp_output+0x200>)
 801ab38:	460b      	mov	r3, r1
 801ab3a:	005b      	lsls	r3, r3, #1
 801ab3c:	440b      	add	r3, r1
 801ab3e:	00db      	lsls	r3, r3, #3
 801ab40:	4413      	add	r3, r2
 801ab42:	3314      	adds	r3, #20
 801ab44:	781b      	ldrb	r3, [r3, #0]
 801ab46:	2b01      	cmp	r3, #1
 801ab48:	d925      	bls.n	801ab96 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ab4a:	4b40      	ldr	r3, [pc, #256]	; (801ac4c <etharp_output+0x1fc>)
 801ab4c:	781b      	ldrb	r3, [r3, #0]
 801ab4e:	4619      	mov	r1, r3
 801ab50:	4a3f      	ldr	r2, [pc, #252]	; (801ac50 <etharp_output+0x200>)
 801ab52:	460b      	mov	r3, r1
 801ab54:	005b      	lsls	r3, r3, #1
 801ab56:	440b      	add	r3, r1
 801ab58:	00db      	lsls	r3, r3, #3
 801ab5a:	4413      	add	r3, r2
 801ab5c:	3308      	adds	r3, #8
 801ab5e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ab60:	68fa      	ldr	r2, [r7, #12]
 801ab62:	429a      	cmp	r2, r3
 801ab64:	d117      	bne.n	801ab96 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ab66:	69bb      	ldr	r3, [r7, #24]
 801ab68:	681a      	ldr	r2, [r3, #0]
 801ab6a:	4b38      	ldr	r3, [pc, #224]	; (801ac4c <etharp_output+0x1fc>)
 801ab6c:	781b      	ldrb	r3, [r3, #0]
 801ab6e:	4618      	mov	r0, r3
 801ab70:	4937      	ldr	r1, [pc, #220]	; (801ac50 <etharp_output+0x200>)
 801ab72:	4603      	mov	r3, r0
 801ab74:	005b      	lsls	r3, r3, #1
 801ab76:	4403      	add	r3, r0
 801ab78:	00db      	lsls	r3, r3, #3
 801ab7a:	440b      	add	r3, r1
 801ab7c:	3304      	adds	r3, #4
 801ab7e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ab80:	429a      	cmp	r2, r3
 801ab82:	d108      	bne.n	801ab96 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ab84:	4b31      	ldr	r3, [pc, #196]	; (801ac4c <etharp_output+0x1fc>)
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	461a      	mov	r2, r3
 801ab8a:	68b9      	ldr	r1, [r7, #8]
 801ab8c:	68f8      	ldr	r0, [r7, #12]
 801ab8e:	f7ff fec5 	bl	801a91c <etharp_output_to_arp_index>
 801ab92:	4603      	mov	r3, r0
 801ab94:	e04a      	b.n	801ac2c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab96:	2300      	movs	r3, #0
 801ab98:	75fb      	strb	r3, [r7, #23]
 801ab9a:	e031      	b.n	801ac00 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab9c:	7dfa      	ldrb	r2, [r7, #23]
 801ab9e:	492c      	ldr	r1, [pc, #176]	; (801ac50 <etharp_output+0x200>)
 801aba0:	4613      	mov	r3, r2
 801aba2:	005b      	lsls	r3, r3, #1
 801aba4:	4413      	add	r3, r2
 801aba6:	00db      	lsls	r3, r3, #3
 801aba8:	440b      	add	r3, r1
 801abaa:	3314      	adds	r3, #20
 801abac:	781b      	ldrb	r3, [r3, #0]
 801abae:	2b01      	cmp	r3, #1
 801abb0:	d923      	bls.n	801abfa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801abb2:	7dfa      	ldrb	r2, [r7, #23]
 801abb4:	4926      	ldr	r1, [pc, #152]	; (801ac50 <etharp_output+0x200>)
 801abb6:	4613      	mov	r3, r2
 801abb8:	005b      	lsls	r3, r3, #1
 801abba:	4413      	add	r3, r2
 801abbc:	00db      	lsls	r3, r3, #3
 801abbe:	440b      	add	r3, r1
 801abc0:	3308      	adds	r3, #8
 801abc2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801abc4:	68fa      	ldr	r2, [r7, #12]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d117      	bne.n	801abfa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801abca:	69bb      	ldr	r3, [r7, #24]
 801abcc:	6819      	ldr	r1, [r3, #0]
 801abce:	7dfa      	ldrb	r2, [r7, #23]
 801abd0:	481f      	ldr	r0, [pc, #124]	; (801ac50 <etharp_output+0x200>)
 801abd2:	4613      	mov	r3, r2
 801abd4:	005b      	lsls	r3, r3, #1
 801abd6:	4413      	add	r3, r2
 801abd8:	00db      	lsls	r3, r3, #3
 801abda:	4403      	add	r3, r0
 801abdc:	3304      	adds	r3, #4
 801abde:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801abe0:	4299      	cmp	r1, r3
 801abe2:	d10a      	bne.n	801abfa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801abe4:	4a19      	ldr	r2, [pc, #100]	; (801ac4c <etharp_output+0x1fc>)
 801abe6:	7dfb      	ldrb	r3, [r7, #23]
 801abe8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801abea:	7dfb      	ldrb	r3, [r7, #23]
 801abec:	461a      	mov	r2, r3
 801abee:	68b9      	ldr	r1, [r7, #8]
 801abf0:	68f8      	ldr	r0, [r7, #12]
 801abf2:	f7ff fe93 	bl	801a91c <etharp_output_to_arp_index>
 801abf6:	4603      	mov	r3, r0
 801abf8:	e018      	b.n	801ac2c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801abfa:	7dfb      	ldrb	r3, [r7, #23]
 801abfc:	3301      	adds	r3, #1
 801abfe:	75fb      	strb	r3, [r7, #23]
 801ac00:	7dfb      	ldrb	r3, [r7, #23]
 801ac02:	2b09      	cmp	r3, #9
 801ac04:	d9ca      	bls.n	801ab9c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ac06:	68ba      	ldr	r2, [r7, #8]
 801ac08:	69b9      	ldr	r1, [r7, #24]
 801ac0a:	68f8      	ldr	r0, [r7, #12]
 801ac0c:	f000 f822 	bl	801ac54 <etharp_query>
 801ac10:	4603      	mov	r3, r0
 801ac12:	e00b      	b.n	801ac2c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ac1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ac1e:	9300      	str	r3, [sp, #0]
 801ac20:	69fb      	ldr	r3, [r7, #28]
 801ac22:	68b9      	ldr	r1, [r7, #8]
 801ac24:	68f8      	ldr	r0, [r7, #12]
 801ac26:	f001 fd5f 	bl	801c6e8 <ethernet_output>
 801ac2a:	4603      	mov	r3, r0
}
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	3720      	adds	r7, #32
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	08020978 	.word	0x08020978
 801ac38:	08020ac8 	.word	0x08020ac8
 801ac3c:	080209f0 	.word	0x080209f0
 801ac40:	08020b18 	.word	0x08020b18
 801ac44:	08020ab8 	.word	0x08020ab8
 801ac48:	08021190 	.word	0x08021190
 801ac4c:	20008848 	.word	0x20008848
 801ac50:	20008758 	.word	0x20008758

0801ac54 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b08c      	sub	sp, #48	; 0x30
 801ac58:	af02      	add	r7, sp, #8
 801ac5a:	60f8      	str	r0, [r7, #12]
 801ac5c:	60b9      	str	r1, [r7, #8]
 801ac5e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	3326      	adds	r3, #38	; 0x26
 801ac64:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ac66:	23ff      	movs	r3, #255	; 0xff
 801ac68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ac70:	68bb      	ldr	r3, [r7, #8]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	68f9      	ldr	r1, [r7, #12]
 801ac76:	4618      	mov	r0, r3
 801ac78:	f000 fe32 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 801ac7c:	4603      	mov	r3, r0
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d10c      	bne.n	801ac9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ac82:	68bb      	ldr	r3, [r7, #8]
 801ac84:	681b      	ldr	r3, [r3, #0]
 801ac86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ac8a:	2be0      	cmp	r3, #224	; 0xe0
 801ac8c:	d006      	beq.n	801ac9c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ac8e:	68bb      	ldr	r3, [r7, #8]
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d003      	beq.n	801ac9c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	681b      	ldr	r3, [r3, #0]
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	d102      	bne.n	801aca2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ac9c:	f06f 030f 	mvn.w	r3, #15
 801aca0:	e102      	b.n	801aea8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801aca2:	68fa      	ldr	r2, [r7, #12]
 801aca4:	2101      	movs	r1, #1
 801aca6:	68b8      	ldr	r0, [r7, #8]
 801aca8:	f7ff fb60 	bl	801a36c <etharp_find_entry>
 801acac:	4603      	mov	r3, r0
 801acae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801acb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	da02      	bge.n	801acbe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801acb8:	8a7b      	ldrh	r3, [r7, #18]
 801acba:	b25b      	sxtb	r3, r3
 801acbc:	e0f4      	b.n	801aea8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801acbe:	8a7b      	ldrh	r3, [r7, #18]
 801acc0:	2b7e      	cmp	r3, #126	; 0x7e
 801acc2:	d906      	bls.n	801acd2 <etharp_query+0x7e>
 801acc4:	4b7a      	ldr	r3, [pc, #488]	; (801aeb0 <etharp_query+0x25c>)
 801acc6:	f240 32c1 	movw	r2, #961	; 0x3c1
 801acca:	497a      	ldr	r1, [pc, #488]	; (801aeb4 <etharp_query+0x260>)
 801accc:	487a      	ldr	r0, [pc, #488]	; (801aeb8 <etharp_query+0x264>)
 801acce:	f001 ff7b 	bl	801cbc8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801acd2:	8a7b      	ldrh	r3, [r7, #18]
 801acd4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801acd6:	7c7a      	ldrb	r2, [r7, #17]
 801acd8:	4978      	ldr	r1, [pc, #480]	; (801aebc <etharp_query+0x268>)
 801acda:	4613      	mov	r3, r2
 801acdc:	005b      	lsls	r3, r3, #1
 801acde:	4413      	add	r3, r2
 801ace0:	00db      	lsls	r3, r3, #3
 801ace2:	440b      	add	r3, r1
 801ace4:	3314      	adds	r3, #20
 801ace6:	781b      	ldrb	r3, [r3, #0]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d115      	bne.n	801ad18 <etharp_query+0xc4>
    is_new_entry = 1;
 801acec:	2301      	movs	r3, #1
 801acee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801acf0:	7c7a      	ldrb	r2, [r7, #17]
 801acf2:	4972      	ldr	r1, [pc, #456]	; (801aebc <etharp_query+0x268>)
 801acf4:	4613      	mov	r3, r2
 801acf6:	005b      	lsls	r3, r3, #1
 801acf8:	4413      	add	r3, r2
 801acfa:	00db      	lsls	r3, r3, #3
 801acfc:	440b      	add	r3, r1
 801acfe:	3314      	adds	r3, #20
 801ad00:	2201      	movs	r2, #1
 801ad02:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ad04:	7c7a      	ldrb	r2, [r7, #17]
 801ad06:	496d      	ldr	r1, [pc, #436]	; (801aebc <etharp_query+0x268>)
 801ad08:	4613      	mov	r3, r2
 801ad0a:	005b      	lsls	r3, r3, #1
 801ad0c:	4413      	add	r3, r2
 801ad0e:	00db      	lsls	r3, r3, #3
 801ad10:	440b      	add	r3, r1
 801ad12:	3308      	adds	r3, #8
 801ad14:	68fa      	ldr	r2, [r7, #12]
 801ad16:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ad18:	7c7a      	ldrb	r2, [r7, #17]
 801ad1a:	4968      	ldr	r1, [pc, #416]	; (801aebc <etharp_query+0x268>)
 801ad1c:	4613      	mov	r3, r2
 801ad1e:	005b      	lsls	r3, r3, #1
 801ad20:	4413      	add	r3, r2
 801ad22:	00db      	lsls	r3, r3, #3
 801ad24:	440b      	add	r3, r1
 801ad26:	3314      	adds	r3, #20
 801ad28:	781b      	ldrb	r3, [r3, #0]
 801ad2a:	2b01      	cmp	r3, #1
 801ad2c:	d011      	beq.n	801ad52 <etharp_query+0xfe>
 801ad2e:	7c7a      	ldrb	r2, [r7, #17]
 801ad30:	4962      	ldr	r1, [pc, #392]	; (801aebc <etharp_query+0x268>)
 801ad32:	4613      	mov	r3, r2
 801ad34:	005b      	lsls	r3, r3, #1
 801ad36:	4413      	add	r3, r2
 801ad38:	00db      	lsls	r3, r3, #3
 801ad3a:	440b      	add	r3, r1
 801ad3c:	3314      	adds	r3, #20
 801ad3e:	781b      	ldrb	r3, [r3, #0]
 801ad40:	2b01      	cmp	r3, #1
 801ad42:	d806      	bhi.n	801ad52 <etharp_query+0xfe>
 801ad44:	4b5a      	ldr	r3, [pc, #360]	; (801aeb0 <etharp_query+0x25c>)
 801ad46:	f240 32cf 	movw	r2, #975	; 0x3cf
 801ad4a:	495d      	ldr	r1, [pc, #372]	; (801aec0 <etharp_query+0x26c>)
 801ad4c:	485a      	ldr	r0, [pc, #360]	; (801aeb8 <etharp_query+0x264>)
 801ad4e:	f001 ff3b 	bl	801cbc8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ad52:	6a3b      	ldr	r3, [r7, #32]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d102      	bne.n	801ad5e <etharp_query+0x10a>
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d10c      	bne.n	801ad78 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ad5e:	68b9      	ldr	r1, [r7, #8]
 801ad60:	68f8      	ldr	r0, [r7, #12]
 801ad62:	f000 f963 	bl	801b02c <etharp_request>
 801ad66:	4603      	mov	r3, r0
 801ad68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ad6c:	687b      	ldr	r3, [r7, #4]
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d102      	bne.n	801ad78 <etharp_query+0x124>
      return result;
 801ad72:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ad76:	e097      	b.n	801aea8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ad78:	687b      	ldr	r3, [r7, #4]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d106      	bne.n	801ad8c <etharp_query+0x138>
 801ad7e:	4b4c      	ldr	r3, [pc, #304]	; (801aeb0 <etharp_query+0x25c>)
 801ad80:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ad84:	494f      	ldr	r1, [pc, #316]	; (801aec4 <etharp_query+0x270>)
 801ad86:	484c      	ldr	r0, [pc, #304]	; (801aeb8 <etharp_query+0x264>)
 801ad88:	f001 ff1e 	bl	801cbc8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ad8c:	7c7a      	ldrb	r2, [r7, #17]
 801ad8e:	494b      	ldr	r1, [pc, #300]	; (801aebc <etharp_query+0x268>)
 801ad90:	4613      	mov	r3, r2
 801ad92:	005b      	lsls	r3, r3, #1
 801ad94:	4413      	add	r3, r2
 801ad96:	00db      	lsls	r3, r3, #3
 801ad98:	440b      	add	r3, r1
 801ad9a:	3314      	adds	r3, #20
 801ad9c:	781b      	ldrb	r3, [r3, #0]
 801ad9e:	2b01      	cmp	r3, #1
 801ada0:	d918      	bls.n	801add4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ada2:	4a49      	ldr	r2, [pc, #292]	; (801aec8 <etharp_query+0x274>)
 801ada4:	7c7b      	ldrb	r3, [r7, #17]
 801ada6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ada8:	7c7a      	ldrb	r2, [r7, #17]
 801adaa:	4613      	mov	r3, r2
 801adac:	005b      	lsls	r3, r3, #1
 801adae:	4413      	add	r3, r2
 801adb0:	00db      	lsls	r3, r3, #3
 801adb2:	3308      	adds	r3, #8
 801adb4:	4a41      	ldr	r2, [pc, #260]	; (801aebc <etharp_query+0x268>)
 801adb6:	4413      	add	r3, r2
 801adb8:	1d1a      	adds	r2, r3, #4
 801adba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801adbe:	9300      	str	r3, [sp, #0]
 801adc0:	4613      	mov	r3, r2
 801adc2:	697a      	ldr	r2, [r7, #20]
 801adc4:	6879      	ldr	r1, [r7, #4]
 801adc6:	68f8      	ldr	r0, [r7, #12]
 801adc8:	f001 fc8e 	bl	801c6e8 <ethernet_output>
 801adcc:	4603      	mov	r3, r0
 801adce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801add2:	e067      	b.n	801aea4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801add4:	7c7a      	ldrb	r2, [r7, #17]
 801add6:	4939      	ldr	r1, [pc, #228]	; (801aebc <etharp_query+0x268>)
 801add8:	4613      	mov	r3, r2
 801adda:	005b      	lsls	r3, r3, #1
 801addc:	4413      	add	r3, r2
 801adde:	00db      	lsls	r3, r3, #3
 801ade0:	440b      	add	r3, r1
 801ade2:	3314      	adds	r3, #20
 801ade4:	781b      	ldrb	r3, [r3, #0]
 801ade6:	2b01      	cmp	r3, #1
 801ade8:	d15c      	bne.n	801aea4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801adea:	2300      	movs	r3, #0
 801adec:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	61fb      	str	r3, [r7, #28]
    while (p) {
 801adf2:	e01c      	b.n	801ae2e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801adf4:	69fb      	ldr	r3, [r7, #28]
 801adf6:	895a      	ldrh	r2, [r3, #10]
 801adf8:	69fb      	ldr	r3, [r7, #28]
 801adfa:	891b      	ldrh	r3, [r3, #8]
 801adfc:	429a      	cmp	r2, r3
 801adfe:	d10a      	bne.n	801ae16 <etharp_query+0x1c2>
 801ae00:	69fb      	ldr	r3, [r7, #28]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d006      	beq.n	801ae16 <etharp_query+0x1c2>
 801ae08:	4b29      	ldr	r3, [pc, #164]	; (801aeb0 <etharp_query+0x25c>)
 801ae0a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ae0e:	492f      	ldr	r1, [pc, #188]	; (801aecc <etharp_query+0x278>)
 801ae10:	4829      	ldr	r0, [pc, #164]	; (801aeb8 <etharp_query+0x264>)
 801ae12:	f001 fed9 	bl	801cbc8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ae16:	69fb      	ldr	r3, [r7, #28]
 801ae18:	7b1b      	ldrb	r3, [r3, #12]
 801ae1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ae1e:	2b00      	cmp	r3, #0
 801ae20:	d002      	beq.n	801ae28 <etharp_query+0x1d4>
        copy_needed = 1;
 801ae22:	2301      	movs	r3, #1
 801ae24:	61bb      	str	r3, [r7, #24]
        break;
 801ae26:	e005      	b.n	801ae34 <etharp_query+0x1e0>
      }
      p = p->next;
 801ae28:	69fb      	ldr	r3, [r7, #28]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ae2e:	69fb      	ldr	r3, [r7, #28]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d1df      	bne.n	801adf4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 801ae34:	69bb      	ldr	r3, [r7, #24]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d007      	beq.n	801ae4a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ae3a:	687a      	ldr	r2, [r7, #4]
 801ae3c:	f44f 7120 	mov.w	r1, #640	; 0x280
 801ae40:	200e      	movs	r0, #14
 801ae42:	f7f8 fae1 	bl	8013408 <pbuf_clone>
 801ae46:	61f8      	str	r0, [r7, #28]
 801ae48:	e004      	b.n	801ae54 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ae4e:	69f8      	ldr	r0, [r7, #28]
 801ae50:	f7f8 f918 	bl	8013084 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ae54:	69fb      	ldr	r3, [r7, #28]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d021      	beq.n	801ae9e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ae5a:	7c7a      	ldrb	r2, [r7, #17]
 801ae5c:	4917      	ldr	r1, [pc, #92]	; (801aebc <etharp_query+0x268>)
 801ae5e:	4613      	mov	r3, r2
 801ae60:	005b      	lsls	r3, r3, #1
 801ae62:	4413      	add	r3, r2
 801ae64:	00db      	lsls	r3, r3, #3
 801ae66:	440b      	add	r3, r1
 801ae68:	681b      	ldr	r3, [r3, #0]
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d00a      	beq.n	801ae84 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ae6e:	7c7a      	ldrb	r2, [r7, #17]
 801ae70:	4912      	ldr	r1, [pc, #72]	; (801aebc <etharp_query+0x268>)
 801ae72:	4613      	mov	r3, r2
 801ae74:	005b      	lsls	r3, r3, #1
 801ae76:	4413      	add	r3, r2
 801ae78:	00db      	lsls	r3, r3, #3
 801ae7a:	440b      	add	r3, r1
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	4618      	mov	r0, r3
 801ae80:	f7f8 f85a 	bl	8012f38 <pbuf_free>
      }
      arp_table[i].q = p;
 801ae84:	7c7a      	ldrb	r2, [r7, #17]
 801ae86:	490d      	ldr	r1, [pc, #52]	; (801aebc <etharp_query+0x268>)
 801ae88:	4613      	mov	r3, r2
 801ae8a:	005b      	lsls	r3, r3, #1
 801ae8c:	4413      	add	r3, r2
 801ae8e:	00db      	lsls	r3, r3, #3
 801ae90:	440b      	add	r3, r1
 801ae92:	69fa      	ldr	r2, [r7, #28]
 801ae94:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ae96:	2300      	movs	r3, #0
 801ae98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ae9c:	e002      	b.n	801aea4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ae9e:	23ff      	movs	r3, #255	; 0xff
 801aea0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801aea4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801aea8:	4618      	mov	r0, r3
 801aeaa:	3728      	adds	r7, #40	; 0x28
 801aeac:	46bd      	mov	sp, r7
 801aeae:	bd80      	pop	{r7, pc}
 801aeb0:	08020978 	.word	0x08020978
 801aeb4:	08020b24 	.word	0x08020b24
 801aeb8:	080209f0 	.word	0x080209f0
 801aebc:	20008758 	.word	0x20008758
 801aec0:	08020b34 	.word	0x08020b34
 801aec4:	08020b18 	.word	0x08020b18
 801aec8:	20008848 	.word	0x20008848
 801aecc:	08020b5c 	.word	0x08020b5c

0801aed0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801aed0:	b580      	push	{r7, lr}
 801aed2:	b08a      	sub	sp, #40	; 0x28
 801aed4:	af02      	add	r7, sp, #8
 801aed6:	60f8      	str	r0, [r7, #12]
 801aed8:	60b9      	str	r1, [r7, #8]
 801aeda:	607a      	str	r2, [r7, #4]
 801aedc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801aede:	2300      	movs	r3, #0
 801aee0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d106      	bne.n	801aef6 <etharp_raw+0x26>
 801aee8:	4b3a      	ldr	r3, [pc, #232]	; (801afd4 <etharp_raw+0x104>)
 801aeea:	f240 4257 	movw	r2, #1111	; 0x457
 801aeee:	493a      	ldr	r1, [pc, #232]	; (801afd8 <etharp_raw+0x108>)
 801aef0:	483a      	ldr	r0, [pc, #232]	; (801afdc <etharp_raw+0x10c>)
 801aef2:	f001 fe69 	bl	801cbc8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801aef6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aefa:	211c      	movs	r1, #28
 801aefc:	200e      	movs	r0, #14
 801aefe:	f7f7 fd3b 	bl	8012978 <pbuf_alloc>
 801af02:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801af04:	69bb      	ldr	r3, [r7, #24]
 801af06:	2b00      	cmp	r3, #0
 801af08:	d102      	bne.n	801af10 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801af0a:	f04f 33ff 	mov.w	r3, #4294967295
 801af0e:	e05d      	b.n	801afcc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801af10:	69bb      	ldr	r3, [r7, #24]
 801af12:	895b      	ldrh	r3, [r3, #10]
 801af14:	2b1b      	cmp	r3, #27
 801af16:	d806      	bhi.n	801af26 <etharp_raw+0x56>
 801af18:	4b2e      	ldr	r3, [pc, #184]	; (801afd4 <etharp_raw+0x104>)
 801af1a:	f240 4263 	movw	r2, #1123	; 0x463
 801af1e:	4930      	ldr	r1, [pc, #192]	; (801afe0 <etharp_raw+0x110>)
 801af20:	482e      	ldr	r0, [pc, #184]	; (801afdc <etharp_raw+0x10c>)
 801af22:	f001 fe51 	bl	801cbc8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801af26:	69bb      	ldr	r3, [r7, #24]
 801af28:	685b      	ldr	r3, [r3, #4]
 801af2a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801af2c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801af2e:	4618      	mov	r0, r3
 801af30:	f7f6 faa0 	bl	8011474 <lwip_htons>
 801af34:	4603      	mov	r3, r0
 801af36:	461a      	mov	r2, r3
 801af38:	697b      	ldr	r3, [r7, #20]
 801af3a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801af3c:	68fb      	ldr	r3, [r7, #12]
 801af3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801af42:	2b06      	cmp	r3, #6
 801af44:	d006      	beq.n	801af54 <etharp_raw+0x84>
 801af46:	4b23      	ldr	r3, [pc, #140]	; (801afd4 <etharp_raw+0x104>)
 801af48:	f240 426a 	movw	r2, #1130	; 0x46a
 801af4c:	4925      	ldr	r1, [pc, #148]	; (801afe4 <etharp_raw+0x114>)
 801af4e:	4823      	ldr	r0, [pc, #140]	; (801afdc <etharp_raw+0x10c>)
 801af50:	f001 fe3a 	bl	801cbc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801af54:	697b      	ldr	r3, [r7, #20]
 801af56:	3308      	adds	r3, #8
 801af58:	2206      	movs	r2, #6
 801af5a:	6839      	ldr	r1, [r7, #0]
 801af5c:	4618      	mov	r0, r3
 801af5e:	f001 fe20 	bl	801cba2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801af62:	697b      	ldr	r3, [r7, #20]
 801af64:	3312      	adds	r3, #18
 801af66:	2206      	movs	r2, #6
 801af68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801af6a:	4618      	mov	r0, r3
 801af6c:	f001 fe19 	bl	801cba2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801af70:	697b      	ldr	r3, [r7, #20]
 801af72:	330e      	adds	r3, #14
 801af74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801af76:	6812      	ldr	r2, [r2, #0]
 801af78:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801af7a:	697b      	ldr	r3, [r7, #20]
 801af7c:	3318      	adds	r3, #24
 801af7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801af80:	6812      	ldr	r2, [r2, #0]
 801af82:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801af84:	697b      	ldr	r3, [r7, #20]
 801af86:	2200      	movs	r2, #0
 801af88:	701a      	strb	r2, [r3, #0]
 801af8a:	2200      	movs	r2, #0
 801af8c:	f042 0201 	orr.w	r2, r2, #1
 801af90:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801af92:	697b      	ldr	r3, [r7, #20]
 801af94:	2200      	movs	r2, #0
 801af96:	f042 0208 	orr.w	r2, r2, #8
 801af9a:	709a      	strb	r2, [r3, #2]
 801af9c:	2200      	movs	r2, #0
 801af9e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801afa0:	697b      	ldr	r3, [r7, #20]
 801afa2:	2206      	movs	r2, #6
 801afa4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801afa6:	697b      	ldr	r3, [r7, #20]
 801afa8:	2204      	movs	r2, #4
 801afaa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801afac:	f640 0306 	movw	r3, #2054	; 0x806
 801afb0:	9300      	str	r3, [sp, #0]
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	68ba      	ldr	r2, [r7, #8]
 801afb6:	69b9      	ldr	r1, [r7, #24]
 801afb8:	68f8      	ldr	r0, [r7, #12]
 801afba:	f001 fb95 	bl	801c6e8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801afbe:	69b8      	ldr	r0, [r7, #24]
 801afc0:	f7f7 ffba 	bl	8012f38 <pbuf_free>
  p = NULL;
 801afc4:	2300      	movs	r3, #0
 801afc6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801afc8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801afcc:	4618      	mov	r0, r3
 801afce:	3720      	adds	r7, #32
 801afd0:	46bd      	mov	sp, r7
 801afd2:	bd80      	pop	{r7, pc}
 801afd4:	08020978 	.word	0x08020978
 801afd8:	08020ac8 	.word	0x08020ac8
 801afdc:	080209f0 	.word	0x080209f0
 801afe0:	08020b78 	.word	0x08020b78
 801afe4:	08020bac 	.word	0x08020bac

0801afe8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801afe8:	b580      	push	{r7, lr}
 801afea:	b088      	sub	sp, #32
 801afec:	af04      	add	r7, sp, #16
 801afee:	60f8      	str	r0, [r7, #12]
 801aff0:	60b9      	str	r1, [r7, #8]
 801aff2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801b000:	68fb      	ldr	r3, [r7, #12]
 801b002:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b004:	2201      	movs	r2, #1
 801b006:	9203      	str	r2, [sp, #12]
 801b008:	68ba      	ldr	r2, [r7, #8]
 801b00a:	9202      	str	r2, [sp, #8]
 801b00c:	4a06      	ldr	r2, [pc, #24]	; (801b028 <etharp_request_dst+0x40>)
 801b00e:	9201      	str	r2, [sp, #4]
 801b010:	9300      	str	r3, [sp, #0]
 801b012:	4603      	mov	r3, r0
 801b014:	687a      	ldr	r2, [r7, #4]
 801b016:	68f8      	ldr	r0, [r7, #12]
 801b018:	f7ff ff5a 	bl	801aed0 <etharp_raw>
 801b01c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b01e:	4618      	mov	r0, r3
 801b020:	3710      	adds	r7, #16
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}
 801b026:	bf00      	nop
 801b028:	08021198 	.word	0x08021198

0801b02c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b02c:	b580      	push	{r7, lr}
 801b02e:	b082      	sub	sp, #8
 801b030:	af00      	add	r7, sp, #0
 801b032:	6078      	str	r0, [r7, #4]
 801b034:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b036:	4a05      	ldr	r2, [pc, #20]	; (801b04c <etharp_request+0x20>)
 801b038:	6839      	ldr	r1, [r7, #0]
 801b03a:	6878      	ldr	r0, [r7, #4]
 801b03c:	f7ff ffd4 	bl	801afe8 <etharp_request_dst>
 801b040:	4603      	mov	r3, r0
}
 801b042:	4618      	mov	r0, r3
 801b044:	3708      	adds	r7, #8
 801b046:	46bd      	mov	sp, r7
 801b048:	bd80      	pop	{r7, pc}
 801b04a:	bf00      	nop
 801b04c:	08021190 	.word	0x08021190

0801b050 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b050:	b580      	push	{r7, lr}
 801b052:	b08e      	sub	sp, #56	; 0x38
 801b054:	af04      	add	r7, sp, #16
 801b056:	6078      	str	r0, [r7, #4]
 801b058:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b05a:	4b87      	ldr	r3, [pc, #540]	; (801b278 <icmp_input+0x228>)
 801b05c:	689b      	ldr	r3, [r3, #8]
 801b05e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b062:	781b      	ldrb	r3, [r3, #0]
 801b064:	f003 030f 	and.w	r3, r3, #15
 801b068:	b2db      	uxtb	r3, r3
 801b06a:	009b      	lsls	r3, r3, #2
 801b06c:	b2db      	uxtb	r3, r3
 801b06e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801b070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b072:	2b13      	cmp	r3, #19
 801b074:	f240 80e8 	bls.w	801b248 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	895b      	ldrh	r3, [r3, #10]
 801b07c:	2b03      	cmp	r3, #3
 801b07e:	f240 80e5 	bls.w	801b24c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	685b      	ldr	r3, [r3, #4]
 801b086:	781b      	ldrb	r3, [r3, #0]
 801b088:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b08c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801b090:	2b00      	cmp	r3, #0
 801b092:	f000 80d2 	beq.w	801b23a <icmp_input+0x1ea>
 801b096:	2b08      	cmp	r3, #8
 801b098:	f040 80d2 	bne.w	801b240 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b09c:	4b77      	ldr	r3, [pc, #476]	; (801b27c <icmp_input+0x22c>)
 801b09e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b0a0:	4b75      	ldr	r3, [pc, #468]	; (801b278 <icmp_input+0x228>)
 801b0a2:	695b      	ldr	r3, [r3, #20]
 801b0a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b0a8:	2be0      	cmp	r3, #224	; 0xe0
 801b0aa:	f000 80d6 	beq.w	801b25a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b0ae:	4b72      	ldr	r3, [pc, #456]	; (801b278 <icmp_input+0x228>)
 801b0b0:	695a      	ldr	r2, [r3, #20]
 801b0b2:	4b71      	ldr	r3, [pc, #452]	; (801b278 <icmp_input+0x228>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	4619      	mov	r1, r3
 801b0b8:	4610      	mov	r0, r2
 801b0ba:	f000 fc11 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 801b0be:	4603      	mov	r3, r0
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	f040 80cc 	bne.w	801b25e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b0c6:	687b      	ldr	r3, [r7, #4]
 801b0c8:	891b      	ldrh	r3, [r3, #8]
 801b0ca:	2b07      	cmp	r3, #7
 801b0cc:	f240 80c0 	bls.w	801b250 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 801b0d0:	6878      	ldr	r0, [r7, #4]
 801b0d2:	f7f6 fb29 	bl	8011728 <inet_chksum_pbuf>
 801b0d6:	4603      	mov	r3, r0
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d003      	beq.n	801b0e4 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801b0dc:	6878      	ldr	r0, [r7, #4]
 801b0de:	f7f7 ff2b 	bl	8012f38 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801b0e2:	e0c5      	b.n	801b270 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b0e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0e6:	330e      	adds	r3, #14
 801b0e8:	4619      	mov	r1, r3
 801b0ea:	6878      	ldr	r0, [r7, #4]
 801b0ec:	f7f7 fe8e 	bl	8012e0c <pbuf_add_header>
 801b0f0:	4603      	mov	r3, r0
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d04b      	beq.n	801b18e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	891a      	ldrh	r2, [r3, #8]
 801b0fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0fc:	4413      	add	r3, r2
 801b0fe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	891b      	ldrh	r3, [r3, #8]
 801b104:	8b7a      	ldrh	r2, [r7, #26]
 801b106:	429a      	cmp	r2, r3
 801b108:	f0c0 80ab 	bcc.w	801b262 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b10c:	8b7b      	ldrh	r3, [r7, #26]
 801b10e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b112:	4619      	mov	r1, r3
 801b114:	200e      	movs	r0, #14
 801b116:	f7f7 fc2f 	bl	8012978 <pbuf_alloc>
 801b11a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b11c:	697b      	ldr	r3, [r7, #20]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	f000 80a1 	beq.w	801b266 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b124:	697b      	ldr	r3, [r7, #20]
 801b126:	895b      	ldrh	r3, [r3, #10]
 801b128:	461a      	mov	r2, r3
 801b12a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b12c:	3308      	adds	r3, #8
 801b12e:	429a      	cmp	r2, r3
 801b130:	d203      	bcs.n	801b13a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b132:	6978      	ldr	r0, [r7, #20]
 801b134:	f7f7 ff00 	bl	8012f38 <pbuf_free>
          goto icmperr;
 801b138:	e096      	b.n	801b268 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b13a:	697b      	ldr	r3, [r7, #20]
 801b13c:	685b      	ldr	r3, [r3, #4]
 801b13e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b142:	4618      	mov	r0, r3
 801b144:	f001 fd2d 	bl	801cba2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b14a:	4619      	mov	r1, r3
 801b14c:	6978      	ldr	r0, [r7, #20]
 801b14e:	f7f7 fe6d 	bl	8012e2c <pbuf_remove_header>
 801b152:	4603      	mov	r3, r0
 801b154:	2b00      	cmp	r3, #0
 801b156:	d009      	beq.n	801b16c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b158:	4b49      	ldr	r3, [pc, #292]	; (801b280 <icmp_input+0x230>)
 801b15a:	22b6      	movs	r2, #182	; 0xb6
 801b15c:	4949      	ldr	r1, [pc, #292]	; (801b284 <icmp_input+0x234>)
 801b15e:	484a      	ldr	r0, [pc, #296]	; (801b288 <icmp_input+0x238>)
 801b160:	f001 fd32 	bl	801cbc8 <iprintf>
          pbuf_free(r);
 801b164:	6978      	ldr	r0, [r7, #20]
 801b166:	f7f7 fee7 	bl	8012f38 <pbuf_free>
          goto icmperr;
 801b16a:	e07d      	b.n	801b268 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b16c:	6879      	ldr	r1, [r7, #4]
 801b16e:	6978      	ldr	r0, [r7, #20]
 801b170:	f7f8 f806 	bl	8013180 <pbuf_copy>
 801b174:	4603      	mov	r3, r0
 801b176:	2b00      	cmp	r3, #0
 801b178:	d003      	beq.n	801b182 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b17a:	6978      	ldr	r0, [r7, #20]
 801b17c:	f7f7 fedc 	bl	8012f38 <pbuf_free>
          goto icmperr;
 801b180:	e072      	b.n	801b268 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801b182:	6878      	ldr	r0, [r7, #4]
 801b184:	f7f7 fed8 	bl	8012f38 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b188:	697b      	ldr	r3, [r7, #20]
 801b18a:	607b      	str	r3, [r7, #4]
 801b18c:	e00f      	b.n	801b1ae <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b18e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b190:	330e      	adds	r3, #14
 801b192:	4619      	mov	r1, r3
 801b194:	6878      	ldr	r0, [r7, #4]
 801b196:	f7f7 fe49 	bl	8012e2c <pbuf_remove_header>
 801b19a:	4603      	mov	r3, r0
 801b19c:	2b00      	cmp	r3, #0
 801b19e:	d006      	beq.n	801b1ae <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b1a0:	4b37      	ldr	r3, [pc, #220]	; (801b280 <icmp_input+0x230>)
 801b1a2:	22c7      	movs	r2, #199	; 0xc7
 801b1a4:	4939      	ldr	r1, [pc, #228]	; (801b28c <icmp_input+0x23c>)
 801b1a6:	4838      	ldr	r0, [pc, #224]	; (801b288 <icmp_input+0x238>)
 801b1a8:	f001 fd0e 	bl	801cbc8 <iprintf>
          goto icmperr;
 801b1ac:	e05c      	b.n	801b268 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	685b      	ldr	r3, [r3, #4]
 801b1b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b1b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b1b6:	4619      	mov	r1, r3
 801b1b8:	6878      	ldr	r0, [r7, #4]
 801b1ba:	f7f7 fe27 	bl	8012e0c <pbuf_add_header>
 801b1be:	4603      	mov	r3, r0
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d13c      	bne.n	801b23e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	685b      	ldr	r3, [r3, #4]
 801b1c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b1ca:	69fb      	ldr	r3, [r7, #28]
 801b1cc:	681a      	ldr	r2, [r3, #0]
 801b1ce:	68fb      	ldr	r3, [r7, #12]
 801b1d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b1d2:	4b29      	ldr	r3, [pc, #164]	; (801b278 <icmp_input+0x228>)
 801b1d4:	691a      	ldr	r2, [r3, #16]
 801b1d6:	68fb      	ldr	r3, [r7, #12]
 801b1d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	2200      	movs	r2, #0
 801b1de:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 801b1e0:	693b      	ldr	r3, [r7, #16]
 801b1e2:	885b      	ldrh	r3, [r3, #2]
 801b1e4:	b29b      	uxth	r3, r3
 801b1e6:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b1ea:	4293      	cmp	r3, r2
 801b1ec:	d907      	bls.n	801b1fe <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801b1ee:	693b      	ldr	r3, [r7, #16]
 801b1f0:	885b      	ldrh	r3, [r3, #2]
 801b1f2:	b29b      	uxth	r3, r3
 801b1f4:	3309      	adds	r3, #9
 801b1f6:	b29a      	uxth	r2, r3
 801b1f8:	693b      	ldr	r3, [r7, #16]
 801b1fa:	805a      	strh	r2, [r3, #2]
 801b1fc:	e006      	b.n	801b20c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801b1fe:	693b      	ldr	r3, [r7, #16]
 801b200:	885b      	ldrh	r3, [r3, #2]
 801b202:	b29b      	uxth	r3, r3
 801b204:	3308      	adds	r3, #8
 801b206:	b29a      	uxth	r2, r3
 801b208:	693b      	ldr	r3, [r7, #16]
 801b20a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	22ff      	movs	r2, #255	; 0xff
 801b210:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b212:	68fb      	ldr	r3, [r7, #12]
 801b214:	2200      	movs	r2, #0
 801b216:	729a      	strb	r2, [r3, #10]
 801b218:	2200      	movs	r2, #0
 801b21a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b21c:	683b      	ldr	r3, [r7, #0]
 801b21e:	9302      	str	r3, [sp, #8]
 801b220:	2301      	movs	r3, #1
 801b222:	9301      	str	r3, [sp, #4]
 801b224:	2300      	movs	r3, #0
 801b226:	9300      	str	r3, [sp, #0]
 801b228:	23ff      	movs	r3, #255	; 0xff
 801b22a:	2200      	movs	r2, #0
 801b22c:	69f9      	ldr	r1, [r7, #28]
 801b22e:	6878      	ldr	r0, [r7, #4]
 801b230:	f000 fa7e 	bl	801b730 <ip4_output_if>
 801b234:	4603      	mov	r3, r0
 801b236:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b238:	e001      	b.n	801b23e <icmp_input+0x1ee>
      break;
 801b23a:	bf00      	nop
 801b23c:	e000      	b.n	801b240 <icmp_input+0x1f0>
      break;
 801b23e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b240:	6878      	ldr	r0, [r7, #4]
 801b242:	f7f7 fe79 	bl	8012f38 <pbuf_free>
  return;
 801b246:	e013      	b.n	801b270 <icmp_input+0x220>
    goto lenerr;
 801b248:	bf00      	nop
 801b24a:	e002      	b.n	801b252 <icmp_input+0x202>
    goto lenerr;
 801b24c:	bf00      	nop
 801b24e:	e000      	b.n	801b252 <icmp_input+0x202>
        goto lenerr;
 801b250:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b252:	6878      	ldr	r0, [r7, #4]
 801b254:	f7f7 fe70 	bl	8012f38 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b258:	e00a      	b.n	801b270 <icmp_input+0x220>
        goto icmperr;
 801b25a:	bf00      	nop
 801b25c:	e004      	b.n	801b268 <icmp_input+0x218>
        goto icmperr;
 801b25e:	bf00      	nop
 801b260:	e002      	b.n	801b268 <icmp_input+0x218>
          goto icmperr;
 801b262:	bf00      	nop
 801b264:	e000      	b.n	801b268 <icmp_input+0x218>
          goto icmperr;
 801b266:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b268:	6878      	ldr	r0, [r7, #4]
 801b26a:	f7f7 fe65 	bl	8012f38 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b26e:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b270:	3728      	adds	r7, #40	; 0x28
 801b272:	46bd      	mov	sp, r7
 801b274:	bd80      	pop	{r7, pc}
 801b276:	bf00      	nop
 801b278:	20008cf4 	.word	0x20008cf4
 801b27c:	20008d08 	.word	0x20008d08
 801b280:	08020bf0 	.word	0x08020bf0
 801b284:	08020c28 	.word	0x08020c28
 801b288:	08020c60 	.word	0x08020c60
 801b28c:	08020c88 	.word	0x08020c88

0801b290 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b290:	b580      	push	{r7, lr}
 801b292:	b082      	sub	sp, #8
 801b294:	af00      	add	r7, sp, #0
 801b296:	6078      	str	r0, [r7, #4]
 801b298:	460b      	mov	r3, r1
 801b29a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b29c:	78fb      	ldrb	r3, [r7, #3]
 801b29e:	461a      	mov	r2, r3
 801b2a0:	2103      	movs	r1, #3
 801b2a2:	6878      	ldr	r0, [r7, #4]
 801b2a4:	f000 f814 	bl	801b2d0 <icmp_send_response>
}
 801b2a8:	bf00      	nop
 801b2aa:	3708      	adds	r7, #8
 801b2ac:	46bd      	mov	sp, r7
 801b2ae:	bd80      	pop	{r7, pc}

0801b2b0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b082      	sub	sp, #8
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
 801b2b8:	460b      	mov	r3, r1
 801b2ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b2bc:	78fb      	ldrb	r3, [r7, #3]
 801b2be:	461a      	mov	r2, r3
 801b2c0:	210b      	movs	r1, #11
 801b2c2:	6878      	ldr	r0, [r7, #4]
 801b2c4:	f000 f804 	bl	801b2d0 <icmp_send_response>
}
 801b2c8:	bf00      	nop
 801b2ca:	3708      	adds	r7, #8
 801b2cc:	46bd      	mov	sp, r7
 801b2ce:	bd80      	pop	{r7, pc}

0801b2d0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b2d0:	b580      	push	{r7, lr}
 801b2d2:	b08c      	sub	sp, #48	; 0x30
 801b2d4:	af04      	add	r7, sp, #16
 801b2d6:	6078      	str	r0, [r7, #4]
 801b2d8:	460b      	mov	r3, r1
 801b2da:	70fb      	strb	r3, [r7, #3]
 801b2dc:	4613      	mov	r3, r2
 801b2de:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b2e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b2e4:	2124      	movs	r1, #36	; 0x24
 801b2e6:	2022      	movs	r0, #34	; 0x22
 801b2e8:	f7f7 fb46 	bl	8012978 <pbuf_alloc>
 801b2ec:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b2ee:	69fb      	ldr	r3, [r7, #28]
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d056      	beq.n	801b3a2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b2f4:	69fb      	ldr	r3, [r7, #28]
 801b2f6:	895b      	ldrh	r3, [r3, #10]
 801b2f8:	2b23      	cmp	r3, #35	; 0x23
 801b2fa:	d806      	bhi.n	801b30a <icmp_send_response+0x3a>
 801b2fc:	4b2b      	ldr	r3, [pc, #172]	; (801b3ac <icmp_send_response+0xdc>)
 801b2fe:	f240 1269 	movw	r2, #361	; 0x169
 801b302:	492b      	ldr	r1, [pc, #172]	; (801b3b0 <icmp_send_response+0xe0>)
 801b304:	482b      	ldr	r0, [pc, #172]	; (801b3b4 <icmp_send_response+0xe4>)
 801b306:	f001 fc5f 	bl	801cbc8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	685b      	ldr	r3, [r3, #4]
 801b30e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b310:	69fb      	ldr	r3, [r7, #28]
 801b312:	685b      	ldr	r3, [r3, #4]
 801b314:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b316:	697b      	ldr	r3, [r7, #20]
 801b318:	78fa      	ldrb	r2, [r7, #3]
 801b31a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b31c:	697b      	ldr	r3, [r7, #20]
 801b31e:	78ba      	ldrb	r2, [r7, #2]
 801b320:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b322:	697b      	ldr	r3, [r7, #20]
 801b324:	2200      	movs	r2, #0
 801b326:	711a      	strb	r2, [r3, #4]
 801b328:	2200      	movs	r2, #0
 801b32a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b32c:	697b      	ldr	r3, [r7, #20]
 801b32e:	2200      	movs	r2, #0
 801b330:	719a      	strb	r2, [r3, #6]
 801b332:	2200      	movs	r2, #0
 801b334:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b336:	69fb      	ldr	r3, [r7, #28]
 801b338:	685b      	ldr	r3, [r3, #4]
 801b33a:	f103 0008 	add.w	r0, r3, #8
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	685b      	ldr	r3, [r3, #4]
 801b342:	221c      	movs	r2, #28
 801b344:	4619      	mov	r1, r3
 801b346:	f001 fc2c 	bl	801cba2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b34a:	69bb      	ldr	r3, [r7, #24]
 801b34c:	68db      	ldr	r3, [r3, #12]
 801b34e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b350:	f107 030c 	add.w	r3, r7, #12
 801b354:	4618      	mov	r0, r3
 801b356:	f000 f82f 	bl	801b3b8 <ip4_route>
 801b35a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b35c:	693b      	ldr	r3, [r7, #16]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d01b      	beq.n	801b39a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b362:	697b      	ldr	r3, [r7, #20]
 801b364:	2200      	movs	r2, #0
 801b366:	709a      	strb	r2, [r3, #2]
 801b368:	2200      	movs	r2, #0
 801b36a:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 801b36c:	69fb      	ldr	r3, [r7, #28]
 801b36e:	895b      	ldrh	r3, [r3, #10]
 801b370:	4619      	mov	r1, r3
 801b372:	6978      	ldr	r0, [r7, #20]
 801b374:	f7f6 f9c6 	bl	8011704 <inet_chksum>
 801b378:	4603      	mov	r3, r0
 801b37a:	461a      	mov	r2, r3
 801b37c:	697b      	ldr	r3, [r7, #20]
 801b37e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b380:	f107 020c 	add.w	r2, r7, #12
 801b384:	693b      	ldr	r3, [r7, #16]
 801b386:	9302      	str	r3, [sp, #8]
 801b388:	2301      	movs	r3, #1
 801b38a:	9301      	str	r3, [sp, #4]
 801b38c:	2300      	movs	r3, #0
 801b38e:	9300      	str	r3, [sp, #0]
 801b390:	23ff      	movs	r3, #255	; 0xff
 801b392:	2100      	movs	r1, #0
 801b394:	69f8      	ldr	r0, [r7, #28]
 801b396:	f000 f9cb 	bl	801b730 <ip4_output_if>
  }
  pbuf_free(q);
 801b39a:	69f8      	ldr	r0, [r7, #28]
 801b39c:	f7f7 fdcc 	bl	8012f38 <pbuf_free>
 801b3a0:	e000      	b.n	801b3a4 <icmp_send_response+0xd4>
    return;
 801b3a2:	bf00      	nop
}
 801b3a4:	3720      	adds	r7, #32
 801b3a6:	46bd      	mov	sp, r7
 801b3a8:	bd80      	pop	{r7, pc}
 801b3aa:	bf00      	nop
 801b3ac:	08020bf0 	.word	0x08020bf0
 801b3b0:	08020cbc 	.word	0x08020cbc
 801b3b4:	08020c60 	.word	0x08020c60

0801b3b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b3b8:	b480      	push	{r7}
 801b3ba:	b085      	sub	sp, #20
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b3c0:	4b33      	ldr	r3, [pc, #204]	; (801b490 <ip4_route+0xd8>)
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	60fb      	str	r3, [r7, #12]
 801b3c6:	e036      	b.n	801b436 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b3ce:	f003 0301 	and.w	r3, r3, #1
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d02b      	beq.n	801b430 <ip4_route+0x78>
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b3de:	089b      	lsrs	r3, r3, #2
 801b3e0:	f003 0301 	and.w	r3, r3, #1
 801b3e4:	b2db      	uxtb	r3, r3
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	d022      	beq.n	801b430 <ip4_route+0x78>
 801b3ea:	68fb      	ldr	r3, [r7, #12]
 801b3ec:	3304      	adds	r3, #4
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d01d      	beq.n	801b430 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681a      	ldr	r2, [r3, #0]
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	3304      	adds	r3, #4
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	405a      	eors	r2, r3
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	3308      	adds	r3, #8
 801b404:	681b      	ldr	r3, [r3, #0]
 801b406:	4013      	ands	r3, r2
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d101      	bne.n	801b410 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	e038      	b.n	801b482 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b410:	68fb      	ldr	r3, [r7, #12]
 801b412:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b416:	f003 0302 	and.w	r3, r3, #2
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d108      	bne.n	801b430 <ip4_route+0x78>
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	681a      	ldr	r2, [r3, #0]
 801b422:	68fb      	ldr	r3, [r7, #12]
 801b424:	330c      	adds	r3, #12
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	429a      	cmp	r2, r3
 801b42a:	d101      	bne.n	801b430 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b42c:	68fb      	ldr	r3, [r7, #12]
 801b42e:	e028      	b.n	801b482 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	60fb      	str	r3, [r7, #12]
 801b436:	68fb      	ldr	r3, [r7, #12]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d1c5      	bne.n	801b3c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b43c:	4b15      	ldr	r3, [pc, #84]	; (801b494 <ip4_route+0xdc>)
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	2b00      	cmp	r3, #0
 801b442:	d01a      	beq.n	801b47a <ip4_route+0xc2>
 801b444:	4b13      	ldr	r3, [pc, #76]	; (801b494 <ip4_route+0xdc>)
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b44c:	f003 0301 	and.w	r3, r3, #1
 801b450:	2b00      	cmp	r3, #0
 801b452:	d012      	beq.n	801b47a <ip4_route+0xc2>
 801b454:	4b0f      	ldr	r3, [pc, #60]	; (801b494 <ip4_route+0xdc>)
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b45c:	f003 0304 	and.w	r3, r3, #4
 801b460:	2b00      	cmp	r3, #0
 801b462:	d00a      	beq.n	801b47a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b464:	4b0b      	ldr	r3, [pc, #44]	; (801b494 <ip4_route+0xdc>)
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	3304      	adds	r3, #4
 801b46a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b46c:	2b00      	cmp	r3, #0
 801b46e:	d004      	beq.n	801b47a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	b2db      	uxtb	r3, r3
 801b476:	2b7f      	cmp	r3, #127	; 0x7f
 801b478:	d101      	bne.n	801b47e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b47a:	2300      	movs	r3, #0
 801b47c:	e001      	b.n	801b482 <ip4_route+0xca>
  }

  return netif_default;
 801b47e:	4b05      	ldr	r3, [pc, #20]	; (801b494 <ip4_route+0xdc>)
 801b480:	681b      	ldr	r3, [r3, #0]
}
 801b482:	4618      	mov	r0, r3
 801b484:	3714      	adds	r7, #20
 801b486:	46bd      	mov	sp, r7
 801b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b48c:	4770      	bx	lr
 801b48e:	bf00      	nop
 801b490:	2000bda4 	.word	0x2000bda4
 801b494:	2000bda8 	.word	0x2000bda8

0801b498 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b082      	sub	sp, #8
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b4a6:	f003 0301 	and.w	r3, r3, #1
 801b4aa:	b2db      	uxtb	r3, r3
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d016      	beq.n	801b4de <ip4_input_accept+0x46>
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	3304      	adds	r3, #4
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d011      	beq.n	801b4de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b4ba:	4b0b      	ldr	r3, [pc, #44]	; (801b4e8 <ip4_input_accept+0x50>)
 801b4bc:	695a      	ldr	r2, [r3, #20]
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	3304      	adds	r3, #4
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	429a      	cmp	r2, r3
 801b4c6:	d008      	beq.n	801b4da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b4c8:	4b07      	ldr	r3, [pc, #28]	; (801b4e8 <ip4_input_accept+0x50>)
 801b4ca:	695b      	ldr	r3, [r3, #20]
 801b4cc:	6879      	ldr	r1, [r7, #4]
 801b4ce:	4618      	mov	r0, r3
 801b4d0:	f000 fa06 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 801b4d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d001      	beq.n	801b4de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b4da:	2301      	movs	r3, #1
 801b4dc:	e000      	b.n	801b4e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b4de:	2300      	movs	r3, #0
}
 801b4e0:	4618      	mov	r0, r3
 801b4e2:	3708      	adds	r7, #8
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	bd80      	pop	{r7, pc}
 801b4e8:	20008cf4 	.word	0x20008cf4

0801b4ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b4ec:	b580      	push	{r7, lr}
 801b4ee:	b086      	sub	sp, #24
 801b4f0:	af00      	add	r7, sp, #0
 801b4f2:	6078      	str	r0, [r7, #4]
 801b4f4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	685b      	ldr	r3, [r3, #4]
 801b4fa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	781b      	ldrb	r3, [r3, #0]
 801b500:	091b      	lsrs	r3, r3, #4
 801b502:	b2db      	uxtb	r3, r3
 801b504:	2b04      	cmp	r3, #4
 801b506:	d004      	beq.n	801b512 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b508:	6878      	ldr	r0, [r7, #4]
 801b50a:	f7f7 fd15 	bl	8012f38 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b50e:	2300      	movs	r3, #0
 801b510:	e105      	b.n	801b71e <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b512:	697b      	ldr	r3, [r7, #20]
 801b514:	781b      	ldrb	r3, [r3, #0]
 801b516:	f003 030f 	and.w	r3, r3, #15
 801b51a:	b2db      	uxtb	r3, r3
 801b51c:	009b      	lsls	r3, r3, #2
 801b51e:	b2db      	uxtb	r3, r3
 801b520:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b522:	697b      	ldr	r3, [r7, #20]
 801b524:	885b      	ldrh	r3, [r3, #2]
 801b526:	b29b      	uxth	r3, r3
 801b528:	4618      	mov	r0, r3
 801b52a:	f7f5 ffa3 	bl	8011474 <lwip_htons>
 801b52e:	4603      	mov	r3, r0
 801b530:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	891b      	ldrh	r3, [r3, #8]
 801b536:	89ba      	ldrh	r2, [r7, #12]
 801b538:	429a      	cmp	r2, r3
 801b53a:	d204      	bcs.n	801b546 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b53c:	89bb      	ldrh	r3, [r7, #12]
 801b53e:	4619      	mov	r1, r3
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	f7f7 fb73 	bl	8012c2c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	895b      	ldrh	r3, [r3, #10]
 801b54a:	89fa      	ldrh	r2, [r7, #14]
 801b54c:	429a      	cmp	r2, r3
 801b54e:	d807      	bhi.n	801b560 <ip4_input+0x74>
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	891b      	ldrh	r3, [r3, #8]
 801b554:	89ba      	ldrh	r2, [r7, #12]
 801b556:	429a      	cmp	r2, r3
 801b558:	d802      	bhi.n	801b560 <ip4_input+0x74>
 801b55a:	89fb      	ldrh	r3, [r7, #14]
 801b55c:	2b13      	cmp	r3, #19
 801b55e:	d804      	bhi.n	801b56a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b560:	6878      	ldr	r0, [r7, #4]
 801b562:	f7f7 fce9 	bl	8012f38 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b566:	2300      	movs	r3, #0
 801b568:	e0d9      	b.n	801b71e <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b56a:	697b      	ldr	r3, [r7, #20]
 801b56c:	691b      	ldr	r3, [r3, #16]
 801b56e:	4a6e      	ldr	r2, [pc, #440]	; (801b728 <ip4_input+0x23c>)
 801b570:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b572:	697b      	ldr	r3, [r7, #20]
 801b574:	68db      	ldr	r3, [r3, #12]
 801b576:	4a6c      	ldr	r2, [pc, #432]	; (801b728 <ip4_input+0x23c>)
 801b578:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b57a:	4b6b      	ldr	r3, [pc, #428]	; (801b728 <ip4_input+0x23c>)
 801b57c:	695b      	ldr	r3, [r3, #20]
 801b57e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b582:	2be0      	cmp	r3, #224	; 0xe0
 801b584:	d112      	bne.n	801b5ac <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b586:	683b      	ldr	r3, [r7, #0]
 801b588:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b58c:	f003 0301 	and.w	r3, r3, #1
 801b590:	b2db      	uxtb	r3, r3
 801b592:	2b00      	cmp	r3, #0
 801b594:	d007      	beq.n	801b5a6 <ip4_input+0xba>
 801b596:	683b      	ldr	r3, [r7, #0]
 801b598:	3304      	adds	r3, #4
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	2b00      	cmp	r3, #0
 801b59e:	d002      	beq.n	801b5a6 <ip4_input+0xba>
      netif = inp;
 801b5a0:	683b      	ldr	r3, [r7, #0]
 801b5a2:	613b      	str	r3, [r7, #16]
 801b5a4:	e02a      	b.n	801b5fc <ip4_input+0x110>
    } else {
      netif = NULL;
 801b5a6:	2300      	movs	r3, #0
 801b5a8:	613b      	str	r3, [r7, #16]
 801b5aa:	e027      	b.n	801b5fc <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b5ac:	6838      	ldr	r0, [r7, #0]
 801b5ae:	f7ff ff73 	bl	801b498 <ip4_input_accept>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d002      	beq.n	801b5be <ip4_input+0xd2>
      netif = inp;
 801b5b8:	683b      	ldr	r3, [r7, #0]
 801b5ba:	613b      	str	r3, [r7, #16]
 801b5bc:	e01e      	b.n	801b5fc <ip4_input+0x110>
    } else {
      netif = NULL;
 801b5be:	2300      	movs	r3, #0
 801b5c0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b5c2:	4b59      	ldr	r3, [pc, #356]	; (801b728 <ip4_input+0x23c>)
 801b5c4:	695b      	ldr	r3, [r3, #20]
 801b5c6:	b2db      	uxtb	r3, r3
 801b5c8:	2b7f      	cmp	r3, #127	; 0x7f
 801b5ca:	d017      	beq.n	801b5fc <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b5cc:	4b57      	ldr	r3, [pc, #348]	; (801b72c <ip4_input+0x240>)
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	613b      	str	r3, [r7, #16]
 801b5d2:	e00e      	b.n	801b5f2 <ip4_input+0x106>
          if (netif == inp) {
 801b5d4:	693a      	ldr	r2, [r7, #16]
 801b5d6:	683b      	ldr	r3, [r7, #0]
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	d006      	beq.n	801b5ea <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b5dc:	6938      	ldr	r0, [r7, #16]
 801b5de:	f7ff ff5b 	bl	801b498 <ip4_input_accept>
 801b5e2:	4603      	mov	r3, r0
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d108      	bne.n	801b5fa <ip4_input+0x10e>
 801b5e8:	e000      	b.n	801b5ec <ip4_input+0x100>
            continue;
 801b5ea:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b5ec:	693b      	ldr	r3, [r7, #16]
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	613b      	str	r3, [r7, #16]
 801b5f2:	693b      	ldr	r3, [r7, #16]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	d1ed      	bne.n	801b5d4 <ip4_input+0xe8>
 801b5f8:	e000      	b.n	801b5fc <ip4_input+0x110>
            break;
 801b5fa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b5fc:	4b4a      	ldr	r3, [pc, #296]	; (801b728 <ip4_input+0x23c>)
 801b5fe:	691b      	ldr	r3, [r3, #16]
 801b600:	6839      	ldr	r1, [r7, #0]
 801b602:	4618      	mov	r0, r3
 801b604:	f000 f96c 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 801b608:	4603      	mov	r3, r0
 801b60a:	2b00      	cmp	r3, #0
 801b60c:	d105      	bne.n	801b61a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b60e:	4b46      	ldr	r3, [pc, #280]	; (801b728 <ip4_input+0x23c>)
 801b610:	691b      	ldr	r3, [r3, #16]
 801b612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b616:	2be0      	cmp	r3, #224	; 0xe0
 801b618:	d104      	bne.n	801b624 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b61a:	6878      	ldr	r0, [r7, #4]
 801b61c:	f7f7 fc8c 	bl	8012f38 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b620:	2300      	movs	r3, #0
 801b622:	e07c      	b.n	801b71e <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b624:	693b      	ldr	r3, [r7, #16]
 801b626:	2b00      	cmp	r3, #0
 801b628:	d104      	bne.n	801b634 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b62a:	6878      	ldr	r0, [r7, #4]
 801b62c:	f7f7 fc84 	bl	8012f38 <pbuf_free>
    return ERR_OK;
 801b630:	2300      	movs	r3, #0
 801b632:	e074      	b.n	801b71e <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b634:	697b      	ldr	r3, [r7, #20]
 801b636:	88db      	ldrh	r3, [r3, #6]
 801b638:	b29b      	uxth	r3, r3
 801b63a:	461a      	mov	r2, r3
 801b63c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b640:	4013      	ands	r3, r2
 801b642:	2b00      	cmp	r3, #0
 801b644:	d00b      	beq.n	801b65e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b646:	6878      	ldr	r0, [r7, #4]
 801b648:	f000 fc90 	bl	801bf6c <ip4_reass>
 801b64c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	2b00      	cmp	r3, #0
 801b652:	d101      	bne.n	801b658 <ip4_input+0x16c>
      return ERR_OK;
 801b654:	2300      	movs	r3, #0
 801b656:	e062      	b.n	801b71e <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	685b      	ldr	r3, [r3, #4]
 801b65c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b65e:	4a32      	ldr	r2, [pc, #200]	; (801b728 <ip4_input+0x23c>)
 801b660:	693b      	ldr	r3, [r7, #16]
 801b662:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b664:	4a30      	ldr	r2, [pc, #192]	; (801b728 <ip4_input+0x23c>)
 801b666:	683b      	ldr	r3, [r7, #0]
 801b668:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b66a:	4a2f      	ldr	r2, [pc, #188]	; (801b728 <ip4_input+0x23c>)
 801b66c:	697b      	ldr	r3, [r7, #20]
 801b66e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b670:	697b      	ldr	r3, [r7, #20]
 801b672:	781b      	ldrb	r3, [r3, #0]
 801b674:	f003 030f 	and.w	r3, r3, #15
 801b678:	b2db      	uxtb	r3, r3
 801b67a:	009b      	lsls	r3, r3, #2
 801b67c:	b2db      	uxtb	r3, r3
 801b67e:	b29a      	uxth	r2, r3
 801b680:	4b29      	ldr	r3, [pc, #164]	; (801b728 <ip4_input+0x23c>)
 801b682:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b684:	89fb      	ldrh	r3, [r7, #14]
 801b686:	4619      	mov	r1, r3
 801b688:	6878      	ldr	r0, [r7, #4]
 801b68a:	f7f7 fbcf 	bl	8012e2c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b68e:	697b      	ldr	r3, [r7, #20]
 801b690:	7a5b      	ldrb	r3, [r3, #9]
 801b692:	2b06      	cmp	r3, #6
 801b694:	d009      	beq.n	801b6aa <ip4_input+0x1be>
 801b696:	2b11      	cmp	r3, #17
 801b698:	d002      	beq.n	801b6a0 <ip4_input+0x1b4>
 801b69a:	2b01      	cmp	r3, #1
 801b69c:	d00a      	beq.n	801b6b4 <ip4_input+0x1c8>
 801b69e:	e00e      	b.n	801b6be <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b6a0:	6839      	ldr	r1, [r7, #0]
 801b6a2:	6878      	ldr	r0, [r7, #4]
 801b6a4:	f7fe fac8 	bl	8019c38 <udp_input>
        break;
 801b6a8:	e026      	b.n	801b6f8 <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b6aa:	6839      	ldr	r1, [r7, #0]
 801b6ac:	6878      	ldr	r0, [r7, #4]
 801b6ae:	f7f9 fe53 	bl	8015358 <tcp_input>
        break;
 801b6b2:	e021      	b.n	801b6f8 <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b6b4:	6839      	ldr	r1, [r7, #0]
 801b6b6:	6878      	ldr	r0, [r7, #4]
 801b6b8:	f7ff fcca 	bl	801b050 <icmp_input>
        break;
 801b6bc:	e01c      	b.n	801b6f8 <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b6be:	4b1a      	ldr	r3, [pc, #104]	; (801b728 <ip4_input+0x23c>)
 801b6c0:	695b      	ldr	r3, [r3, #20]
 801b6c2:	6939      	ldr	r1, [r7, #16]
 801b6c4:	4618      	mov	r0, r3
 801b6c6:	f000 f90b 	bl	801b8e0 <ip4_addr_isbroadcast_u32>
 801b6ca:	4603      	mov	r3, r0
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d10f      	bne.n	801b6f0 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b6d0:	4b15      	ldr	r3, [pc, #84]	; (801b728 <ip4_input+0x23c>)
 801b6d2:	695b      	ldr	r3, [r3, #20]
 801b6d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b6d8:	2be0      	cmp	r3, #224	; 0xe0
 801b6da:	d009      	beq.n	801b6f0 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b6dc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b6e0:	4619      	mov	r1, r3
 801b6e2:	6878      	ldr	r0, [r7, #4]
 801b6e4:	f7f7 fc15 	bl	8012f12 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b6e8:	2102      	movs	r1, #2
 801b6ea:	6878      	ldr	r0, [r7, #4]
 801b6ec:	f7ff fdd0 	bl	801b290 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b6f0:	6878      	ldr	r0, [r7, #4]
 801b6f2:	f7f7 fc21 	bl	8012f38 <pbuf_free>
        break;
 801b6f6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b6f8:	4b0b      	ldr	r3, [pc, #44]	; (801b728 <ip4_input+0x23c>)
 801b6fa:	2200      	movs	r2, #0
 801b6fc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b6fe:	4b0a      	ldr	r3, [pc, #40]	; (801b728 <ip4_input+0x23c>)
 801b700:	2200      	movs	r2, #0
 801b702:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b704:	4b08      	ldr	r3, [pc, #32]	; (801b728 <ip4_input+0x23c>)
 801b706:	2200      	movs	r2, #0
 801b708:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b70a:	4b07      	ldr	r3, [pc, #28]	; (801b728 <ip4_input+0x23c>)
 801b70c:	2200      	movs	r2, #0
 801b70e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b710:	4b05      	ldr	r3, [pc, #20]	; (801b728 <ip4_input+0x23c>)
 801b712:	2200      	movs	r2, #0
 801b714:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b716:	4b04      	ldr	r3, [pc, #16]	; (801b728 <ip4_input+0x23c>)
 801b718:	2200      	movs	r2, #0
 801b71a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b71c:	2300      	movs	r3, #0
}
 801b71e:	4618      	mov	r0, r3
 801b720:	3718      	adds	r7, #24
 801b722:	46bd      	mov	sp, r7
 801b724:	bd80      	pop	{r7, pc}
 801b726:	bf00      	nop
 801b728:	20008cf4 	.word	0x20008cf4
 801b72c:	2000bda4 	.word	0x2000bda4

0801b730 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b730:	b580      	push	{r7, lr}
 801b732:	b08a      	sub	sp, #40	; 0x28
 801b734:	af04      	add	r7, sp, #16
 801b736:	60f8      	str	r0, [r7, #12]
 801b738:	60b9      	str	r1, [r7, #8]
 801b73a:	607a      	str	r2, [r7, #4]
 801b73c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b73e:	68bb      	ldr	r3, [r7, #8]
 801b740:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b742:	687b      	ldr	r3, [r7, #4]
 801b744:	2b00      	cmp	r3, #0
 801b746:	d009      	beq.n	801b75c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b748:	68bb      	ldr	r3, [r7, #8]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d003      	beq.n	801b756 <ip4_output_if+0x26>
 801b74e:	68bb      	ldr	r3, [r7, #8]
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	2b00      	cmp	r3, #0
 801b754:	d102      	bne.n	801b75c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b758:	3304      	adds	r3, #4
 801b75a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b75c:	78fa      	ldrb	r2, [r7, #3]
 801b75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b760:	9302      	str	r3, [sp, #8]
 801b762:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b766:	9301      	str	r3, [sp, #4]
 801b768:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b76c:	9300      	str	r3, [sp, #0]
 801b76e:	4613      	mov	r3, r2
 801b770:	687a      	ldr	r2, [r7, #4]
 801b772:	6979      	ldr	r1, [r7, #20]
 801b774:	68f8      	ldr	r0, [r7, #12]
 801b776:	f000 f805 	bl	801b784 <ip4_output_if_src>
 801b77a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b77c:	4618      	mov	r0, r3
 801b77e:	3718      	adds	r7, #24
 801b780:	46bd      	mov	sp, r7
 801b782:	bd80      	pop	{r7, pc}

0801b784 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b784:	b580      	push	{r7, lr}
 801b786:	b088      	sub	sp, #32
 801b788:	af00      	add	r7, sp, #0
 801b78a:	60f8      	str	r0, [r7, #12]
 801b78c:	60b9      	str	r1, [r7, #8]
 801b78e:	607a      	str	r2, [r7, #4]
 801b790:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b792:	68fb      	ldr	r3, [r7, #12]
 801b794:	7b9b      	ldrb	r3, [r3, #14]
 801b796:	2b01      	cmp	r3, #1
 801b798:	d006      	beq.n	801b7a8 <ip4_output_if_src+0x24>
 801b79a:	4b4b      	ldr	r3, [pc, #300]	; (801b8c8 <ip4_output_if_src+0x144>)
 801b79c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b7a0:	494a      	ldr	r1, [pc, #296]	; (801b8cc <ip4_output_if_src+0x148>)
 801b7a2:	484b      	ldr	r0, [pc, #300]	; (801b8d0 <ip4_output_if_src+0x14c>)
 801b7a4:	f001 fa10 	bl	801cbc8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d060      	beq.n	801b870 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b7ae:	2314      	movs	r3, #20
 801b7b0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b7b2:	2114      	movs	r1, #20
 801b7b4:	68f8      	ldr	r0, [r7, #12]
 801b7b6:	f7f7 fb29 	bl	8012e0c <pbuf_add_header>
 801b7ba:	4603      	mov	r3, r0
 801b7bc:	2b00      	cmp	r3, #0
 801b7be:	d002      	beq.n	801b7c6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b7c0:	f06f 0301 	mvn.w	r3, #1
 801b7c4:	e07c      	b.n	801b8c0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	685b      	ldr	r3, [r3, #4]
 801b7ca:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	895b      	ldrh	r3, [r3, #10]
 801b7d0:	2b13      	cmp	r3, #19
 801b7d2:	d806      	bhi.n	801b7e2 <ip4_output_if_src+0x5e>
 801b7d4:	4b3c      	ldr	r3, [pc, #240]	; (801b8c8 <ip4_output_if_src+0x144>)
 801b7d6:	f240 3289 	movw	r2, #905	; 0x389
 801b7da:	493e      	ldr	r1, [pc, #248]	; (801b8d4 <ip4_output_if_src+0x150>)
 801b7dc:	483c      	ldr	r0, [pc, #240]	; (801b8d0 <ip4_output_if_src+0x14c>)
 801b7de:	f001 f9f3 	bl	801cbc8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b7e2:	69fb      	ldr	r3, [r7, #28]
 801b7e4:	78fa      	ldrb	r2, [r7, #3]
 801b7e6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b7e8:	69fb      	ldr	r3, [r7, #28]
 801b7ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b7ee:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	681a      	ldr	r2, [r3, #0]
 801b7f4:	69fb      	ldr	r3, [r7, #28]
 801b7f6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b7f8:	8b7b      	ldrh	r3, [r7, #26]
 801b7fa:	089b      	lsrs	r3, r3, #2
 801b7fc:	b29b      	uxth	r3, r3
 801b7fe:	b2db      	uxtb	r3, r3
 801b800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b804:	b2da      	uxtb	r2, r3
 801b806:	69fb      	ldr	r3, [r7, #28]
 801b808:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b80a:	69fb      	ldr	r3, [r7, #28]
 801b80c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b810:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b812:	68fb      	ldr	r3, [r7, #12]
 801b814:	891b      	ldrh	r3, [r3, #8]
 801b816:	4618      	mov	r0, r3
 801b818:	f7f5 fe2c 	bl	8011474 <lwip_htons>
 801b81c:	4603      	mov	r3, r0
 801b81e:	461a      	mov	r2, r3
 801b820:	69fb      	ldr	r3, [r7, #28]
 801b822:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b824:	69fb      	ldr	r3, [r7, #28]
 801b826:	2200      	movs	r2, #0
 801b828:	719a      	strb	r2, [r3, #6]
 801b82a:	2200      	movs	r2, #0
 801b82c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b82e:	4b2a      	ldr	r3, [pc, #168]	; (801b8d8 <ip4_output_if_src+0x154>)
 801b830:	881b      	ldrh	r3, [r3, #0]
 801b832:	4618      	mov	r0, r3
 801b834:	f7f5 fe1e 	bl	8011474 <lwip_htons>
 801b838:	4603      	mov	r3, r0
 801b83a:	461a      	mov	r2, r3
 801b83c:	69fb      	ldr	r3, [r7, #28]
 801b83e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b840:	4b25      	ldr	r3, [pc, #148]	; (801b8d8 <ip4_output_if_src+0x154>)
 801b842:	881b      	ldrh	r3, [r3, #0]
 801b844:	3301      	adds	r3, #1
 801b846:	b29a      	uxth	r2, r3
 801b848:	4b23      	ldr	r3, [pc, #140]	; (801b8d8 <ip4_output_if_src+0x154>)
 801b84a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b84c:	68bb      	ldr	r3, [r7, #8]
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d104      	bne.n	801b85c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b852:	4b22      	ldr	r3, [pc, #136]	; (801b8dc <ip4_output_if_src+0x158>)
 801b854:	681a      	ldr	r2, [r3, #0]
 801b856:	69fb      	ldr	r3, [r7, #28]
 801b858:	60da      	str	r2, [r3, #12]
 801b85a:	e003      	b.n	801b864 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b85c:	68bb      	ldr	r3, [r7, #8]
 801b85e:	681a      	ldr	r2, [r3, #0]
 801b860:	69fb      	ldr	r3, [r7, #28]
 801b862:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b864:	69fb      	ldr	r3, [r7, #28]
 801b866:	2200      	movs	r2, #0
 801b868:	729a      	strb	r2, [r3, #10]
 801b86a:	2200      	movs	r2, #0
 801b86c:	72da      	strb	r2, [r3, #11]
 801b86e:	e00f      	b.n	801b890 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b870:	68fb      	ldr	r3, [r7, #12]
 801b872:	895b      	ldrh	r3, [r3, #10]
 801b874:	2b13      	cmp	r3, #19
 801b876:	d802      	bhi.n	801b87e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b878:	f06f 0301 	mvn.w	r3, #1
 801b87c:	e020      	b.n	801b8c0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b87e:	68fb      	ldr	r3, [r7, #12]
 801b880:	685b      	ldr	r3, [r3, #4]
 801b882:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b884:	69fb      	ldr	r3, [r7, #28]
 801b886:	691b      	ldr	r3, [r3, #16]
 801b888:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b88a:	f107 0314 	add.w	r3, r7, #20
 801b88e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b892:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b894:	2b00      	cmp	r3, #0
 801b896:	d00c      	beq.n	801b8b2 <ip4_output_if_src+0x12e>
 801b898:	68fb      	ldr	r3, [r7, #12]
 801b89a:	891a      	ldrh	r2, [r3, #8]
 801b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b89e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b8a0:	429a      	cmp	r2, r3
 801b8a2:	d906      	bls.n	801b8b2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b8a4:	687a      	ldr	r2, [r7, #4]
 801b8a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b8a8:	68f8      	ldr	r0, [r7, #12]
 801b8aa:	f000 fd4b 	bl	801c344 <ip4_frag>
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	e006      	b.n	801b8c0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b8b4:	695b      	ldr	r3, [r3, #20]
 801b8b6:	687a      	ldr	r2, [r7, #4]
 801b8b8:	68f9      	ldr	r1, [r7, #12]
 801b8ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b8bc:	4798      	blx	r3
 801b8be:	4603      	mov	r3, r0
}
 801b8c0:	4618      	mov	r0, r3
 801b8c2:	3720      	adds	r7, #32
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	08020ce8 	.word	0x08020ce8
 801b8cc:	08020d1c 	.word	0x08020d1c
 801b8d0:	08020d28 	.word	0x08020d28
 801b8d4:	08020d50 	.word	0x08020d50
 801b8d8:	2000884a 	.word	0x2000884a
 801b8dc:	0802118c 	.word	0x0802118c

0801b8e0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b8e0:	b480      	push	{r7}
 801b8e2:	b085      	sub	sp, #20
 801b8e4:	af00      	add	r7, sp, #0
 801b8e6:	6078      	str	r0, [r7, #4]
 801b8e8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b8f4:	d002      	beq.n	801b8fc <ip4_addr_isbroadcast_u32+0x1c>
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d101      	bne.n	801b900 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b8fc:	2301      	movs	r3, #1
 801b8fe:	e02a      	b.n	801b956 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b900:	683b      	ldr	r3, [r7, #0]
 801b902:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b906:	f003 0302 	and.w	r3, r3, #2
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	d101      	bne.n	801b912 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b90e:	2300      	movs	r3, #0
 801b910:	e021      	b.n	801b956 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b912:	683b      	ldr	r3, [r7, #0]
 801b914:	3304      	adds	r3, #4
 801b916:	681b      	ldr	r3, [r3, #0]
 801b918:	687a      	ldr	r2, [r7, #4]
 801b91a:	429a      	cmp	r2, r3
 801b91c:	d101      	bne.n	801b922 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b91e:	2300      	movs	r3, #0
 801b920:	e019      	b.n	801b956 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b922:	68fa      	ldr	r2, [r7, #12]
 801b924:	683b      	ldr	r3, [r7, #0]
 801b926:	3304      	adds	r3, #4
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	405a      	eors	r2, r3
 801b92c:	683b      	ldr	r3, [r7, #0]
 801b92e:	3308      	adds	r3, #8
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	4013      	ands	r3, r2
 801b934:	2b00      	cmp	r3, #0
 801b936:	d10d      	bne.n	801b954 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b938:	683b      	ldr	r3, [r7, #0]
 801b93a:	3308      	adds	r3, #8
 801b93c:	681b      	ldr	r3, [r3, #0]
 801b93e:	43da      	mvns	r2, r3
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b944:	683b      	ldr	r3, [r7, #0]
 801b946:	3308      	adds	r3, #8
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b94c:	429a      	cmp	r2, r3
 801b94e:	d101      	bne.n	801b954 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b950:	2301      	movs	r3, #1
 801b952:	e000      	b.n	801b956 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b954:	2300      	movs	r3, #0
  }
}
 801b956:	4618      	mov	r0, r3
 801b958:	3714      	adds	r7, #20
 801b95a:	46bd      	mov	sp, r7
 801b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b960:	4770      	bx	lr
	...

0801b964 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b964:	b580      	push	{r7, lr}
 801b966:	b084      	sub	sp, #16
 801b968:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b96a:	2300      	movs	r3, #0
 801b96c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b96e:	4b12      	ldr	r3, [pc, #72]	; (801b9b8 <ip_reass_tmr+0x54>)
 801b970:	681b      	ldr	r3, [r3, #0]
 801b972:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b974:	e018      	b.n	801b9a8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b976:	68fb      	ldr	r3, [r7, #12]
 801b978:	7fdb      	ldrb	r3, [r3, #31]
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d00b      	beq.n	801b996 <ip_reass_tmr+0x32>
      r->timer--;
 801b97e:	68fb      	ldr	r3, [r7, #12]
 801b980:	7fdb      	ldrb	r3, [r3, #31]
 801b982:	3b01      	subs	r3, #1
 801b984:	b2da      	uxtb	r2, r3
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b98a:	68fb      	ldr	r3, [r7, #12]
 801b98c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b98e:	68fb      	ldr	r3, [r7, #12]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	60fb      	str	r3, [r7, #12]
 801b994:	e008      	b.n	801b9a8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b9a0:	68b9      	ldr	r1, [r7, #8]
 801b9a2:	6878      	ldr	r0, [r7, #4]
 801b9a4:	f000 f80a 	bl	801b9bc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	2b00      	cmp	r3, #0
 801b9ac:	d1e3      	bne.n	801b976 <ip_reass_tmr+0x12>
    }
  }
}
 801b9ae:	bf00      	nop
 801b9b0:	3710      	adds	r7, #16
 801b9b2:	46bd      	mov	sp, r7
 801b9b4:	bd80      	pop	{r7, pc}
 801b9b6:	bf00      	nop
 801b9b8:	2000884c 	.word	0x2000884c

0801b9bc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b9bc:	b580      	push	{r7, lr}
 801b9be:	b088      	sub	sp, #32
 801b9c0:	af00      	add	r7, sp, #0
 801b9c2:	6078      	str	r0, [r7, #4]
 801b9c4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b9ca:	683a      	ldr	r2, [r7, #0]
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	429a      	cmp	r2, r3
 801b9d0:	d105      	bne.n	801b9de <ip_reass_free_complete_datagram+0x22>
 801b9d2:	4b45      	ldr	r3, [pc, #276]	; (801bae8 <ip_reass_free_complete_datagram+0x12c>)
 801b9d4:	22ab      	movs	r2, #171	; 0xab
 801b9d6:	4945      	ldr	r1, [pc, #276]	; (801baec <ip_reass_free_complete_datagram+0x130>)
 801b9d8:	4845      	ldr	r0, [pc, #276]	; (801baf0 <ip_reass_free_complete_datagram+0x134>)
 801b9da:	f001 f8f5 	bl	801cbc8 <iprintf>
  if (prev != NULL) {
 801b9de:	683b      	ldr	r3, [r7, #0]
 801b9e0:	2b00      	cmp	r3, #0
 801b9e2:	d00a      	beq.n	801b9fa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b9e4:	683b      	ldr	r3, [r7, #0]
 801b9e6:	681b      	ldr	r3, [r3, #0]
 801b9e8:	687a      	ldr	r2, [r7, #4]
 801b9ea:	429a      	cmp	r2, r3
 801b9ec:	d005      	beq.n	801b9fa <ip_reass_free_complete_datagram+0x3e>
 801b9ee:	4b3e      	ldr	r3, [pc, #248]	; (801bae8 <ip_reass_free_complete_datagram+0x12c>)
 801b9f0:	22ad      	movs	r2, #173	; 0xad
 801b9f2:	4940      	ldr	r1, [pc, #256]	; (801baf4 <ip_reass_free_complete_datagram+0x138>)
 801b9f4:	483e      	ldr	r0, [pc, #248]	; (801baf0 <ip_reass_free_complete_datagram+0x134>)
 801b9f6:	f001 f8e7 	bl	801cbc8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	685b      	ldr	r3, [r3, #4]
 801b9fe:	685b      	ldr	r3, [r3, #4]
 801ba00:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801ba02:	697b      	ldr	r3, [r7, #20]
 801ba04:	889b      	ldrh	r3, [r3, #4]
 801ba06:	b29b      	uxth	r3, r3
 801ba08:	2b00      	cmp	r3, #0
 801ba0a:	d12a      	bne.n	801ba62 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801ba0c:	687b      	ldr	r3, [r7, #4]
 801ba0e:	685b      	ldr	r3, [r3, #4]
 801ba10:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801ba12:	697b      	ldr	r3, [r7, #20]
 801ba14:	681a      	ldr	r2, [r3, #0]
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801ba1a:	69bb      	ldr	r3, [r7, #24]
 801ba1c:	6858      	ldr	r0, [r3, #4]
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	3308      	adds	r3, #8
 801ba22:	2214      	movs	r2, #20
 801ba24:	4619      	mov	r1, r3
 801ba26:	f001 f8bc 	bl	801cba2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801ba2a:	2101      	movs	r1, #1
 801ba2c:	69b8      	ldr	r0, [r7, #24]
 801ba2e:	f7ff fc3f 	bl	801b2b0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801ba32:	69b8      	ldr	r0, [r7, #24]
 801ba34:	f7f7 fb0e 	bl	8013054 <pbuf_clen>
 801ba38:	4603      	mov	r3, r0
 801ba3a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ba3c:	8bfa      	ldrh	r2, [r7, #30]
 801ba3e:	8a7b      	ldrh	r3, [r7, #18]
 801ba40:	4413      	add	r3, r2
 801ba42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ba46:	db05      	blt.n	801ba54 <ip_reass_free_complete_datagram+0x98>
 801ba48:	4b27      	ldr	r3, [pc, #156]	; (801bae8 <ip_reass_free_complete_datagram+0x12c>)
 801ba4a:	22bc      	movs	r2, #188	; 0xbc
 801ba4c:	492a      	ldr	r1, [pc, #168]	; (801baf8 <ip_reass_free_complete_datagram+0x13c>)
 801ba4e:	4828      	ldr	r0, [pc, #160]	; (801baf0 <ip_reass_free_complete_datagram+0x134>)
 801ba50:	f001 f8ba 	bl	801cbc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ba54:	8bfa      	ldrh	r2, [r7, #30]
 801ba56:	8a7b      	ldrh	r3, [r7, #18]
 801ba58:	4413      	add	r3, r2
 801ba5a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ba5c:	69b8      	ldr	r0, [r7, #24]
 801ba5e:	f7f7 fa6b 	bl	8012f38 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	685b      	ldr	r3, [r3, #4]
 801ba66:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ba68:	e01f      	b.n	801baaa <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ba6a:	69bb      	ldr	r3, [r7, #24]
 801ba6c:	685b      	ldr	r3, [r3, #4]
 801ba6e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ba70:	69bb      	ldr	r3, [r7, #24]
 801ba72:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ba74:	697b      	ldr	r3, [r7, #20]
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ba7a:	68f8      	ldr	r0, [r7, #12]
 801ba7c:	f7f7 faea 	bl	8013054 <pbuf_clen>
 801ba80:	4603      	mov	r3, r0
 801ba82:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ba84:	8bfa      	ldrh	r2, [r7, #30]
 801ba86:	8a7b      	ldrh	r3, [r7, #18]
 801ba88:	4413      	add	r3, r2
 801ba8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ba8e:	db05      	blt.n	801ba9c <ip_reass_free_complete_datagram+0xe0>
 801ba90:	4b15      	ldr	r3, [pc, #84]	; (801bae8 <ip_reass_free_complete_datagram+0x12c>)
 801ba92:	22cc      	movs	r2, #204	; 0xcc
 801ba94:	4918      	ldr	r1, [pc, #96]	; (801baf8 <ip_reass_free_complete_datagram+0x13c>)
 801ba96:	4816      	ldr	r0, [pc, #88]	; (801baf0 <ip_reass_free_complete_datagram+0x134>)
 801ba98:	f001 f896 	bl	801cbc8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ba9c:	8bfa      	ldrh	r2, [r7, #30]
 801ba9e:	8a7b      	ldrh	r3, [r7, #18]
 801baa0:	4413      	add	r3, r2
 801baa2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801baa4:	68f8      	ldr	r0, [r7, #12]
 801baa6:	f7f7 fa47 	bl	8012f38 <pbuf_free>
  while (p != NULL) {
 801baaa:	69bb      	ldr	r3, [r7, #24]
 801baac:	2b00      	cmp	r3, #0
 801baae:	d1dc      	bne.n	801ba6a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801bab0:	6839      	ldr	r1, [r7, #0]
 801bab2:	6878      	ldr	r0, [r7, #4]
 801bab4:	f000 f8c2 	bl	801bc3c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801bab8:	4b10      	ldr	r3, [pc, #64]	; (801bafc <ip_reass_free_complete_datagram+0x140>)
 801baba:	881b      	ldrh	r3, [r3, #0]
 801babc:	8bfa      	ldrh	r2, [r7, #30]
 801babe:	429a      	cmp	r2, r3
 801bac0:	d905      	bls.n	801bace <ip_reass_free_complete_datagram+0x112>
 801bac2:	4b09      	ldr	r3, [pc, #36]	; (801bae8 <ip_reass_free_complete_datagram+0x12c>)
 801bac4:	22d2      	movs	r2, #210	; 0xd2
 801bac6:	490e      	ldr	r1, [pc, #56]	; (801bb00 <ip_reass_free_complete_datagram+0x144>)
 801bac8:	4809      	ldr	r0, [pc, #36]	; (801baf0 <ip_reass_free_complete_datagram+0x134>)
 801baca:	f001 f87d 	bl	801cbc8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bace:	4b0b      	ldr	r3, [pc, #44]	; (801bafc <ip_reass_free_complete_datagram+0x140>)
 801bad0:	881a      	ldrh	r2, [r3, #0]
 801bad2:	8bfb      	ldrh	r3, [r7, #30]
 801bad4:	1ad3      	subs	r3, r2, r3
 801bad6:	b29a      	uxth	r2, r3
 801bad8:	4b08      	ldr	r3, [pc, #32]	; (801bafc <ip_reass_free_complete_datagram+0x140>)
 801bada:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801badc:	8bfb      	ldrh	r3, [r7, #30]
}
 801bade:	4618      	mov	r0, r3
 801bae0:	3720      	adds	r7, #32
 801bae2:	46bd      	mov	sp, r7
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	bf00      	nop
 801bae8:	08020d80 	.word	0x08020d80
 801baec:	08020dbc 	.word	0x08020dbc
 801baf0:	08020dc8 	.word	0x08020dc8
 801baf4:	08020df0 	.word	0x08020df0
 801baf8:	08020e04 	.word	0x08020e04
 801bafc:	20008850 	.word	0x20008850
 801bb00:	08020e24 	.word	0x08020e24

0801bb04 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bb04:	b580      	push	{r7, lr}
 801bb06:	b08a      	sub	sp, #40	; 0x28
 801bb08:	af00      	add	r7, sp, #0
 801bb0a:	6078      	str	r0, [r7, #4]
 801bb0c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bb0e:	2300      	movs	r3, #0
 801bb10:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bb12:	2300      	movs	r3, #0
 801bb14:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bb16:	2300      	movs	r3, #0
 801bb18:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bb1e:	2300      	movs	r3, #0
 801bb20:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bb22:	4b28      	ldr	r3, [pc, #160]	; (801bbc4 <ip_reass_remove_oldest_datagram+0xc0>)
 801bb24:	681b      	ldr	r3, [r3, #0]
 801bb26:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801bb28:	e030      	b.n	801bb8c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb2c:	695a      	ldr	r2, [r3, #20]
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	68db      	ldr	r3, [r3, #12]
 801bb32:	429a      	cmp	r2, r3
 801bb34:	d10c      	bne.n	801bb50 <ip_reass_remove_oldest_datagram+0x4c>
 801bb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb38:	699a      	ldr	r2, [r3, #24]
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	691b      	ldr	r3, [r3, #16]
 801bb3e:	429a      	cmp	r2, r3
 801bb40:	d106      	bne.n	801bb50 <ip_reass_remove_oldest_datagram+0x4c>
 801bb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb44:	899a      	ldrh	r2, [r3, #12]
 801bb46:	687b      	ldr	r3, [r7, #4]
 801bb48:	889b      	ldrh	r3, [r3, #4]
 801bb4a:	b29b      	uxth	r3, r3
 801bb4c:	429a      	cmp	r2, r3
 801bb4e:	d014      	beq.n	801bb7a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801bb50:	693b      	ldr	r3, [r7, #16]
 801bb52:	3301      	adds	r3, #1
 801bb54:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bb56:	6a3b      	ldr	r3, [r7, #32]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d104      	bne.n	801bb66 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb5e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bb60:	69fb      	ldr	r3, [r7, #28]
 801bb62:	61bb      	str	r3, [r7, #24]
 801bb64:	e009      	b.n	801bb7a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb68:	7fda      	ldrb	r2, [r3, #31]
 801bb6a:	6a3b      	ldr	r3, [r7, #32]
 801bb6c:	7fdb      	ldrb	r3, [r3, #31]
 801bb6e:	429a      	cmp	r2, r3
 801bb70:	d803      	bhi.n	801bb7a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb74:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bb76:	69fb      	ldr	r3, [r7, #28]
 801bb78:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d001      	beq.n	801bb86 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb84:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801bb8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d1cb      	bne.n	801bb2a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bb92:	6a3b      	ldr	r3, [r7, #32]
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d008      	beq.n	801bbaa <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bb98:	69b9      	ldr	r1, [r7, #24]
 801bb9a:	6a38      	ldr	r0, [r7, #32]
 801bb9c:	f7ff ff0e 	bl	801b9bc <ip_reass_free_complete_datagram>
 801bba0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bba2:	697a      	ldr	r2, [r7, #20]
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	4413      	add	r3, r2
 801bba8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bbaa:	697a      	ldr	r2, [r7, #20]
 801bbac:	683b      	ldr	r3, [r7, #0]
 801bbae:	429a      	cmp	r2, r3
 801bbb0:	da02      	bge.n	801bbb8 <ip_reass_remove_oldest_datagram+0xb4>
 801bbb2:	693b      	ldr	r3, [r7, #16]
 801bbb4:	2b01      	cmp	r3, #1
 801bbb6:	dcac      	bgt.n	801bb12 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bbb8:	697b      	ldr	r3, [r7, #20]
}
 801bbba:	4618      	mov	r0, r3
 801bbbc:	3728      	adds	r7, #40	; 0x28
 801bbbe:	46bd      	mov	sp, r7
 801bbc0:	bd80      	pop	{r7, pc}
 801bbc2:	bf00      	nop
 801bbc4:	2000884c 	.word	0x2000884c

0801bbc8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bbc8:	b580      	push	{r7, lr}
 801bbca:	b084      	sub	sp, #16
 801bbcc:	af00      	add	r7, sp, #0
 801bbce:	6078      	str	r0, [r7, #4]
 801bbd0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bbd2:	2004      	movs	r0, #4
 801bbd4:	f7f6 fa9a 	bl	801210c <memp_malloc>
 801bbd8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	2b00      	cmp	r3, #0
 801bbde:	d110      	bne.n	801bc02 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bbe0:	6839      	ldr	r1, [r7, #0]
 801bbe2:	6878      	ldr	r0, [r7, #4]
 801bbe4:	f7ff ff8e 	bl	801bb04 <ip_reass_remove_oldest_datagram>
 801bbe8:	4602      	mov	r2, r0
 801bbea:	683b      	ldr	r3, [r7, #0]
 801bbec:	4293      	cmp	r3, r2
 801bbee:	dc03      	bgt.n	801bbf8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bbf0:	2004      	movs	r0, #4
 801bbf2:	f7f6 fa8b 	bl	801210c <memp_malloc>
 801bbf6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d101      	bne.n	801bc02 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	e016      	b.n	801bc30 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bc02:	2220      	movs	r2, #32
 801bc04:	2100      	movs	r1, #0
 801bc06:	68f8      	ldr	r0, [r7, #12]
 801bc08:	f000 ffd6 	bl	801cbb8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	220f      	movs	r2, #15
 801bc10:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bc12:	4b09      	ldr	r3, [pc, #36]	; (801bc38 <ip_reass_enqueue_new_datagram+0x70>)
 801bc14:	681a      	ldr	r2, [r3, #0]
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bc1a:	4a07      	ldr	r2, [pc, #28]	; (801bc38 <ip_reass_enqueue_new_datagram+0x70>)
 801bc1c:	68fb      	ldr	r3, [r7, #12]
 801bc1e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	3308      	adds	r3, #8
 801bc24:	2214      	movs	r2, #20
 801bc26:	6879      	ldr	r1, [r7, #4]
 801bc28:	4618      	mov	r0, r3
 801bc2a:	f000 ffba 	bl	801cba2 <memcpy>
  return ipr;
 801bc2e:	68fb      	ldr	r3, [r7, #12]
}
 801bc30:	4618      	mov	r0, r3
 801bc32:	3710      	adds	r7, #16
 801bc34:	46bd      	mov	sp, r7
 801bc36:	bd80      	pop	{r7, pc}
 801bc38:	2000884c 	.word	0x2000884c

0801bc3c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bc3c:	b580      	push	{r7, lr}
 801bc3e:	b082      	sub	sp, #8
 801bc40:	af00      	add	r7, sp, #0
 801bc42:	6078      	str	r0, [r7, #4]
 801bc44:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bc46:	4b10      	ldr	r3, [pc, #64]	; (801bc88 <ip_reass_dequeue_datagram+0x4c>)
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	687a      	ldr	r2, [r7, #4]
 801bc4c:	429a      	cmp	r2, r3
 801bc4e:	d104      	bne.n	801bc5a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	4a0c      	ldr	r2, [pc, #48]	; (801bc88 <ip_reass_dequeue_datagram+0x4c>)
 801bc56:	6013      	str	r3, [r2, #0]
 801bc58:	e00d      	b.n	801bc76 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bc5a:	683b      	ldr	r3, [r7, #0]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d106      	bne.n	801bc6e <ip_reass_dequeue_datagram+0x32>
 801bc60:	4b0a      	ldr	r3, [pc, #40]	; (801bc8c <ip_reass_dequeue_datagram+0x50>)
 801bc62:	f240 1245 	movw	r2, #325	; 0x145
 801bc66:	490a      	ldr	r1, [pc, #40]	; (801bc90 <ip_reass_dequeue_datagram+0x54>)
 801bc68:	480a      	ldr	r0, [pc, #40]	; (801bc94 <ip_reass_dequeue_datagram+0x58>)
 801bc6a:	f000 ffad 	bl	801cbc8 <iprintf>
    prev->next = ipr->next;
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681a      	ldr	r2, [r3, #0]
 801bc72:	683b      	ldr	r3, [r7, #0]
 801bc74:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bc76:	6879      	ldr	r1, [r7, #4]
 801bc78:	2004      	movs	r0, #4
 801bc7a:	f7f6 fabd 	bl	80121f8 <memp_free>
}
 801bc7e:	bf00      	nop
 801bc80:	3708      	adds	r7, #8
 801bc82:	46bd      	mov	sp, r7
 801bc84:	bd80      	pop	{r7, pc}
 801bc86:	bf00      	nop
 801bc88:	2000884c 	.word	0x2000884c
 801bc8c:	08020d80 	.word	0x08020d80
 801bc90:	08020e48 	.word	0x08020e48
 801bc94:	08020dc8 	.word	0x08020dc8

0801bc98 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bc98:	b580      	push	{r7, lr}
 801bc9a:	b08c      	sub	sp, #48	; 0x30
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	60f8      	str	r0, [r7, #12]
 801bca0:	60b9      	str	r1, [r7, #8]
 801bca2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bca4:	2300      	movs	r3, #0
 801bca6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bca8:	2301      	movs	r3, #1
 801bcaa:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bcac:	68bb      	ldr	r3, [r7, #8]
 801bcae:	685b      	ldr	r3, [r3, #4]
 801bcb0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bcb2:	69fb      	ldr	r3, [r7, #28]
 801bcb4:	885b      	ldrh	r3, [r3, #2]
 801bcb6:	b29b      	uxth	r3, r3
 801bcb8:	4618      	mov	r0, r3
 801bcba:	f7f5 fbdb 	bl	8011474 <lwip_htons>
 801bcbe:	4603      	mov	r3, r0
 801bcc0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bcc2:	69fb      	ldr	r3, [r7, #28]
 801bcc4:	781b      	ldrb	r3, [r3, #0]
 801bcc6:	f003 030f 	and.w	r3, r3, #15
 801bcca:	b2db      	uxtb	r3, r3
 801bccc:	009b      	lsls	r3, r3, #2
 801bcce:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bcd0:	7e7b      	ldrb	r3, [r7, #25]
 801bcd2:	b29b      	uxth	r3, r3
 801bcd4:	8b7a      	ldrh	r2, [r7, #26]
 801bcd6:	429a      	cmp	r2, r3
 801bcd8:	d202      	bcs.n	801bce0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcda:	f04f 33ff 	mov.w	r3, #4294967295
 801bcde:	e135      	b.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bce0:	7e7b      	ldrb	r3, [r7, #25]
 801bce2:	b29b      	uxth	r3, r3
 801bce4:	8b7a      	ldrh	r2, [r7, #26]
 801bce6:	1ad3      	subs	r3, r2, r3
 801bce8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bcea:	69fb      	ldr	r3, [r7, #28]
 801bcec:	88db      	ldrh	r3, [r3, #6]
 801bcee:	b29b      	uxth	r3, r3
 801bcf0:	4618      	mov	r0, r3
 801bcf2:	f7f5 fbbf 	bl	8011474 <lwip_htons>
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bcfc:	b29b      	uxth	r3, r3
 801bcfe:	00db      	lsls	r3, r3, #3
 801bd00:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bd02:	68bb      	ldr	r3, [r7, #8]
 801bd04:	685b      	ldr	r3, [r3, #4]
 801bd06:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd0a:	2200      	movs	r2, #0
 801bd0c:	701a      	strb	r2, [r3, #0]
 801bd0e:	2200      	movs	r2, #0
 801bd10:	705a      	strb	r2, [r3, #1]
 801bd12:	2200      	movs	r2, #0
 801bd14:	709a      	strb	r2, [r3, #2]
 801bd16:	2200      	movs	r2, #0
 801bd18:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd1c:	8afa      	ldrh	r2, [r7, #22]
 801bd1e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bd20:	8afa      	ldrh	r2, [r7, #22]
 801bd22:	8b7b      	ldrh	r3, [r7, #26]
 801bd24:	4413      	add	r3, r2
 801bd26:	b29a      	uxth	r2, r3
 801bd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd2a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd2e:	88db      	ldrh	r3, [r3, #6]
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	8afa      	ldrh	r2, [r7, #22]
 801bd34:	429a      	cmp	r2, r3
 801bd36:	d902      	bls.n	801bd3e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd38:	f04f 33ff 	mov.w	r3, #4294967295
 801bd3c:	e106      	b.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bd3e:	68fb      	ldr	r3, [r7, #12]
 801bd40:	685b      	ldr	r3, [r3, #4]
 801bd42:	627b      	str	r3, [r7, #36]	; 0x24
 801bd44:	e068      	b.n	801be18 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd48:	685b      	ldr	r3, [r3, #4]
 801bd4a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd4e:	889b      	ldrh	r3, [r3, #4]
 801bd50:	b29a      	uxth	r2, r3
 801bd52:	693b      	ldr	r3, [r7, #16]
 801bd54:	889b      	ldrh	r3, [r3, #4]
 801bd56:	b29b      	uxth	r3, r3
 801bd58:	429a      	cmp	r2, r3
 801bd5a:	d235      	bcs.n	801bdc8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bd5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bd60:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d020      	beq.n	801bdaa <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bd68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd6a:	889b      	ldrh	r3, [r3, #4]
 801bd6c:	b29a      	uxth	r2, r3
 801bd6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd70:	88db      	ldrh	r3, [r3, #6]
 801bd72:	b29b      	uxth	r3, r3
 801bd74:	429a      	cmp	r2, r3
 801bd76:	d307      	bcc.n	801bd88 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd7a:	88db      	ldrh	r3, [r3, #6]
 801bd7c:	b29a      	uxth	r2, r3
 801bd7e:	693b      	ldr	r3, [r7, #16]
 801bd80:	889b      	ldrh	r3, [r3, #4]
 801bd82:	b29b      	uxth	r3, r3
 801bd84:	429a      	cmp	r2, r3
 801bd86:	d902      	bls.n	801bd8e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd88:	f04f 33ff 	mov.w	r3, #4294967295
 801bd8c:	e0de      	b.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bd8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd90:	68ba      	ldr	r2, [r7, #8]
 801bd92:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd96:	88db      	ldrh	r3, [r3, #6]
 801bd98:	b29a      	uxth	r2, r3
 801bd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd9c:	889b      	ldrh	r3, [r3, #4]
 801bd9e:	b29b      	uxth	r3, r3
 801bda0:	429a      	cmp	r2, r3
 801bda2:	d03d      	beq.n	801be20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bda4:	2300      	movs	r3, #0
 801bda6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bda8:	e03a      	b.n	801be20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdac:	88db      	ldrh	r3, [r3, #6]
 801bdae:	b29a      	uxth	r2, r3
 801bdb0:	693b      	ldr	r3, [r7, #16]
 801bdb2:	889b      	ldrh	r3, [r3, #4]
 801bdb4:	b29b      	uxth	r3, r3
 801bdb6:	429a      	cmp	r2, r3
 801bdb8:	d902      	bls.n	801bdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdba:	f04f 33ff 	mov.w	r3, #4294967295
 801bdbe:	e0c5      	b.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bdc0:	68fb      	ldr	r3, [r7, #12]
 801bdc2:	68ba      	ldr	r2, [r7, #8]
 801bdc4:	605a      	str	r2, [r3, #4]
      break;
 801bdc6:	e02b      	b.n	801be20 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bdc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdca:	889b      	ldrh	r3, [r3, #4]
 801bdcc:	b29a      	uxth	r2, r3
 801bdce:	693b      	ldr	r3, [r7, #16]
 801bdd0:	889b      	ldrh	r3, [r3, #4]
 801bdd2:	b29b      	uxth	r3, r3
 801bdd4:	429a      	cmp	r2, r3
 801bdd6:	d102      	bne.n	801bdde <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdd8:	f04f 33ff 	mov.w	r3, #4294967295
 801bddc:	e0b6      	b.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bdde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bde0:	889b      	ldrh	r3, [r3, #4]
 801bde2:	b29a      	uxth	r2, r3
 801bde4:	693b      	ldr	r3, [r7, #16]
 801bde6:	88db      	ldrh	r3, [r3, #6]
 801bde8:	b29b      	uxth	r3, r3
 801bdea:	429a      	cmp	r2, r3
 801bdec:	d202      	bcs.n	801bdf4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdee:	f04f 33ff 	mov.w	r3, #4294967295
 801bdf2:	e0ab      	b.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	d009      	beq.n	801be0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdfc:	88db      	ldrh	r3, [r3, #6]
 801bdfe:	b29a      	uxth	r2, r3
 801be00:	693b      	ldr	r3, [r7, #16]
 801be02:	889b      	ldrh	r3, [r3, #4]
 801be04:	b29b      	uxth	r3, r3
 801be06:	429a      	cmp	r2, r3
 801be08:	d001      	beq.n	801be0e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801be0a:	2300      	movs	r3, #0
 801be0c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801be0e:	693b      	ldr	r3, [r7, #16]
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801be14:	693b      	ldr	r3, [r7, #16]
 801be16:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d193      	bne.n	801bd46 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801be1e:	e000      	b.n	801be22 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801be20:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801be22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be24:	2b00      	cmp	r3, #0
 801be26:	d12d      	bne.n	801be84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d01c      	beq.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801be2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be30:	88db      	ldrh	r3, [r3, #6]
 801be32:	b29a      	uxth	r2, r3
 801be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be36:	889b      	ldrh	r3, [r3, #4]
 801be38:	b29b      	uxth	r3, r3
 801be3a:	429a      	cmp	r2, r3
 801be3c:	d906      	bls.n	801be4c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801be3e:	4b45      	ldr	r3, [pc, #276]	; (801bf54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be40:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801be44:	4944      	ldr	r1, [pc, #272]	; (801bf58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801be46:	4845      	ldr	r0, [pc, #276]	; (801bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be48:	f000 febe 	bl	801cbc8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801be4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be4e:	68ba      	ldr	r2, [r7, #8]
 801be50:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801be52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be54:	88db      	ldrh	r3, [r3, #6]
 801be56:	b29a      	uxth	r2, r3
 801be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be5a:	889b      	ldrh	r3, [r3, #4]
 801be5c:	b29b      	uxth	r3, r3
 801be5e:	429a      	cmp	r2, r3
 801be60:	d010      	beq.n	801be84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801be62:	2300      	movs	r3, #0
 801be64:	623b      	str	r3, [r7, #32]
 801be66:	e00d      	b.n	801be84 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	685b      	ldr	r3, [r3, #4]
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d006      	beq.n	801be7e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801be70:	4b38      	ldr	r3, [pc, #224]	; (801bf54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be72:	f240 12bf 	movw	r2, #447	; 0x1bf
 801be76:	493a      	ldr	r1, [pc, #232]	; (801bf60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801be78:	4838      	ldr	r0, [pc, #224]	; (801bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be7a:	f000 fea5 	bl	801cbc8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	68ba      	ldr	r2, [r7, #8]
 801be82:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	2b00      	cmp	r3, #0
 801be88:	d105      	bne.n	801be96 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	7f9b      	ldrb	r3, [r3, #30]
 801be8e:	f003 0301 	and.w	r3, r3, #1
 801be92:	2b00      	cmp	r3, #0
 801be94:	d059      	beq.n	801bf4a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801be96:	6a3b      	ldr	r3, [r7, #32]
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d04f      	beq.n	801bf3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	685b      	ldr	r3, [r3, #4]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d006      	beq.n	801beb2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	685b      	ldr	r3, [r3, #4]
 801bea8:	685b      	ldr	r3, [r3, #4]
 801beaa:	889b      	ldrh	r3, [r3, #4]
 801beac:	b29b      	uxth	r3, r3
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d002      	beq.n	801beb8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801beb2:	2300      	movs	r3, #0
 801beb4:	623b      	str	r3, [r7, #32]
 801beb6:	e041      	b.n	801bf3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beba:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801bebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bec2:	e012      	b.n	801beea <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bec6:	685b      	ldr	r3, [r3, #4]
 801bec8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801beca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801becc:	88db      	ldrh	r3, [r3, #6]
 801bece:	b29a      	uxth	r2, r3
 801bed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bed2:	889b      	ldrh	r3, [r3, #4]
 801bed4:	b29b      	uxth	r3, r3
 801bed6:	429a      	cmp	r2, r3
 801bed8:	d002      	beq.n	801bee0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801beda:	2300      	movs	r3, #0
 801bedc:	623b      	str	r3, [r7, #32]
            break;
 801bede:	e007      	b.n	801bef0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bee2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801bee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801beec:	2b00      	cmp	r3, #0
 801beee:	d1e9      	bne.n	801bec4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bef0:	6a3b      	ldr	r3, [r7, #32]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d022      	beq.n	801bf3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	685b      	ldr	r3, [r3, #4]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d106      	bne.n	801bf0c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801befe:	4b15      	ldr	r3, [pc, #84]	; (801bf54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf00:	f240 12df 	movw	r2, #479	; 0x1df
 801bf04:	4917      	ldr	r1, [pc, #92]	; (801bf64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf06:	4815      	ldr	r0, [pc, #84]	; (801bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf08:	f000 fe5e 	bl	801cbc8 <iprintf>
          LWIP_ASSERT("sanity check",
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	685b      	ldr	r3, [r3, #4]
 801bf10:	685b      	ldr	r3, [r3, #4]
 801bf12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bf14:	429a      	cmp	r2, r3
 801bf16:	d106      	bne.n	801bf26 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bf18:	4b0e      	ldr	r3, [pc, #56]	; (801bf54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf1a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801bf1e:	4911      	ldr	r1, [pc, #68]	; (801bf64 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bf20:	480e      	ldr	r0, [pc, #56]	; (801bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf22:	f000 fe51 	bl	801cbc8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801bf26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d006      	beq.n	801bf3c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801bf2e:	4b09      	ldr	r3, [pc, #36]	; (801bf54 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf30:	f240 12e3 	movw	r2, #483	; 0x1e3
 801bf34:	490c      	ldr	r1, [pc, #48]	; (801bf68 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801bf36:	4809      	ldr	r0, [pc, #36]	; (801bf5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf38:	f000 fe46 	bl	801cbc8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801bf3c:	6a3b      	ldr	r3, [r7, #32]
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	bf14      	ite	ne
 801bf42:	2301      	movne	r3, #1
 801bf44:	2300      	moveq	r3, #0
 801bf46:	b2db      	uxtb	r3, r3
 801bf48:	e000      	b.n	801bf4c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801bf4a:	2300      	movs	r3, #0
}
 801bf4c:	4618      	mov	r0, r3
 801bf4e:	3730      	adds	r7, #48	; 0x30
 801bf50:	46bd      	mov	sp, r7
 801bf52:	bd80      	pop	{r7, pc}
 801bf54:	08020d80 	.word	0x08020d80
 801bf58:	08020e64 	.word	0x08020e64
 801bf5c:	08020dc8 	.word	0x08020dc8
 801bf60:	08020e84 	.word	0x08020e84
 801bf64:	08020ebc 	.word	0x08020ebc
 801bf68:	08020ecc 	.word	0x08020ecc

0801bf6c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801bf6c:	b580      	push	{r7, lr}
 801bf6e:	b08e      	sub	sp, #56	; 0x38
 801bf70:	af00      	add	r7, sp, #0
 801bf72:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	685b      	ldr	r3, [r3, #4]
 801bf78:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bf7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf7c:	781b      	ldrb	r3, [r3, #0]
 801bf7e:	f003 030f 	and.w	r3, r3, #15
 801bf82:	b2db      	uxtb	r3, r3
 801bf84:	009b      	lsls	r3, r3, #2
 801bf86:	b2db      	uxtb	r3, r3
 801bf88:	2b14      	cmp	r3, #20
 801bf8a:	f040 8167 	bne.w	801c25c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801bf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf90:	88db      	ldrh	r3, [r3, #6]
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	4618      	mov	r0, r3
 801bf96:	f7f5 fa6d 	bl	8011474 <lwip_htons>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bfa0:	b29b      	uxth	r3, r3
 801bfa2:	00db      	lsls	r3, r3, #3
 801bfa4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bfa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfa8:	885b      	ldrh	r3, [r3, #2]
 801bfaa:	b29b      	uxth	r3, r3
 801bfac:	4618      	mov	r0, r3
 801bfae:	f7f5 fa61 	bl	8011474 <lwip_htons>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfb8:	781b      	ldrb	r3, [r3, #0]
 801bfba:	f003 030f 	and.w	r3, r3, #15
 801bfbe:	b2db      	uxtb	r3, r3
 801bfc0:	009b      	lsls	r3, r3, #2
 801bfc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801bfc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bfca:	b29b      	uxth	r3, r3
 801bfcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bfce:	429a      	cmp	r2, r3
 801bfd0:	f0c0 8146 	bcc.w	801c260 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bfd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bfd8:	b29b      	uxth	r3, r3
 801bfda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bfdc:	1ad3      	subs	r3, r2, r3
 801bfde:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bfe0:	6878      	ldr	r0, [r7, #4]
 801bfe2:	f7f7 f837 	bl	8013054 <pbuf_clen>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bfea:	4ba3      	ldr	r3, [pc, #652]	; (801c278 <ip4_reass+0x30c>)
 801bfec:	881b      	ldrh	r3, [r3, #0]
 801bfee:	461a      	mov	r2, r3
 801bff0:	8c3b      	ldrh	r3, [r7, #32]
 801bff2:	4413      	add	r3, r2
 801bff4:	2b0a      	cmp	r3, #10
 801bff6:	dd10      	ble.n	801c01a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bff8:	8c3b      	ldrh	r3, [r7, #32]
 801bffa:	4619      	mov	r1, r3
 801bffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bffe:	f7ff fd81 	bl	801bb04 <ip_reass_remove_oldest_datagram>
 801c002:	4603      	mov	r3, r0
 801c004:	2b00      	cmp	r3, #0
 801c006:	f000 812d 	beq.w	801c264 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c00a:	4b9b      	ldr	r3, [pc, #620]	; (801c278 <ip4_reass+0x30c>)
 801c00c:	881b      	ldrh	r3, [r3, #0]
 801c00e:	461a      	mov	r2, r3
 801c010:	8c3b      	ldrh	r3, [r7, #32]
 801c012:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c014:	2b0a      	cmp	r3, #10
 801c016:	f300 8125 	bgt.w	801c264 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c01a:	4b98      	ldr	r3, [pc, #608]	; (801c27c <ip4_reass+0x310>)
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	633b      	str	r3, [r7, #48]	; 0x30
 801c020:	e015      	b.n	801c04e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c024:	695a      	ldr	r2, [r3, #20]
 801c026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c028:	68db      	ldr	r3, [r3, #12]
 801c02a:	429a      	cmp	r2, r3
 801c02c:	d10c      	bne.n	801c048 <ip4_reass+0xdc>
 801c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c030:	699a      	ldr	r2, [r3, #24]
 801c032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c034:	691b      	ldr	r3, [r3, #16]
 801c036:	429a      	cmp	r2, r3
 801c038:	d106      	bne.n	801c048 <ip4_reass+0xdc>
 801c03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c03c:	899a      	ldrh	r2, [r3, #12]
 801c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c040:	889b      	ldrh	r3, [r3, #4]
 801c042:	b29b      	uxth	r3, r3
 801c044:	429a      	cmp	r2, r3
 801c046:	d006      	beq.n	801c056 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	633b      	str	r3, [r7, #48]	; 0x30
 801c04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c050:	2b00      	cmp	r3, #0
 801c052:	d1e6      	bne.n	801c022 <ip4_reass+0xb6>
 801c054:	e000      	b.n	801c058 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c056:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d109      	bne.n	801c072 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c05e:	8c3b      	ldrh	r3, [r7, #32]
 801c060:	4619      	mov	r1, r3
 801c062:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c064:	f7ff fdb0 	bl	801bbc8 <ip_reass_enqueue_new_datagram>
 801c068:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c06c:	2b00      	cmp	r3, #0
 801c06e:	d11c      	bne.n	801c0aa <ip4_reass+0x13e>
      goto nullreturn;
 801c070:	e0f9      	b.n	801c266 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c074:	88db      	ldrh	r3, [r3, #6]
 801c076:	b29b      	uxth	r3, r3
 801c078:	4618      	mov	r0, r3
 801c07a:	f7f5 f9fb 	bl	8011474 <lwip_htons>
 801c07e:	4603      	mov	r3, r0
 801c080:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c084:	2b00      	cmp	r3, #0
 801c086:	d110      	bne.n	801c0aa <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c08a:	89db      	ldrh	r3, [r3, #14]
 801c08c:	4618      	mov	r0, r3
 801c08e:	f7f5 f9f1 	bl	8011474 <lwip_htons>
 801c092:	4603      	mov	r3, r0
 801c094:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d006      	beq.n	801c0aa <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c09e:	3308      	adds	r3, #8
 801c0a0:	2214      	movs	r2, #20
 801c0a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	f000 fd7c 	bl	801cba2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0ac:	88db      	ldrh	r3, [r3, #6]
 801c0ae:	b29b      	uxth	r3, r3
 801c0b0:	f003 0320 	and.w	r3, r3, #32
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	bf0c      	ite	eq
 801c0b8:	2301      	moveq	r3, #1
 801c0ba:	2300      	movne	r3, #0
 801c0bc:	b2db      	uxtb	r3, r3
 801c0be:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c0c0:	69fb      	ldr	r3, [r7, #28]
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d00e      	beq.n	801c0e4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c0c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c0c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c0ca:	4413      	add	r3, r2
 801c0cc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c0ce:	8b7a      	ldrh	r2, [r7, #26]
 801c0d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c0d2:	429a      	cmp	r2, r3
 801c0d4:	f0c0 80a0 	bcc.w	801c218 <ip4_reass+0x2ac>
 801c0d8:	8b7b      	ldrh	r3, [r7, #26]
 801c0da:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801c0de:	4293      	cmp	r3, r2
 801c0e0:	f200 809a 	bhi.w	801c218 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c0e4:	69fa      	ldr	r2, [r7, #28]
 801c0e6:	6879      	ldr	r1, [r7, #4]
 801c0e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c0ea:	f7ff fdd5 	bl	801bc98 <ip_reass_chain_frag_into_datagram_and_validate>
 801c0ee:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c0f0:	697b      	ldr	r3, [r7, #20]
 801c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c0f6:	f000 8091 	beq.w	801c21c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c0fa:	4b5f      	ldr	r3, [pc, #380]	; (801c278 <ip4_reass+0x30c>)
 801c0fc:	881a      	ldrh	r2, [r3, #0]
 801c0fe:	8c3b      	ldrh	r3, [r7, #32]
 801c100:	4413      	add	r3, r2
 801c102:	b29a      	uxth	r2, r3
 801c104:	4b5c      	ldr	r3, [pc, #368]	; (801c278 <ip4_reass+0x30c>)
 801c106:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c108:	69fb      	ldr	r3, [r7, #28]
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d00d      	beq.n	801c12a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c10e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c110:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c112:	4413      	add	r3, r2
 801c114:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c118:	8a7a      	ldrh	r2, [r7, #18]
 801c11a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c11e:	7f9b      	ldrb	r3, [r3, #30]
 801c120:	f043 0301 	orr.w	r3, r3, #1
 801c124:	b2da      	uxtb	r2, r3
 801c126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c128:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c12a:	697b      	ldr	r3, [r7, #20]
 801c12c:	2b01      	cmp	r3, #1
 801c12e:	d171      	bne.n	801c214 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c132:	8b9b      	ldrh	r3, [r3, #28]
 801c134:	3314      	adds	r3, #20
 801c136:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c13a:	685b      	ldr	r3, [r3, #4]
 801c13c:	685b      	ldr	r3, [r3, #4]
 801c13e:	681b      	ldr	r3, [r3, #0]
 801c140:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c144:	685b      	ldr	r3, [r3, #4]
 801c146:	685b      	ldr	r3, [r3, #4]
 801c148:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c14c:	3308      	adds	r3, #8
 801c14e:	2214      	movs	r2, #20
 801c150:	4619      	mov	r1, r3
 801c152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c154:	f000 fd25 	bl	801cba2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c158:	8a3b      	ldrh	r3, [r7, #16]
 801c15a:	4618      	mov	r0, r3
 801c15c:	f7f5 f98a 	bl	8011474 <lwip_htons>
 801c160:	4603      	mov	r3, r0
 801c162:	461a      	mov	r2, r3
 801c164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c166:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c16a:	2200      	movs	r2, #0
 801c16c:	719a      	strb	r2, [r3, #6]
 801c16e:	2200      	movs	r2, #0
 801c170:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c174:	2200      	movs	r2, #0
 801c176:	729a      	strb	r2, [r3, #10]
 801c178:	2200      	movs	r2, #0
 801c17a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c17e:	685b      	ldr	r3, [r3, #4]
 801c180:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c182:	e00d      	b.n	801c1a0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c186:	685b      	ldr	r3, [r3, #4]
 801c188:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c18a:	2114      	movs	r1, #20
 801c18c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c18e:	f7f6 fe4d 	bl	8012e2c <pbuf_remove_header>
      pbuf_cat(p, r);
 801c192:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c194:	6878      	ldr	r0, [r7, #4]
 801c196:	f7f6 ff9d 	bl	80130d4 <pbuf_cat>
      r = iprh->next_pbuf;
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d1ee      	bne.n	801c184 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c1a6:	4b35      	ldr	r3, [pc, #212]	; (801c27c <ip4_reass+0x310>)
 801c1a8:	681b      	ldr	r3, [r3, #0]
 801c1aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c1ac:	429a      	cmp	r2, r3
 801c1ae:	d102      	bne.n	801c1b6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c1b0:	2300      	movs	r3, #0
 801c1b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c1b4:	e010      	b.n	801c1d8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c1b6:	4b31      	ldr	r3, [pc, #196]	; (801c27c <ip4_reass+0x310>)
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c1bc:	e007      	b.n	801c1ce <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c1c4:	429a      	cmp	r2, r3
 801c1c6:	d006      	beq.n	801c1d6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1ca:	681b      	ldr	r3, [r3, #0]
 801c1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c1d0:	2b00      	cmp	r3, #0
 801c1d2:	d1f4      	bne.n	801c1be <ip4_reass+0x252>
 801c1d4:	e000      	b.n	801c1d8 <ip4_reass+0x26c>
          break;
 801c1d6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c1d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c1da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c1dc:	f7ff fd2e 	bl	801bc3c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c1e0:	6878      	ldr	r0, [r7, #4]
 801c1e2:	f7f6 ff37 	bl	8013054 <pbuf_clen>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c1ea:	4b23      	ldr	r3, [pc, #140]	; (801c278 <ip4_reass+0x30c>)
 801c1ec:	881b      	ldrh	r3, [r3, #0]
 801c1ee:	8c3a      	ldrh	r2, [r7, #32]
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	d906      	bls.n	801c202 <ip4_reass+0x296>
 801c1f4:	4b22      	ldr	r3, [pc, #136]	; (801c280 <ip4_reass+0x314>)
 801c1f6:	f240 229b 	movw	r2, #667	; 0x29b
 801c1fa:	4922      	ldr	r1, [pc, #136]	; (801c284 <ip4_reass+0x318>)
 801c1fc:	4822      	ldr	r0, [pc, #136]	; (801c288 <ip4_reass+0x31c>)
 801c1fe:	f000 fce3 	bl	801cbc8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c202:	4b1d      	ldr	r3, [pc, #116]	; (801c278 <ip4_reass+0x30c>)
 801c204:	881a      	ldrh	r2, [r3, #0]
 801c206:	8c3b      	ldrh	r3, [r7, #32]
 801c208:	1ad3      	subs	r3, r2, r3
 801c20a:	b29a      	uxth	r2, r3
 801c20c:	4b1a      	ldr	r3, [pc, #104]	; (801c278 <ip4_reass+0x30c>)
 801c20e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c210:	687b      	ldr	r3, [r7, #4]
 801c212:	e02c      	b.n	801c26e <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c214:	2300      	movs	r3, #0
 801c216:	e02a      	b.n	801c26e <ip4_reass+0x302>

nullreturn_ipr:
 801c218:	bf00      	nop
 801c21a:	e000      	b.n	801c21e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801c21c:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c220:	2b00      	cmp	r3, #0
 801c222:	d106      	bne.n	801c232 <ip4_reass+0x2c6>
 801c224:	4b16      	ldr	r3, [pc, #88]	; (801c280 <ip4_reass+0x314>)
 801c226:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801c22a:	4918      	ldr	r1, [pc, #96]	; (801c28c <ip4_reass+0x320>)
 801c22c:	4816      	ldr	r0, [pc, #88]	; (801c288 <ip4_reass+0x31c>)
 801c22e:	f000 fccb 	bl	801cbc8 <iprintf>
  if (ipr->p == NULL) {
 801c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c234:	685b      	ldr	r3, [r3, #4]
 801c236:	2b00      	cmp	r3, #0
 801c238:	d114      	bne.n	801c264 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c23a:	4b10      	ldr	r3, [pc, #64]	; (801c27c <ip4_reass+0x310>)
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c240:	429a      	cmp	r2, r3
 801c242:	d006      	beq.n	801c252 <ip4_reass+0x2e6>
 801c244:	4b0e      	ldr	r3, [pc, #56]	; (801c280 <ip4_reass+0x314>)
 801c246:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c24a:	4911      	ldr	r1, [pc, #68]	; (801c290 <ip4_reass+0x324>)
 801c24c:	480e      	ldr	r0, [pc, #56]	; (801c288 <ip4_reass+0x31c>)
 801c24e:	f000 fcbb 	bl	801cbc8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c252:	2100      	movs	r1, #0
 801c254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c256:	f7ff fcf1 	bl	801bc3c <ip_reass_dequeue_datagram>
 801c25a:	e004      	b.n	801c266 <ip4_reass+0x2fa>
    goto nullreturn;
 801c25c:	bf00      	nop
 801c25e:	e002      	b.n	801c266 <ip4_reass+0x2fa>
    goto nullreturn;
 801c260:	bf00      	nop
 801c262:	e000      	b.n	801c266 <ip4_reass+0x2fa>
  }

nullreturn:
 801c264:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c266:	6878      	ldr	r0, [r7, #4]
 801c268:	f7f6 fe66 	bl	8012f38 <pbuf_free>
  return NULL;
 801c26c:	2300      	movs	r3, #0
}
 801c26e:	4618      	mov	r0, r3
 801c270:	3738      	adds	r7, #56	; 0x38
 801c272:	46bd      	mov	sp, r7
 801c274:	bd80      	pop	{r7, pc}
 801c276:	bf00      	nop
 801c278:	20008850 	.word	0x20008850
 801c27c:	2000884c 	.word	0x2000884c
 801c280:	08020d80 	.word	0x08020d80
 801c284:	08020ef0 	.word	0x08020ef0
 801c288:	08020dc8 	.word	0x08020dc8
 801c28c:	08020f0c 	.word	0x08020f0c
 801c290:	08020f18 	.word	0x08020f18

0801c294 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c294:	b580      	push	{r7, lr}
 801c296:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c298:	2005      	movs	r0, #5
 801c29a:	f7f5 ff37 	bl	801210c <memp_malloc>
 801c29e:	4603      	mov	r3, r0
}
 801c2a0:	4618      	mov	r0, r3
 801c2a2:	bd80      	pop	{r7, pc}

0801c2a4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c2a4:	b580      	push	{r7, lr}
 801c2a6:	b082      	sub	sp, #8
 801c2a8:	af00      	add	r7, sp, #0
 801c2aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d106      	bne.n	801c2c0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c2b2:	4b07      	ldr	r3, [pc, #28]	; (801c2d0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c2b4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801c2b8:	4906      	ldr	r1, [pc, #24]	; (801c2d4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c2ba:	4807      	ldr	r0, [pc, #28]	; (801c2d8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c2bc:	f000 fc84 	bl	801cbc8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c2c0:	6879      	ldr	r1, [r7, #4]
 801c2c2:	2005      	movs	r0, #5
 801c2c4:	f7f5 ff98 	bl	80121f8 <memp_free>
}
 801c2c8:	bf00      	nop
 801c2ca:	3708      	adds	r7, #8
 801c2cc:	46bd      	mov	sp, r7
 801c2ce:	bd80      	pop	{r7, pc}
 801c2d0:	08020d80 	.word	0x08020d80
 801c2d4:	08020f38 	.word	0x08020f38
 801c2d8:	08020dc8 	.word	0x08020dc8

0801c2dc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c2dc:	b580      	push	{r7, lr}
 801c2de:	b084      	sub	sp, #16
 801c2e0:	af00      	add	r7, sp, #0
 801c2e2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d106      	bne.n	801c2fc <ipfrag_free_pbuf_custom+0x20>
 801c2ee:	4b11      	ldr	r3, [pc, #68]	; (801c334 <ipfrag_free_pbuf_custom+0x58>)
 801c2f0:	f240 22ce 	movw	r2, #718	; 0x2ce
 801c2f4:	4910      	ldr	r1, [pc, #64]	; (801c338 <ipfrag_free_pbuf_custom+0x5c>)
 801c2f6:	4811      	ldr	r0, [pc, #68]	; (801c33c <ipfrag_free_pbuf_custom+0x60>)
 801c2f8:	f000 fc66 	bl	801cbc8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c2fc:	68fa      	ldr	r2, [r7, #12]
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	429a      	cmp	r2, r3
 801c302:	d006      	beq.n	801c312 <ipfrag_free_pbuf_custom+0x36>
 801c304:	4b0b      	ldr	r3, [pc, #44]	; (801c334 <ipfrag_free_pbuf_custom+0x58>)
 801c306:	f240 22cf 	movw	r2, #719	; 0x2cf
 801c30a:	490d      	ldr	r1, [pc, #52]	; (801c340 <ipfrag_free_pbuf_custom+0x64>)
 801c30c:	480b      	ldr	r0, [pc, #44]	; (801c33c <ipfrag_free_pbuf_custom+0x60>)
 801c30e:	f000 fc5b 	bl	801cbc8 <iprintf>
  if (pcr->original != NULL) {
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	695b      	ldr	r3, [r3, #20]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d004      	beq.n	801c324 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	695b      	ldr	r3, [r3, #20]
 801c31e:	4618      	mov	r0, r3
 801c320:	f7f6 fe0a 	bl	8012f38 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c324:	68f8      	ldr	r0, [r7, #12]
 801c326:	f7ff ffbd 	bl	801c2a4 <ip_frag_free_pbuf_custom_ref>
}
 801c32a:	bf00      	nop
 801c32c:	3710      	adds	r7, #16
 801c32e:	46bd      	mov	sp, r7
 801c330:	bd80      	pop	{r7, pc}
 801c332:	bf00      	nop
 801c334:	08020d80 	.word	0x08020d80
 801c338:	08020f44 	.word	0x08020f44
 801c33c:	08020dc8 	.word	0x08020dc8
 801c340:	08020f50 	.word	0x08020f50

0801c344 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b094      	sub	sp, #80	; 0x50
 801c348:	af02      	add	r7, sp, #8
 801c34a:	60f8      	str	r0, [r7, #12]
 801c34c:	60b9      	str	r1, [r7, #8]
 801c34e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c350:	2300      	movs	r3, #0
 801c352:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c356:	68bb      	ldr	r3, [r7, #8]
 801c358:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c35a:	3b14      	subs	r3, #20
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	da00      	bge.n	801c362 <ip4_frag+0x1e>
 801c360:	3307      	adds	r3, #7
 801c362:	10db      	asrs	r3, r3, #3
 801c364:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c366:	2314      	movs	r3, #20
 801c368:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c36a:	68fb      	ldr	r3, [r7, #12]
 801c36c:	685b      	ldr	r3, [r3, #4]
 801c36e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801c370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c372:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c376:	781b      	ldrb	r3, [r3, #0]
 801c378:	f003 030f 	and.w	r3, r3, #15
 801c37c:	b2db      	uxtb	r3, r3
 801c37e:	009b      	lsls	r3, r3, #2
 801c380:	b2db      	uxtb	r3, r3
 801c382:	2b14      	cmp	r3, #20
 801c384:	d002      	beq.n	801c38c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c386:	f06f 0305 	mvn.w	r3, #5
 801c38a:	e10f      	b.n	801c5ac <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c38c:	68fb      	ldr	r3, [r7, #12]
 801c38e:	895b      	ldrh	r3, [r3, #10]
 801c390:	2b13      	cmp	r3, #19
 801c392:	d809      	bhi.n	801c3a8 <ip4_frag+0x64>
 801c394:	4b87      	ldr	r3, [pc, #540]	; (801c5b4 <ip4_frag+0x270>)
 801c396:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801c39a:	4987      	ldr	r1, [pc, #540]	; (801c5b8 <ip4_frag+0x274>)
 801c39c:	4887      	ldr	r0, [pc, #540]	; (801c5bc <ip4_frag+0x278>)
 801c39e:	f000 fc13 	bl	801cbc8 <iprintf>
 801c3a2:	f06f 0305 	mvn.w	r3, #5
 801c3a6:	e101      	b.n	801c5ac <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c3aa:	88db      	ldrh	r3, [r3, #6]
 801c3ac:	b29b      	uxth	r3, r3
 801c3ae:	4618      	mov	r0, r3
 801c3b0:	f7f5 f860 	bl	8011474 <lwip_htons>
 801c3b4:	4603      	mov	r3, r0
 801c3b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801c3b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c3ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c3be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c3c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c3c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c3c8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	891b      	ldrh	r3, [r3, #8]
 801c3ce:	3b14      	subs	r3, #20
 801c3d0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801c3d4:	e0e0      	b.n	801c598 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c3d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c3d8:	00db      	lsls	r3, r3, #3
 801c3da:	b29b      	uxth	r3, r3
 801c3dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c3e0:	4293      	cmp	r3, r2
 801c3e2:	bf28      	it	cs
 801c3e4:	4613      	movcs	r3, r2
 801c3e6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c3e8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c3ec:	2114      	movs	r1, #20
 801c3ee:	200e      	movs	r0, #14
 801c3f0:	f7f6 fac2 	bl	8012978 <pbuf_alloc>
 801c3f4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801c3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	f000 80d4 	beq.w	801c5a6 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c400:	895b      	ldrh	r3, [r3, #10]
 801c402:	2b13      	cmp	r3, #19
 801c404:	d806      	bhi.n	801c414 <ip4_frag+0xd0>
 801c406:	4b6b      	ldr	r3, [pc, #428]	; (801c5b4 <ip4_frag+0x270>)
 801c408:	f240 3225 	movw	r2, #805	; 0x325
 801c40c:	496c      	ldr	r1, [pc, #432]	; (801c5c0 <ip4_frag+0x27c>)
 801c40e:	486b      	ldr	r0, [pc, #428]	; (801c5bc <ip4_frag+0x278>)
 801c410:	f000 fbda 	bl	801cbc8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c416:	685b      	ldr	r3, [r3, #4]
 801c418:	2214      	movs	r2, #20
 801c41a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c41c:	4618      	mov	r0, r3
 801c41e:	f000 fbc0 	bl	801cba2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801c428:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c42a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801c42e:	e064      	b.n	801c4fa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	895a      	ldrh	r2, [r3, #10]
 801c434:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c436:	1ad3      	subs	r3, r2, r3
 801c438:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	895b      	ldrh	r3, [r3, #10]
 801c43e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c440:	429a      	cmp	r2, r3
 801c442:	d906      	bls.n	801c452 <ip4_frag+0x10e>
 801c444:	4b5b      	ldr	r3, [pc, #364]	; (801c5b4 <ip4_frag+0x270>)
 801c446:	f240 322d 	movw	r2, #813	; 0x32d
 801c44a:	495e      	ldr	r1, [pc, #376]	; (801c5c4 <ip4_frag+0x280>)
 801c44c:	485b      	ldr	r0, [pc, #364]	; (801c5bc <ip4_frag+0x278>)
 801c44e:	f000 fbbb 	bl	801cbc8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c452:	8bfa      	ldrh	r2, [r7, #30]
 801c454:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c458:	4293      	cmp	r3, r2
 801c45a:	bf28      	it	cs
 801c45c:	4613      	movcs	r3, r2
 801c45e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c462:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c466:	2b00      	cmp	r3, #0
 801c468:	d105      	bne.n	801c476 <ip4_frag+0x132>
        poff = 0;
 801c46a:	2300      	movs	r3, #0
 801c46c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	60fb      	str	r3, [r7, #12]
        continue;
 801c474:	e041      	b.n	801c4fa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c476:	f7ff ff0d 	bl	801c294 <ip_frag_alloc_pbuf_custom_ref>
 801c47a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c47c:	69bb      	ldr	r3, [r7, #24]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d103      	bne.n	801c48a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c482:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c484:	f7f6 fd58 	bl	8012f38 <pbuf_free>
        goto memerr;
 801c488:	e08e      	b.n	801c5a8 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c48a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c48c:	68fb      	ldr	r3, [r7, #12]
 801c48e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c490:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c492:	4413      	add	r3, r2
 801c494:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801c498:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c49c:	9201      	str	r2, [sp, #4]
 801c49e:	9300      	str	r3, [sp, #0]
 801c4a0:	4603      	mov	r3, r0
 801c4a2:	2241      	movs	r2, #65	; 0x41
 801c4a4:	2000      	movs	r0, #0
 801c4a6:	f7f6 fb8d 	bl	8012bc4 <pbuf_alloced_custom>
 801c4aa:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c4ac:	697b      	ldr	r3, [r7, #20]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d106      	bne.n	801c4c0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c4b2:	69b8      	ldr	r0, [r7, #24]
 801c4b4:	f7ff fef6 	bl	801c2a4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c4b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c4ba:	f7f6 fd3d 	bl	8012f38 <pbuf_free>
        goto memerr;
 801c4be:	e073      	b.n	801c5a8 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 801c4c0:	68f8      	ldr	r0, [r7, #12]
 801c4c2:	f7f6 fddf 	bl	8013084 <pbuf_ref>
      pcr->original = p;
 801c4c6:	69bb      	ldr	r3, [r7, #24]
 801c4c8:	68fa      	ldr	r2, [r7, #12]
 801c4ca:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c4cc:	69bb      	ldr	r3, [r7, #24]
 801c4ce:	4a3e      	ldr	r2, [pc, #248]	; (801c5c8 <ip4_frag+0x284>)
 801c4d0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c4d2:	6979      	ldr	r1, [r7, #20]
 801c4d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c4d6:	f7f6 fdfd 	bl	80130d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c4da:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801c4de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c4e2:	1ad3      	subs	r3, r2, r3
 801c4e4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801c4e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d004      	beq.n	801c4fa <ip4_frag+0x1b6>
        poff = 0;
 801c4f0:	2300      	movs	r3, #0
 801c4f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c4f4:	68fb      	ldr	r3, [r7, #12]
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c4fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d196      	bne.n	801c430 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c502:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c504:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c508:	4413      	add	r3, r2
 801c50a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c50c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c510:	68bb      	ldr	r3, [r7, #8]
 801c512:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c514:	3b14      	subs	r3, #20
 801c516:	429a      	cmp	r2, r3
 801c518:	bfd4      	ite	le
 801c51a:	2301      	movle	r3, #1
 801c51c:	2300      	movgt	r3, #0
 801c51e:	b2db      	uxtb	r3, r3
 801c520:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c522:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c526:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c52a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c52c:	6a3b      	ldr	r3, [r7, #32]
 801c52e:	2b00      	cmp	r3, #0
 801c530:	d002      	beq.n	801c538 <ip4_frag+0x1f4>
 801c532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c534:	2b00      	cmp	r3, #0
 801c536:	d003      	beq.n	801c540 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c538:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c53a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c53e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c540:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c542:	4618      	mov	r0, r3
 801c544:	f7f4 ff96 	bl	8011474 <lwip_htons>
 801c548:	4603      	mov	r3, r0
 801c54a:	461a      	mov	r2, r3
 801c54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c54e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c550:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c552:	3314      	adds	r3, #20
 801c554:	b29b      	uxth	r3, r3
 801c556:	4618      	mov	r0, r3
 801c558:	f7f4 ff8c 	bl	8011474 <lwip_htons>
 801c55c:	4603      	mov	r3, r0
 801c55e:	461a      	mov	r2, r3
 801c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c562:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c566:	2200      	movs	r2, #0
 801c568:	729a      	strb	r2, [r3, #10]
 801c56a:	2200      	movs	r2, #0
 801c56c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c56e:	68bb      	ldr	r3, [r7, #8]
 801c570:	695b      	ldr	r3, [r3, #20]
 801c572:	687a      	ldr	r2, [r7, #4]
 801c574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c576:	68b8      	ldr	r0, [r7, #8]
 801c578:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c57a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c57c:	f7f6 fcdc 	bl	8012f38 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c580:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c584:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c586:	1ad3      	subs	r3, r2, r3
 801c588:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c58c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c590:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c592:	4413      	add	r3, r2
 801c594:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c598:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c59c:	2b00      	cmp	r3, #0
 801c59e:	f47f af1a 	bne.w	801c3d6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c5a2:	2300      	movs	r3, #0
 801c5a4:	e002      	b.n	801c5ac <ip4_frag+0x268>
      goto memerr;
 801c5a6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c5a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	3748      	adds	r7, #72	; 0x48
 801c5b0:	46bd      	mov	sp, r7
 801c5b2:	bd80      	pop	{r7, pc}
 801c5b4:	08020d80 	.word	0x08020d80
 801c5b8:	08020f5c 	.word	0x08020f5c
 801c5bc:	08020dc8 	.word	0x08020dc8
 801c5c0:	08020f78 	.word	0x08020f78
 801c5c4:	08020f98 	.word	0x08020f98
 801c5c8:	0801c2dd 	.word	0x0801c2dd

0801c5cc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c5cc:	b580      	push	{r7, lr}
 801c5ce:	b086      	sub	sp, #24
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
 801c5d4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c5d6:	230e      	movs	r3, #14
 801c5d8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c5da:	687b      	ldr	r3, [r7, #4]
 801c5dc:	895b      	ldrh	r3, [r3, #10]
 801c5de:	2b0e      	cmp	r3, #14
 801c5e0:	d96e      	bls.n	801c6c0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	7bdb      	ldrb	r3, [r3, #15]
 801c5e6:	2b00      	cmp	r3, #0
 801c5e8:	d106      	bne.n	801c5f8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c5ea:	683b      	ldr	r3, [r7, #0]
 801c5ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c5f0:	3301      	adds	r3, #1
 801c5f2:	b2da      	uxtb	r2, r3
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c5f8:	687b      	ldr	r3, [r7, #4]
 801c5fa:	685b      	ldr	r3, [r3, #4]
 801c5fc:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c5fe:	693b      	ldr	r3, [r7, #16]
 801c600:	7b1a      	ldrb	r2, [r3, #12]
 801c602:	7b5b      	ldrb	r3, [r3, #13]
 801c604:	021b      	lsls	r3, r3, #8
 801c606:	4313      	orrs	r3, r2
 801c608:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c60a:	693b      	ldr	r3, [r7, #16]
 801c60c:	781b      	ldrb	r3, [r3, #0]
 801c60e:	f003 0301 	and.w	r3, r3, #1
 801c612:	2b00      	cmp	r3, #0
 801c614:	d023      	beq.n	801c65e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c616:	693b      	ldr	r3, [r7, #16]
 801c618:	781b      	ldrb	r3, [r3, #0]
 801c61a:	2b01      	cmp	r3, #1
 801c61c:	d10f      	bne.n	801c63e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c61e:	693b      	ldr	r3, [r7, #16]
 801c620:	785b      	ldrb	r3, [r3, #1]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d11b      	bne.n	801c65e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c626:	693b      	ldr	r3, [r7, #16]
 801c628:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c62a:	2b5e      	cmp	r3, #94	; 0x5e
 801c62c:	d117      	bne.n	801c65e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	7b5b      	ldrb	r3, [r3, #13]
 801c632:	f043 0310 	orr.w	r3, r3, #16
 801c636:	b2da      	uxtb	r2, r3
 801c638:	687b      	ldr	r3, [r7, #4]
 801c63a:	735a      	strb	r2, [r3, #13]
 801c63c:	e00f      	b.n	801c65e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c63e:	693b      	ldr	r3, [r7, #16]
 801c640:	2206      	movs	r2, #6
 801c642:	4928      	ldr	r1, [pc, #160]	; (801c6e4 <ethernet_input+0x118>)
 801c644:	4618      	mov	r0, r3
 801c646:	f000 fa9d 	bl	801cb84 <memcmp>
 801c64a:	4603      	mov	r3, r0
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d106      	bne.n	801c65e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	7b5b      	ldrb	r3, [r3, #13]
 801c654:	f043 0308 	orr.w	r3, r3, #8
 801c658:	b2da      	uxtb	r2, r3
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c65e:	89fb      	ldrh	r3, [r7, #14]
 801c660:	2b08      	cmp	r3, #8
 801c662:	d003      	beq.n	801c66c <ethernet_input+0xa0>
 801c664:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c668:	d014      	beq.n	801c694 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c66a:	e032      	b.n	801c6d2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c66c:	683b      	ldr	r3, [r7, #0]
 801c66e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c672:	f003 0308 	and.w	r3, r3, #8
 801c676:	2b00      	cmp	r3, #0
 801c678:	d024      	beq.n	801c6c4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c67a:	8afb      	ldrh	r3, [r7, #22]
 801c67c:	4619      	mov	r1, r3
 801c67e:	6878      	ldr	r0, [r7, #4]
 801c680:	f7f6 fbd4 	bl	8012e2c <pbuf_remove_header>
 801c684:	4603      	mov	r3, r0
 801c686:	2b00      	cmp	r3, #0
 801c688:	d11e      	bne.n	801c6c8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c68a:	6839      	ldr	r1, [r7, #0]
 801c68c:	6878      	ldr	r0, [r7, #4]
 801c68e:	f7fe ff2d 	bl	801b4ec <ip4_input>
      break;
 801c692:	e013      	b.n	801c6bc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c694:	683b      	ldr	r3, [r7, #0]
 801c696:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c69a:	f003 0308 	and.w	r3, r3, #8
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d014      	beq.n	801c6cc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c6a2:	8afb      	ldrh	r3, [r7, #22]
 801c6a4:	4619      	mov	r1, r3
 801c6a6:	6878      	ldr	r0, [r7, #4]
 801c6a8:	f7f6 fbc0 	bl	8012e2c <pbuf_remove_header>
 801c6ac:	4603      	mov	r3, r0
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d10e      	bne.n	801c6d0 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c6b2:	6839      	ldr	r1, [r7, #0]
 801c6b4:	6878      	ldr	r0, [r7, #4]
 801c6b6:	f7fe f8a7 	bl	801a808 <etharp_input>
      break;
 801c6ba:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c6bc:	2300      	movs	r3, #0
 801c6be:	e00c      	b.n	801c6da <ethernet_input+0x10e>
    goto free_and_return;
 801c6c0:	bf00      	nop
 801c6c2:	e006      	b.n	801c6d2 <ethernet_input+0x106>
        goto free_and_return;
 801c6c4:	bf00      	nop
 801c6c6:	e004      	b.n	801c6d2 <ethernet_input+0x106>
        goto free_and_return;
 801c6c8:	bf00      	nop
 801c6ca:	e002      	b.n	801c6d2 <ethernet_input+0x106>
        goto free_and_return;
 801c6cc:	bf00      	nop
 801c6ce:	e000      	b.n	801c6d2 <ethernet_input+0x106>
        goto free_and_return;
 801c6d0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c6d2:	6878      	ldr	r0, [r7, #4]
 801c6d4:	f7f6 fc30 	bl	8012f38 <pbuf_free>
  return ERR_OK;
 801c6d8:	2300      	movs	r3, #0
}
 801c6da:	4618      	mov	r0, r3
 801c6dc:	3718      	adds	r7, #24
 801c6de:	46bd      	mov	sp, r7
 801c6e0:	bd80      	pop	{r7, pc}
 801c6e2:	bf00      	nop
 801c6e4:	08021190 	.word	0x08021190

0801c6e8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c6e8:	b580      	push	{r7, lr}
 801c6ea:	b086      	sub	sp, #24
 801c6ec:	af00      	add	r7, sp, #0
 801c6ee:	60f8      	str	r0, [r7, #12]
 801c6f0:	60b9      	str	r1, [r7, #8]
 801c6f2:	607a      	str	r2, [r7, #4]
 801c6f4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c6f6:	8c3b      	ldrh	r3, [r7, #32]
 801c6f8:	4618      	mov	r0, r3
 801c6fa:	f7f4 febb 	bl	8011474 <lwip_htons>
 801c6fe:	4603      	mov	r3, r0
 801c700:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c702:	210e      	movs	r1, #14
 801c704:	68b8      	ldr	r0, [r7, #8]
 801c706:	f7f6 fb81 	bl	8012e0c <pbuf_add_header>
 801c70a:	4603      	mov	r3, r0
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d125      	bne.n	801c75c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c710:	68bb      	ldr	r3, [r7, #8]
 801c712:	685b      	ldr	r3, [r3, #4]
 801c714:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c716:	693b      	ldr	r3, [r7, #16]
 801c718:	8afa      	ldrh	r2, [r7, #22]
 801c71a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c71c:	693b      	ldr	r3, [r7, #16]
 801c71e:	2206      	movs	r2, #6
 801c720:	6839      	ldr	r1, [r7, #0]
 801c722:	4618      	mov	r0, r3
 801c724:	f000 fa3d 	bl	801cba2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c728:	693b      	ldr	r3, [r7, #16]
 801c72a:	3306      	adds	r3, #6
 801c72c:	2206      	movs	r2, #6
 801c72e:	6879      	ldr	r1, [r7, #4]
 801c730:	4618      	mov	r0, r3
 801c732:	f000 fa36 	bl	801cba2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c73c:	2b06      	cmp	r3, #6
 801c73e:	d006      	beq.n	801c74e <ethernet_output+0x66>
 801c740:	4b0a      	ldr	r3, [pc, #40]	; (801c76c <ethernet_output+0x84>)
 801c742:	f240 1233 	movw	r2, #307	; 0x133
 801c746:	490a      	ldr	r1, [pc, #40]	; (801c770 <ethernet_output+0x88>)
 801c748:	480a      	ldr	r0, [pc, #40]	; (801c774 <ethernet_output+0x8c>)
 801c74a:	f000 fa3d 	bl	801cbc8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c74e:	68fb      	ldr	r3, [r7, #12]
 801c750:	699b      	ldr	r3, [r3, #24]
 801c752:	68b9      	ldr	r1, [r7, #8]
 801c754:	68f8      	ldr	r0, [r7, #12]
 801c756:	4798      	blx	r3
 801c758:	4603      	mov	r3, r0
 801c75a:	e002      	b.n	801c762 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c75c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c75e:	f06f 0301 	mvn.w	r3, #1
}
 801c762:	4618      	mov	r0, r3
 801c764:	3718      	adds	r7, #24
 801c766:	46bd      	mov	sp, r7
 801c768:	bd80      	pop	{r7, pc}
 801c76a:	bf00      	nop
 801c76c:	08020fa8 	.word	0x08020fa8
 801c770:	08020fe0 	.word	0x08020fe0
 801c774:	08021014 	.word	0x08021014

0801c778 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c778:	b580      	push	{r7, lr}
 801c77a:	b086      	sub	sp, #24
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
 801c780:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c782:	683b      	ldr	r3, [r7, #0]
 801c784:	60bb      	str	r3, [r7, #8]
 801c786:	2304      	movs	r3, #4
 801c788:	60fb      	str	r3, [r7, #12]
 801c78a:	2300      	movs	r3, #0
 801c78c:	613b      	str	r3, [r7, #16]
 801c78e:	2300      	movs	r3, #0
 801c790:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c792:	f107 0308 	add.w	r3, r7, #8
 801c796:	2100      	movs	r1, #0
 801c798:	4618      	mov	r0, r3
 801c79a:	f7ef fc20 	bl	800bfde <osMessageCreate>
 801c79e:	4602      	mov	r2, r0
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d102      	bne.n	801c7b2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c7ac:	f04f 33ff 	mov.w	r3, #4294967295
 801c7b0:	e000      	b.n	801c7b4 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c7b2:	2300      	movs	r3, #0
}
 801c7b4:	4618      	mov	r0, r3
 801c7b6:	3718      	adds	r7, #24
 801c7b8:	46bd      	mov	sp, r7
 801c7ba:	bd80      	pop	{r7, pc}

0801c7bc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b082      	sub	sp, #8
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	681b      	ldr	r3, [r3, #0]
 801c7c8:	4618      	mov	r0, r3
 801c7ca:	f7ef fce5 	bl	800c198 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	4618      	mov	r0, r3
 801c7d4:	f7ef fcf6 	bl	800c1c4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c7d8:	bf00      	nop
 801c7da:	3708      	adds	r7, #8
 801c7dc:	46bd      	mov	sp, r7
 801c7de:	bd80      	pop	{r7, pc}

0801c7e0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c7e0:	b580      	push	{r7, lr}
 801c7e2:	b084      	sub	sp, #16
 801c7e4:	af00      	add	r7, sp, #0
 801c7e6:	6078      	str	r0, [r7, #4]
 801c7e8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c7ea:	687b      	ldr	r3, [r7, #4]
 801c7ec:	681b      	ldr	r3, [r3, #0]
 801c7ee:	6839      	ldr	r1, [r7, #0]
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	4618      	mov	r0, r3
 801c7f4:	f7ef fc1c 	bl	800c030 <osMessagePut>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d102      	bne.n	801c804 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c7fe:	2300      	movs	r3, #0
 801c800:	73fb      	strb	r3, [r7, #15]
 801c802:	e001      	b.n	801c808 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c804:	23ff      	movs	r3, #255	; 0xff
 801c806:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c808:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c80c:	4618      	mov	r0, r3
 801c80e:	3710      	adds	r7, #16
 801c810:	46bd      	mov	sp, r7
 801c812:	bd80      	pop	{r7, pc}

0801c814 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b08c      	sub	sp, #48	; 0x30
 801c818:	af00      	add	r7, sp, #0
 801c81a:	61f8      	str	r0, [r7, #28]
 801c81c:	61b9      	str	r1, [r7, #24]
 801c81e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c820:	f7ef fa05 	bl	800bc2e <osKernelSysTick>
 801c824:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c826:	697b      	ldr	r3, [r7, #20]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	d017      	beq.n	801c85c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c82c:	69fb      	ldr	r3, [r7, #28]
 801c82e:	6819      	ldr	r1, [r3, #0]
 801c830:	f107 0320 	add.w	r3, r7, #32
 801c834:	697a      	ldr	r2, [r7, #20]
 801c836:	4618      	mov	r0, r3
 801c838:	f7ef fc3a 	bl	800c0b0 <osMessageGet>

    if(event.status == osEventMessage)
 801c83c:	6a3b      	ldr	r3, [r7, #32]
 801c83e:	2b10      	cmp	r3, #16
 801c840:	d109      	bne.n	801c856 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c844:	461a      	mov	r2, r3
 801c846:	69bb      	ldr	r3, [r7, #24]
 801c848:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c84a:	f7ef f9f0 	bl	800bc2e <osKernelSysTick>
 801c84e:	4602      	mov	r2, r0
 801c850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c852:	1ad3      	subs	r3, r2, r3
 801c854:	e019      	b.n	801c88a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c856:	f04f 33ff 	mov.w	r3, #4294967295
 801c85a:	e016      	b.n	801c88a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c85c:	69fb      	ldr	r3, [r7, #28]
 801c85e:	6819      	ldr	r1, [r3, #0]
 801c860:	463b      	mov	r3, r7
 801c862:	f04f 32ff 	mov.w	r2, #4294967295
 801c866:	4618      	mov	r0, r3
 801c868:	f7ef fc22 	bl	800c0b0 <osMessageGet>
 801c86c:	f107 0320 	add.w	r3, r7, #32
 801c870:	463a      	mov	r2, r7
 801c872:	ca07      	ldmia	r2, {r0, r1, r2}
 801c874:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c87a:	461a      	mov	r2, r3
 801c87c:	69bb      	ldr	r3, [r7, #24]
 801c87e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c880:	f7ef f9d5 	bl	800bc2e <osKernelSysTick>
 801c884:	4602      	mov	r2, r0
 801c886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c888:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c88a:	4618      	mov	r0, r3
 801c88c:	3730      	adds	r7, #48	; 0x30
 801c88e:	46bd      	mov	sp, r7
 801c890:	bd80      	pop	{r7, pc}

0801c892 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c892:	b580      	push	{r7, lr}
 801c894:	b086      	sub	sp, #24
 801c896:	af00      	add	r7, sp, #0
 801c898:	6078      	str	r0, [r7, #4]
 801c89a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	6819      	ldr	r1, [r3, #0]
 801c8a0:	f107 030c 	add.w	r3, r7, #12
 801c8a4:	2200      	movs	r2, #0
 801c8a6:	4618      	mov	r0, r3
 801c8a8:	f7ef fc02 	bl	800c0b0 <osMessageGet>

  if(event.status == osEventMessage)
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	2b10      	cmp	r3, #16
 801c8b0:	d105      	bne.n	801c8be <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c8b2:	693b      	ldr	r3, [r7, #16]
 801c8b4:	461a      	mov	r2, r3
 801c8b6:	683b      	ldr	r3, [r7, #0]
 801c8b8:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	e001      	b.n	801c8c2 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c8be:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c8c2:	4618      	mov	r0, r3
 801c8c4:	3718      	adds	r7, #24
 801c8c6:	46bd      	mov	sp, r7
 801c8c8:	bd80      	pop	{r7, pc}

0801c8ca <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c8ca:	b480      	push	{r7}
 801c8cc:	b083      	sub	sp, #12
 801c8ce:	af00      	add	r7, sp, #0
 801c8d0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	681b      	ldr	r3, [r3, #0]
 801c8d6:	2b00      	cmp	r3, #0
 801c8d8:	d101      	bne.n	801c8de <sys_mbox_valid+0x14>
    return 0;
 801c8da:	2300      	movs	r3, #0
 801c8dc:	e000      	b.n	801c8e0 <sys_mbox_valid+0x16>
  else
    return 1;
 801c8de:	2301      	movs	r3, #1
}
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	370c      	adds	r7, #12
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ea:	4770      	bx	lr

0801c8ec <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c8ec:	b480      	push	{r7}
 801c8ee:	b083      	sub	sp, #12
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c8f4:	687b      	ldr	r3, [r7, #4]
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	601a      	str	r2, [r3, #0]
}
 801c8fa:	bf00      	nop
 801c8fc:	370c      	adds	r7, #12
 801c8fe:	46bd      	mov	sp, r7
 801c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c904:	4770      	bx	lr

0801c906 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c906:	b580      	push	{r7, lr}
 801c908:	b084      	sub	sp, #16
 801c90a:	af00      	add	r7, sp, #0
 801c90c:	6078      	str	r0, [r7, #4]
 801c90e:	460b      	mov	r3, r1
 801c910:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801c912:	2300      	movs	r3, #0
 801c914:	60bb      	str	r3, [r7, #8]
 801c916:	2300      	movs	r3, #0
 801c918:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801c91a:	f107 0308 	add.w	r3, r7, #8
 801c91e:	2101      	movs	r1, #1
 801c920:	4618      	mov	r0, r3
 801c922:	f7ef fa91 	bl	800be48 <osSemaphoreCreate>
 801c926:	4602      	mov	r2, r0
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	2b00      	cmp	r3, #0
 801c932:	d102      	bne.n	801c93a <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c934:	f04f 33ff 	mov.w	r3, #4294967295
 801c938:	e009      	b.n	801c94e <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801c93a:	78fb      	ldrb	r3, [r7, #3]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d105      	bne.n	801c94c <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	2100      	movs	r1, #0
 801c946:	4618      	mov	r0, r3
 801c948:	f7ef fab2 	bl	800beb0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801c94c:	2300      	movs	r3, #0
}
 801c94e:	4618      	mov	r0, r3
 801c950:	3710      	adds	r7, #16
 801c952:	46bd      	mov	sp, r7
 801c954:	bd80      	pop	{r7, pc}

0801c956 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801c956:	b580      	push	{r7, lr}
 801c958:	b084      	sub	sp, #16
 801c95a:	af00      	add	r7, sp, #0
 801c95c:	6078      	str	r0, [r7, #4]
 801c95e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801c960:	f7ef f965 	bl	800bc2e <osKernelSysTick>
 801c964:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c966:	683b      	ldr	r3, [r7, #0]
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d011      	beq.n	801c990 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801c96c:	687b      	ldr	r3, [r7, #4]
 801c96e:	681b      	ldr	r3, [r3, #0]
 801c970:	6839      	ldr	r1, [r7, #0]
 801c972:	4618      	mov	r0, r3
 801c974:	f7ef fa9c 	bl	800beb0 <osSemaphoreWait>
 801c978:	4603      	mov	r3, r0
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d105      	bne.n	801c98a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801c97e:	f7ef f956 	bl	800bc2e <osKernelSysTick>
 801c982:	4602      	mov	r2, r0
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	1ad3      	subs	r3, r2, r3
 801c988:	e012      	b.n	801c9b0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c98a:	f04f 33ff 	mov.w	r3, #4294967295
 801c98e:	e00f      	b.n	801c9b0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801c990:	bf00      	nop
 801c992:	687b      	ldr	r3, [r7, #4]
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	f04f 31ff 	mov.w	r1, #4294967295
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7ef fa88 	bl	800beb0 <osSemaphoreWait>
 801c9a0:	4603      	mov	r3, r0
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d1f5      	bne.n	801c992 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801c9a6:	f7ef f942 	bl	800bc2e <osKernelSysTick>
 801c9aa:	4602      	mov	r2, r0
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c9b0:	4618      	mov	r0, r3
 801c9b2:	3710      	adds	r7, #16
 801c9b4:	46bd      	mov	sp, r7
 801c9b6:	bd80      	pop	{r7, pc}

0801c9b8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b082      	sub	sp, #8
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	4618      	mov	r0, r3
 801c9c6:	f7ef fac1 	bl	800bf4c <osSemaphoreRelease>
}
 801c9ca:	bf00      	nop
 801c9cc:	3708      	adds	r7, #8
 801c9ce:	46bd      	mov	sp, r7
 801c9d0:	bd80      	pop	{r7, pc}

0801c9d2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801c9d2:	b580      	push	{r7, lr}
 801c9d4:	b082      	sub	sp, #8
 801c9d6:	af00      	add	r7, sp, #0
 801c9d8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801c9da:	687b      	ldr	r3, [r7, #4]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	4618      	mov	r0, r3
 801c9e0:	f7ef faea 	bl	800bfb8 <osSemaphoreDelete>
}
 801c9e4:	bf00      	nop
 801c9e6:	3708      	adds	r7, #8
 801c9e8:	46bd      	mov	sp, r7
 801c9ea:	bd80      	pop	{r7, pc}

0801c9ec <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801c9ec:	b480      	push	{r7}
 801c9ee:	b083      	sub	sp, #12
 801c9f0:	af00      	add	r7, sp, #0
 801c9f2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801c9f4:	687b      	ldr	r3, [r7, #4]
 801c9f6:	681b      	ldr	r3, [r3, #0]
 801c9f8:	2b00      	cmp	r3, #0
 801c9fa:	d101      	bne.n	801ca00 <sys_sem_valid+0x14>
    return 0;
 801c9fc:	2300      	movs	r3, #0
 801c9fe:	e000      	b.n	801ca02 <sys_sem_valid+0x16>
  else
    return 1;
 801ca00:	2301      	movs	r3, #1
}
 801ca02:	4618      	mov	r0, r3
 801ca04:	370c      	adds	r7, #12
 801ca06:	46bd      	mov	sp, r7
 801ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca0c:	4770      	bx	lr

0801ca0e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ca0e:	b480      	push	{r7}
 801ca10:	b083      	sub	sp, #12
 801ca12:	af00      	add	r7, sp, #0
 801ca14:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	2200      	movs	r2, #0
 801ca1a:	601a      	str	r2, [r3, #0]
}
 801ca1c:	bf00      	nop
 801ca1e:	370c      	adds	r7, #12
 801ca20:	46bd      	mov	sp, r7
 801ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca26:	4770      	bx	lr

0801ca28 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ca28:	b580      	push	{r7, lr}
 801ca2a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801ca2c:	4803      	ldr	r0, [pc, #12]	; (801ca3c <sys_init+0x14>)
 801ca2e:	f7ef f96e 	bl	800bd0e <osMutexCreate>
 801ca32:	4602      	mov	r2, r0
 801ca34:	4b02      	ldr	r3, [pc, #8]	; (801ca40 <sys_init+0x18>)
 801ca36:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801ca38:	bf00      	nop
 801ca3a:	bd80      	pop	{r7, pc}
 801ca3c:	080211a0 	.word	0x080211a0
 801ca40:	2000bdd4 	.word	0x2000bdd4

0801ca44 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ca44:	b580      	push	{r7, lr}
 801ca46:	b084      	sub	sp, #16
 801ca48:	af00      	add	r7, sp, #0
 801ca4a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801ca4c:	2300      	movs	r3, #0
 801ca4e:	60bb      	str	r3, [r7, #8]
 801ca50:	2300      	movs	r3, #0
 801ca52:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801ca54:	f107 0308 	add.w	r3, r7, #8
 801ca58:	4618      	mov	r0, r3
 801ca5a:	f7ef f958 	bl	800bd0e <osMutexCreate>
 801ca5e:	4602      	mov	r2, r0
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d102      	bne.n	801ca72 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ca6c:	f04f 33ff 	mov.w	r3, #4294967295
 801ca70:	e000      	b.n	801ca74 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ca72:	2300      	movs	r3, #0
}
 801ca74:	4618      	mov	r0, r3
 801ca76:	3710      	adds	r7, #16
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}

0801ca7c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b082      	sub	sp, #8
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	f04f 31ff 	mov.w	r1, #4294967295
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	f7ef f957 	bl	800bd40 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801ca92:	bf00      	nop
 801ca94:	3708      	adds	r7, #8
 801ca96:	46bd      	mov	sp, r7
 801ca98:	bd80      	pop	{r7, pc}

0801ca9a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ca9a:	b580      	push	{r7, lr}
 801ca9c:	b082      	sub	sp, #8
 801ca9e:	af00      	add	r7, sp, #0
 801caa0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	681b      	ldr	r3, [r3, #0]
 801caa6:	4618      	mov	r0, r3
 801caa8:	f7ef f998 	bl	800bddc <osMutexRelease>
}
 801caac:	bf00      	nop
 801caae:	3708      	adds	r7, #8
 801cab0:	46bd      	mov	sp, r7
 801cab2:	bd80      	pop	{r7, pc}

0801cab4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cab4:	b580      	push	{r7, lr}
 801cab6:	b08c      	sub	sp, #48	; 0x30
 801cab8:	af00      	add	r7, sp, #0
 801caba:	60f8      	str	r0, [r7, #12]
 801cabc:	60b9      	str	r1, [r7, #8]
 801cabe:	607a      	str	r2, [r7, #4]
 801cac0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cac2:	f107 0314 	add.w	r3, r7, #20
 801cac6:	2200      	movs	r2, #0
 801cac8:	601a      	str	r2, [r3, #0]
 801caca:	605a      	str	r2, [r3, #4]
 801cacc:	609a      	str	r2, [r3, #8]
 801cace:	60da      	str	r2, [r3, #12]
 801cad0:	611a      	str	r2, [r3, #16]
 801cad2:	615a      	str	r2, [r3, #20]
 801cad4:	619a      	str	r2, [r3, #24]
 801cad6:	68fb      	ldr	r3, [r7, #12]
 801cad8:	617b      	str	r3, [r7, #20]
 801cada:	68bb      	ldr	r3, [r7, #8]
 801cadc:	61bb      	str	r3, [r7, #24]
 801cade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cae0:	b21b      	sxth	r3, r3
 801cae2:	83bb      	strh	r3, [r7, #28]
 801cae4:	683b      	ldr	r3, [r7, #0]
 801cae6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801cae8:	f107 0314 	add.w	r3, r7, #20
 801caec:	6879      	ldr	r1, [r7, #4]
 801caee:	4618      	mov	r0, r3
 801caf0:	f7ef f8ad 	bl	800bc4e <osThreadCreate>
 801caf4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801caf6:	4618      	mov	r0, r3
 801caf8:	3730      	adds	r7, #48	; 0x30
 801cafa:	46bd      	mov	sp, r7
 801cafc:	bd80      	pop	{r7, pc}
	...

0801cb00 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cb00:	b580      	push	{r7, lr}
 801cb02:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801cb04:	4b04      	ldr	r3, [pc, #16]	; (801cb18 <sys_arch_protect+0x18>)
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	f04f 31ff 	mov.w	r1, #4294967295
 801cb0c:	4618      	mov	r0, r3
 801cb0e:	f7ef f917 	bl	800bd40 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801cb12:	2301      	movs	r3, #1
}
 801cb14:	4618      	mov	r0, r3
 801cb16:	bd80      	pop	{r7, pc}
 801cb18:	2000bdd4 	.word	0x2000bdd4

0801cb1c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	b082      	sub	sp, #8
 801cb20:	af00      	add	r7, sp, #0
 801cb22:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801cb24:	4b04      	ldr	r3, [pc, #16]	; (801cb38 <sys_arch_unprotect+0x1c>)
 801cb26:	681b      	ldr	r3, [r3, #0]
 801cb28:	4618      	mov	r0, r3
 801cb2a:	f7ef f957 	bl	800bddc <osMutexRelease>
}
 801cb2e:	bf00      	nop
 801cb30:	3708      	adds	r7, #8
 801cb32:	46bd      	mov	sp, r7
 801cb34:	bd80      	pop	{r7, pc}
 801cb36:	bf00      	nop
 801cb38:	2000bdd4 	.word	0x2000bdd4

0801cb3c <__libc_init_array>:
 801cb3c:	b570      	push	{r4, r5, r6, lr}
 801cb3e:	4e0d      	ldr	r6, [pc, #52]	; (801cb74 <__libc_init_array+0x38>)
 801cb40:	4c0d      	ldr	r4, [pc, #52]	; (801cb78 <__libc_init_array+0x3c>)
 801cb42:	1ba4      	subs	r4, r4, r6
 801cb44:	10a4      	asrs	r4, r4, #2
 801cb46:	2500      	movs	r5, #0
 801cb48:	42a5      	cmp	r5, r4
 801cb4a:	d109      	bne.n	801cb60 <__libc_init_array+0x24>
 801cb4c:	4e0b      	ldr	r6, [pc, #44]	; (801cb7c <__libc_init_array+0x40>)
 801cb4e:	4c0c      	ldr	r4, [pc, #48]	; (801cb80 <__libc_init_array+0x44>)
 801cb50:	f000 ff5a 	bl	801da08 <_init>
 801cb54:	1ba4      	subs	r4, r4, r6
 801cb56:	10a4      	asrs	r4, r4, #2
 801cb58:	2500      	movs	r5, #0
 801cb5a:	42a5      	cmp	r5, r4
 801cb5c:	d105      	bne.n	801cb6a <__libc_init_array+0x2e>
 801cb5e:	bd70      	pop	{r4, r5, r6, pc}
 801cb60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801cb64:	4798      	blx	r3
 801cb66:	3501      	adds	r5, #1
 801cb68:	e7ee      	b.n	801cb48 <__libc_init_array+0xc>
 801cb6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801cb6e:	4798      	blx	r3
 801cb70:	3501      	adds	r5, #1
 801cb72:	e7f2      	b.n	801cb5a <__libc_init_array+0x1e>
 801cb74:	08021248 	.word	0x08021248
 801cb78:	08021248 	.word	0x08021248
 801cb7c:	08021248 	.word	0x08021248
 801cb80:	0802124c 	.word	0x0802124c

0801cb84 <memcmp>:
 801cb84:	b530      	push	{r4, r5, lr}
 801cb86:	2400      	movs	r4, #0
 801cb88:	42a2      	cmp	r2, r4
 801cb8a:	d101      	bne.n	801cb90 <memcmp+0xc>
 801cb8c:	2000      	movs	r0, #0
 801cb8e:	e007      	b.n	801cba0 <memcmp+0x1c>
 801cb90:	5d03      	ldrb	r3, [r0, r4]
 801cb92:	3401      	adds	r4, #1
 801cb94:	190d      	adds	r5, r1, r4
 801cb96:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801cb9a:	42ab      	cmp	r3, r5
 801cb9c:	d0f4      	beq.n	801cb88 <memcmp+0x4>
 801cb9e:	1b58      	subs	r0, r3, r5
 801cba0:	bd30      	pop	{r4, r5, pc}

0801cba2 <memcpy>:
 801cba2:	b510      	push	{r4, lr}
 801cba4:	1e43      	subs	r3, r0, #1
 801cba6:	440a      	add	r2, r1
 801cba8:	4291      	cmp	r1, r2
 801cbaa:	d100      	bne.n	801cbae <memcpy+0xc>
 801cbac:	bd10      	pop	{r4, pc}
 801cbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cbb6:	e7f7      	b.n	801cba8 <memcpy+0x6>

0801cbb8 <memset>:
 801cbb8:	4402      	add	r2, r0
 801cbba:	4603      	mov	r3, r0
 801cbbc:	4293      	cmp	r3, r2
 801cbbe:	d100      	bne.n	801cbc2 <memset+0xa>
 801cbc0:	4770      	bx	lr
 801cbc2:	f803 1b01 	strb.w	r1, [r3], #1
 801cbc6:	e7f9      	b.n	801cbbc <memset+0x4>

0801cbc8 <iprintf>:
 801cbc8:	b40f      	push	{r0, r1, r2, r3}
 801cbca:	4b0a      	ldr	r3, [pc, #40]	; (801cbf4 <iprintf+0x2c>)
 801cbcc:	b513      	push	{r0, r1, r4, lr}
 801cbce:	681c      	ldr	r4, [r3, #0]
 801cbd0:	b124      	cbz	r4, 801cbdc <iprintf+0x14>
 801cbd2:	69a3      	ldr	r3, [r4, #24]
 801cbd4:	b913      	cbnz	r3, 801cbdc <iprintf+0x14>
 801cbd6:	4620      	mov	r0, r4
 801cbd8:	f000 f882 	bl	801cce0 <__sinit>
 801cbdc:	ab05      	add	r3, sp, #20
 801cbde:	9a04      	ldr	r2, [sp, #16]
 801cbe0:	68a1      	ldr	r1, [r4, #8]
 801cbe2:	9301      	str	r3, [sp, #4]
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f000 f9df 	bl	801cfa8 <_vfiprintf_r>
 801cbea:	b002      	add	sp, #8
 801cbec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbf0:	b004      	add	sp, #16
 801cbf2:	4770      	bx	lr
 801cbf4:	20000034 	.word	0x20000034

0801cbf8 <rand>:
 801cbf8:	b538      	push	{r3, r4, r5, lr}
 801cbfa:	4b13      	ldr	r3, [pc, #76]	; (801cc48 <rand+0x50>)
 801cbfc:	681c      	ldr	r4, [r3, #0]
 801cbfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801cc00:	b97b      	cbnz	r3, 801cc22 <rand+0x2a>
 801cc02:	2018      	movs	r0, #24
 801cc04:	f000 f8f6 	bl	801cdf4 <malloc>
 801cc08:	4a10      	ldr	r2, [pc, #64]	; (801cc4c <rand+0x54>)
 801cc0a:	4b11      	ldr	r3, [pc, #68]	; (801cc50 <rand+0x58>)
 801cc0c:	63a0      	str	r0, [r4, #56]	; 0x38
 801cc0e:	e9c0 2300 	strd	r2, r3, [r0]
 801cc12:	4b10      	ldr	r3, [pc, #64]	; (801cc54 <rand+0x5c>)
 801cc14:	6083      	str	r3, [r0, #8]
 801cc16:	230b      	movs	r3, #11
 801cc18:	8183      	strh	r3, [r0, #12]
 801cc1a:	2201      	movs	r2, #1
 801cc1c:	2300      	movs	r3, #0
 801cc1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801cc22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cc24:	480c      	ldr	r0, [pc, #48]	; (801cc58 <rand+0x60>)
 801cc26:	690a      	ldr	r2, [r1, #16]
 801cc28:	694b      	ldr	r3, [r1, #20]
 801cc2a:	4c0c      	ldr	r4, [pc, #48]	; (801cc5c <rand+0x64>)
 801cc2c:	4350      	muls	r0, r2
 801cc2e:	fb04 0003 	mla	r0, r4, r3, r0
 801cc32:	fba2 2304 	umull	r2, r3, r2, r4
 801cc36:	4403      	add	r3, r0
 801cc38:	1c54      	adds	r4, r2, #1
 801cc3a:	f143 0500 	adc.w	r5, r3, #0
 801cc3e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801cc42:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801cc46:	bd38      	pop	{r3, r4, r5, pc}
 801cc48:	20000034 	.word	0x20000034
 801cc4c:	abcd330e 	.word	0xabcd330e
 801cc50:	e66d1234 	.word	0xe66d1234
 801cc54:	0005deec 	.word	0x0005deec
 801cc58:	5851f42d 	.word	0x5851f42d
 801cc5c:	4c957f2d 	.word	0x4c957f2d

0801cc60 <std>:
 801cc60:	2300      	movs	r3, #0
 801cc62:	b510      	push	{r4, lr}
 801cc64:	4604      	mov	r4, r0
 801cc66:	e9c0 3300 	strd	r3, r3, [r0]
 801cc6a:	6083      	str	r3, [r0, #8]
 801cc6c:	8181      	strh	r1, [r0, #12]
 801cc6e:	6643      	str	r3, [r0, #100]	; 0x64
 801cc70:	81c2      	strh	r2, [r0, #14]
 801cc72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cc76:	6183      	str	r3, [r0, #24]
 801cc78:	4619      	mov	r1, r3
 801cc7a:	2208      	movs	r2, #8
 801cc7c:	305c      	adds	r0, #92	; 0x5c
 801cc7e:	f7ff ff9b 	bl	801cbb8 <memset>
 801cc82:	4b05      	ldr	r3, [pc, #20]	; (801cc98 <std+0x38>)
 801cc84:	6263      	str	r3, [r4, #36]	; 0x24
 801cc86:	4b05      	ldr	r3, [pc, #20]	; (801cc9c <std+0x3c>)
 801cc88:	62a3      	str	r3, [r4, #40]	; 0x28
 801cc8a:	4b05      	ldr	r3, [pc, #20]	; (801cca0 <std+0x40>)
 801cc8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cc8e:	4b05      	ldr	r3, [pc, #20]	; (801cca4 <std+0x44>)
 801cc90:	6224      	str	r4, [r4, #32]
 801cc92:	6323      	str	r3, [r4, #48]	; 0x30
 801cc94:	bd10      	pop	{r4, pc}
 801cc96:	bf00      	nop
 801cc98:	0801d505 	.word	0x0801d505
 801cc9c:	0801d527 	.word	0x0801d527
 801cca0:	0801d55f 	.word	0x0801d55f
 801cca4:	0801d583 	.word	0x0801d583

0801cca8 <_cleanup_r>:
 801cca8:	4901      	ldr	r1, [pc, #4]	; (801ccb0 <_cleanup_r+0x8>)
 801ccaa:	f000 b885 	b.w	801cdb8 <_fwalk_reent>
 801ccae:	bf00      	nop
 801ccb0:	0801d85d 	.word	0x0801d85d

0801ccb4 <__sfmoreglue>:
 801ccb4:	b570      	push	{r4, r5, r6, lr}
 801ccb6:	1e4a      	subs	r2, r1, #1
 801ccb8:	2568      	movs	r5, #104	; 0x68
 801ccba:	4355      	muls	r5, r2
 801ccbc:	460e      	mov	r6, r1
 801ccbe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ccc2:	f000 f8ed 	bl	801cea0 <_malloc_r>
 801ccc6:	4604      	mov	r4, r0
 801ccc8:	b140      	cbz	r0, 801ccdc <__sfmoreglue+0x28>
 801ccca:	2100      	movs	r1, #0
 801cccc:	e9c0 1600 	strd	r1, r6, [r0]
 801ccd0:	300c      	adds	r0, #12
 801ccd2:	60a0      	str	r0, [r4, #8]
 801ccd4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ccd8:	f7ff ff6e 	bl	801cbb8 <memset>
 801ccdc:	4620      	mov	r0, r4
 801ccde:	bd70      	pop	{r4, r5, r6, pc}

0801cce0 <__sinit>:
 801cce0:	6983      	ldr	r3, [r0, #24]
 801cce2:	b510      	push	{r4, lr}
 801cce4:	4604      	mov	r4, r0
 801cce6:	bb33      	cbnz	r3, 801cd36 <__sinit+0x56>
 801cce8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801ccec:	6503      	str	r3, [r0, #80]	; 0x50
 801ccee:	4b12      	ldr	r3, [pc, #72]	; (801cd38 <__sinit+0x58>)
 801ccf0:	4a12      	ldr	r2, [pc, #72]	; (801cd3c <__sinit+0x5c>)
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	6282      	str	r2, [r0, #40]	; 0x28
 801ccf6:	4298      	cmp	r0, r3
 801ccf8:	bf04      	itt	eq
 801ccfa:	2301      	moveq	r3, #1
 801ccfc:	6183      	streq	r3, [r0, #24]
 801ccfe:	f000 f81f 	bl	801cd40 <__sfp>
 801cd02:	6060      	str	r0, [r4, #4]
 801cd04:	4620      	mov	r0, r4
 801cd06:	f000 f81b 	bl	801cd40 <__sfp>
 801cd0a:	60a0      	str	r0, [r4, #8]
 801cd0c:	4620      	mov	r0, r4
 801cd0e:	f000 f817 	bl	801cd40 <__sfp>
 801cd12:	2200      	movs	r2, #0
 801cd14:	60e0      	str	r0, [r4, #12]
 801cd16:	2104      	movs	r1, #4
 801cd18:	6860      	ldr	r0, [r4, #4]
 801cd1a:	f7ff ffa1 	bl	801cc60 <std>
 801cd1e:	2201      	movs	r2, #1
 801cd20:	2109      	movs	r1, #9
 801cd22:	68a0      	ldr	r0, [r4, #8]
 801cd24:	f7ff ff9c 	bl	801cc60 <std>
 801cd28:	2202      	movs	r2, #2
 801cd2a:	2112      	movs	r1, #18
 801cd2c:	68e0      	ldr	r0, [r4, #12]
 801cd2e:	f7ff ff97 	bl	801cc60 <std>
 801cd32:	2301      	movs	r3, #1
 801cd34:	61a3      	str	r3, [r4, #24]
 801cd36:	bd10      	pop	{r4, pc}
 801cd38:	080211a8 	.word	0x080211a8
 801cd3c:	0801cca9 	.word	0x0801cca9

0801cd40 <__sfp>:
 801cd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd42:	4b1b      	ldr	r3, [pc, #108]	; (801cdb0 <__sfp+0x70>)
 801cd44:	681e      	ldr	r6, [r3, #0]
 801cd46:	69b3      	ldr	r3, [r6, #24]
 801cd48:	4607      	mov	r7, r0
 801cd4a:	b913      	cbnz	r3, 801cd52 <__sfp+0x12>
 801cd4c:	4630      	mov	r0, r6
 801cd4e:	f7ff ffc7 	bl	801cce0 <__sinit>
 801cd52:	3648      	adds	r6, #72	; 0x48
 801cd54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cd58:	3b01      	subs	r3, #1
 801cd5a:	d503      	bpl.n	801cd64 <__sfp+0x24>
 801cd5c:	6833      	ldr	r3, [r6, #0]
 801cd5e:	b133      	cbz	r3, 801cd6e <__sfp+0x2e>
 801cd60:	6836      	ldr	r6, [r6, #0]
 801cd62:	e7f7      	b.n	801cd54 <__sfp+0x14>
 801cd64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cd68:	b16d      	cbz	r5, 801cd86 <__sfp+0x46>
 801cd6a:	3468      	adds	r4, #104	; 0x68
 801cd6c:	e7f4      	b.n	801cd58 <__sfp+0x18>
 801cd6e:	2104      	movs	r1, #4
 801cd70:	4638      	mov	r0, r7
 801cd72:	f7ff ff9f 	bl	801ccb4 <__sfmoreglue>
 801cd76:	6030      	str	r0, [r6, #0]
 801cd78:	2800      	cmp	r0, #0
 801cd7a:	d1f1      	bne.n	801cd60 <__sfp+0x20>
 801cd7c:	230c      	movs	r3, #12
 801cd7e:	603b      	str	r3, [r7, #0]
 801cd80:	4604      	mov	r4, r0
 801cd82:	4620      	mov	r0, r4
 801cd84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd86:	4b0b      	ldr	r3, [pc, #44]	; (801cdb4 <__sfp+0x74>)
 801cd88:	6665      	str	r5, [r4, #100]	; 0x64
 801cd8a:	e9c4 5500 	strd	r5, r5, [r4]
 801cd8e:	60a5      	str	r5, [r4, #8]
 801cd90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801cd94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801cd98:	2208      	movs	r2, #8
 801cd9a:	4629      	mov	r1, r5
 801cd9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cda0:	f7ff ff0a 	bl	801cbb8 <memset>
 801cda4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cda8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cdac:	e7e9      	b.n	801cd82 <__sfp+0x42>
 801cdae:	bf00      	nop
 801cdb0:	080211a8 	.word	0x080211a8
 801cdb4:	ffff0001 	.word	0xffff0001

0801cdb8 <_fwalk_reent>:
 801cdb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdbc:	4680      	mov	r8, r0
 801cdbe:	4689      	mov	r9, r1
 801cdc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cdc4:	2600      	movs	r6, #0
 801cdc6:	b914      	cbnz	r4, 801cdce <_fwalk_reent+0x16>
 801cdc8:	4630      	mov	r0, r6
 801cdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cdce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801cdd2:	3f01      	subs	r7, #1
 801cdd4:	d501      	bpl.n	801cdda <_fwalk_reent+0x22>
 801cdd6:	6824      	ldr	r4, [r4, #0]
 801cdd8:	e7f5      	b.n	801cdc6 <_fwalk_reent+0xe>
 801cdda:	89ab      	ldrh	r3, [r5, #12]
 801cddc:	2b01      	cmp	r3, #1
 801cdde:	d907      	bls.n	801cdf0 <_fwalk_reent+0x38>
 801cde0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cde4:	3301      	adds	r3, #1
 801cde6:	d003      	beq.n	801cdf0 <_fwalk_reent+0x38>
 801cde8:	4629      	mov	r1, r5
 801cdea:	4640      	mov	r0, r8
 801cdec:	47c8      	blx	r9
 801cdee:	4306      	orrs	r6, r0
 801cdf0:	3568      	adds	r5, #104	; 0x68
 801cdf2:	e7ee      	b.n	801cdd2 <_fwalk_reent+0x1a>

0801cdf4 <malloc>:
 801cdf4:	4b02      	ldr	r3, [pc, #8]	; (801ce00 <malloc+0xc>)
 801cdf6:	4601      	mov	r1, r0
 801cdf8:	6818      	ldr	r0, [r3, #0]
 801cdfa:	f000 b851 	b.w	801cea0 <_malloc_r>
 801cdfe:	bf00      	nop
 801ce00:	20000034 	.word	0x20000034

0801ce04 <_free_r>:
 801ce04:	b538      	push	{r3, r4, r5, lr}
 801ce06:	4605      	mov	r5, r0
 801ce08:	2900      	cmp	r1, #0
 801ce0a:	d045      	beq.n	801ce98 <_free_r+0x94>
 801ce0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ce10:	1f0c      	subs	r4, r1, #4
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	bfb8      	it	lt
 801ce16:	18e4      	addlt	r4, r4, r3
 801ce18:	f000 fdc0 	bl	801d99c <__malloc_lock>
 801ce1c:	4a1f      	ldr	r2, [pc, #124]	; (801ce9c <_free_r+0x98>)
 801ce1e:	6813      	ldr	r3, [r2, #0]
 801ce20:	4610      	mov	r0, r2
 801ce22:	b933      	cbnz	r3, 801ce32 <_free_r+0x2e>
 801ce24:	6063      	str	r3, [r4, #4]
 801ce26:	6014      	str	r4, [r2, #0]
 801ce28:	4628      	mov	r0, r5
 801ce2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ce2e:	f000 bdb6 	b.w	801d99e <__malloc_unlock>
 801ce32:	42a3      	cmp	r3, r4
 801ce34:	d90c      	bls.n	801ce50 <_free_r+0x4c>
 801ce36:	6821      	ldr	r1, [r4, #0]
 801ce38:	1862      	adds	r2, r4, r1
 801ce3a:	4293      	cmp	r3, r2
 801ce3c:	bf04      	itt	eq
 801ce3e:	681a      	ldreq	r2, [r3, #0]
 801ce40:	685b      	ldreq	r3, [r3, #4]
 801ce42:	6063      	str	r3, [r4, #4]
 801ce44:	bf04      	itt	eq
 801ce46:	1852      	addeq	r2, r2, r1
 801ce48:	6022      	streq	r2, [r4, #0]
 801ce4a:	6004      	str	r4, [r0, #0]
 801ce4c:	e7ec      	b.n	801ce28 <_free_r+0x24>
 801ce4e:	4613      	mov	r3, r2
 801ce50:	685a      	ldr	r2, [r3, #4]
 801ce52:	b10a      	cbz	r2, 801ce58 <_free_r+0x54>
 801ce54:	42a2      	cmp	r2, r4
 801ce56:	d9fa      	bls.n	801ce4e <_free_r+0x4a>
 801ce58:	6819      	ldr	r1, [r3, #0]
 801ce5a:	1858      	adds	r0, r3, r1
 801ce5c:	42a0      	cmp	r0, r4
 801ce5e:	d10b      	bne.n	801ce78 <_free_r+0x74>
 801ce60:	6820      	ldr	r0, [r4, #0]
 801ce62:	4401      	add	r1, r0
 801ce64:	1858      	adds	r0, r3, r1
 801ce66:	4282      	cmp	r2, r0
 801ce68:	6019      	str	r1, [r3, #0]
 801ce6a:	d1dd      	bne.n	801ce28 <_free_r+0x24>
 801ce6c:	6810      	ldr	r0, [r2, #0]
 801ce6e:	6852      	ldr	r2, [r2, #4]
 801ce70:	605a      	str	r2, [r3, #4]
 801ce72:	4401      	add	r1, r0
 801ce74:	6019      	str	r1, [r3, #0]
 801ce76:	e7d7      	b.n	801ce28 <_free_r+0x24>
 801ce78:	d902      	bls.n	801ce80 <_free_r+0x7c>
 801ce7a:	230c      	movs	r3, #12
 801ce7c:	602b      	str	r3, [r5, #0]
 801ce7e:	e7d3      	b.n	801ce28 <_free_r+0x24>
 801ce80:	6820      	ldr	r0, [r4, #0]
 801ce82:	1821      	adds	r1, r4, r0
 801ce84:	428a      	cmp	r2, r1
 801ce86:	bf04      	itt	eq
 801ce88:	6811      	ldreq	r1, [r2, #0]
 801ce8a:	6852      	ldreq	r2, [r2, #4]
 801ce8c:	6062      	str	r2, [r4, #4]
 801ce8e:	bf04      	itt	eq
 801ce90:	1809      	addeq	r1, r1, r0
 801ce92:	6021      	streq	r1, [r4, #0]
 801ce94:	605c      	str	r4, [r3, #4]
 801ce96:	e7c7      	b.n	801ce28 <_free_r+0x24>
 801ce98:	bd38      	pop	{r3, r4, r5, pc}
 801ce9a:	bf00      	nop
 801ce9c:	20008854 	.word	0x20008854

0801cea0 <_malloc_r>:
 801cea0:	b570      	push	{r4, r5, r6, lr}
 801cea2:	1ccd      	adds	r5, r1, #3
 801cea4:	f025 0503 	bic.w	r5, r5, #3
 801cea8:	3508      	adds	r5, #8
 801ceaa:	2d0c      	cmp	r5, #12
 801ceac:	bf38      	it	cc
 801ceae:	250c      	movcc	r5, #12
 801ceb0:	2d00      	cmp	r5, #0
 801ceb2:	4606      	mov	r6, r0
 801ceb4:	db01      	blt.n	801ceba <_malloc_r+0x1a>
 801ceb6:	42a9      	cmp	r1, r5
 801ceb8:	d903      	bls.n	801cec2 <_malloc_r+0x22>
 801ceba:	230c      	movs	r3, #12
 801cebc:	6033      	str	r3, [r6, #0]
 801cebe:	2000      	movs	r0, #0
 801cec0:	bd70      	pop	{r4, r5, r6, pc}
 801cec2:	f000 fd6b 	bl	801d99c <__malloc_lock>
 801cec6:	4a21      	ldr	r2, [pc, #132]	; (801cf4c <_malloc_r+0xac>)
 801cec8:	6814      	ldr	r4, [r2, #0]
 801ceca:	4621      	mov	r1, r4
 801cecc:	b991      	cbnz	r1, 801cef4 <_malloc_r+0x54>
 801cece:	4c20      	ldr	r4, [pc, #128]	; (801cf50 <_malloc_r+0xb0>)
 801ced0:	6823      	ldr	r3, [r4, #0]
 801ced2:	b91b      	cbnz	r3, 801cedc <_malloc_r+0x3c>
 801ced4:	4630      	mov	r0, r6
 801ced6:	f000 fb05 	bl	801d4e4 <_sbrk_r>
 801ceda:	6020      	str	r0, [r4, #0]
 801cedc:	4629      	mov	r1, r5
 801cede:	4630      	mov	r0, r6
 801cee0:	f000 fb00 	bl	801d4e4 <_sbrk_r>
 801cee4:	1c43      	adds	r3, r0, #1
 801cee6:	d124      	bne.n	801cf32 <_malloc_r+0x92>
 801cee8:	230c      	movs	r3, #12
 801ceea:	6033      	str	r3, [r6, #0]
 801ceec:	4630      	mov	r0, r6
 801ceee:	f000 fd56 	bl	801d99e <__malloc_unlock>
 801cef2:	e7e4      	b.n	801cebe <_malloc_r+0x1e>
 801cef4:	680b      	ldr	r3, [r1, #0]
 801cef6:	1b5b      	subs	r3, r3, r5
 801cef8:	d418      	bmi.n	801cf2c <_malloc_r+0x8c>
 801cefa:	2b0b      	cmp	r3, #11
 801cefc:	d90f      	bls.n	801cf1e <_malloc_r+0x7e>
 801cefe:	600b      	str	r3, [r1, #0]
 801cf00:	50cd      	str	r5, [r1, r3]
 801cf02:	18cc      	adds	r4, r1, r3
 801cf04:	4630      	mov	r0, r6
 801cf06:	f000 fd4a 	bl	801d99e <__malloc_unlock>
 801cf0a:	f104 000b 	add.w	r0, r4, #11
 801cf0e:	1d23      	adds	r3, r4, #4
 801cf10:	f020 0007 	bic.w	r0, r0, #7
 801cf14:	1ac3      	subs	r3, r0, r3
 801cf16:	d0d3      	beq.n	801cec0 <_malloc_r+0x20>
 801cf18:	425a      	negs	r2, r3
 801cf1a:	50e2      	str	r2, [r4, r3]
 801cf1c:	e7d0      	b.n	801cec0 <_malloc_r+0x20>
 801cf1e:	428c      	cmp	r4, r1
 801cf20:	684b      	ldr	r3, [r1, #4]
 801cf22:	bf16      	itet	ne
 801cf24:	6063      	strne	r3, [r4, #4]
 801cf26:	6013      	streq	r3, [r2, #0]
 801cf28:	460c      	movne	r4, r1
 801cf2a:	e7eb      	b.n	801cf04 <_malloc_r+0x64>
 801cf2c:	460c      	mov	r4, r1
 801cf2e:	6849      	ldr	r1, [r1, #4]
 801cf30:	e7cc      	b.n	801cecc <_malloc_r+0x2c>
 801cf32:	1cc4      	adds	r4, r0, #3
 801cf34:	f024 0403 	bic.w	r4, r4, #3
 801cf38:	42a0      	cmp	r0, r4
 801cf3a:	d005      	beq.n	801cf48 <_malloc_r+0xa8>
 801cf3c:	1a21      	subs	r1, r4, r0
 801cf3e:	4630      	mov	r0, r6
 801cf40:	f000 fad0 	bl	801d4e4 <_sbrk_r>
 801cf44:	3001      	adds	r0, #1
 801cf46:	d0cf      	beq.n	801cee8 <_malloc_r+0x48>
 801cf48:	6025      	str	r5, [r4, #0]
 801cf4a:	e7db      	b.n	801cf04 <_malloc_r+0x64>
 801cf4c:	20008854 	.word	0x20008854
 801cf50:	20008858 	.word	0x20008858

0801cf54 <__sfputc_r>:
 801cf54:	6893      	ldr	r3, [r2, #8]
 801cf56:	3b01      	subs	r3, #1
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	b410      	push	{r4}
 801cf5c:	6093      	str	r3, [r2, #8]
 801cf5e:	da08      	bge.n	801cf72 <__sfputc_r+0x1e>
 801cf60:	6994      	ldr	r4, [r2, #24]
 801cf62:	42a3      	cmp	r3, r4
 801cf64:	db01      	blt.n	801cf6a <__sfputc_r+0x16>
 801cf66:	290a      	cmp	r1, #10
 801cf68:	d103      	bne.n	801cf72 <__sfputc_r+0x1e>
 801cf6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf6e:	f000 bb0d 	b.w	801d58c <__swbuf_r>
 801cf72:	6813      	ldr	r3, [r2, #0]
 801cf74:	1c58      	adds	r0, r3, #1
 801cf76:	6010      	str	r0, [r2, #0]
 801cf78:	7019      	strb	r1, [r3, #0]
 801cf7a:	4608      	mov	r0, r1
 801cf7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf80:	4770      	bx	lr

0801cf82 <__sfputs_r>:
 801cf82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf84:	4606      	mov	r6, r0
 801cf86:	460f      	mov	r7, r1
 801cf88:	4614      	mov	r4, r2
 801cf8a:	18d5      	adds	r5, r2, r3
 801cf8c:	42ac      	cmp	r4, r5
 801cf8e:	d101      	bne.n	801cf94 <__sfputs_r+0x12>
 801cf90:	2000      	movs	r0, #0
 801cf92:	e007      	b.n	801cfa4 <__sfputs_r+0x22>
 801cf94:	463a      	mov	r2, r7
 801cf96:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf9a:	4630      	mov	r0, r6
 801cf9c:	f7ff ffda 	bl	801cf54 <__sfputc_r>
 801cfa0:	1c43      	adds	r3, r0, #1
 801cfa2:	d1f3      	bne.n	801cf8c <__sfputs_r+0xa>
 801cfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cfa8 <_vfiprintf_r>:
 801cfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfac:	460c      	mov	r4, r1
 801cfae:	b09d      	sub	sp, #116	; 0x74
 801cfb0:	4617      	mov	r7, r2
 801cfb2:	461d      	mov	r5, r3
 801cfb4:	4606      	mov	r6, r0
 801cfb6:	b118      	cbz	r0, 801cfc0 <_vfiprintf_r+0x18>
 801cfb8:	6983      	ldr	r3, [r0, #24]
 801cfba:	b90b      	cbnz	r3, 801cfc0 <_vfiprintf_r+0x18>
 801cfbc:	f7ff fe90 	bl	801cce0 <__sinit>
 801cfc0:	4b7c      	ldr	r3, [pc, #496]	; (801d1b4 <_vfiprintf_r+0x20c>)
 801cfc2:	429c      	cmp	r4, r3
 801cfc4:	d158      	bne.n	801d078 <_vfiprintf_r+0xd0>
 801cfc6:	6874      	ldr	r4, [r6, #4]
 801cfc8:	89a3      	ldrh	r3, [r4, #12]
 801cfca:	0718      	lsls	r0, r3, #28
 801cfcc:	d55e      	bpl.n	801d08c <_vfiprintf_r+0xe4>
 801cfce:	6923      	ldr	r3, [r4, #16]
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d05b      	beq.n	801d08c <_vfiprintf_r+0xe4>
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	9309      	str	r3, [sp, #36]	; 0x24
 801cfd8:	2320      	movs	r3, #32
 801cfda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cfde:	2330      	movs	r3, #48	; 0x30
 801cfe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cfe4:	9503      	str	r5, [sp, #12]
 801cfe6:	f04f 0b01 	mov.w	fp, #1
 801cfea:	46b8      	mov	r8, r7
 801cfec:	4645      	mov	r5, r8
 801cfee:	f815 3b01 	ldrb.w	r3, [r5], #1
 801cff2:	b10b      	cbz	r3, 801cff8 <_vfiprintf_r+0x50>
 801cff4:	2b25      	cmp	r3, #37	; 0x25
 801cff6:	d154      	bne.n	801d0a2 <_vfiprintf_r+0xfa>
 801cff8:	ebb8 0a07 	subs.w	sl, r8, r7
 801cffc:	d00b      	beq.n	801d016 <_vfiprintf_r+0x6e>
 801cffe:	4653      	mov	r3, sl
 801d000:	463a      	mov	r2, r7
 801d002:	4621      	mov	r1, r4
 801d004:	4630      	mov	r0, r6
 801d006:	f7ff ffbc 	bl	801cf82 <__sfputs_r>
 801d00a:	3001      	adds	r0, #1
 801d00c:	f000 80c2 	beq.w	801d194 <_vfiprintf_r+0x1ec>
 801d010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d012:	4453      	add	r3, sl
 801d014:	9309      	str	r3, [sp, #36]	; 0x24
 801d016:	f898 3000 	ldrb.w	r3, [r8]
 801d01a:	2b00      	cmp	r3, #0
 801d01c:	f000 80ba 	beq.w	801d194 <_vfiprintf_r+0x1ec>
 801d020:	2300      	movs	r3, #0
 801d022:	f04f 32ff 	mov.w	r2, #4294967295
 801d026:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d02a:	9304      	str	r3, [sp, #16]
 801d02c:	9307      	str	r3, [sp, #28]
 801d02e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d032:	931a      	str	r3, [sp, #104]	; 0x68
 801d034:	46a8      	mov	r8, r5
 801d036:	2205      	movs	r2, #5
 801d038:	f818 1b01 	ldrb.w	r1, [r8], #1
 801d03c:	485e      	ldr	r0, [pc, #376]	; (801d1b8 <_vfiprintf_r+0x210>)
 801d03e:	f7e3 f967 	bl	8000310 <memchr>
 801d042:	9b04      	ldr	r3, [sp, #16]
 801d044:	bb78      	cbnz	r0, 801d0a6 <_vfiprintf_r+0xfe>
 801d046:	06d9      	lsls	r1, r3, #27
 801d048:	bf44      	itt	mi
 801d04a:	2220      	movmi	r2, #32
 801d04c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d050:	071a      	lsls	r2, r3, #28
 801d052:	bf44      	itt	mi
 801d054:	222b      	movmi	r2, #43	; 0x2b
 801d056:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d05a:	782a      	ldrb	r2, [r5, #0]
 801d05c:	2a2a      	cmp	r2, #42	; 0x2a
 801d05e:	d02a      	beq.n	801d0b6 <_vfiprintf_r+0x10e>
 801d060:	9a07      	ldr	r2, [sp, #28]
 801d062:	46a8      	mov	r8, r5
 801d064:	2000      	movs	r0, #0
 801d066:	250a      	movs	r5, #10
 801d068:	4641      	mov	r1, r8
 801d06a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d06e:	3b30      	subs	r3, #48	; 0x30
 801d070:	2b09      	cmp	r3, #9
 801d072:	d969      	bls.n	801d148 <_vfiprintf_r+0x1a0>
 801d074:	b360      	cbz	r0, 801d0d0 <_vfiprintf_r+0x128>
 801d076:	e024      	b.n	801d0c2 <_vfiprintf_r+0x11a>
 801d078:	4b50      	ldr	r3, [pc, #320]	; (801d1bc <_vfiprintf_r+0x214>)
 801d07a:	429c      	cmp	r4, r3
 801d07c:	d101      	bne.n	801d082 <_vfiprintf_r+0xda>
 801d07e:	68b4      	ldr	r4, [r6, #8]
 801d080:	e7a2      	b.n	801cfc8 <_vfiprintf_r+0x20>
 801d082:	4b4f      	ldr	r3, [pc, #316]	; (801d1c0 <_vfiprintf_r+0x218>)
 801d084:	429c      	cmp	r4, r3
 801d086:	bf08      	it	eq
 801d088:	68f4      	ldreq	r4, [r6, #12]
 801d08a:	e79d      	b.n	801cfc8 <_vfiprintf_r+0x20>
 801d08c:	4621      	mov	r1, r4
 801d08e:	4630      	mov	r0, r6
 801d090:	f000 fae0 	bl	801d654 <__swsetup_r>
 801d094:	2800      	cmp	r0, #0
 801d096:	d09d      	beq.n	801cfd4 <_vfiprintf_r+0x2c>
 801d098:	f04f 30ff 	mov.w	r0, #4294967295
 801d09c:	b01d      	add	sp, #116	; 0x74
 801d09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0a2:	46a8      	mov	r8, r5
 801d0a4:	e7a2      	b.n	801cfec <_vfiprintf_r+0x44>
 801d0a6:	4a44      	ldr	r2, [pc, #272]	; (801d1b8 <_vfiprintf_r+0x210>)
 801d0a8:	1a80      	subs	r0, r0, r2
 801d0aa:	fa0b f000 	lsl.w	r0, fp, r0
 801d0ae:	4318      	orrs	r0, r3
 801d0b0:	9004      	str	r0, [sp, #16]
 801d0b2:	4645      	mov	r5, r8
 801d0b4:	e7be      	b.n	801d034 <_vfiprintf_r+0x8c>
 801d0b6:	9a03      	ldr	r2, [sp, #12]
 801d0b8:	1d11      	adds	r1, r2, #4
 801d0ba:	6812      	ldr	r2, [r2, #0]
 801d0bc:	9103      	str	r1, [sp, #12]
 801d0be:	2a00      	cmp	r2, #0
 801d0c0:	db01      	blt.n	801d0c6 <_vfiprintf_r+0x11e>
 801d0c2:	9207      	str	r2, [sp, #28]
 801d0c4:	e004      	b.n	801d0d0 <_vfiprintf_r+0x128>
 801d0c6:	4252      	negs	r2, r2
 801d0c8:	f043 0302 	orr.w	r3, r3, #2
 801d0cc:	9207      	str	r2, [sp, #28]
 801d0ce:	9304      	str	r3, [sp, #16]
 801d0d0:	f898 3000 	ldrb.w	r3, [r8]
 801d0d4:	2b2e      	cmp	r3, #46	; 0x2e
 801d0d6:	d10e      	bne.n	801d0f6 <_vfiprintf_r+0x14e>
 801d0d8:	f898 3001 	ldrb.w	r3, [r8, #1]
 801d0dc:	2b2a      	cmp	r3, #42	; 0x2a
 801d0de:	d138      	bne.n	801d152 <_vfiprintf_r+0x1aa>
 801d0e0:	9b03      	ldr	r3, [sp, #12]
 801d0e2:	1d1a      	adds	r2, r3, #4
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	9203      	str	r2, [sp, #12]
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	bfb8      	it	lt
 801d0ec:	f04f 33ff 	movlt.w	r3, #4294967295
 801d0f0:	f108 0802 	add.w	r8, r8, #2
 801d0f4:	9305      	str	r3, [sp, #20]
 801d0f6:	4d33      	ldr	r5, [pc, #204]	; (801d1c4 <_vfiprintf_r+0x21c>)
 801d0f8:	f898 1000 	ldrb.w	r1, [r8]
 801d0fc:	2203      	movs	r2, #3
 801d0fe:	4628      	mov	r0, r5
 801d100:	f7e3 f906 	bl	8000310 <memchr>
 801d104:	b140      	cbz	r0, 801d118 <_vfiprintf_r+0x170>
 801d106:	2340      	movs	r3, #64	; 0x40
 801d108:	1b40      	subs	r0, r0, r5
 801d10a:	fa03 f000 	lsl.w	r0, r3, r0
 801d10e:	9b04      	ldr	r3, [sp, #16]
 801d110:	4303      	orrs	r3, r0
 801d112:	f108 0801 	add.w	r8, r8, #1
 801d116:	9304      	str	r3, [sp, #16]
 801d118:	f898 1000 	ldrb.w	r1, [r8]
 801d11c:	482a      	ldr	r0, [pc, #168]	; (801d1c8 <_vfiprintf_r+0x220>)
 801d11e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d122:	2206      	movs	r2, #6
 801d124:	f108 0701 	add.w	r7, r8, #1
 801d128:	f7e3 f8f2 	bl	8000310 <memchr>
 801d12c:	2800      	cmp	r0, #0
 801d12e:	d037      	beq.n	801d1a0 <_vfiprintf_r+0x1f8>
 801d130:	4b26      	ldr	r3, [pc, #152]	; (801d1cc <_vfiprintf_r+0x224>)
 801d132:	bb1b      	cbnz	r3, 801d17c <_vfiprintf_r+0x1d4>
 801d134:	9b03      	ldr	r3, [sp, #12]
 801d136:	3307      	adds	r3, #7
 801d138:	f023 0307 	bic.w	r3, r3, #7
 801d13c:	3308      	adds	r3, #8
 801d13e:	9303      	str	r3, [sp, #12]
 801d140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d142:	444b      	add	r3, r9
 801d144:	9309      	str	r3, [sp, #36]	; 0x24
 801d146:	e750      	b.n	801cfea <_vfiprintf_r+0x42>
 801d148:	fb05 3202 	mla	r2, r5, r2, r3
 801d14c:	2001      	movs	r0, #1
 801d14e:	4688      	mov	r8, r1
 801d150:	e78a      	b.n	801d068 <_vfiprintf_r+0xc0>
 801d152:	2300      	movs	r3, #0
 801d154:	f108 0801 	add.w	r8, r8, #1
 801d158:	9305      	str	r3, [sp, #20]
 801d15a:	4619      	mov	r1, r3
 801d15c:	250a      	movs	r5, #10
 801d15e:	4640      	mov	r0, r8
 801d160:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d164:	3a30      	subs	r2, #48	; 0x30
 801d166:	2a09      	cmp	r2, #9
 801d168:	d903      	bls.n	801d172 <_vfiprintf_r+0x1ca>
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d0c3      	beq.n	801d0f6 <_vfiprintf_r+0x14e>
 801d16e:	9105      	str	r1, [sp, #20]
 801d170:	e7c1      	b.n	801d0f6 <_vfiprintf_r+0x14e>
 801d172:	fb05 2101 	mla	r1, r5, r1, r2
 801d176:	2301      	movs	r3, #1
 801d178:	4680      	mov	r8, r0
 801d17a:	e7f0      	b.n	801d15e <_vfiprintf_r+0x1b6>
 801d17c:	ab03      	add	r3, sp, #12
 801d17e:	9300      	str	r3, [sp, #0]
 801d180:	4622      	mov	r2, r4
 801d182:	4b13      	ldr	r3, [pc, #76]	; (801d1d0 <_vfiprintf_r+0x228>)
 801d184:	a904      	add	r1, sp, #16
 801d186:	4630      	mov	r0, r6
 801d188:	f3af 8000 	nop.w
 801d18c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801d190:	4681      	mov	r9, r0
 801d192:	d1d5      	bne.n	801d140 <_vfiprintf_r+0x198>
 801d194:	89a3      	ldrh	r3, [r4, #12]
 801d196:	065b      	lsls	r3, r3, #25
 801d198:	f53f af7e 	bmi.w	801d098 <_vfiprintf_r+0xf0>
 801d19c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d19e:	e77d      	b.n	801d09c <_vfiprintf_r+0xf4>
 801d1a0:	ab03      	add	r3, sp, #12
 801d1a2:	9300      	str	r3, [sp, #0]
 801d1a4:	4622      	mov	r2, r4
 801d1a6:	4b0a      	ldr	r3, [pc, #40]	; (801d1d0 <_vfiprintf_r+0x228>)
 801d1a8:	a904      	add	r1, sp, #16
 801d1aa:	4630      	mov	r0, r6
 801d1ac:	f000 f888 	bl	801d2c0 <_printf_i>
 801d1b0:	e7ec      	b.n	801d18c <_vfiprintf_r+0x1e4>
 801d1b2:	bf00      	nop
 801d1b4:	080211cc 	.word	0x080211cc
 801d1b8:	0802120c 	.word	0x0802120c
 801d1bc:	080211ec 	.word	0x080211ec
 801d1c0:	080211ac 	.word	0x080211ac
 801d1c4:	08021212 	.word	0x08021212
 801d1c8:	08021216 	.word	0x08021216
 801d1cc:	00000000 	.word	0x00000000
 801d1d0:	0801cf83 	.word	0x0801cf83

0801d1d4 <_printf_common>:
 801d1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d1d8:	4691      	mov	r9, r2
 801d1da:	461f      	mov	r7, r3
 801d1dc:	688a      	ldr	r2, [r1, #8]
 801d1de:	690b      	ldr	r3, [r1, #16]
 801d1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801d1e4:	4293      	cmp	r3, r2
 801d1e6:	bfb8      	it	lt
 801d1e8:	4613      	movlt	r3, r2
 801d1ea:	f8c9 3000 	str.w	r3, [r9]
 801d1ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801d1f2:	4606      	mov	r6, r0
 801d1f4:	460c      	mov	r4, r1
 801d1f6:	b112      	cbz	r2, 801d1fe <_printf_common+0x2a>
 801d1f8:	3301      	adds	r3, #1
 801d1fa:	f8c9 3000 	str.w	r3, [r9]
 801d1fe:	6823      	ldr	r3, [r4, #0]
 801d200:	0699      	lsls	r1, r3, #26
 801d202:	bf42      	ittt	mi
 801d204:	f8d9 3000 	ldrmi.w	r3, [r9]
 801d208:	3302      	addmi	r3, #2
 801d20a:	f8c9 3000 	strmi.w	r3, [r9]
 801d20e:	6825      	ldr	r5, [r4, #0]
 801d210:	f015 0506 	ands.w	r5, r5, #6
 801d214:	d107      	bne.n	801d226 <_printf_common+0x52>
 801d216:	f104 0a19 	add.w	sl, r4, #25
 801d21a:	68e3      	ldr	r3, [r4, #12]
 801d21c:	f8d9 2000 	ldr.w	r2, [r9]
 801d220:	1a9b      	subs	r3, r3, r2
 801d222:	42ab      	cmp	r3, r5
 801d224:	dc28      	bgt.n	801d278 <_printf_common+0xa4>
 801d226:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801d22a:	6822      	ldr	r2, [r4, #0]
 801d22c:	3300      	adds	r3, #0
 801d22e:	bf18      	it	ne
 801d230:	2301      	movne	r3, #1
 801d232:	0692      	lsls	r2, r2, #26
 801d234:	d42d      	bmi.n	801d292 <_printf_common+0xbe>
 801d236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801d23a:	4639      	mov	r1, r7
 801d23c:	4630      	mov	r0, r6
 801d23e:	47c0      	blx	r8
 801d240:	3001      	adds	r0, #1
 801d242:	d020      	beq.n	801d286 <_printf_common+0xb2>
 801d244:	6823      	ldr	r3, [r4, #0]
 801d246:	68e5      	ldr	r5, [r4, #12]
 801d248:	f8d9 2000 	ldr.w	r2, [r9]
 801d24c:	f003 0306 	and.w	r3, r3, #6
 801d250:	2b04      	cmp	r3, #4
 801d252:	bf08      	it	eq
 801d254:	1aad      	subeq	r5, r5, r2
 801d256:	68a3      	ldr	r3, [r4, #8]
 801d258:	6922      	ldr	r2, [r4, #16]
 801d25a:	bf0c      	ite	eq
 801d25c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d260:	2500      	movne	r5, #0
 801d262:	4293      	cmp	r3, r2
 801d264:	bfc4      	itt	gt
 801d266:	1a9b      	subgt	r3, r3, r2
 801d268:	18ed      	addgt	r5, r5, r3
 801d26a:	f04f 0900 	mov.w	r9, #0
 801d26e:	341a      	adds	r4, #26
 801d270:	454d      	cmp	r5, r9
 801d272:	d11a      	bne.n	801d2aa <_printf_common+0xd6>
 801d274:	2000      	movs	r0, #0
 801d276:	e008      	b.n	801d28a <_printf_common+0xb6>
 801d278:	2301      	movs	r3, #1
 801d27a:	4652      	mov	r2, sl
 801d27c:	4639      	mov	r1, r7
 801d27e:	4630      	mov	r0, r6
 801d280:	47c0      	blx	r8
 801d282:	3001      	adds	r0, #1
 801d284:	d103      	bne.n	801d28e <_printf_common+0xba>
 801d286:	f04f 30ff 	mov.w	r0, #4294967295
 801d28a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d28e:	3501      	adds	r5, #1
 801d290:	e7c3      	b.n	801d21a <_printf_common+0x46>
 801d292:	18e1      	adds	r1, r4, r3
 801d294:	1c5a      	adds	r2, r3, #1
 801d296:	2030      	movs	r0, #48	; 0x30
 801d298:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801d29c:	4422      	add	r2, r4
 801d29e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801d2a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801d2a6:	3302      	adds	r3, #2
 801d2a8:	e7c5      	b.n	801d236 <_printf_common+0x62>
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	4622      	mov	r2, r4
 801d2ae:	4639      	mov	r1, r7
 801d2b0:	4630      	mov	r0, r6
 801d2b2:	47c0      	blx	r8
 801d2b4:	3001      	adds	r0, #1
 801d2b6:	d0e6      	beq.n	801d286 <_printf_common+0xb2>
 801d2b8:	f109 0901 	add.w	r9, r9, #1
 801d2bc:	e7d8      	b.n	801d270 <_printf_common+0x9c>
	...

0801d2c0 <_printf_i>:
 801d2c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d2c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801d2c8:	460c      	mov	r4, r1
 801d2ca:	7e09      	ldrb	r1, [r1, #24]
 801d2cc:	b085      	sub	sp, #20
 801d2ce:	296e      	cmp	r1, #110	; 0x6e
 801d2d0:	4617      	mov	r7, r2
 801d2d2:	4606      	mov	r6, r0
 801d2d4:	4698      	mov	r8, r3
 801d2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d2d8:	f000 80b3 	beq.w	801d442 <_printf_i+0x182>
 801d2dc:	d822      	bhi.n	801d324 <_printf_i+0x64>
 801d2de:	2963      	cmp	r1, #99	; 0x63
 801d2e0:	d036      	beq.n	801d350 <_printf_i+0x90>
 801d2e2:	d80a      	bhi.n	801d2fa <_printf_i+0x3a>
 801d2e4:	2900      	cmp	r1, #0
 801d2e6:	f000 80b9 	beq.w	801d45c <_printf_i+0x19c>
 801d2ea:	2958      	cmp	r1, #88	; 0x58
 801d2ec:	f000 8083 	beq.w	801d3f6 <_printf_i+0x136>
 801d2f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d2f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801d2f8:	e032      	b.n	801d360 <_printf_i+0xa0>
 801d2fa:	2964      	cmp	r1, #100	; 0x64
 801d2fc:	d001      	beq.n	801d302 <_printf_i+0x42>
 801d2fe:	2969      	cmp	r1, #105	; 0x69
 801d300:	d1f6      	bne.n	801d2f0 <_printf_i+0x30>
 801d302:	6820      	ldr	r0, [r4, #0]
 801d304:	6813      	ldr	r3, [r2, #0]
 801d306:	0605      	lsls	r5, r0, #24
 801d308:	f103 0104 	add.w	r1, r3, #4
 801d30c:	d52a      	bpl.n	801d364 <_printf_i+0xa4>
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	6011      	str	r1, [r2, #0]
 801d312:	2b00      	cmp	r3, #0
 801d314:	da03      	bge.n	801d31e <_printf_i+0x5e>
 801d316:	222d      	movs	r2, #45	; 0x2d
 801d318:	425b      	negs	r3, r3
 801d31a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801d31e:	486f      	ldr	r0, [pc, #444]	; (801d4dc <_printf_i+0x21c>)
 801d320:	220a      	movs	r2, #10
 801d322:	e039      	b.n	801d398 <_printf_i+0xd8>
 801d324:	2973      	cmp	r1, #115	; 0x73
 801d326:	f000 809d 	beq.w	801d464 <_printf_i+0x1a4>
 801d32a:	d808      	bhi.n	801d33e <_printf_i+0x7e>
 801d32c:	296f      	cmp	r1, #111	; 0x6f
 801d32e:	d020      	beq.n	801d372 <_printf_i+0xb2>
 801d330:	2970      	cmp	r1, #112	; 0x70
 801d332:	d1dd      	bne.n	801d2f0 <_printf_i+0x30>
 801d334:	6823      	ldr	r3, [r4, #0]
 801d336:	f043 0320 	orr.w	r3, r3, #32
 801d33a:	6023      	str	r3, [r4, #0]
 801d33c:	e003      	b.n	801d346 <_printf_i+0x86>
 801d33e:	2975      	cmp	r1, #117	; 0x75
 801d340:	d017      	beq.n	801d372 <_printf_i+0xb2>
 801d342:	2978      	cmp	r1, #120	; 0x78
 801d344:	d1d4      	bne.n	801d2f0 <_printf_i+0x30>
 801d346:	2378      	movs	r3, #120	; 0x78
 801d348:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801d34c:	4864      	ldr	r0, [pc, #400]	; (801d4e0 <_printf_i+0x220>)
 801d34e:	e055      	b.n	801d3fc <_printf_i+0x13c>
 801d350:	6813      	ldr	r3, [r2, #0]
 801d352:	1d19      	adds	r1, r3, #4
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	6011      	str	r1, [r2, #0]
 801d358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d35c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d360:	2301      	movs	r3, #1
 801d362:	e08c      	b.n	801d47e <_printf_i+0x1be>
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	6011      	str	r1, [r2, #0]
 801d368:	f010 0f40 	tst.w	r0, #64	; 0x40
 801d36c:	bf18      	it	ne
 801d36e:	b21b      	sxthne	r3, r3
 801d370:	e7cf      	b.n	801d312 <_printf_i+0x52>
 801d372:	6813      	ldr	r3, [r2, #0]
 801d374:	6825      	ldr	r5, [r4, #0]
 801d376:	1d18      	adds	r0, r3, #4
 801d378:	6010      	str	r0, [r2, #0]
 801d37a:	0628      	lsls	r0, r5, #24
 801d37c:	d501      	bpl.n	801d382 <_printf_i+0xc2>
 801d37e:	681b      	ldr	r3, [r3, #0]
 801d380:	e002      	b.n	801d388 <_printf_i+0xc8>
 801d382:	0668      	lsls	r0, r5, #25
 801d384:	d5fb      	bpl.n	801d37e <_printf_i+0xbe>
 801d386:	881b      	ldrh	r3, [r3, #0]
 801d388:	4854      	ldr	r0, [pc, #336]	; (801d4dc <_printf_i+0x21c>)
 801d38a:	296f      	cmp	r1, #111	; 0x6f
 801d38c:	bf14      	ite	ne
 801d38e:	220a      	movne	r2, #10
 801d390:	2208      	moveq	r2, #8
 801d392:	2100      	movs	r1, #0
 801d394:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801d398:	6865      	ldr	r5, [r4, #4]
 801d39a:	60a5      	str	r5, [r4, #8]
 801d39c:	2d00      	cmp	r5, #0
 801d39e:	f2c0 8095 	blt.w	801d4cc <_printf_i+0x20c>
 801d3a2:	6821      	ldr	r1, [r4, #0]
 801d3a4:	f021 0104 	bic.w	r1, r1, #4
 801d3a8:	6021      	str	r1, [r4, #0]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d13d      	bne.n	801d42a <_printf_i+0x16a>
 801d3ae:	2d00      	cmp	r5, #0
 801d3b0:	f040 808e 	bne.w	801d4d0 <_printf_i+0x210>
 801d3b4:	4665      	mov	r5, ip
 801d3b6:	2a08      	cmp	r2, #8
 801d3b8:	d10b      	bne.n	801d3d2 <_printf_i+0x112>
 801d3ba:	6823      	ldr	r3, [r4, #0]
 801d3bc:	07db      	lsls	r3, r3, #31
 801d3be:	d508      	bpl.n	801d3d2 <_printf_i+0x112>
 801d3c0:	6923      	ldr	r3, [r4, #16]
 801d3c2:	6862      	ldr	r2, [r4, #4]
 801d3c4:	429a      	cmp	r2, r3
 801d3c6:	bfde      	ittt	le
 801d3c8:	2330      	movle	r3, #48	; 0x30
 801d3ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 801d3ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 801d3d2:	ebac 0305 	sub.w	r3, ip, r5
 801d3d6:	6123      	str	r3, [r4, #16]
 801d3d8:	f8cd 8000 	str.w	r8, [sp]
 801d3dc:	463b      	mov	r3, r7
 801d3de:	aa03      	add	r2, sp, #12
 801d3e0:	4621      	mov	r1, r4
 801d3e2:	4630      	mov	r0, r6
 801d3e4:	f7ff fef6 	bl	801d1d4 <_printf_common>
 801d3e8:	3001      	adds	r0, #1
 801d3ea:	d14d      	bne.n	801d488 <_printf_i+0x1c8>
 801d3ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d3f0:	b005      	add	sp, #20
 801d3f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d3f6:	4839      	ldr	r0, [pc, #228]	; (801d4dc <_printf_i+0x21c>)
 801d3f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801d3fc:	6813      	ldr	r3, [r2, #0]
 801d3fe:	6821      	ldr	r1, [r4, #0]
 801d400:	1d1d      	adds	r5, r3, #4
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	6015      	str	r5, [r2, #0]
 801d406:	060a      	lsls	r2, r1, #24
 801d408:	d50b      	bpl.n	801d422 <_printf_i+0x162>
 801d40a:	07ca      	lsls	r2, r1, #31
 801d40c:	bf44      	itt	mi
 801d40e:	f041 0120 	orrmi.w	r1, r1, #32
 801d412:	6021      	strmi	r1, [r4, #0]
 801d414:	b91b      	cbnz	r3, 801d41e <_printf_i+0x15e>
 801d416:	6822      	ldr	r2, [r4, #0]
 801d418:	f022 0220 	bic.w	r2, r2, #32
 801d41c:	6022      	str	r2, [r4, #0]
 801d41e:	2210      	movs	r2, #16
 801d420:	e7b7      	b.n	801d392 <_printf_i+0xd2>
 801d422:	064d      	lsls	r5, r1, #25
 801d424:	bf48      	it	mi
 801d426:	b29b      	uxthmi	r3, r3
 801d428:	e7ef      	b.n	801d40a <_printf_i+0x14a>
 801d42a:	4665      	mov	r5, ip
 801d42c:	fbb3 f1f2 	udiv	r1, r3, r2
 801d430:	fb02 3311 	mls	r3, r2, r1, r3
 801d434:	5cc3      	ldrb	r3, [r0, r3]
 801d436:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801d43a:	460b      	mov	r3, r1
 801d43c:	2900      	cmp	r1, #0
 801d43e:	d1f5      	bne.n	801d42c <_printf_i+0x16c>
 801d440:	e7b9      	b.n	801d3b6 <_printf_i+0xf6>
 801d442:	6813      	ldr	r3, [r2, #0]
 801d444:	6825      	ldr	r5, [r4, #0]
 801d446:	6961      	ldr	r1, [r4, #20]
 801d448:	1d18      	adds	r0, r3, #4
 801d44a:	6010      	str	r0, [r2, #0]
 801d44c:	0628      	lsls	r0, r5, #24
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	d501      	bpl.n	801d456 <_printf_i+0x196>
 801d452:	6019      	str	r1, [r3, #0]
 801d454:	e002      	b.n	801d45c <_printf_i+0x19c>
 801d456:	066a      	lsls	r2, r5, #25
 801d458:	d5fb      	bpl.n	801d452 <_printf_i+0x192>
 801d45a:	8019      	strh	r1, [r3, #0]
 801d45c:	2300      	movs	r3, #0
 801d45e:	6123      	str	r3, [r4, #16]
 801d460:	4665      	mov	r5, ip
 801d462:	e7b9      	b.n	801d3d8 <_printf_i+0x118>
 801d464:	6813      	ldr	r3, [r2, #0]
 801d466:	1d19      	adds	r1, r3, #4
 801d468:	6011      	str	r1, [r2, #0]
 801d46a:	681d      	ldr	r5, [r3, #0]
 801d46c:	6862      	ldr	r2, [r4, #4]
 801d46e:	2100      	movs	r1, #0
 801d470:	4628      	mov	r0, r5
 801d472:	f7e2 ff4d 	bl	8000310 <memchr>
 801d476:	b108      	cbz	r0, 801d47c <_printf_i+0x1bc>
 801d478:	1b40      	subs	r0, r0, r5
 801d47a:	6060      	str	r0, [r4, #4]
 801d47c:	6863      	ldr	r3, [r4, #4]
 801d47e:	6123      	str	r3, [r4, #16]
 801d480:	2300      	movs	r3, #0
 801d482:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801d486:	e7a7      	b.n	801d3d8 <_printf_i+0x118>
 801d488:	6923      	ldr	r3, [r4, #16]
 801d48a:	462a      	mov	r2, r5
 801d48c:	4639      	mov	r1, r7
 801d48e:	4630      	mov	r0, r6
 801d490:	47c0      	blx	r8
 801d492:	3001      	adds	r0, #1
 801d494:	d0aa      	beq.n	801d3ec <_printf_i+0x12c>
 801d496:	6823      	ldr	r3, [r4, #0]
 801d498:	079b      	lsls	r3, r3, #30
 801d49a:	d413      	bmi.n	801d4c4 <_printf_i+0x204>
 801d49c:	68e0      	ldr	r0, [r4, #12]
 801d49e:	9b03      	ldr	r3, [sp, #12]
 801d4a0:	4298      	cmp	r0, r3
 801d4a2:	bfb8      	it	lt
 801d4a4:	4618      	movlt	r0, r3
 801d4a6:	e7a3      	b.n	801d3f0 <_printf_i+0x130>
 801d4a8:	2301      	movs	r3, #1
 801d4aa:	464a      	mov	r2, r9
 801d4ac:	4639      	mov	r1, r7
 801d4ae:	4630      	mov	r0, r6
 801d4b0:	47c0      	blx	r8
 801d4b2:	3001      	adds	r0, #1
 801d4b4:	d09a      	beq.n	801d3ec <_printf_i+0x12c>
 801d4b6:	3501      	adds	r5, #1
 801d4b8:	68e3      	ldr	r3, [r4, #12]
 801d4ba:	9a03      	ldr	r2, [sp, #12]
 801d4bc:	1a9b      	subs	r3, r3, r2
 801d4be:	42ab      	cmp	r3, r5
 801d4c0:	dcf2      	bgt.n	801d4a8 <_printf_i+0x1e8>
 801d4c2:	e7eb      	b.n	801d49c <_printf_i+0x1dc>
 801d4c4:	2500      	movs	r5, #0
 801d4c6:	f104 0919 	add.w	r9, r4, #25
 801d4ca:	e7f5      	b.n	801d4b8 <_printf_i+0x1f8>
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	d1ac      	bne.n	801d42a <_printf_i+0x16a>
 801d4d0:	7803      	ldrb	r3, [r0, #0]
 801d4d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801d4d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801d4da:	e76c      	b.n	801d3b6 <_printf_i+0xf6>
 801d4dc:	0802121d 	.word	0x0802121d
 801d4e0:	0802122e 	.word	0x0802122e

0801d4e4 <_sbrk_r>:
 801d4e4:	b538      	push	{r3, r4, r5, lr}
 801d4e6:	4c06      	ldr	r4, [pc, #24]	; (801d500 <_sbrk_r+0x1c>)
 801d4e8:	2300      	movs	r3, #0
 801d4ea:	4605      	mov	r5, r0
 801d4ec:	4608      	mov	r0, r1
 801d4ee:	6023      	str	r3, [r4, #0]
 801d4f0:	f7e4 f91a 	bl	8001728 <_sbrk>
 801d4f4:	1c43      	adds	r3, r0, #1
 801d4f6:	d102      	bne.n	801d4fe <_sbrk_r+0x1a>
 801d4f8:	6823      	ldr	r3, [r4, #0]
 801d4fa:	b103      	cbz	r3, 801d4fe <_sbrk_r+0x1a>
 801d4fc:	602b      	str	r3, [r5, #0]
 801d4fe:	bd38      	pop	{r3, r4, r5, pc}
 801d500:	2000bdd0 	.word	0x2000bdd0

0801d504 <__sread>:
 801d504:	b510      	push	{r4, lr}
 801d506:	460c      	mov	r4, r1
 801d508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d50c:	f000 fa48 	bl	801d9a0 <_read_r>
 801d510:	2800      	cmp	r0, #0
 801d512:	bfab      	itete	ge
 801d514:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d516:	89a3      	ldrhlt	r3, [r4, #12]
 801d518:	181b      	addge	r3, r3, r0
 801d51a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d51e:	bfac      	ite	ge
 801d520:	6563      	strge	r3, [r4, #84]	; 0x54
 801d522:	81a3      	strhlt	r3, [r4, #12]
 801d524:	bd10      	pop	{r4, pc}

0801d526 <__swrite>:
 801d526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d52a:	461f      	mov	r7, r3
 801d52c:	898b      	ldrh	r3, [r1, #12]
 801d52e:	05db      	lsls	r3, r3, #23
 801d530:	4605      	mov	r5, r0
 801d532:	460c      	mov	r4, r1
 801d534:	4616      	mov	r6, r2
 801d536:	d505      	bpl.n	801d544 <__swrite+0x1e>
 801d538:	2302      	movs	r3, #2
 801d53a:	2200      	movs	r2, #0
 801d53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d540:	f000 f9b6 	bl	801d8b0 <_lseek_r>
 801d544:	89a3      	ldrh	r3, [r4, #12]
 801d546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d54a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d54e:	81a3      	strh	r3, [r4, #12]
 801d550:	4632      	mov	r2, r6
 801d552:	463b      	mov	r3, r7
 801d554:	4628      	mov	r0, r5
 801d556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d55a:	f000 b869 	b.w	801d630 <_write_r>

0801d55e <__sseek>:
 801d55e:	b510      	push	{r4, lr}
 801d560:	460c      	mov	r4, r1
 801d562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d566:	f000 f9a3 	bl	801d8b0 <_lseek_r>
 801d56a:	1c43      	adds	r3, r0, #1
 801d56c:	89a3      	ldrh	r3, [r4, #12]
 801d56e:	bf15      	itete	ne
 801d570:	6560      	strne	r0, [r4, #84]	; 0x54
 801d572:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d576:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d57a:	81a3      	strheq	r3, [r4, #12]
 801d57c:	bf18      	it	ne
 801d57e:	81a3      	strhne	r3, [r4, #12]
 801d580:	bd10      	pop	{r4, pc}

0801d582 <__sclose>:
 801d582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d586:	f000 b8d3 	b.w	801d730 <_close_r>
	...

0801d58c <__swbuf_r>:
 801d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d58e:	460e      	mov	r6, r1
 801d590:	4614      	mov	r4, r2
 801d592:	4605      	mov	r5, r0
 801d594:	b118      	cbz	r0, 801d59e <__swbuf_r+0x12>
 801d596:	6983      	ldr	r3, [r0, #24]
 801d598:	b90b      	cbnz	r3, 801d59e <__swbuf_r+0x12>
 801d59a:	f7ff fba1 	bl	801cce0 <__sinit>
 801d59e:	4b21      	ldr	r3, [pc, #132]	; (801d624 <__swbuf_r+0x98>)
 801d5a0:	429c      	cmp	r4, r3
 801d5a2:	d12a      	bne.n	801d5fa <__swbuf_r+0x6e>
 801d5a4:	686c      	ldr	r4, [r5, #4]
 801d5a6:	69a3      	ldr	r3, [r4, #24]
 801d5a8:	60a3      	str	r3, [r4, #8]
 801d5aa:	89a3      	ldrh	r3, [r4, #12]
 801d5ac:	071a      	lsls	r2, r3, #28
 801d5ae:	d52e      	bpl.n	801d60e <__swbuf_r+0x82>
 801d5b0:	6923      	ldr	r3, [r4, #16]
 801d5b2:	b363      	cbz	r3, 801d60e <__swbuf_r+0x82>
 801d5b4:	6923      	ldr	r3, [r4, #16]
 801d5b6:	6820      	ldr	r0, [r4, #0]
 801d5b8:	1ac0      	subs	r0, r0, r3
 801d5ba:	6963      	ldr	r3, [r4, #20]
 801d5bc:	b2f6      	uxtb	r6, r6
 801d5be:	4283      	cmp	r3, r0
 801d5c0:	4637      	mov	r7, r6
 801d5c2:	dc04      	bgt.n	801d5ce <__swbuf_r+0x42>
 801d5c4:	4621      	mov	r1, r4
 801d5c6:	4628      	mov	r0, r5
 801d5c8:	f000 f948 	bl	801d85c <_fflush_r>
 801d5cc:	bb28      	cbnz	r0, 801d61a <__swbuf_r+0x8e>
 801d5ce:	68a3      	ldr	r3, [r4, #8]
 801d5d0:	3b01      	subs	r3, #1
 801d5d2:	60a3      	str	r3, [r4, #8]
 801d5d4:	6823      	ldr	r3, [r4, #0]
 801d5d6:	1c5a      	adds	r2, r3, #1
 801d5d8:	6022      	str	r2, [r4, #0]
 801d5da:	701e      	strb	r6, [r3, #0]
 801d5dc:	6963      	ldr	r3, [r4, #20]
 801d5de:	3001      	adds	r0, #1
 801d5e0:	4283      	cmp	r3, r0
 801d5e2:	d004      	beq.n	801d5ee <__swbuf_r+0x62>
 801d5e4:	89a3      	ldrh	r3, [r4, #12]
 801d5e6:	07db      	lsls	r3, r3, #31
 801d5e8:	d519      	bpl.n	801d61e <__swbuf_r+0x92>
 801d5ea:	2e0a      	cmp	r6, #10
 801d5ec:	d117      	bne.n	801d61e <__swbuf_r+0x92>
 801d5ee:	4621      	mov	r1, r4
 801d5f0:	4628      	mov	r0, r5
 801d5f2:	f000 f933 	bl	801d85c <_fflush_r>
 801d5f6:	b190      	cbz	r0, 801d61e <__swbuf_r+0x92>
 801d5f8:	e00f      	b.n	801d61a <__swbuf_r+0x8e>
 801d5fa:	4b0b      	ldr	r3, [pc, #44]	; (801d628 <__swbuf_r+0x9c>)
 801d5fc:	429c      	cmp	r4, r3
 801d5fe:	d101      	bne.n	801d604 <__swbuf_r+0x78>
 801d600:	68ac      	ldr	r4, [r5, #8]
 801d602:	e7d0      	b.n	801d5a6 <__swbuf_r+0x1a>
 801d604:	4b09      	ldr	r3, [pc, #36]	; (801d62c <__swbuf_r+0xa0>)
 801d606:	429c      	cmp	r4, r3
 801d608:	bf08      	it	eq
 801d60a:	68ec      	ldreq	r4, [r5, #12]
 801d60c:	e7cb      	b.n	801d5a6 <__swbuf_r+0x1a>
 801d60e:	4621      	mov	r1, r4
 801d610:	4628      	mov	r0, r5
 801d612:	f000 f81f 	bl	801d654 <__swsetup_r>
 801d616:	2800      	cmp	r0, #0
 801d618:	d0cc      	beq.n	801d5b4 <__swbuf_r+0x28>
 801d61a:	f04f 37ff 	mov.w	r7, #4294967295
 801d61e:	4638      	mov	r0, r7
 801d620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d622:	bf00      	nop
 801d624:	080211cc 	.word	0x080211cc
 801d628:	080211ec 	.word	0x080211ec
 801d62c:	080211ac 	.word	0x080211ac

0801d630 <_write_r>:
 801d630:	b538      	push	{r3, r4, r5, lr}
 801d632:	4c07      	ldr	r4, [pc, #28]	; (801d650 <_write_r+0x20>)
 801d634:	4605      	mov	r5, r0
 801d636:	4608      	mov	r0, r1
 801d638:	4611      	mov	r1, r2
 801d63a:	2200      	movs	r2, #0
 801d63c:	6022      	str	r2, [r4, #0]
 801d63e:	461a      	mov	r2, r3
 801d640:	f7e4 f821 	bl	8001686 <_write>
 801d644:	1c43      	adds	r3, r0, #1
 801d646:	d102      	bne.n	801d64e <_write_r+0x1e>
 801d648:	6823      	ldr	r3, [r4, #0]
 801d64a:	b103      	cbz	r3, 801d64e <_write_r+0x1e>
 801d64c:	602b      	str	r3, [r5, #0]
 801d64e:	bd38      	pop	{r3, r4, r5, pc}
 801d650:	2000bdd0 	.word	0x2000bdd0

0801d654 <__swsetup_r>:
 801d654:	4b32      	ldr	r3, [pc, #200]	; (801d720 <__swsetup_r+0xcc>)
 801d656:	b570      	push	{r4, r5, r6, lr}
 801d658:	681d      	ldr	r5, [r3, #0]
 801d65a:	4606      	mov	r6, r0
 801d65c:	460c      	mov	r4, r1
 801d65e:	b125      	cbz	r5, 801d66a <__swsetup_r+0x16>
 801d660:	69ab      	ldr	r3, [r5, #24]
 801d662:	b913      	cbnz	r3, 801d66a <__swsetup_r+0x16>
 801d664:	4628      	mov	r0, r5
 801d666:	f7ff fb3b 	bl	801cce0 <__sinit>
 801d66a:	4b2e      	ldr	r3, [pc, #184]	; (801d724 <__swsetup_r+0xd0>)
 801d66c:	429c      	cmp	r4, r3
 801d66e:	d10f      	bne.n	801d690 <__swsetup_r+0x3c>
 801d670:	686c      	ldr	r4, [r5, #4]
 801d672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d676:	b29a      	uxth	r2, r3
 801d678:	0715      	lsls	r5, r2, #28
 801d67a:	d42c      	bmi.n	801d6d6 <__swsetup_r+0x82>
 801d67c:	06d0      	lsls	r0, r2, #27
 801d67e:	d411      	bmi.n	801d6a4 <__swsetup_r+0x50>
 801d680:	2209      	movs	r2, #9
 801d682:	6032      	str	r2, [r6, #0]
 801d684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d688:	81a3      	strh	r3, [r4, #12]
 801d68a:	f04f 30ff 	mov.w	r0, #4294967295
 801d68e:	e03e      	b.n	801d70e <__swsetup_r+0xba>
 801d690:	4b25      	ldr	r3, [pc, #148]	; (801d728 <__swsetup_r+0xd4>)
 801d692:	429c      	cmp	r4, r3
 801d694:	d101      	bne.n	801d69a <__swsetup_r+0x46>
 801d696:	68ac      	ldr	r4, [r5, #8]
 801d698:	e7eb      	b.n	801d672 <__swsetup_r+0x1e>
 801d69a:	4b24      	ldr	r3, [pc, #144]	; (801d72c <__swsetup_r+0xd8>)
 801d69c:	429c      	cmp	r4, r3
 801d69e:	bf08      	it	eq
 801d6a0:	68ec      	ldreq	r4, [r5, #12]
 801d6a2:	e7e6      	b.n	801d672 <__swsetup_r+0x1e>
 801d6a4:	0751      	lsls	r1, r2, #29
 801d6a6:	d512      	bpl.n	801d6ce <__swsetup_r+0x7a>
 801d6a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d6aa:	b141      	cbz	r1, 801d6be <__swsetup_r+0x6a>
 801d6ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d6b0:	4299      	cmp	r1, r3
 801d6b2:	d002      	beq.n	801d6ba <__swsetup_r+0x66>
 801d6b4:	4630      	mov	r0, r6
 801d6b6:	f7ff fba5 	bl	801ce04 <_free_r>
 801d6ba:	2300      	movs	r3, #0
 801d6bc:	6363      	str	r3, [r4, #52]	; 0x34
 801d6be:	89a3      	ldrh	r3, [r4, #12]
 801d6c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d6c4:	81a3      	strh	r3, [r4, #12]
 801d6c6:	2300      	movs	r3, #0
 801d6c8:	6063      	str	r3, [r4, #4]
 801d6ca:	6923      	ldr	r3, [r4, #16]
 801d6cc:	6023      	str	r3, [r4, #0]
 801d6ce:	89a3      	ldrh	r3, [r4, #12]
 801d6d0:	f043 0308 	orr.w	r3, r3, #8
 801d6d4:	81a3      	strh	r3, [r4, #12]
 801d6d6:	6923      	ldr	r3, [r4, #16]
 801d6d8:	b94b      	cbnz	r3, 801d6ee <__swsetup_r+0x9a>
 801d6da:	89a3      	ldrh	r3, [r4, #12]
 801d6dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d6e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d6e4:	d003      	beq.n	801d6ee <__swsetup_r+0x9a>
 801d6e6:	4621      	mov	r1, r4
 801d6e8:	4630      	mov	r0, r6
 801d6ea:	f000 f917 	bl	801d91c <__smakebuf_r>
 801d6ee:	89a2      	ldrh	r2, [r4, #12]
 801d6f0:	f012 0301 	ands.w	r3, r2, #1
 801d6f4:	d00c      	beq.n	801d710 <__swsetup_r+0xbc>
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	60a3      	str	r3, [r4, #8]
 801d6fa:	6963      	ldr	r3, [r4, #20]
 801d6fc:	425b      	negs	r3, r3
 801d6fe:	61a3      	str	r3, [r4, #24]
 801d700:	6923      	ldr	r3, [r4, #16]
 801d702:	b953      	cbnz	r3, 801d71a <__swsetup_r+0xc6>
 801d704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d708:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801d70c:	d1ba      	bne.n	801d684 <__swsetup_r+0x30>
 801d70e:	bd70      	pop	{r4, r5, r6, pc}
 801d710:	0792      	lsls	r2, r2, #30
 801d712:	bf58      	it	pl
 801d714:	6963      	ldrpl	r3, [r4, #20]
 801d716:	60a3      	str	r3, [r4, #8]
 801d718:	e7f2      	b.n	801d700 <__swsetup_r+0xac>
 801d71a:	2000      	movs	r0, #0
 801d71c:	e7f7      	b.n	801d70e <__swsetup_r+0xba>
 801d71e:	bf00      	nop
 801d720:	20000034 	.word	0x20000034
 801d724:	080211cc 	.word	0x080211cc
 801d728:	080211ec 	.word	0x080211ec
 801d72c:	080211ac 	.word	0x080211ac

0801d730 <_close_r>:
 801d730:	b538      	push	{r3, r4, r5, lr}
 801d732:	4c06      	ldr	r4, [pc, #24]	; (801d74c <_close_r+0x1c>)
 801d734:	2300      	movs	r3, #0
 801d736:	4605      	mov	r5, r0
 801d738:	4608      	mov	r0, r1
 801d73a:	6023      	str	r3, [r4, #0]
 801d73c:	f7e3 ffbf 	bl	80016be <_close>
 801d740:	1c43      	adds	r3, r0, #1
 801d742:	d102      	bne.n	801d74a <_close_r+0x1a>
 801d744:	6823      	ldr	r3, [r4, #0]
 801d746:	b103      	cbz	r3, 801d74a <_close_r+0x1a>
 801d748:	602b      	str	r3, [r5, #0]
 801d74a:	bd38      	pop	{r3, r4, r5, pc}
 801d74c:	2000bdd0 	.word	0x2000bdd0

0801d750 <__sflush_r>:
 801d750:	898a      	ldrh	r2, [r1, #12]
 801d752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d756:	4605      	mov	r5, r0
 801d758:	0710      	lsls	r0, r2, #28
 801d75a:	460c      	mov	r4, r1
 801d75c:	d458      	bmi.n	801d810 <__sflush_r+0xc0>
 801d75e:	684b      	ldr	r3, [r1, #4]
 801d760:	2b00      	cmp	r3, #0
 801d762:	dc05      	bgt.n	801d770 <__sflush_r+0x20>
 801d764:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d766:	2b00      	cmp	r3, #0
 801d768:	dc02      	bgt.n	801d770 <__sflush_r+0x20>
 801d76a:	2000      	movs	r0, #0
 801d76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d772:	2e00      	cmp	r6, #0
 801d774:	d0f9      	beq.n	801d76a <__sflush_r+0x1a>
 801d776:	2300      	movs	r3, #0
 801d778:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d77c:	682f      	ldr	r7, [r5, #0]
 801d77e:	6a21      	ldr	r1, [r4, #32]
 801d780:	602b      	str	r3, [r5, #0]
 801d782:	d032      	beq.n	801d7ea <__sflush_r+0x9a>
 801d784:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d786:	89a3      	ldrh	r3, [r4, #12]
 801d788:	075a      	lsls	r2, r3, #29
 801d78a:	d505      	bpl.n	801d798 <__sflush_r+0x48>
 801d78c:	6863      	ldr	r3, [r4, #4]
 801d78e:	1ac0      	subs	r0, r0, r3
 801d790:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d792:	b10b      	cbz	r3, 801d798 <__sflush_r+0x48>
 801d794:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d796:	1ac0      	subs	r0, r0, r3
 801d798:	2300      	movs	r3, #0
 801d79a:	4602      	mov	r2, r0
 801d79c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d79e:	6a21      	ldr	r1, [r4, #32]
 801d7a0:	4628      	mov	r0, r5
 801d7a2:	47b0      	blx	r6
 801d7a4:	1c43      	adds	r3, r0, #1
 801d7a6:	89a3      	ldrh	r3, [r4, #12]
 801d7a8:	d106      	bne.n	801d7b8 <__sflush_r+0x68>
 801d7aa:	6829      	ldr	r1, [r5, #0]
 801d7ac:	291d      	cmp	r1, #29
 801d7ae:	d848      	bhi.n	801d842 <__sflush_r+0xf2>
 801d7b0:	4a29      	ldr	r2, [pc, #164]	; (801d858 <__sflush_r+0x108>)
 801d7b2:	40ca      	lsrs	r2, r1
 801d7b4:	07d6      	lsls	r6, r2, #31
 801d7b6:	d544      	bpl.n	801d842 <__sflush_r+0xf2>
 801d7b8:	2200      	movs	r2, #0
 801d7ba:	6062      	str	r2, [r4, #4]
 801d7bc:	04d9      	lsls	r1, r3, #19
 801d7be:	6922      	ldr	r2, [r4, #16]
 801d7c0:	6022      	str	r2, [r4, #0]
 801d7c2:	d504      	bpl.n	801d7ce <__sflush_r+0x7e>
 801d7c4:	1c42      	adds	r2, r0, #1
 801d7c6:	d101      	bne.n	801d7cc <__sflush_r+0x7c>
 801d7c8:	682b      	ldr	r3, [r5, #0]
 801d7ca:	b903      	cbnz	r3, 801d7ce <__sflush_r+0x7e>
 801d7cc:	6560      	str	r0, [r4, #84]	; 0x54
 801d7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d7d0:	602f      	str	r7, [r5, #0]
 801d7d2:	2900      	cmp	r1, #0
 801d7d4:	d0c9      	beq.n	801d76a <__sflush_r+0x1a>
 801d7d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d7da:	4299      	cmp	r1, r3
 801d7dc:	d002      	beq.n	801d7e4 <__sflush_r+0x94>
 801d7de:	4628      	mov	r0, r5
 801d7e0:	f7ff fb10 	bl	801ce04 <_free_r>
 801d7e4:	2000      	movs	r0, #0
 801d7e6:	6360      	str	r0, [r4, #52]	; 0x34
 801d7e8:	e7c0      	b.n	801d76c <__sflush_r+0x1c>
 801d7ea:	2301      	movs	r3, #1
 801d7ec:	4628      	mov	r0, r5
 801d7ee:	47b0      	blx	r6
 801d7f0:	1c41      	adds	r1, r0, #1
 801d7f2:	d1c8      	bne.n	801d786 <__sflush_r+0x36>
 801d7f4:	682b      	ldr	r3, [r5, #0]
 801d7f6:	2b00      	cmp	r3, #0
 801d7f8:	d0c5      	beq.n	801d786 <__sflush_r+0x36>
 801d7fa:	2b1d      	cmp	r3, #29
 801d7fc:	d001      	beq.n	801d802 <__sflush_r+0xb2>
 801d7fe:	2b16      	cmp	r3, #22
 801d800:	d101      	bne.n	801d806 <__sflush_r+0xb6>
 801d802:	602f      	str	r7, [r5, #0]
 801d804:	e7b1      	b.n	801d76a <__sflush_r+0x1a>
 801d806:	89a3      	ldrh	r3, [r4, #12]
 801d808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d80c:	81a3      	strh	r3, [r4, #12]
 801d80e:	e7ad      	b.n	801d76c <__sflush_r+0x1c>
 801d810:	690f      	ldr	r7, [r1, #16]
 801d812:	2f00      	cmp	r7, #0
 801d814:	d0a9      	beq.n	801d76a <__sflush_r+0x1a>
 801d816:	0793      	lsls	r3, r2, #30
 801d818:	680e      	ldr	r6, [r1, #0]
 801d81a:	bf08      	it	eq
 801d81c:	694b      	ldreq	r3, [r1, #20]
 801d81e:	600f      	str	r7, [r1, #0]
 801d820:	bf18      	it	ne
 801d822:	2300      	movne	r3, #0
 801d824:	eba6 0807 	sub.w	r8, r6, r7
 801d828:	608b      	str	r3, [r1, #8]
 801d82a:	f1b8 0f00 	cmp.w	r8, #0
 801d82e:	dd9c      	ble.n	801d76a <__sflush_r+0x1a>
 801d830:	4643      	mov	r3, r8
 801d832:	463a      	mov	r2, r7
 801d834:	6a21      	ldr	r1, [r4, #32]
 801d836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d838:	4628      	mov	r0, r5
 801d83a:	47b0      	blx	r6
 801d83c:	2800      	cmp	r0, #0
 801d83e:	dc06      	bgt.n	801d84e <__sflush_r+0xfe>
 801d840:	89a3      	ldrh	r3, [r4, #12]
 801d842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d846:	81a3      	strh	r3, [r4, #12]
 801d848:	f04f 30ff 	mov.w	r0, #4294967295
 801d84c:	e78e      	b.n	801d76c <__sflush_r+0x1c>
 801d84e:	4407      	add	r7, r0
 801d850:	eba8 0800 	sub.w	r8, r8, r0
 801d854:	e7e9      	b.n	801d82a <__sflush_r+0xda>
 801d856:	bf00      	nop
 801d858:	20400001 	.word	0x20400001

0801d85c <_fflush_r>:
 801d85c:	b538      	push	{r3, r4, r5, lr}
 801d85e:	690b      	ldr	r3, [r1, #16]
 801d860:	4605      	mov	r5, r0
 801d862:	460c      	mov	r4, r1
 801d864:	b1db      	cbz	r3, 801d89e <_fflush_r+0x42>
 801d866:	b118      	cbz	r0, 801d870 <_fflush_r+0x14>
 801d868:	6983      	ldr	r3, [r0, #24]
 801d86a:	b90b      	cbnz	r3, 801d870 <_fflush_r+0x14>
 801d86c:	f7ff fa38 	bl	801cce0 <__sinit>
 801d870:	4b0c      	ldr	r3, [pc, #48]	; (801d8a4 <_fflush_r+0x48>)
 801d872:	429c      	cmp	r4, r3
 801d874:	d109      	bne.n	801d88a <_fflush_r+0x2e>
 801d876:	686c      	ldr	r4, [r5, #4]
 801d878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d87c:	b17b      	cbz	r3, 801d89e <_fflush_r+0x42>
 801d87e:	4621      	mov	r1, r4
 801d880:	4628      	mov	r0, r5
 801d882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d886:	f7ff bf63 	b.w	801d750 <__sflush_r>
 801d88a:	4b07      	ldr	r3, [pc, #28]	; (801d8a8 <_fflush_r+0x4c>)
 801d88c:	429c      	cmp	r4, r3
 801d88e:	d101      	bne.n	801d894 <_fflush_r+0x38>
 801d890:	68ac      	ldr	r4, [r5, #8]
 801d892:	e7f1      	b.n	801d878 <_fflush_r+0x1c>
 801d894:	4b05      	ldr	r3, [pc, #20]	; (801d8ac <_fflush_r+0x50>)
 801d896:	429c      	cmp	r4, r3
 801d898:	bf08      	it	eq
 801d89a:	68ec      	ldreq	r4, [r5, #12]
 801d89c:	e7ec      	b.n	801d878 <_fflush_r+0x1c>
 801d89e:	2000      	movs	r0, #0
 801d8a0:	bd38      	pop	{r3, r4, r5, pc}
 801d8a2:	bf00      	nop
 801d8a4:	080211cc 	.word	0x080211cc
 801d8a8:	080211ec 	.word	0x080211ec
 801d8ac:	080211ac 	.word	0x080211ac

0801d8b0 <_lseek_r>:
 801d8b0:	b538      	push	{r3, r4, r5, lr}
 801d8b2:	4c07      	ldr	r4, [pc, #28]	; (801d8d0 <_lseek_r+0x20>)
 801d8b4:	4605      	mov	r5, r0
 801d8b6:	4608      	mov	r0, r1
 801d8b8:	4611      	mov	r1, r2
 801d8ba:	2200      	movs	r2, #0
 801d8bc:	6022      	str	r2, [r4, #0]
 801d8be:	461a      	mov	r2, r3
 801d8c0:	f7e3 ff24 	bl	800170c <_lseek>
 801d8c4:	1c43      	adds	r3, r0, #1
 801d8c6:	d102      	bne.n	801d8ce <_lseek_r+0x1e>
 801d8c8:	6823      	ldr	r3, [r4, #0]
 801d8ca:	b103      	cbz	r3, 801d8ce <_lseek_r+0x1e>
 801d8cc:	602b      	str	r3, [r5, #0]
 801d8ce:	bd38      	pop	{r3, r4, r5, pc}
 801d8d0:	2000bdd0 	.word	0x2000bdd0

0801d8d4 <__swhatbuf_r>:
 801d8d4:	b570      	push	{r4, r5, r6, lr}
 801d8d6:	460e      	mov	r6, r1
 801d8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d8dc:	2900      	cmp	r1, #0
 801d8de:	b096      	sub	sp, #88	; 0x58
 801d8e0:	4614      	mov	r4, r2
 801d8e2:	461d      	mov	r5, r3
 801d8e4:	da07      	bge.n	801d8f6 <__swhatbuf_r+0x22>
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	602b      	str	r3, [r5, #0]
 801d8ea:	89b3      	ldrh	r3, [r6, #12]
 801d8ec:	061a      	lsls	r2, r3, #24
 801d8ee:	d410      	bmi.n	801d912 <__swhatbuf_r+0x3e>
 801d8f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d8f4:	e00e      	b.n	801d914 <__swhatbuf_r+0x40>
 801d8f6:	466a      	mov	r2, sp
 801d8f8:	f000 f864 	bl	801d9c4 <_fstat_r>
 801d8fc:	2800      	cmp	r0, #0
 801d8fe:	dbf2      	blt.n	801d8e6 <__swhatbuf_r+0x12>
 801d900:	9a01      	ldr	r2, [sp, #4]
 801d902:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d906:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d90a:	425a      	negs	r2, r3
 801d90c:	415a      	adcs	r2, r3
 801d90e:	602a      	str	r2, [r5, #0]
 801d910:	e7ee      	b.n	801d8f0 <__swhatbuf_r+0x1c>
 801d912:	2340      	movs	r3, #64	; 0x40
 801d914:	2000      	movs	r0, #0
 801d916:	6023      	str	r3, [r4, #0]
 801d918:	b016      	add	sp, #88	; 0x58
 801d91a:	bd70      	pop	{r4, r5, r6, pc}

0801d91c <__smakebuf_r>:
 801d91c:	898b      	ldrh	r3, [r1, #12]
 801d91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d920:	079d      	lsls	r5, r3, #30
 801d922:	4606      	mov	r6, r0
 801d924:	460c      	mov	r4, r1
 801d926:	d507      	bpl.n	801d938 <__smakebuf_r+0x1c>
 801d928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d92c:	6023      	str	r3, [r4, #0]
 801d92e:	6123      	str	r3, [r4, #16]
 801d930:	2301      	movs	r3, #1
 801d932:	6163      	str	r3, [r4, #20]
 801d934:	b002      	add	sp, #8
 801d936:	bd70      	pop	{r4, r5, r6, pc}
 801d938:	ab01      	add	r3, sp, #4
 801d93a:	466a      	mov	r2, sp
 801d93c:	f7ff ffca 	bl	801d8d4 <__swhatbuf_r>
 801d940:	9900      	ldr	r1, [sp, #0]
 801d942:	4605      	mov	r5, r0
 801d944:	4630      	mov	r0, r6
 801d946:	f7ff faab 	bl	801cea0 <_malloc_r>
 801d94a:	b948      	cbnz	r0, 801d960 <__smakebuf_r+0x44>
 801d94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d950:	059a      	lsls	r2, r3, #22
 801d952:	d4ef      	bmi.n	801d934 <__smakebuf_r+0x18>
 801d954:	f023 0303 	bic.w	r3, r3, #3
 801d958:	f043 0302 	orr.w	r3, r3, #2
 801d95c:	81a3      	strh	r3, [r4, #12]
 801d95e:	e7e3      	b.n	801d928 <__smakebuf_r+0xc>
 801d960:	4b0d      	ldr	r3, [pc, #52]	; (801d998 <__smakebuf_r+0x7c>)
 801d962:	62b3      	str	r3, [r6, #40]	; 0x28
 801d964:	89a3      	ldrh	r3, [r4, #12]
 801d966:	6020      	str	r0, [r4, #0]
 801d968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d96c:	81a3      	strh	r3, [r4, #12]
 801d96e:	9b00      	ldr	r3, [sp, #0]
 801d970:	6163      	str	r3, [r4, #20]
 801d972:	9b01      	ldr	r3, [sp, #4]
 801d974:	6120      	str	r0, [r4, #16]
 801d976:	b15b      	cbz	r3, 801d990 <__smakebuf_r+0x74>
 801d978:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d97c:	4630      	mov	r0, r6
 801d97e:	f000 f833 	bl	801d9e8 <_isatty_r>
 801d982:	b128      	cbz	r0, 801d990 <__smakebuf_r+0x74>
 801d984:	89a3      	ldrh	r3, [r4, #12]
 801d986:	f023 0303 	bic.w	r3, r3, #3
 801d98a:	f043 0301 	orr.w	r3, r3, #1
 801d98e:	81a3      	strh	r3, [r4, #12]
 801d990:	89a3      	ldrh	r3, [r4, #12]
 801d992:	431d      	orrs	r5, r3
 801d994:	81a5      	strh	r5, [r4, #12]
 801d996:	e7cd      	b.n	801d934 <__smakebuf_r+0x18>
 801d998:	0801cca9 	.word	0x0801cca9

0801d99c <__malloc_lock>:
 801d99c:	4770      	bx	lr

0801d99e <__malloc_unlock>:
 801d99e:	4770      	bx	lr

0801d9a0 <_read_r>:
 801d9a0:	b538      	push	{r3, r4, r5, lr}
 801d9a2:	4c07      	ldr	r4, [pc, #28]	; (801d9c0 <_read_r+0x20>)
 801d9a4:	4605      	mov	r5, r0
 801d9a6:	4608      	mov	r0, r1
 801d9a8:	4611      	mov	r1, r2
 801d9aa:	2200      	movs	r2, #0
 801d9ac:	6022      	str	r2, [r4, #0]
 801d9ae:	461a      	mov	r2, r3
 801d9b0:	f7e3 fe4c 	bl	800164c <_read>
 801d9b4:	1c43      	adds	r3, r0, #1
 801d9b6:	d102      	bne.n	801d9be <_read_r+0x1e>
 801d9b8:	6823      	ldr	r3, [r4, #0]
 801d9ba:	b103      	cbz	r3, 801d9be <_read_r+0x1e>
 801d9bc:	602b      	str	r3, [r5, #0]
 801d9be:	bd38      	pop	{r3, r4, r5, pc}
 801d9c0:	2000bdd0 	.word	0x2000bdd0

0801d9c4 <_fstat_r>:
 801d9c4:	b538      	push	{r3, r4, r5, lr}
 801d9c6:	4c07      	ldr	r4, [pc, #28]	; (801d9e4 <_fstat_r+0x20>)
 801d9c8:	2300      	movs	r3, #0
 801d9ca:	4605      	mov	r5, r0
 801d9cc:	4608      	mov	r0, r1
 801d9ce:	4611      	mov	r1, r2
 801d9d0:	6023      	str	r3, [r4, #0]
 801d9d2:	f7e3 fe80 	bl	80016d6 <_fstat>
 801d9d6:	1c43      	adds	r3, r0, #1
 801d9d8:	d102      	bne.n	801d9e0 <_fstat_r+0x1c>
 801d9da:	6823      	ldr	r3, [r4, #0]
 801d9dc:	b103      	cbz	r3, 801d9e0 <_fstat_r+0x1c>
 801d9de:	602b      	str	r3, [r5, #0]
 801d9e0:	bd38      	pop	{r3, r4, r5, pc}
 801d9e2:	bf00      	nop
 801d9e4:	2000bdd0 	.word	0x2000bdd0

0801d9e8 <_isatty_r>:
 801d9e8:	b538      	push	{r3, r4, r5, lr}
 801d9ea:	4c06      	ldr	r4, [pc, #24]	; (801da04 <_isatty_r+0x1c>)
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	4605      	mov	r5, r0
 801d9f0:	4608      	mov	r0, r1
 801d9f2:	6023      	str	r3, [r4, #0]
 801d9f4:	f7e3 fe7f 	bl	80016f6 <_isatty>
 801d9f8:	1c43      	adds	r3, r0, #1
 801d9fa:	d102      	bne.n	801da02 <_isatty_r+0x1a>
 801d9fc:	6823      	ldr	r3, [r4, #0]
 801d9fe:	b103      	cbz	r3, 801da02 <_isatty_r+0x1a>
 801da00:	602b      	str	r3, [r5, #0]
 801da02:	bd38      	pop	{r3, r4, r5, pc}
 801da04:	2000bdd0 	.word	0x2000bdd0

0801da08 <_init>:
 801da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da0a:	bf00      	nop
 801da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da0e:	bc08      	pop	{r3}
 801da10:	469e      	mov	lr, r3
 801da12:	4770      	bx	lr

0801da14 <_fini>:
 801da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da16:	bf00      	nop
 801da18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801da1a:	bc08      	pop	{r3}
 801da1c:	469e      	mov	lr, r3
 801da1e:	4770      	bx	lr
